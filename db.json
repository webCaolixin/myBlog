{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/matery/source/favicon-16x16.png","path":"favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/matery/source/favicon-32x32.png","path":"favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.jpg","path":"medias/logo.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/baidu/autoPush.js","path":"libs/baidu/autoPush.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-a11y-dark.css","path":"libs/prismTheme/prism-a11y-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-atom-dark.css","path":"libs/prismTheme/prism-atom-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-base16-ateliersulphurpool.light.css","path":"libs/prismTheme/prism-base16-ateliersulphurpool.light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-cb.css","path":"libs/prismTheme/prism-cb.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-darcula.css","path":"libs/prismTheme/prism-darcula.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-dark.css","path":"libs/prismTheme/prism-duotone-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-earth.css","path":"libs/prismTheme/prism-duotone-earth.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-forest.css","path":"libs/prismTheme/prism-duotone-forest.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-light.css","path":"libs/prismTheme/prism-duotone-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-sea.css","path":"libs/prismTheme/prism-duotone-sea.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-space.css","path":"libs/prismTheme/prism-duotone-space.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-ghcolors.css","path":"libs/prismTheme/prism-ghcolors.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-hopscotch.css","path":"libs/prismTheme/prism-hopscotch.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-pojoaque.css","path":"libs/prismTheme/prism-pojoaque.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-vs.css","path":"libs/prismTheme/prism-vs.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism-xonokai.css","path":"libs/prismTheme/prism-xonokai.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prismTheme/prism.js","path":"libs/prismTheme/prism.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/custom.css","path":"libs/valine/custom.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/imgs/favicon-16x16.png","path":"medias/imgs/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/imgs/favicon.png","path":"medias/imgs/favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/imgs/logo.jpg","path":"medias/imgs/logo.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-cave-dark.css","path":"libs/prettify/css/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-cave-dark.min.css","path":"libs/prettify/css/atelier-cave-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-cave-light.css","path":"libs/prettify/css/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-dune-dark.css","path":"libs/prettify/css/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-cave-light.min.css","path":"libs/prettify/css/atelier-cave-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-dune-dark.min.css","path":"libs/prettify/css/atelier-dune-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-dune-light.css","path":"libs/prettify/css/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-dune-light.min.css","path":"libs/prettify/css/atelier-dune-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-estuary-dark.css","path":"libs/prettify/css/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-estuary-dark.min.css","path":"libs/prettify/css/atelier-estuary-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-estuary-light.css","path":"libs/prettify/css/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-estuary-light.min.css","path":"libs/prettify/css/atelier-estuary-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-forest-dark.css","path":"libs/prettify/css/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-forest-dark.min.css","path":"libs/prettify/css/atelier-forest-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-forest-light.css","path":"libs/prettify/css/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-forest-light.min.css","path":"libs/prettify/css/atelier-forest-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-heath-dark.css","path":"libs/prettify/css/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-heath-dark.min.css","path":"libs/prettify/css/atelier-heath-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-heath-light.css","path":"libs/prettify/css/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-heath-light.min.css","path":"libs/prettify/css/atelier-heath-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-lakeside-dark.css","path":"libs/prettify/css/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-lakeside-dark.min.css","path":"libs/prettify/css/atelier-lakeside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-lakeside-light.css","path":"libs/prettify/css/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-lakeside-light.min.css","path":"libs/prettify/css/atelier-lakeside-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-plateau-dark.css","path":"libs/prettify/css/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-plateau-dark.min.css","path":"libs/prettify/css/atelier-plateau-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-plateau-light.css","path":"libs/prettify/css/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-plateau-light.min.css","path":"libs/prettify/css/atelier-plateau-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-savanna-dark.css","path":"libs/prettify/css/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-savanna-dark.min.css","path":"libs/prettify/css/atelier-savanna-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-savanna-light.css","path":"libs/prettify/css/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-savanna-light.min.css","path":"libs/prettify/css/atelier-savanna-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-seaside-dark.css","path":"libs/prettify/css/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-seaside-dark.min.css","path":"libs/prettify/css/atelier-seaside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-seaside-light.css","path":"libs/prettify/css/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-seaside-light.min.css","path":"libs/prettify/css/atelier-seaside-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-sulphurpool-dark.css","path":"libs/prettify/css/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-sulphurpool-dark.min.css","path":"libs/prettify/css/atelier-sulphurpool-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-sulphurpool-light.css","path":"libs/prettify/css/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/atelier-sulphurpool-light.min.css","path":"libs/prettify/css/atelier-sulphurpool-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/github-v2.css","path":"libs/prettify/css/github-v2.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/github-v2.min.css","path":"libs/prettify/css/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/github.css","path":"libs/prettify/css/github.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/github.min.css","path":"libs/prettify/css/github.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/hemisu-dark.css","path":"libs/prettify/css/hemisu-dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/hemisu-dark.min.css","path":"libs/prettify/css/hemisu-dark.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/hemisu-light.css","path":"libs/prettify/css/hemisu-light.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/hemisu-light.min.css","path":"libs/prettify/css/hemisu-light.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-blue.css","path":"libs/prettify/css/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-blue.min.css","path":"libs/prettify/css/tomorrow-night-blue.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-bright.css","path":"libs/prettify/css/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-bright.min.css","path":"libs/prettify/css/tomorrow-night-bright.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-eighties.css","path":"libs/prettify/css/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-eighties.min.css","path":"libs/prettify/css/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night.css","path":"libs/prettify/css/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night.min.css","path":"libs/prettify/css/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow.css","path":"libs/prettify/css/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tomorrow.min.css","path":"libs/prettify/css/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tranquil-heart.min.css","path":"libs/prettify/css/tranquil-heart.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/vibrant-ink.css","path":"libs/prettify/css/vibrant-ink.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/tranquil-heart.css","path":"libs/prettify/css/tranquil-heart.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/css/vibrant-ink.min.css","path":"libs/prettify/css/vibrant-ink.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-apollo.js","path":"libs/prettify/js/lang-apollo.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-basic.js","path":"libs/prettify/js/lang-basic.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-clj.js","path":"libs/prettify/js/lang-clj.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-css.js","path":"libs/prettify/js/lang-css.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-dart.js","path":"libs/prettify/js/lang-dart.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-erlang.js","path":"libs/prettify/js/lang-erlang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-ex.js","path":"libs/prettify/js/lang-ex.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-go.js","path":"libs/prettify/js/lang-go.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-hs.js","path":"libs/prettify/js/lang-hs.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-kotlin.js","path":"libs/prettify/js/lang-kotlin.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-lasso.js","path":"libs/prettify/js/lang-lasso.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-lisp.js","path":"libs/prettify/js/lang-lisp.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-llvm.js","path":"libs/prettify/js/lang-llvm.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-logtalk.js","path":"libs/prettify/js/lang-logtalk.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-lua.js","path":"libs/prettify/js/lang-lua.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-matlab.js","path":"libs/prettify/js/lang-matlab.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-ml.js","path":"libs/prettify/js/lang-ml.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-mumps.js","path":"libs/prettify/js/lang-mumps.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-n.js","path":"libs/prettify/js/lang-n.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-pascal.js","path":"libs/prettify/js/lang-pascal.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-proto.js","path":"libs/prettify/js/lang-proto.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-r.js","path":"libs/prettify/js/lang-r.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-rd.js","path":"libs/prettify/js/lang-rd.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-rust.js","path":"libs/prettify/js/lang-rust.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-scala.js","path":"libs/prettify/js/lang-scala.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-sql.js","path":"libs/prettify/js/lang-sql.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-swift.js","path":"libs/prettify/js/lang-swift.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-tcl.js","path":"libs/prettify/js/lang-tcl.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-tex.js","path":"libs/prettify/js/lang-tex.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-vb.js","path":"libs/prettify/js/lang-vb.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-vhdl.js","path":"libs/prettify/js/lang-vhdl.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-wiki.js","path":"libs/prettify/js/lang-wiki.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-xq.js","path":"libs/prettify/js/lang-xq.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/lang-yaml.js","path":"libs/prettify/js/lang-yaml.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/prettify.css","path":"libs/prettify/js/prettify.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/ES6-Promise.jpg","path":"medias/article/featureimages/ES6-Promise.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/ES6-Promise.webp","path":"medias/article/featureimages/ES6-Promise.webp","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/ES6.jpg","path":"medias/article/featureimages/ES6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/ES6.webp","path":"medias/article/featureimages/ES6.webp","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/JavaScript.jpg","path":"medias/article/featureimages/JavaScript.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/JavaScript.webp","path":"medias/article/featureimages/JavaScript.webp","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/arrow-function.jpg","path":"medias/article/featureimages/arrow-function.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/arrow-function.webp","path":"medias/article/featureimages/arrow-function.webp","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/2019.png","path":"medias/article/journal/2019.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/arctic.jpg","path":"medias/article/journal/arctic.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/carbon.jpg","path":"medias/article/journal/carbon.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/goodbbye2108-hello2019.jpg","path":"medias/article/journal/goodbbye2108-hello2019.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/reserve-time.jpg","path":"medias/article/journal/reserve-time.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_160616.jpg","path":"medias/galleries/qinglong-sakura/IMG_20190320_160616.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/cover.jpg","path":"medias/galleries/qinglong-sakura/cover.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/cover.webp","path":"medias/galleries/qinglong-sakura/cover.webp","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/sina-blog-img.jpg","path":"medias/galleries/reflection/sina-blog-img.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/sina-blog.jpg","path":"medias/galleries/reflection/sina-blog.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/js/materialize.min.js","path":"libs/materialize/js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/node_prettify.js","path":"libs/prettify/js/node_prettify.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/prettify.js","path":"libs/prettify/js/prettify.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prettify/js/run_prettify.js","path":"libs/prettify/js/run_prettify.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/temperature-1.jpg","path":"medias/article/journal/temperature-1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/temperature-2.jpg","path":"medias/article/journal/temperature-2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/random-thoughts/The-Mcmoirs-of-a-Survivor.jpg","path":"medias/article/random-thoughts/The-Mcmoirs-of-a-Survivor.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_144732.jpg","path":"medias/galleries/qinglong-sakura/IMG_20190320_144732.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_145046.jpg","path":"medias/galleries/qinglong-sakura/IMG_20190320_145046.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_145943.jpg","path":"medias/galleries/qinglong-sakura/IMG_20190320_145943.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_150139.jpg","path":"medias/galleries/qinglong-sakura/IMG_20190320_150139.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_151655.jpg","path":"medias/galleries/qinglong-sakura/IMG_20190320_151655.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/20180704_211340.jpg","path":"medias/galleries/reflection/20180704_211340.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/css/materialize.min.css","path":"libs/materialize/css/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","path":"libs/materialize/font/material-design-icons/LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","path":"libs/materialize/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","path":"libs/materialize/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.eot","path":"libs/materialize/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","path":"libs/materialize/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.woff","path":"libs/materialize/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","path":"libs/materialize/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","path":"libs/materialize/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","path":"libs/materialize/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","path":"libs/materialize/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","path":"libs/materialize/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","path":"libs/materialize/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","path":"libs/materialize/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","path":"libs/materialize/font/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","path":"libs/materialize/font/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","path":"libs/materialize/font/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/create-js/easeljs.jpg","path":"medias/article/coding/create-js/easeljs.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/arrow-function/arrow-function-arguments.png","path":"medias/article/coding/arrow-function/arrow-function-arguments.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/ectx-scope-closure/context-object.jpg","path":"medias/article/coding/ectx-scope-closure/context-object.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/ectx-scope-closure/scope-chain.jpg","path":"medias/article/coding/ectx-scope-closure/scope-chain.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/event/dom-event-flow-browser.jpg","path":"medias/article/coding/event/dom-event-flow-browser.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/event/dom-event-flow.jpg","path":"medias/article/coding/event/dom-event-flow.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/event/event-bubbling.jpg","path":"medias/article/coding/event/event-bubbling.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/event/event-capturing.jpg","path":"medias/article/coding/event/event-capturing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/1.jpg","path":"medias/article/coding/news-spider/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/13.jpg","path":"medias/article/coding/news-spider/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/2.png","path":"medias/article/coding/news-spider/2.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/3.jpg","path":"medias/article/coding/news-spider/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/4.jpg","path":"medias/article/coding/news-spider/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/ectx-scope-closure/scope.jpg","path":"medias/article/coding/ectx-scope-closure/scope.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/template-string/console-templateStr.png","path":"medias/article/coding/template-string/console-templateStr.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/three-columns-layout/three-columns-layout.png","path":"medias/article/coding/three-columns-layout/three-columns-layout.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/two-columns-layout/two-columns-layout.png","path":"medias/article/coding/two-columns-layout/two-columns-layout.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/XYZ.png","path":"medias/article/coding/z-index/XYZ.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/stacking-order.jpg","path":"medias/article/coding/z-index/stacking-order.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/test.jpg","path":"medias/article/coding/z-index/test.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo1.jpg","path":"medias/article/coding/z-index/xiaoguo1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo2.jpg","path":"medias/article/coding/z-index/xiaoguo2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo3.jpg","path":"medias/article/coding/z-index/xiaoguo3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo4.jpg","path":"medias/article/coding/z-index/xiaoguo4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo5.jpg","path":"medias/article/coding/z-index/xiaoguo5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo6.jpg","path":"medias/article/coding/z-index/xiaoguo6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/random-thoughts/plates-1.jpg","path":"medias/article/random-thoughts/plates-1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","path":"libs/materialize/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","path":"libs/materialize/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","path":"libs/materialize/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","path":"libs/materialize/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","path":"libs/materialize/font/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/ectx-scope-closure/ctx-ctxObj-varObj-scope-scopeChain.jpg","path":"medias/article/coding/ectx-scope-closure/ctx-ctxObj-varObj-scope-scopeChain.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/5.jpg","path":"medias/article/coding/news-spider/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/6.jpg","path":"medias/article/coding/news-spider/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/20180919_184602.jpg","path":"medias/galleries/reflection/20180919_184602.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/10.jpg","path":"medias/article/coding/news-spider/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/11.jpg","path":"medias/article/coding/news-spider/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/12.jpg","path":"medias/article/coding/news-spider/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/7.jpg","path":"medias/article/coding/news-spider/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/coding/news-spider/9.jpg","path":"medias/article/coding/news-spider/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/20180626_191742.jpg","path":"medias/galleries/reflection/20180626_191742.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/20180905_191759.jpg","path":"medias/galleries/reflection/20180905_191759.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/20180920_193340.jpg","path":"medias/galleries/reflection/20180920_193340.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/20180920_193227.jpg","path":"medias/galleries/reflection/20180920_193227.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/galleries/reflection/20180920_193229.jpg","path":"medias/galleries/reflection/20180920_193229.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/timg.gif","path":"medias/article/journal/timg.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/2018-summary.jpg","path":"medias/article/journal/2018-summary.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/journal/live-as-you-want.jpg","path":"medias/article/journal/live-as-you-want.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/jing-hong-yi-mian.jpg","path":"medias/article/featureimages/jing-hong-yi-mian.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/behind-the-suffering.jpg","path":"medias/article/featureimages/behind-the-suffering.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/article/random-thoughts/jing-hong-yi-mian-2.jpg","path":"medias/article/random-thoughts/jing-hong-yi-mian-2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/article/featureimages/dusk-street.jpg","path":"medias/article/featureimages/dusk-street.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1545064669321},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1545064669475},{"_id":"themes/matery/README.md","hash":"f2b3c072c021727753ccce052894723cb427a7f2","modified":1545064669477},{"_id":"themes/matery/README_CN.md","hash":"877779833252077b4ec02bc1b8291e8075ca09a1","modified":1545064669478},{"_id":"themes/matery/_config.yml","hash":"460a5b32c7b33646b24687aff9dd5b877fa86ecb","modified":1552645776341},{"_id":"source/_posts/ECtx-scope-closure.md","hash":"80ec50655a1be656cb86a62482ff49a140cbce84","modified":1558265379079},{"_id":"source/_posts/ES6-Generator.md","hash":"0ae5465c011bfdb98d683bc8898b9765df080128","modified":1558265416964},{"_id":"source/_posts/ES6-Promise.md","hash":"d02f331b7729bf816a4e16df8fc11dfb82af2b53","modified":1558265431727},{"_id":"source/_posts/ES6-arrow-function.md","hash":"0bf5bf9d09c3142250f76e196bb8761f2deaaa4d","modified":1558265393797},{"_id":"source/_posts/ES6-destructuring.md","hash":"f1e0a308817b50c4c87de7657eef7a91773c1011","modified":1558265399629},{"_id":"source/_posts/ES6-function-extend.md","hash":"059686aa1be4a3d9a7a2b3dc61f14fbf31f92092","modified":1558265405871},{"_id":"source/_posts/ES6-let-const.md","hash":"9aed9845d980e2bf37c893c7df4afa6e499aa694","modified":1558265425793},{"_id":"source/_posts/ES6-templateString.md","hash":"93d16167637688b80f8cf633ed2c45dbe63df59d","modified":1558265437370},{"_id":"source/_posts/JavaScript-Event.md","hash":"1c085dd4f6e442bd97f8fc67cbd95bd8e69835e5","modified":1558265448736},{"_id":"source/_posts/JavaScript-Function.md","hash":"4f9a1aac55e810c67eb9fbcebd9727b2d2310734","modified":1558265453192},{"_id":"source/_posts/beginning.md","hash":"8c86a4ebaf4efb3cbbd0c0790e57ead8345eb86d","modified":1545064669322},{"_id":"source/_posts/create-js.md","hash":"d2ffabf0a9f57da483c9cd5ae68412dd48baa380","modified":1546602215209},{"_id":"source/_posts/gallery-1.md","hash":"3ef1c525a5c68c3573a98f226137e5433339663d","modified":1553176847186},{"_id":"source/_posts/if-there-is-no-2018.md","hash":"78ffd9bb0937fe60d39725b8b3cac21560ed81cf","modified":1546961491022},{"_id":"source/_posts/jing-hong-yi-mian.md","hash":"4249b798a98b403f0c19bd057a3dd043fcd58831","modified":1558268002353},{"_id":"source/_posts/journal-1.md","hash":"415d0541ad1b5933ff107f64d2671db3ae5f712e","modified":1545064669326},{"_id":"source/_posts/journal-2.md","hash":"68d4609cbd9050ff79f6375b93641994943abf71","modified":1558262034864},{"_id":"source/_posts/live-as-you-want.md","hash":"6f338aaf69178d11bf2b8af7adcd022a8bd87a4a","modified":1558267075101},{"_id":"source/_posts/news-spider.md","hash":"fb0d0f194768a7dc6105433aad71aca76cda1afe","modified":1546602215235},{"_id":"source/_posts/qinglong-sakura.md","hash":"408abded32920360cdbc13b7dceee5b3212427c1","modified":1558265494885},{"_id":"source/_posts/random-thoughts-1.md","hash":"a3acee7a262827b1857f205ff47bbb87bbbd7144","modified":1558263298039},{"_id":"source/_posts/random-thoughts-2.md","hash":"1407c0b24934f4c54c68f8d6dbacd75fe16d9bb7","modified":1545064669330},{"_id":"source/_posts/the-dusk-street.md","hash":"045fb551f2c6dbd951ea5b3f1abf3eeb1dabed6f","modified":1558267837081},{"_id":"source/_posts/the-night-scence-of-chang-An-city.md","hash":"58b861a14e1d685016f478d88c352fbe1a627012","modified":1558261770754},{"_id":"source/_posts/the-past-three-months.md","hash":"e578e04df7346dd6d0ca36b83f9445e930db0b72","modified":1546602215237},{"_id":"source/_posts/three-columns-layout.md","hash":"cb1020831be71ac5a1c73892524c932f6c8b55d6","modified":1554186269913},{"_id":"source/_posts/two-columns-layout.md","hash":"f0d0e54670e1097e99956b7976099ef20835e1c0","modified":1554187542821},{"_id":"source/_posts/z-index.md","hash":"89c8a642a78b9c90726d684dcd25127abb0066cf","modified":1546602215239},{"_id":"source/about/index.md","hash":"c8e386ea0c0c590e3e8bbb8e6a5a9803bc49f293","modified":1545064669334},{"_id":"source/categories/index.md","hash":"c2c1139c5d2c6b3de13c5299b7e3e19739e2e41c","modified":1545064669335},{"_id":"source/codings/index.md","hash":"c34613f1b2b200b46c33885bc693f460625d6ae8","modified":1545064669337},{"_id":"source/galleries/index.md","hash":"8a49da5f057576b6720581869b6ffb5a9710ff9a","modified":1545064669338},{"_id":"source/journals/index.md","hash":"794567f4399fa13d45501069605b6d88799fac5b","modified":1545064669340},{"_id":"source/random-thoughts/index.md","hash":"3ba8f14acb9e8b814e157820fe9bfdc785a022bd","modified":1545064669342},{"_id":"source/tags/index.md","hash":"1dcc4067f875dfc356969444ce0cd5cec506d733","modified":1545064669343},{"_id":"themes/matery/languages/default.yml","hash":"86249600dfa3509cc7536047a18294f205a68660","modified":1545064669480},{"_id":"themes/matery/languages/zh-CN.yml","hash":"584d3b3c8e0f0d47d382a1c6fb82b04927193323","modified":1545064669481},{"_id":"themes/matery/layout/archive.ejs","hash":"9122d99d14b4d06212cf05b0fa1b62829746a375","modified":1545064669504},{"_id":"themes/matery/layout/codings.ejs","hash":"d73a84c5098d51e4402680cc8c0de8bdbe68c554","modified":1545064669505},{"_id":"themes/matery/layout/galleries.ejs","hash":"a1f00467076743e9e711e12301c1a41bd315f717","modified":1553177172074},{"_id":"themes/matery/layout/index.ejs","hash":"5b8f37b7d0ce8525ec3c8759688f4e78d396a42e","modified":1552645776345},{"_id":"themes/matery/layout/journals.ejs","hash":"d9cd625b8d84625209a37335977b0b46ed208b56","modified":1545064669508},{"_id":"themes/matery/layout/layout.ejs","hash":"f89f5608bad86ac67b56e1045484f114fc05eb10","modified":1545064669509},{"_id":"themes/matery/layout/post.ejs","hash":"e85c4d55f71af2899656b4bf3eeff3b846a8debf","modified":1545064669510},{"_id":"themes/matery/layout/random-thoughts.ejs","hash":"be115c2a61b2a9905e736685a4cb3a8ca5fa82b0","modified":1545064669511},{"_id":"themes/matery/layout/tags.ejs","hash":"0106d8cff2232b14300b6915f13930cbfe1a07b3","modified":1553177154878},{"_id":"themes/matery/source/favicon-16x16.png","hash":"a15668159007741232dd7163ba08ad8078835b37","modified":1545064669521},{"_id":"themes/matery/source/favicon-32x32.png","hash":"db73a9f0746c3ddf208ee2b536f68087a000d564","modified":1545064669522},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"949f0b12696fe00cc5c0393a4e03104d60b28815","modified":1545064669483},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"bf7560c112285f37714fdbea9d2ff258d87a4dff","modified":1545064669484},{"_id":"themes/matery/layout/_partial/baidu-auto-push.ejs","hash":"3f7883245e5d7e667d2f2eb3e82c27a684a2894d","modified":1545064669484},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"aa4657e2eadd7bf5afdab4b17577223ee09a1de8","modified":1545064669486},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"e9560ff80d2d9c82e7f4ab301444cc1bc39497a5","modified":1545064669487},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"052e37f6acf469ec116d499ebe47aeceacaee998","modified":1545064669488},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"95cc019721720ab21294579d08ccda9bb97be09e","modified":1545064669489},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"50ec4d1dba495163ce4d2b906957c7a0f7b3d37d","modified":1545064669490},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"7377b4c76a1eb747f36f4607222c99eaee003c7b","modified":1545064669491},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"b404b7e57a93e37e92d8257b0f1072a7eef22e36","modified":1545064669492},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"191ad23d5541bf4749cdf4c88d05ed5a5167c6df","modified":1545064669493},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"c1dae457dc152682585bf75634f8769d329f6c77","modified":1545064669493},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"ed1d95b91ffdf4dfd8bdfa17ac3d6f3e44f3e1f3","modified":1545064669495},{"_id":"themes/matery/layout/_partial/prettify.ejs","hash":"566b8060a1930e50b58ad672e3a68fc34ddc044e","modified":1545064669496},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"1c157ee314fa0b6ff557a5c2597dcbd4df47f505","modified":1545064669497},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"c08d38af66d0b9938d5bf3c3ac64f08a3ae205b4","modified":1545064669498},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1545064669499},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"bab4f82b95b5a1c3269304920875dcd380709040","modified":1545064669502},{"_id":"themes/matery/source/css/custom.css","hash":"6f5197218cdad9d0c23cfc7fcef4b40ca6e36a26","modified":1545064669515},{"_id":"themes/matery/source/css/gitment.css","hash":"64004fac9950e865d8cf93cf2d7490ff2401019d","modified":1545064669516},{"_id":"themes/matery/source/css/matery.css","hash":"732382121a3cb95eaafb84f3fd4636205cbdac06","modified":1558263162659},{"_id":"themes/matery/source/js/matery.js","hash":"edbc0faad9cc7143d0493b309e164bd49d39cf3b","modified":1545064669523},{"_id":"themes/matery/source/js/search.js","hash":"58fb1cfeaf3bf0f9ae45a8777d6b0d3f32fedf55","modified":1545064669525},{"_id":"themes/matery/source/medias/cover.jpg","hash":"fc71a253f16844745fa85f734e1fe14fd347253d","modified":1545064670241},{"_id":"themes/matery/source/medias/logo.jpg","hash":"f5cf8edc1bbf0fcd0c3d138a74ac3e45ef098648","modified":1545064670320},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1545064669531},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1545064669528},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1545064669530},{"_id":"themes/matery/source/libs/baidu/autoPush.js","hash":"faad21a7c3a1fe4e1175794853abb69888b4cf87","modified":1545064669624},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1545064669632},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1545064669708},{"_id":"themes/matery/source/libs/prismTheme/prism-a11y-dark.css","hash":"00e23021439b03372df2ce36aed9cff89da75649","modified":1545064670119},{"_id":"themes/matery/source/libs/prismTheme/prism-atom-dark.css","hash":"84a4854fb9a53f80b8228a477c014872bbb10f30","modified":1545064670120},{"_id":"themes/matery/source/libs/prismTheme/prism-base16-ateliersulphurpool.light.css","hash":"b5fb763114452921defbb65ce028c1622d6d32c7","modified":1545064670121},{"_id":"themes/matery/source/libs/prismTheme/prism-cb.css","hash":"9163a23f88389a9ac5f57a608bdbc4ee1dabea92","modified":1545064670123},{"_id":"themes/matery/source/libs/prismTheme/prism-darcula.css","hash":"c45b0bf810e834112943e1977fbf6d6fb0c77f62","modified":1545064670123},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-dark.css","hash":"610200a89b5169f12f38868971e82c25c4b482ff","modified":1545064670124},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-earth.css","hash":"04f5957e5b925c471fcb7ff757c9f5acb67385e3","modified":1545064670125},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-forest.css","hash":"22d42bb4b319232d7ace79e88023c43a6681d4fa","modified":1545064670126},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-light.css","hash":"fdea1884b5f6c446b0dbab0b651075f0d1da3abd","modified":1545064670127},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-sea.css","hash":"659178e4868ee644e9117c3f2c186ba72f4ed7bf","modified":1545064670128},{"_id":"themes/matery/source/libs/prismTheme/prism-duotone-space.css","hash":"c2e5d8b23a9a6e802078595fa22140f72ad36a4e","modified":1545064670131},{"_id":"themes/matery/source/libs/prismTheme/prism-ghcolors.css","hash":"b88dcbe1bdb071850ab16b53c6a1f68e13ee7ac7","modified":1545064670132},{"_id":"themes/matery/source/libs/prismTheme/prism-hopscotch.css","hash":"8783e1272cabe90acbdd2e9a08a7950ad9c6e50f","modified":1545064670133},{"_id":"themes/matery/source/libs/prismTheme/prism-pojoaque.css","hash":"f37ff5a4403429ae7caedf2d77f0d260bff03e17","modified":1545064670134},{"_id":"themes/matery/source/libs/prismTheme/prism-vs.css","hash":"592130042a9ecef81e0a38452e180391cb80ee47","modified":1545064670135},{"_id":"themes/matery/source/libs/prismTheme/prism-xonokai.css","hash":"ee63ed1a374aec295ed98d0925c86304fabc663c","modified":1545064670137},{"_id":"themes/matery/source/libs/prismTheme/prism.js","hash":"7a674b7f94a339bb2048f2f87d4a05743a4b525c","modified":1545064670138},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1545064670140},{"_id":"themes/matery/source/libs/valine/custom.css","hash":"1b187c8626c34fdc087af57e6b36c852bb3b266d","modified":1545064670152},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"8d25a1e79c4b4b1676134400271187cf9702bcc4","modified":1545064670226},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"d2fb3a62b7e5809ff4315dd57bdc8fd0f8659048","modified":1545064670228},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"fc71a253f16844745fa85f734e1fe14fd347253d","modified":1545064670232},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"8dc9fbcca325316c49ac3514b24bab677bd4531c","modified":1545064670236},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"3219ce162c29f3849a24c0a329a3e0e303bbec26","modified":1545064670239},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"0cc1db5cf4e4eea0b3eb84ee8901bdd6c5c1208b","modified":1545064670243},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"59fde564000fa425a1db6f9ecf5a37edca696d6a","modified":1545064670245},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"8f66bd6e43517416a12694123093fb8c71e2bdcf","modified":1545064670246},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"05ed3c580e53645bab590904a545a039d9c8597e","modified":1545064670249},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"3c72e706e5de7cb8ee068efe712d59a55a1ea31a","modified":1545064670251},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"b55e775c70ec37d98d16c42e50a708f17a5dda60","modified":1545064670253},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"19920126c33d1b8e954581c41c5281692191183f","modified":1545064670254},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"7ec859542dfee11ac1133706ce698d8d457679bd","modified":1545064670256},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"c0306ffe3c55518385adf0c5588bd81b8e370df0","modified":1545064670257},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"eb0360c936b1080026a3dec38ccf99e514496077","modified":1545064670258},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"681eef400823c67c2a2afdbf8b63a059a256cbf7","modified":1545064670259},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"e366c18e5f2234ec60da9c2f6032820e0213bde4","modified":1545064670261},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"9ba8fca96636f0c1f307111377ec254a268b14db","modified":1545064670262},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"98535c5351446e4e2f0e727b445dad68e2e1767a","modified":1545064670263},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"864e4187cd624b0d8c9642cf0ebdadd92d3ef83a","modified":1545064670265},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"68c551926ec6bcbe7dce563d3c1aac4e5178b542","modified":1545064670269},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"2d13160e0e276b2e1152c60cc1bd0ddfb3f1e2d2","modified":1545064670270},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"55301410f4930650e2af4857f80ec3c373f87327","modified":1545064670274},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"97805210f4918595dcefbe3a970587258b23c259","modified":1545064670275},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"668d7fae55de06c12665fddb413568247cd6e5d1","modified":1545064670277},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"8c62148373ed579d44b07ee5857aca3812d2ec42","modified":1545064670278},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"8fed470f5e852a2b096436612ef4b3098483822e","modified":1545064670279},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"a4241344a39380f49e40fb5938f9fd249cd1bab1","modified":1545064670280},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"340192044cb790dbaafd00989835214e441c9ad4","modified":1545064670281},{"_id":"themes/matery/source/medias/imgs/favicon-16x16.png","hash":"a15668159007741232dd7163ba08ad8078835b37","modified":1545064670316},{"_id":"themes/matery/source/medias/imgs/favicon.png","hash":"db73a9f0746c3ddf208ee2b536f68087a000d564","modified":1545064670317},{"_id":"themes/matery/source/medias/imgs/logo.jpg","hash":"f5cf8edc1bbf0fcd0c3d138a74ac3e45ef098648","modified":1545064670319},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1545064669634},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1545064669637},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"ad7eaf6fcdd20b1370dbbb9d028080797488592e","modified":1545064670230},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"d4b9cedb4a2169a40845f9ea6bdcb2c510ae7705","modified":1545064670234},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"568a65db5d8c5412174a9b45f8d34788c6bfa125","modified":1545064670273},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1545064669534},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1545064669640},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1545064669649},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1545064669670},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1545064669671},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1545064669672},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1545064669675},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1545064669677},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1545064669678},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1545064669682},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1545064669694},{"_id":"themes/matery/source/libs/prettify/css/atelier-cave-dark.css","hash":"4f68612fc9758ea37238b823b2ec395c054f8718","modified":1545064669858},{"_id":"themes/matery/source/libs/prettify/css/atelier-cave-dark.min.css","hash":"f1d75e128f18328a7b51c0e0e599baaadc28bf14","modified":1545064669859},{"_id":"themes/matery/source/libs/prettify/css/atelier-cave-light.css","hash":"8468109c075935fd3c0bfdaecd69cd41129944e9","modified":1545064669860},{"_id":"themes/matery/source/libs/prettify/css/atelier-dune-dark.css","hash":"fa0ed705c5a3f475f842b56f6f7539a0ace4d556","modified":1545064669862},{"_id":"themes/matery/source/libs/prettify/css/atelier-cave-light.min.css","hash":"5a3d4edfdd8ba1d9a3b5ba8704d1e786ce589b4d","modified":1545064669861},{"_id":"themes/matery/source/libs/prettify/css/atelier-dune-dark.min.css","hash":"3007e03f2ceb75c4bfbd9037e40229fa9a9f4d74","modified":1545064669863},{"_id":"themes/matery/source/libs/prettify/css/atelier-dune-light.css","hash":"3440c6c1172e82a1c76eef861808b0fd6859c4e2","modified":1545064669864},{"_id":"themes/matery/source/libs/prettify/css/atelier-dune-light.min.css","hash":"73ef56544291c4ad65d03107dc58d6f37cad38a1","modified":1545064669865},{"_id":"themes/matery/source/libs/prettify/css/atelier-estuary-dark.css","hash":"088fddc303a23cb0b8b720c4fd894c2bc8e8a39e","modified":1545064669865},{"_id":"themes/matery/source/libs/prettify/css/atelier-estuary-dark.min.css","hash":"a2eec2b38302c0aa820f666d59e718920045ae4f","modified":1545064669866},{"_id":"themes/matery/source/libs/prettify/css/atelier-estuary-light.css","hash":"47431b1044e6f18d7d7990c5506316e7553be46e","modified":1545064669867},{"_id":"themes/matery/source/libs/prettify/css/atelier-estuary-light.min.css","hash":"0cd24ea7d955164509d22ea95bfceb6ba9d60968","modified":1545064669869},{"_id":"themes/matery/source/libs/prettify/css/atelier-forest-dark.css","hash":"01e7261aaca6318ad6dcea47da7540c2392f4865","modified":1545064669870},{"_id":"themes/matery/source/libs/prettify/css/atelier-forest-dark.min.css","hash":"ec218b2b3fec6408211905eea5b18d2e05fc2deb","modified":1545064669870},{"_id":"themes/matery/source/libs/prettify/css/atelier-forest-light.css","hash":"8f5a79a0d9706aa2fe1905f98fed981c1c1a93d0","modified":1545064669872},{"_id":"themes/matery/source/libs/prettify/css/atelier-forest-light.min.css","hash":"c57acf7e17a6c79d9466b22765de6bd6e17d663d","modified":1545064669872},{"_id":"themes/matery/source/libs/prettify/css/atelier-heath-dark.css","hash":"021bb7305b1810dd01af2af30bf65dd2364e678f","modified":1545064669874},{"_id":"themes/matery/source/libs/prettify/css/atelier-heath-dark.min.css","hash":"ae3054e3f3f648df376a2050f6d1360749d1e0b1","modified":1545064669875},{"_id":"themes/matery/source/libs/prettify/css/atelier-heath-light.css","hash":"44a30a6e1595ddc6f386c47a8bc2d588924550f3","modified":1545064669875},{"_id":"themes/matery/source/libs/prettify/css/atelier-heath-light.min.css","hash":"5fab4d645b7c0985df3354b342403c4c17e9f1bb","modified":1545064669877},{"_id":"themes/matery/source/libs/prettify/css/atelier-lakeside-dark.css","hash":"6d8c35d697ae084380301b4e41f484e7231155bb","modified":1545064669880},{"_id":"themes/matery/source/libs/prettify/css/atelier-lakeside-dark.min.css","hash":"6192e99781cd6813a6261662ef8fd88675e0dac0","modified":1545064669881},{"_id":"themes/matery/source/libs/prettify/css/atelier-lakeside-light.css","hash":"2e049ead5e0b04d4f299fd871821cf567264e54a","modified":1545064669882},{"_id":"themes/matery/source/libs/prettify/css/atelier-lakeside-light.min.css","hash":"7c1e464ad5c295882b292f45c68b5fde36b6e9d4","modified":1545064669922},{"_id":"themes/matery/source/libs/prettify/css/atelier-plateau-dark.css","hash":"b9ba71cd2fc24f3d0212adf7f7eb0f9cec42314d","modified":1545064669923},{"_id":"themes/matery/source/libs/prettify/css/atelier-plateau-dark.min.css","hash":"a1d875dea09ba2224ef33877c4d30c9cbca6f627","modified":1545064669936},{"_id":"themes/matery/source/libs/prettify/css/atelier-plateau-light.css","hash":"c9780a8ed390a9e12f0dcd27396b03869f629364","modified":1545064669939},{"_id":"themes/matery/source/libs/prettify/css/atelier-plateau-light.min.css","hash":"4ec32c36505845634da137ec130f0992ec018b79","modified":1545064669940},{"_id":"themes/matery/source/libs/prettify/css/atelier-savanna-dark.css","hash":"c373eb87606b61dd8c33df22c1620b36154abafa","modified":1545064669941},{"_id":"themes/matery/source/libs/prettify/css/atelier-savanna-dark.min.css","hash":"e619f4ce80aa9a8d1d6e1e4a3599088c488a4039","modified":1545064669942},{"_id":"themes/matery/source/libs/prettify/css/atelier-savanna-light.css","hash":"ccb1d9f29e842707369a432edc9c3cb51677b103","modified":1545064669943},{"_id":"themes/matery/source/libs/prettify/css/atelier-savanna-light.min.css","hash":"a1eadb1b72693c84eb750b8fab789d68ba90687a","modified":1545064669944},{"_id":"themes/matery/source/libs/prettify/css/atelier-seaside-dark.css","hash":"aa8fb223edf12197b61c5359f6369bdc57a3926b","modified":1545064669945},{"_id":"themes/matery/source/libs/prettify/css/atelier-seaside-dark.min.css","hash":"65f68b52ac309ba6e10389ccb57d5dc964328e41","modified":1545064669946},{"_id":"themes/matery/source/libs/prettify/css/atelier-seaside-light.css","hash":"cfcc9e5cc8d7db1c013dc7570881af575cf21994","modified":1545064669947},{"_id":"themes/matery/source/libs/prettify/css/atelier-seaside-light.min.css","hash":"21e8815dfc9660749759b8d07cd4eb942c46095f","modified":1545064669948},{"_id":"themes/matery/source/libs/prettify/css/atelier-sulphurpool-dark.css","hash":"b65a8d82ab640ffe5a45dd9db765dcf4f03bb2af","modified":1545064669949},{"_id":"themes/matery/source/libs/prettify/css/atelier-sulphurpool-dark.min.css","hash":"647fb039266767aea793945f61098e14b55277ac","modified":1545064669949},{"_id":"themes/matery/source/libs/prettify/css/atelier-sulphurpool-light.css","hash":"7dbc24847f89909a642f2e9c5c6e6b14a5c0d9bc","modified":1545064669951},{"_id":"themes/matery/source/libs/prettify/css/atelier-sulphurpool-light.min.css","hash":"3b59822f37193198a6fb85d18c63cd8ec2f4d0cf","modified":1545064669952},{"_id":"themes/matery/source/libs/prettify/css/github-v2.css","hash":"40e3f795a599566f3411559f30ad3cc98b161cb6","modified":1545064669953},{"_id":"themes/matery/source/libs/prettify/css/github-v2.min.css","hash":"26cbba11952a05048b13149ee00fa4711acc3d7c","modified":1545064669954},{"_id":"themes/matery/source/libs/prettify/css/github.css","hash":"23a9ac1e5fc0dd0126fcc1bb018044c81bb1b40b","modified":1545064669955},{"_id":"themes/matery/source/libs/prettify/css/github.min.css","hash":"c4861f271153700956f11de5ff89915dc6483aa2","modified":1545064669956},{"_id":"themes/matery/source/libs/prettify/css/hemisu-dark.css","hash":"3f09b6365614377726daf71d2a86f398e29da0d8","modified":1545064669999},{"_id":"themes/matery/source/libs/prettify/css/hemisu-dark.min.css","hash":"236b0f3c8589d9021ccbea54281036643099df70","modified":1545064670004},{"_id":"themes/matery/source/libs/prettify/css/hemisu-light.css","hash":"1fe667ed3b290cf6baf1cef4031f3e1084ee9e2b","modified":1545064670008},{"_id":"themes/matery/source/libs/prettify/css/hemisu-light.min.css","hash":"daae49942e01b9c9accedd283803acd5b1aaac00","modified":1545064670009},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-blue.css","hash":"20a0165ce5f6faddc13dfaefe6590e27a596ffb0","modified":1545064670010},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-blue.min.css","hash":"7e8893a64196e5c6336cc16c005ae08d26c90f1b","modified":1545064670011},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-bright.css","hash":"699accf789d052797d61384080da1900ef641a92","modified":1545064670012},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-bright.min.css","hash":"b52367e26a01f66c9ddb17700a6b18f08b523122","modified":1545064670012},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-eighties.css","hash":"0623f4030f6fe3e484f80e97cd66b62a5878b0eb","modified":1545064670014},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night-eighties.min.css","hash":"11dd1757f5f816c3dbecfec43360a0aa7db71cec","modified":1545064670015},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night.css","hash":"9c9b542e717db159edb141e31953f058c17185f6","modified":1545064670016},{"_id":"themes/matery/source/libs/prettify/css/tomorrow-night.min.css","hash":"bde242a6c325038c266428a1a73cdf9664fac510","modified":1545064670016},{"_id":"themes/matery/source/libs/prettify/css/tomorrow.css","hash":"1ac21106734083f23f3f18460043d215213f28f7","modified":1545064670018},{"_id":"themes/matery/source/libs/prettify/css/tomorrow.min.css","hash":"4fb39982a3349ec5676aedfd0c3a3077f9cd8e13","modified":1545064670019},{"_id":"themes/matery/source/libs/prettify/css/tranquil-heart.min.css","hash":"be3ef74c83f2261837c6bdcaaa6693467382a304","modified":1545064670022},{"_id":"themes/matery/source/libs/prettify/css/vibrant-ink.css","hash":"1d72b73270ee840d79faa3ec705379eaf16f2433","modified":1545064670024},{"_id":"themes/matery/source/libs/prettify/css/tranquil-heart.css","hash":"1e30aa41c075e38ed125f3b1f58aae859d1bff7a","modified":1545064670021},{"_id":"themes/matery/source/libs/prettify/css/vibrant-ink.min.css","hash":"c9132dfd07ef5499daefa3585811628be36c8adf","modified":1545064670026},{"_id":"themes/matery/source/libs/prettify/js/lang-apollo.js","hash":"6859a23fc6b37ae8ae5f7b730d4e03cb6cbcb5f7","modified":1545064670030},{"_id":"themes/matery/source/libs/prettify/js/lang-basic.js","hash":"316f858152a89bc3e014af77ae81bed4ab7b5374","modified":1545064670031},{"_id":"themes/matery/source/libs/prettify/js/lang-clj.js","hash":"dcc497dc7f588b0a56f6f369c10b275b80a2d867","modified":1545064670031},{"_id":"themes/matery/source/libs/prettify/js/lang-css.js","hash":"e34871b1c589eb586de9f44e51ed7ec34b5058aa","modified":1545064670032},{"_id":"themes/matery/source/libs/prettify/js/lang-dart.js","hash":"b829e359b850f693d0778ac5080ff8d5d59d0330","modified":1545064670047},{"_id":"themes/matery/source/libs/prettify/js/lang-erlang.js","hash":"d681c553d509d0312ebbf61e5f383745f0e45744","modified":1545064670050},{"_id":"themes/matery/source/libs/prettify/js/lang-ex.js","hash":"9cc238c3d8f550f0171a42c43791cd4f5a9a4c31","modified":1545064670051},{"_id":"themes/matery/source/libs/prettify/js/lang-go.js","hash":"3bfbd28eedd3e0c169a4a0392c6aa475a612315b","modified":1545064670053},{"_id":"themes/matery/source/libs/prettify/js/lang-hs.js","hash":"68f6b321cf60f3670fc0bf9e0eb79f3cd3e4fbd9","modified":1545064670054},{"_id":"themes/matery/source/libs/prettify/js/lang-kotlin.js","hash":"921fdcae57fe6798a3d22abe2b27cf640549a923","modified":1545064670054},{"_id":"themes/matery/source/libs/prettify/js/lang-lasso.js","hash":"b01f0a8c298afa7d15cf262f68346712a20087a8","modified":1545064670055},{"_id":"themes/matery/source/libs/prettify/js/lang-lisp.js","hash":"0475d1a3f322051dfb3d9a0e2ba7f02ab0f87b5d","modified":1545064670056},{"_id":"themes/matery/source/libs/prettify/js/lang-llvm.js","hash":"bdaaccf9562964377d739bd1a741a418b93b259a","modified":1545064670057},{"_id":"themes/matery/source/libs/prettify/js/lang-logtalk.js","hash":"33c0b5d277d9c9ada740091f250283cf49c9558b","modified":1545064670063},{"_id":"themes/matery/source/libs/prettify/js/lang-lua.js","hash":"957fc1c2134b5e649e10108c293c71902cde304f","modified":1545064670077},{"_id":"themes/matery/source/libs/prettify/js/lang-matlab.js","hash":"e55790a5e08a50f0c7732321007ae48c43fd4fcc","modified":1545064670078},{"_id":"themes/matery/source/libs/prettify/js/lang-ml.js","hash":"ada272584accc5684bb350493b8a66d13d64b8b4","modified":1545064670079},{"_id":"themes/matery/source/libs/prettify/js/lang-mumps.js","hash":"6d8f5155b7028f724e28a376b991ca276cb5277c","modified":1545064670080},{"_id":"themes/matery/source/libs/prettify/js/lang-n.js","hash":"b494bcbf864a9ce2a3d9b0cbbb0ddcc1bceabde8","modified":1545064670081},{"_id":"themes/matery/source/libs/prettify/js/lang-pascal.js","hash":"027b12325585f39b206f21e9cd5ebf1501335520","modified":1545064670086},{"_id":"themes/matery/source/libs/prettify/js/lang-proto.js","hash":"065fd574cebd9a8d85a0dcd0d34449482ed7d164","modified":1545064670095},{"_id":"themes/matery/source/libs/prettify/js/lang-r.js","hash":"5802b5f686d3f5311fde9795686025751c2ded45","modified":1545064670096},{"_id":"themes/matery/source/libs/prettify/js/lang-rd.js","hash":"8e61db134e8c4567d900333cf8f5ea79c21da271","modified":1545064670100},{"_id":"themes/matery/source/libs/prettify/js/lang-rust.js","hash":"fbc3b733d5aca41e8960ecea7aab67e9d33968f9","modified":1545064670101},{"_id":"themes/matery/source/libs/prettify/js/lang-scala.js","hash":"10106063cd5065387fe64d9eea852963b5467951","modified":1545064670102},{"_id":"themes/matery/source/libs/prettify/js/lang-sql.js","hash":"0344ce55316201a328b8f0855d8516fa88b7d2c1","modified":1545064670103},{"_id":"themes/matery/source/libs/prettify/js/lang-swift.js","hash":"075375fa2faf3d465ae4e01f94d90330be24668e","modified":1545064670104},{"_id":"themes/matery/source/libs/prettify/js/lang-tcl.js","hash":"3a990fc6b6eadb265a0e08efa4bc55849a1c9f63","modified":1545064670105},{"_id":"themes/matery/source/libs/prettify/js/lang-tex.js","hash":"3d7324cf085f1119dab016bbae5f6a35626de4ed","modified":1545064670106},{"_id":"themes/matery/source/libs/prettify/js/lang-vb.js","hash":"c6a679d5f6633a08ab2b2a9cf7a980278e580480","modified":1545064670107},{"_id":"themes/matery/source/libs/prettify/js/lang-vhdl.js","hash":"d701fe1773811c55b21a96ed9caf31a3762b49cb","modified":1545064670108},{"_id":"themes/matery/source/libs/prettify/js/lang-wiki.js","hash":"23b9c88460d6b8deff972737996814a7304f6374","modified":1545064670109},{"_id":"themes/matery/source/libs/prettify/js/lang-xq.js","hash":"f25987ddb1df532556b1374f31f3e4b881096b5d","modified":1545064670110},{"_id":"themes/matery/source/libs/prettify/js/lang-yaml.js","hash":"53fb2ecdb3284f5410ad709052bcbd5335b305b3","modified":1545064670110},{"_id":"themes/matery/source/libs/prettify/js/prettify.css","hash":"2f1bf35c5cd762533840076eb7d52145814c7125","modified":1545064670113},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1545064670143},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1545064670144},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1545064670145},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1545064670146},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1545064670147},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1545064670150},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1545064670148},{"_id":"themes/matery/source/medias/article/featureimages/ES6-Promise.jpg","hash":"fc6ea0cb7e72ec22babd146373863ed0025ffce0","modified":1553520330685},{"_id":"themes/matery/source/medias/article/featureimages/ES6-Promise.webp","hash":"e68195503dbbecf25daab79be1250579e8c84cd9","modified":1553520334053},{"_id":"themes/matery/source/medias/article/featureimages/ES6.jpg","hash":"bce8613a9f2c1ab89501cef4fbc0ac4607ac774c","modified":1552645700762},{"_id":"themes/matery/source/medias/article/featureimages/ES6.webp","hash":"334b70318f6190b323966ca838b166a90379de32","modified":1553522270170},{"_id":"themes/matery/source/medias/article/featureimages/JavaScript.jpg","hash":"c9ea50214f678a90c4ecc22cf92f53c7294b4c18","modified":1552645776365},{"_id":"themes/matery/source/medias/article/featureimages/JavaScript.webp","hash":"474ce8e08cd52d513ea3a24430582763727ed79f","modified":1553522285675},{"_id":"themes/matery/source/medias/article/featureimages/arrow-function.jpg","hash":"c16c6c23f8b1db8638165efa16b970047dc3c395","modified":1553520278183},{"_id":"themes/matery/source/medias/article/featureimages/arrow-function.webp","hash":"1d6eeeeb922b90bd5fae10cb865a45b7838e3f56","modified":1553520272312},{"_id":"themes/matery/source/medias/article/journal/2019.png","hash":"f4a1e79f7fef7f00d5a71b34c5198c8d74d5baf6","modified":1546959166922},{"_id":"themes/matery/source/medias/article/journal/arctic.jpg","hash":"0df7dbc2e6d66b0779422d79f7feff4293f13564","modified":1545064670202},{"_id":"themes/matery/source/medias/article/journal/carbon.jpg","hash":"9e1483302582aafd0961ab3931330362203348ea","modified":1545064670203},{"_id":"themes/matery/source/medias/article/journal/goodbbye2108-hello2019.jpg","hash":"2f578b7b39dad4c7a194d3c57148e3976571cbfb","modified":1546959167278},{"_id":"themes/matery/source/medias/article/journal/reserve-time.jpg","hash":"8e3dc030ef3c0f767f6d68221bf483d4eace7f7f","modified":1545064670205},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_160616.jpg","hash":"fcfd7d0719a72a23fa5e2938841e24857f69ff77","modified":1553247308146},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/cover.jpg","hash":"7816d1b18b7b2be745f002f94b727414c68741bb","modified":1553176451031},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/cover.webp","hash":"67dd27082b8cf913646c4b42ca8635f9f57c5440","modified":1553176447596},{"_id":"themes/matery/source/medias/galleries/reflection/sina-blog-img.jpg","hash":"eb77169c57618b91b2dacea3ea74fcf367f49c09","modified":1545064670314},{"_id":"themes/matery/source/medias/galleries/reflection/sina-blog.jpg","hash":"5d339fe71792745e524c82354e5e24a4ac86cd89","modified":1545064670315},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545064669598},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545064669599},{"_id":"themes/matery/source/libs/materialize/js/materialize.min.js","hash":"338a96318e7c9452cec509fcf8dea1511db660b2","modified":1545064669856},{"_id":"themes/matery/source/libs/prettify/js/node_prettify.js","hash":"a7467294133f029ddc05fd49b8e3244ee75b5488","modified":1545064670113},{"_id":"themes/matery/source/libs/prettify/js/prettify.js","hash":"b49f7439a4aea49d2b6e1cadefb7c93172046b94","modified":1545064670115},{"_id":"themes/matery/source/libs/prettify/js/run_prettify.js","hash":"5b24e9c5b115c29a4bd4a0383703e67461ee984b","modified":1545064670117},{"_id":"themes/matery/source/medias/article/journal/temperature-1.jpg","hash":"6d15eafef95b5c308bf4e8ad89f9853f32557280","modified":1545064670207},{"_id":"themes/matery/source/medias/article/journal/temperature-2.jpg","hash":"c67a485716f78feb96ad55fdb0ad9121077e5d7d","modified":1545064670210},{"_id":"themes/matery/source/medias/article/random-thoughts/The-Mcmoirs-of-a-Survivor.jpg","hash":"11e20aec3d554a3163656816ec9c2568dadaa10a","modified":1545064670221},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_144732.jpg","hash":"36adb04b7d3997d304e5dbb04a773b0e3c29b019","modified":1553173122114},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_145046.jpg","hash":"0da4514a0d932b2660b8b8153335640baacce2a0","modified":1553173178653},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_145943.jpg","hash":"af98ae39c54af1ebdaadf255759e8152dab4a46f","modified":1553174016280},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_150139.jpg","hash":"eb76c8a41c759610b9c4016689e63320031dd333","modified":1553173228606},{"_id":"themes/matery/source/medias/galleries/qinglong-sakura/IMG_20190320_151655.jpg","hash":"856a4701e87b2c33dcb40ba2875894084f0167bf","modified":1553173255359},{"_id":"themes/matery/source/medias/galleries/reflection/20180704_211340.jpg","hash":"92645a228973cc4804a16f63b881701cfbf974fd","modified":1545064670290},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545064669537},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545064669541},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545064669594},{"_id":"themes/matery/source/libs/materialize/css/materialize.min.css","hash":"4eaae73c0c2e342523d391057945e3c366020e3e","modified":1545064669712},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"b7085b5c1dc3f56f81a8bf93290e2a3f24e4d8ed","modified":1545064669739},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1545064669761},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1545064669763},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1545064669771},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1545064669772},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1545064669769},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1545064669776},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1545064669778},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1545064669781},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1545064669789},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1545064669790},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1545064669792},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1545064669798},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1545064669796},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1545064669799},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1545064669845},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1545064669849},{"_id":"themes/matery/source/medias/article/coding/create-js/easeljs.jpg","hash":"7ff3a9930c5a3e76ac56801528fb90cf0ea89ae1","modified":1545064670155},{"_id":"themes/matery/source/medias/article/coding/arrow-function/arrow-function-arguments.png","hash":"b16db6621453f536e7208e742b9b8e9bceeac539","modified":1553421616044},{"_id":"themes/matery/source/medias/article/coding/ectx-scope-closure/context-object.jpg","hash":"f29c9d0bedf0e53dcbec0dba688cfbbee56cfe0d","modified":1552645776352},{"_id":"themes/matery/source/medias/article/coding/ectx-scope-closure/scope-chain.jpg","hash":"6492f94c78442e4cc3f9a0aab7c659725b32af6f","modified":1552645776359},{"_id":"themes/matery/source/medias/article/coding/event/dom-event-flow-browser.jpg","hash":"37f467158060471b808ae0c01f807c5d7a341111","modified":1551966625009},{"_id":"themes/matery/source/medias/article/coding/event/dom-event-flow.jpg","hash":"fdbbd932014360963de35f12df14f2870a85f437","modified":1551966625011},{"_id":"themes/matery/source/medias/article/coding/event/event-bubbling.jpg","hash":"2874864a1734adab683d941c8b5f7655f1a7119a","modified":1551966625012},{"_id":"themes/matery/source/medias/article/coding/event/event-capturing.jpg","hash":"43ad64577aae8154da9d2d11776576081ba38ba7","modified":1551966625014},{"_id":"themes/matery/source/medias/article/coding/news-spider/1.jpg","hash":"a54988034d5a300cdddce49490955429f4e6ff9c","modified":1545064670157},{"_id":"themes/matery/source/medias/article/coding/news-spider/13.jpg","hash":"26d4facc6fb433600c82227076a8db9d50b036a2","modified":1545064670166},{"_id":"themes/matery/source/medias/article/coding/news-spider/2.png","hash":"4dac47af8d15d410103bf651de28f9843333edb7","modified":1545064670168},{"_id":"themes/matery/source/medias/article/coding/news-spider/3.jpg","hash":"031b0fbeab6e5ebd514addc46d1b0868356b24b2","modified":1545064670170},{"_id":"themes/matery/source/medias/article/coding/news-spider/4.jpg","hash":"6e3ee0dee1eac3d34ced499201ca2715b37c624c","modified":1545064670171},{"_id":"themes/matery/source/medias/article/coding/ectx-scope-closure/scope.jpg","hash":"683ef47cd1a20554b95c81d7420979ab807a50a4","modified":1552645776362},{"_id":"themes/matery/source/medias/article/coding/template-string/console-templateStr.png","hash":"4a2853843ee0b6586ea72685a98942ccbf2ac369","modified":1553178406398},{"_id":"themes/matery/source/medias/article/coding/three-columns-layout/three-columns-layout.png","hash":"873bd307bbb0ff12f0243bb378fd48cbc205da39","modified":1554139389441},{"_id":"themes/matery/source/medias/article/coding/two-columns-layout/two-columns-layout.png","hash":"95da3e92717cf46fe2816ae32fb67798665cb120","modified":1554185668354},{"_id":"themes/matery/source/medias/article/coding/z-index/XYZ.png","hash":"588560ad6c806adefb95528a41cb4895f849e65d","modified":1545064670190},{"_id":"themes/matery/source/medias/article/coding/z-index/stacking-order.jpg","hash":"0a7950ebadd98374e0aba7e33ba11c5beb9832f6","modified":1545064670191},{"_id":"themes/matery/source/medias/article/coding/z-index/test.jpg","hash":"18d31ba66f8d0a708e4c92d9812341b1742c7071","modified":1545064670192},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo1.jpg","hash":"db2dc32b71e137dd09580220cdf263c42f526371","modified":1545064670193},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo2.jpg","hash":"11582bd1aac4139848996f382891a7f116e4a711","modified":1545064670194},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo3.jpg","hash":"ad8ab1fac9e48d53a4a4f0e996f8cc2a1dd83d9a","modified":1545064670196},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo4.jpg","hash":"62c33262c7abd185f6c86ceb926cc1da5046e80f","modified":1545064670197},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo5.jpg","hash":"6c74295f342d1a0500f3deed3a93b7a834b979c4","modified":1545064670198},{"_id":"themes/matery/source/medias/article/coding/z-index/xiaoguo6.jpg","hash":"8ec0ea617b74886317264121bb3de633343c65d5","modified":1545064670200},{"_id":"themes/matery/source/medias/article/random-thoughts/plates-1.jpg","hash":"58825f9d64c1a6b1fe42fcd0d2b2737e1598e470","modified":1545064670224},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1545064669742},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1545064669755},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1545064669760},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1545064669766},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1545064669775},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1545064669785},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1545064669795},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1545064669810},{"_id":"themes/matery/source/medias/article/coding/ectx-scope-closure/ctx-ctxObj-varObj-scope-scopeChain.jpg","hash":"91b87b8688335dd60960722e70b934208f8caaa7","modified":1552645776356},{"_id":"themes/matery/source/medias/article/coding/news-spider/5.jpg","hash":"bfd2b59dfadc5e38ad14358821206fbdfca1bc6b","modified":1545064670172},{"_id":"themes/matery/source/medias/article/coding/news-spider/6.jpg","hash":"29e196a666666db102381c2f9b820ae5bba81961","modified":1545064670175},{"_id":"themes/matery/source/medias/galleries/reflection/20180919_184602.jpg","hash":"0a1fdde570d7e68e0180e6ddbfd7907a9ca075b0","modified":1545064670298},{"_id":"themes/matery/source/medias/article/coding/news-spider/10.jpg","hash":"751ab3c82189366002e24744eca61aedf5cb0a7a","modified":1545064670160},{"_id":"themes/matery/source/medias/article/coding/news-spider/11.jpg","hash":"b174f5dce7761d432d5479c42acd631c8b32fb91","modified":1545064670162},{"_id":"themes/matery/source/medias/article/coding/news-spider/12.jpg","hash":"4184f197ece00ee5870a6b080be3702d4851fca8","modified":1545064670165},{"_id":"themes/matery/source/medias/article/coding/news-spider/7.jpg","hash":"db4bec364e473fe6c8601acc266666be970e6300","modified":1545064670184},{"_id":"themes/matery/source/medias/article/coding/news-spider/9.jpg","hash":"cae67f8df4b3876c16c612938e32973fc10423af","modified":1545064670188},{"_id":"themes/matery/source/medias/galleries/reflection/20180626_191742.jpg","hash":"66901fff477a8a233cb59102bc5c20fdb96cd175","modified":1545064670288},{"_id":"themes/matery/source/medias/galleries/reflection/20180905_191759.jpg","hash":"7db446a4c0eed1e61da5d944d9634f2ae8d025a1","modified":1545064670295},{"_id":"themes/matery/source/medias/galleries/reflection/20180920_193340.jpg","hash":"5140c526299a808e3f9ec08a51148f92ec16809b","modified":1545064670312},{"_id":"themes/matery/source/medias/galleries/reflection/20180920_193227.jpg","hash":"2110a1c342bcdc4f73346e89defac3acc9f1eaaf","modified":1545064670304},{"_id":"themes/matery/source/medias/galleries/reflection/20180920_193229.jpg","hash":"4bb1487f2b7d48c36f58eab036cfb92c04532ba6","modified":1545064670308},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1545064669591},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"c5ff32ccf63106152dac687395d2e3551d9fcadb","modified":1545064669748},{"_id":"themes/matery/source/medias/article/journal/timg.gif","hash":"b7a71d7ac6ec8ecd8b843a04c20a322cb02b2d64","modified":1545064670217},{"_id":"themes/matery/source/medias/article/journal/2018-summary.jpg","hash":"d6b5ffb0a000ce6d588b0fd59701e4a3fe8b7335","modified":1546959166918},{"_id":"themes/matery/source/medias/article/live-as-you-want/live-as-you-want .jpg","hash":"2ad42756d957561cec773efbd3a82fd1e8298a00","modified":1558264490295},{"_id":"themes/matery/source/medias/article/journal/live-as-you-want.jpg","hash":"7b529611d7fcde0a15cde66b5ee768875af87ac9","modified":1558265625832},{"_id":"themes/matery/source/medias/article/featureimages/behind-the-suffering.jpeg","hash":"06436babebd5316c2f59c0ff49f7d0ab773ac2d2","modified":1558265120312},{"_id":"themes/matery/source/medias/article/featureimages/behind-the-suffering.jpg","hash":"58ec0dfe02f018791bb72e08c679ab4cfe413705","modified":1558266816321},{"_id":"themes/matery/source/medias/article/featureimages/jing-hong-yi-mian.jpg","hash":"b94b6ec702b116449ca738c4fd232461565b1472","modified":1558266589707},{"_id":"themes/matery/source/medias/article/random-thoughts/dusk-street.jpg","hash":"2294bc4468db3fe5179321000036f05fd360c8d2","modified":1558267541062},{"_id":"themes/matery/source/medias/article/featureimages/dusk-street.jpg","hash":"2294bc4468db3fe5179321000036f05fd360c8d2","modified":1558267541062},{"_id":"themes/matery/source/medias/article/random-thoughts/jing-hong-yi-mian-2.jpg","hash":"e2ce073a20aa014ba972c3f9d3a4c19a04045ba0","modified":1558267954584},{"_id":"public/search.xml","hash":"3f7eb30373374cf3383213405af7c2b187347e36","modified":1558268118825},{"_id":"public/leancloud_counter_security_urls.json","hash":"c2e549b2e9f3264180fdb1f3fafade5a120e30dc","modified":1558268119987},{"_id":"public/404.html","hash":"c7770782d54b6ea86f4e3e68cc1a67789e03b689","modified":1558268120113},{"_id":"public/about/index.html","hash":"88bb25dfc05359e1e308f2d658090f060b7f7cfc","modified":1558268120114},{"_id":"public/categories/index.html","hash":"fe2ffdfb1f6539b03bd8ce54b7f8acd6b2f137fe","modified":1558268120114},{"_id":"public/codings/index.html","hash":"cb19fdd3fdd62acbb03fbf0487164b3eeae6cf9c","modified":1558268120114},{"_id":"public/galleries/index.html","hash":"a3f04cc60353eac94823e8ca5370d0e579dd4d11","modified":1558268120114},{"_id":"public/journals/index.html","hash":"d8acbc47340b9d04cf521a4c4a42923f151fc879","modified":1558268120115},{"_id":"public/random-thoughts/index.html","hash":"dd5f30438dfbee08c4f465feac206d17766f357d","modified":1558268120115},{"_id":"public/tags/index.html","hash":"efd95d02ebabc6d3acdbcce5d4a081894c50fc76","modified":1558268120115},{"_id":"public/2019/05/19/live-as-you-want/index.html","hash":"96146d23f65372a476111c496659339b70797704","modified":1558268120116},{"_id":"public/2019/05/19/jing-hong-yi-mian/index.html","hash":"e1bd555feddea922afb7aaa4aa3df99e002c5a0a","modified":1558268120120},{"_id":"public/2019/05/19/the-dusk-street/index.html","hash":"e880ab8265f4746676ed13747f50f4a9e2b67307","modified":1558268120121},{"_id":"public/2019/04/02/two-columns-layout/index.html","hash":"c2ceb09c81bcca6e551c9dade626360eb7f8cb79","modified":1558268120121},{"_id":"public/2019/04/02/three-columns-layout/index.html","hash":"741fef8668c94988ba25067ec981025d7cd518b4","modified":1558268120121},{"_id":"public/2019/03/28/ES6-Generator/index.html","hash":"5a6100c8c522c893f29738d0ea761aef0b0aa9a3","modified":1558268120121},{"_id":"public/2019/03/25/ES6-Promise/index.html","hash":"b59adfb77b2383ce23f03caeb0e0f37d4f08ad0e","modified":1558268120121},{"_id":"public/2019/03/24/ES6-arrow-function/index.html","hash":"5c35364eae5ecb121af90252cf05d3f920a9c1be","modified":1558268120122},{"_id":"public/2019/03/22/ES6-function-extend/index.html","hash":"1ae59a95a07a188e4e2c4c8da15a881e0a013b08","modified":1558268120122},{"_id":"public/2019/03/21/ES6-templateString/index.html","hash":"15233ccc953bdd41ac32d70eec43f5369a0acfeb","modified":1558268120122},{"_id":"public/2019/03/21/qinglong-sakura/index.html","hash":"678d780325d28581f3018707aa585e8f1854330b","modified":1558268120122},{"_id":"public/2019/03/18/ES6-destructuring/index.html","hash":"204f23dd03cfa8d5af5ce0395863db878724ae39","modified":1558268120122},{"_id":"public/2019/03/15/ES6-let-const/index.html","hash":"84634bdee4be870d6e3bebb23b6ae0bdf0818933","modified":1558268120122},{"_id":"public/2019/03/13/ECtx-scope-closure/index.html","hash":"89636d4e020aab2ac27acbfdbd6753bee90644dc","modified":1558268120123},{"_id":"public/2019/03/12/JavaScript-Function/index.html","hash":"fc064e1de84035c9ebe7a5e47d4362227f01644d","modified":1558268120123},{"_id":"public/2019/03/04/JavaScript-Event/index.html","hash":"db2441c08c075d52bd306768dd76b8da10c86fb2","modified":1558268120123},{"_id":"public/2018/12/31/if-there-is-no-2018/index.html","hash":"ed38a8581d31292761da01f78bd3577b4e5d5816","modified":1558268120124},{"_id":"public/2018/12/27/the-past-three-months/index.html","hash":"65f33667bf72c9b1e6a3f02ee2dc9a5ebfc1df00","modified":1558268120124},{"_id":"public/2018/09/29/gallery-1/index.html","hash":"bf3edd9324cfc565c0e3700b05736351f3048caf","modified":1558268120125},{"_id":"public/2018/09/18/the-night-scence-of-chang-An-city/index.html","hash":"4f6cb18880492b285143eafca799f5ddd4d6aef0","modified":1558268120125},{"_id":"public/2018/08/28/z-index/index.html","hash":"b74138af2f765ce9261d5fcc03552b6b03bf57e3","modified":1558268120125},{"_id":"public/2018/08/10/journal-2/index.html","hash":"9d7c6b4bf4a329dc899a2b497733255ed76e3eed","modified":1558268120125},{"_id":"public/2018/08/01/random-thoughts-1/index.html","hash":"9c2a576670de723e3c3abc6fa1d24b43d98a2597","modified":1558268120125},{"_id":"public/2018/08/20/random-thoughts-2/index.html","hash":"fdc4a27d5cde949c7053a9f81422ea04c2fe9753","modified":1558268120126},{"_id":"public/2018/08/01/journal-1/index.html","hash":"2d07ef866b309218170d34a70be4d5a2ea363b96","modified":1558268120127},{"_id":"public/2018/07/18/create-js/index.html","hash":"f62f1d905bf0fdaab453300e6dd993bec61045d1","modified":1558268120127},{"_id":"public/2018/07/11/beginning/index.html","hash":"6df744afdf84d4dd8b4d913e7b65354495f43341","modified":1558268120127},{"_id":"public/2018/06/08/news-spider/index.html","hash":"4dbbd01c287d3390608c38c579c6fe3b20d2947c","modified":1558268120127},{"_id":"public/archives/index.html","hash":"67dfaa341219fe1bb7faba982dbbc8498564ccb1","modified":1558268120127},{"_id":"public/archives/page/2/index.html","hash":"7159a1a5dc3166fd70cb84df2c7bb4574ee77105","modified":1558268120128},{"_id":"public/archives/page/3/index.html","hash":"908b22241deaeacce5fdee813e7202610b7ebec9","modified":1558268120128},{"_id":"public/archives/2018/index.html","hash":"096e89009ceb6fb3b7f2d719dbf0d239ccd0e3ee","modified":1558268120128},{"_id":"public/archives/2018/06/index.html","hash":"97630a4468463025cabb0f2192882cfd71ced5b1","modified":1558268120128},{"_id":"public/archives/2018/07/index.html","hash":"7d35db81d4e5675a99afd47dddc95fb67213f018","modified":1558268120128},{"_id":"public/archives/2018/08/index.html","hash":"a38dc9c0eb4cf5285de38c629807b3679f4ee3d3","modified":1558268120128},{"_id":"public/archives/2018/09/index.html","hash":"937a1061460a2a77c856ae92f177dd0ccf91325e","modified":1558268120129},{"_id":"public/archives/2018/12/index.html","hash":"f090111ccbddf8f4e4ee40c5f75d27a1b5c1a0ba","modified":1558268120129},{"_id":"public/archives/2019/index.html","hash":"415b2942f2ebcbec5cdffe87cf91079aeeab1f9f","modified":1558268120129},{"_id":"public/archives/2019/page/2/index.html","hash":"1dfa2246d74538f60db29f680f477b96033a2543","modified":1558268120129},{"_id":"public/archives/2019/03/index.html","hash":"15b4a432bc49db2947ff155df5818321c87833c3","modified":1558268120129},{"_id":"public/archives/2019/04/index.html","hash":"3dde747b486518f1e0cc5333e40fdc000c1e85dc","modified":1558268120130},{"_id":"public/archives/2019/05/index.html","hash":"b9fc0212c15eb8d9afdbf8162f14f9b8516d9ad9","modified":1558268120130},{"_id":"public/categories/编程/index.html","hash":"0e9acd8b910f1e732e780d530753153cf2d71764","modified":1558268120130},{"_id":"public/categories/编程/page/2/index.html","hash":"ae5eb6cc3b0d33ebc90400f7e455bc9e00c17c47","modified":1558268120130},{"_id":"public/categories/日志/index.html","hash":"04b4532926cbb37630005944c5976e242e429aaa","modified":1558268120130},{"_id":"public/categories/影集/index.html","hash":"9d38deecf860d2345e6fd12790589190decf67c6","modified":1558268120130},{"_id":"public/categories/随想/index.html","hash":"65f6e678675a5162ea2f281d53e3e080bcbc5815","modified":1558268120131},{"_id":"public/index.html","hash":"55ff0960ae69dced128f3335ac1349404e38dee9","modified":1558268120131},{"_id":"public/page/2/index.html","hash":"bc81e1b09b29747f5a5102e9c8f38b752d7784db","modified":1558268120131},{"_id":"public/page/3/index.html","hash":"872eeb6683ce4737c5475f4ce7414aba17dd30b6","modified":1558268120131},{"_id":"public/tags/ES6/index.html","hash":"ca43244dd09137218b3ab6bac2b34aab55c7c473","modified":1558268120131},{"_id":"public/tags/Generator函数/index.html","hash":"9d6850769f2d76b0429f6e01165be83404061a90","modified":1558268120131},{"_id":"public/tags/JavaScript/index.html","hash":"a7f59053c114ccf8a7af6e9cb0236d761bef0fe1","modified":1558268120131},{"_id":"public/tags/Promise/index.html","hash":"723840f16302d250fb242f03da23e9b438904fe6","modified":1558268120132},{"_id":"public/tags/Function/index.html","hash":"ba42023c14378c5bc64a1dbda83fcf7c9fbce586","modified":1558268120132},{"_id":"public/tags/箭头函数/index.html","hash":"603aedd11ec8621f2d644eb92c4b9c8e2cd0148d","modified":1558268120132},{"_id":"public/tags/生活工作/index.html","hash":"138f837d7e7e77d2ed4e28ba547e5551f521cf8f","modified":1558268120133},{"_id":"public/tags/Create-JS/index.html","hash":"7397c47291c016afaf4c849637c689dc4ba2e9c7","modified":1558268120133},{"_id":"public/tags/随拍-影集/index.html","hash":"298d27c4a46789d6314d8a6202317f405c649110","modified":1558268120133},{"_id":"public/tags/2018/index.html","hash":"1cd9400d8f5e20b186225dc0be20d68105ef51ef","modified":1558268120134},{"_id":"public/tags/朝花夕拾/index.html","hash":"aea2bc1be5fe266f898c3e41ae0576a03b314fb4","modified":1558268120134},{"_id":"public/tags/阅读感悟/index.html","hash":"79a37b6a4919caeba3b2e19d9f513ce4907b8f99","modified":1558268120134},{"_id":"public/tags/生活/index.html","hash":"c9e46f90f50035bf993818c49532f98fea5a941f","modified":1558268120134},{"_id":"public/tags/Node-JS/index.html","hash":"941e7503e4a71cfb7c9b3d4606bc02c991a214f1","modified":1558268120136},{"_id":"public/tags/青龙寺-影集/index.html","hash":"fd5eeca5b027efe1cfd7c58476bae59e09927903","modified":1558268120137},{"_id":"public/tags/CSS/index.html","hash":"dcf4e31b991c8937fb3d7a49927194e14a7f7ec0","modified":1558268120137},{"_id":"public/tags/布局/index.html","hash":"a7a047a0893d89578ff7151cff15ecac4eb8ea7b","modified":1558268120138},{"_id":"public/tags/z-index/index.html","hash":"aa2958219148b3321284251584c57633327cae88","modified":1558268120138},{"_id":"public/favicon-16x16.png","hash":"a15668159007741232dd7163ba08ad8078835b37","modified":1558268120355},{"_id":"public/favicon-32x32.png","hash":"db73a9f0746c3ddf208ee2b536f68087a000d564","modified":1558268120355},{"_id":"public/medias/cover.jpg","hash":"fc71a253f16844745fa85f734e1fe14fd347253d","modified":1558268120355},{"_id":"public/medias/logo.jpg","hash":"f5cf8edc1bbf0fcd0c3d138a74ac3e45ef098648","modified":1558268120355},{"_id":"public/medias/banner/0.jpg","hash":"8d25a1e79c4b4b1676134400271187cf9702bcc4","modified":1558268120356},{"_id":"public/medias/banner/1.jpg","hash":"d2fb3a62b7e5809ff4315dd57bdc8fd0f8659048","modified":1558268120356},{"_id":"public/medias/banner/3.jpg","hash":"fc71a253f16844745fa85f734e1fe14fd347253d","modified":1558268120356},{"_id":"public/medias/banner/5.jpg","hash":"8dc9fbcca325316c49ac3514b24bab677bd4531c","modified":1558268120356},{"_id":"public/medias/banner/6.jpg","hash":"3219ce162c29f3849a24c0a329a3e0e303bbec26","modified":1558268120357},{"_id":"public/medias/featureimages/0.jpg","hash":"0cc1db5cf4e4eea0b3eb84ee8901bdd6c5c1208b","modified":1558268120357},{"_id":"public/medias/featureimages/1.jpg","hash":"59fde564000fa425a1db6f9ecf5a37edca696d6a","modified":1558268120357},{"_id":"public/medias/featureimages/10.jpg","hash":"8f66bd6e43517416a12694123093fb8c71e2bdcf","modified":1558268120358},{"_id":"public/medias/featureimages/11.jpg","hash":"05ed3c580e53645bab590904a545a039d9c8597e","modified":1558268120358},{"_id":"public/medias/featureimages/12.jpg","hash":"3c72e706e5de7cb8ee068efe712d59a55a1ea31a","modified":1558268120358},{"_id":"public/medias/featureimages/13.jpg","hash":"b55e775c70ec37d98d16c42e50a708f17a5dda60","modified":1558268120358},{"_id":"public/medias/featureimages/14.jpg","hash":"19920126c33d1b8e954581c41c5281692191183f","modified":1558268120359},{"_id":"public/medias/featureimages/15.jpg","hash":"7ec859542dfee11ac1133706ce698d8d457679bd","modified":1558268120359},{"_id":"public/medias/featureimages/16.jpg","hash":"c0306ffe3c55518385adf0c5588bd81b8e370df0","modified":1558268120359},{"_id":"public/medias/featureimages/17.jpg","hash":"eb0360c936b1080026a3dec38ccf99e514496077","modified":1558268120359},{"_id":"public/medias/featureimages/18.jpg","hash":"681eef400823c67c2a2afdbf8b63a059a256cbf7","modified":1558268120359},{"_id":"public/medias/featureimages/19.jpg","hash":"e366c18e5f2234ec60da9c2f6032820e0213bde4","modified":1558268120360},{"_id":"public/medias/featureimages/2.jpg","hash":"9ba8fca96636f0c1f307111377ec254a268b14db","modified":1558268120360},{"_id":"public/medias/featureimages/20.jpg","hash":"98535c5351446e4e2f0e727b445dad68e2e1767a","modified":1558268120360},{"_id":"public/medias/featureimages/21.jpg","hash":"864e4187cd624b0d8c9642cf0ebdadd92d3ef83a","modified":1558268120361},{"_id":"public/medias/featureimages/22.jpg","hash":"68c551926ec6bcbe7dce563d3c1aac4e5178b542","modified":1558268120361},{"_id":"public/medias/featureimages/23.jpg","hash":"2d13160e0e276b2e1152c60cc1bd0ddfb3f1e2d2","modified":1558268120361},{"_id":"public/medias/featureimages/3.jpg","hash":"55301410f4930650e2af4857f80ec3c373f87327","modified":1558268120361},{"_id":"public/medias/featureimages/4.jpg","hash":"97805210f4918595dcefbe3a970587258b23c259","modified":1558268120363},{"_id":"public/medias/featureimages/5.jpg","hash":"668d7fae55de06c12665fddb413568247cd6e5d1","modified":1558268120363},{"_id":"public/medias/featureimages/6.jpg","hash":"8c62148373ed579d44b07ee5857aca3812d2ec42","modified":1558268120363},{"_id":"public/medias/featureimages/7.jpg","hash":"8fed470f5e852a2b096436612ef4b3098483822e","modified":1558268120363},{"_id":"public/medias/featureimages/8.jpg","hash":"a4241344a39380f49e40fb5938f9fd249cd1bab1","modified":1558268120364},{"_id":"public/medias/featureimages/9.jpg","hash":"340192044cb790dbaafd00989835214e441c9ad4","modified":1558268120364},{"_id":"public/medias/imgs/favicon-16x16.png","hash":"a15668159007741232dd7163ba08ad8078835b37","modified":1558268120364},{"_id":"public/medias/imgs/favicon.png","hash":"db73a9f0746c3ddf208ee2b536f68087a000d564","modified":1558268120364},{"_id":"public/medias/imgs/logo.jpg","hash":"f5cf8edc1bbf0fcd0c3d138a74ac3e45ef098648","modified":1558268120364},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1558268120365},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1558268120365},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1558268120365},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1558268120365},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1558268120365},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1558268120365},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1558268120366},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1558268120366},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1558268120366},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1558268120366},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1558268120366},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1558268120367},{"_id":"public/medias/article/featureimages/ES6-Promise.jpg","hash":"fc6ea0cb7e72ec22babd146373863ed0025ffce0","modified":1558268120367},{"_id":"public/medias/article/featureimages/ES6-Promise.webp","hash":"e68195503dbbecf25daab79be1250579e8c84cd9","modified":1558268120367},{"_id":"public/medias/article/featureimages/ES6.jpg","hash":"bce8613a9f2c1ab89501cef4fbc0ac4607ac774c","modified":1558268120367},{"_id":"public/medias/article/featureimages/ES6.webp","hash":"334b70318f6190b323966ca838b166a90379de32","modified":1558268120367},{"_id":"public/medias/article/featureimages/JavaScript.jpg","hash":"c9ea50214f678a90c4ecc22cf92f53c7294b4c18","modified":1558268120368},{"_id":"public/medias/article/featureimages/JavaScript.webp","hash":"474ce8e08cd52d513ea3a24430582763727ed79f","modified":1558268120368},{"_id":"public/medias/article/featureimages/arrow-function.jpg","hash":"c16c6c23f8b1db8638165efa16b970047dc3c395","modified":1558268120368},{"_id":"public/medias/article/featureimages/arrow-function.webp","hash":"1d6eeeeb922b90bd5fae10cb865a45b7838e3f56","modified":1558268120368},{"_id":"public/medias/article/journal/2019.png","hash":"f4a1e79f7fef7f00d5a71b34c5198c8d74d5baf6","modified":1558268120368},{"_id":"public/medias/article/journal/arctic.jpg","hash":"0df7dbc2e6d66b0779422d79f7feff4293f13564","modified":1558268120369},{"_id":"public/medias/article/journal/carbon.jpg","hash":"9e1483302582aafd0961ab3931330362203348ea","modified":1558268120369},{"_id":"public/medias/article/journal/reserve-time.jpg","hash":"8e3dc030ef3c0f767f6d68221bf483d4eace7f7f","modified":1558268120369},{"_id":"public/medias/article/journal/goodbbye2108-hello2019.jpg","hash":"2f578b7b39dad4c7a194d3c57148e3976571cbfb","modified":1558268120369},{"_id":"public/medias/galleries/qinglong-sakura/IMG_20190320_160616.jpg","hash":"fcfd7d0719a72a23fa5e2938841e24857f69ff77","modified":1558268120369},{"_id":"public/medias/galleries/qinglong-sakura/cover.jpg","hash":"7816d1b18b7b2be745f002f94b727414c68741bb","modified":1558268120370},{"_id":"public/medias/galleries/qinglong-sakura/cover.webp","hash":"67dd27082b8cf913646c4b42ca8635f9f57c5440","modified":1558268120370},{"_id":"public/medias/galleries/reflection/sina-blog-img.jpg","hash":"eb77169c57618b91b2dacea3ea74fcf367f49c09","modified":1558268120370},{"_id":"public/medias/galleries/reflection/sina-blog.jpg","hash":"5d339fe71792745e524c82354e5e24a4ac86cd89","modified":1558268120370},{"_id":"public/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"b7085b5c1dc3f56f81a8bf93290e2a3f24e4d8ed","modified":1558268120370},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1558268120371},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1558268120371},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1558268120371},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1558268120371},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1558268120371},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1558268120372},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1558268120372},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1558268120372},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1558268120372},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1558268120373},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1558268120373},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1558268120373},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1558268120373},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1558268120373},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1558268120374},{"_id":"public/medias/article/coding/create-js/easeljs.jpg","hash":"7ff3a9930c5a3e76ac56801528fb90cf0ea89ae1","modified":1558268120374},{"_id":"public/medias/article/coding/arrow-function/arrow-function-arguments.png","hash":"b16db6621453f536e7208e742b9b8e9bceeac539","modified":1558268120374},{"_id":"public/medias/article/coding/ectx-scope-closure/context-object.jpg","hash":"f29c9d0bedf0e53dcbec0dba688cfbbee56cfe0d","modified":1558268120374},{"_id":"public/medias/article/coding/ectx-scope-closure/scope-chain.jpg","hash":"6492f94c78442e4cc3f9a0aab7c659725b32af6f","modified":1558268120375},{"_id":"public/medias/article/coding/event/dom-event-flow-browser.jpg","hash":"37f467158060471b808ae0c01f807c5d7a341111","modified":1558268120375},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1558268120375},{"_id":"public/medias/article/coding/event/dom-event-flow.jpg","hash":"fdbbd932014360963de35f12df14f2870a85f437","modified":1558268120375},{"_id":"public/medias/article/coding/event/event-bubbling.jpg","hash":"2874864a1734adab683d941c8b5f7655f1a7119a","modified":1558268120375},{"_id":"public/medias/article/coding/event/event-capturing.jpg","hash":"43ad64577aae8154da9d2d11776576081ba38ba7","modified":1558268120376},{"_id":"public/medias/article/coding/news-spider/1.jpg","hash":"a54988034d5a300cdddce49490955429f4e6ff9c","modified":1558268120376},{"_id":"public/medias/article/coding/news-spider/13.jpg","hash":"26d4facc6fb433600c82227076a8db9d50b036a2","modified":1558268120376},{"_id":"public/medias/article/coding/news-spider/2.png","hash":"4dac47af8d15d410103bf651de28f9843333edb7","modified":1558268120376},{"_id":"public/medias/article/coding/news-spider/3.jpg","hash":"031b0fbeab6e5ebd514addc46d1b0868356b24b2","modified":1558268120377},{"_id":"public/medias/article/coding/news-spider/4.jpg","hash":"6e3ee0dee1eac3d34ced499201ca2715b37c624c","modified":1558268120377},{"_id":"public/medias/article/coding/ectx-scope-closure/scope.jpg","hash":"683ef47cd1a20554b95c81d7420979ab807a50a4","modified":1558268120377},{"_id":"public/medias/article/coding/template-string/console-templateStr.png","hash":"4a2853843ee0b6586ea72685a98942ccbf2ac369","modified":1558268120377},{"_id":"public/medias/article/coding/three-columns-layout/three-columns-layout.png","hash":"873bd307bbb0ff12f0243bb378fd48cbc205da39","modified":1558268120378},{"_id":"public/medias/article/coding/two-columns-layout/two-columns-layout.png","hash":"95da3e92717cf46fe2816ae32fb67798665cb120","modified":1558268120378},{"_id":"public/medias/article/coding/z-index/XYZ.png","hash":"588560ad6c806adefb95528a41cb4895f849e65d","modified":1558268120378},{"_id":"public/medias/article/coding/z-index/stacking-order.jpg","hash":"0a7950ebadd98374e0aba7e33ba11c5beb9832f6","modified":1558268120378},{"_id":"public/medias/article/coding/z-index/test.jpg","hash":"18d31ba66f8d0a708e4c92d9812341b1742c7071","modified":1558268120380},{"_id":"public/medias/article/coding/z-index/xiaoguo1.jpg","hash":"db2dc32b71e137dd09580220cdf263c42f526371","modified":1558268120381},{"_id":"public/medias/article/coding/z-index/xiaoguo2.jpg","hash":"11582bd1aac4139848996f382891a7f116e4a711","modified":1558268120382},{"_id":"public/medias/article/coding/z-index/xiaoguo3.jpg","hash":"ad8ab1fac9e48d53a4a4f0e996f8cc2a1dd83d9a","modified":1558268120382},{"_id":"public/medias/article/coding/z-index/xiaoguo4.jpg","hash":"62c33262c7abd185f6c86ceb926cc1da5046e80f","modified":1558268120382},{"_id":"public/medias/article/coding/z-index/xiaoguo5.jpg","hash":"6c74295f342d1a0500f3deed3a93b7a834b979c4","modified":1558268120382},{"_id":"public/medias/article/coding/z-index/xiaoguo6.jpg","hash":"8ec0ea617b74886317264121bb3de633343c65d5","modified":1558268120383},{"_id":"public/medias/article/journal/live-as-you-want.jpg","hash":"7b529611d7fcde0a15cde66b5ee768875af87ac9","modified":1558268120383},{"_id":"public/medias/article/featureimages/jing-hong-yi-mian.jpg","hash":"b94b6ec702b116449ca738c4fd232461565b1472","modified":1558268120383},{"_id":"public/medias/article/featureimages/behind-the-suffering.jpg","hash":"58ec0dfe02f018791bb72e08c679ab4cfe413705","modified":1558268120384},{"_id":"public/medias/article/random-thoughts/jing-hong-yi-mian-2.jpg","hash":"e2ce073a20aa014ba972c3f9d3a4c19a04045ba0","modified":1558268120384},{"_id":"public/medias/article/featureimages/dusk-street.jpg","hash":"2294bc4468db3fe5179321000036f05fd360c8d2","modified":1558268120384},{"_id":"public/medias/banner/2.jpg","hash":"ad7eaf6fcdd20b1370dbbb9d028080797488592e","modified":1558268120451},{"_id":"public/medias/banner/4.jpg","hash":"d4b9cedb4a2169a40845f9ea6bdcb2c510ae7705","modified":1558268120459},{"_id":"public/medias/featureimages/24.jpg","hash":"568a65db5d8c5412174a9b45f8d34788c6bfa125","modified":1558268120480},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558268120481},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558268120482},{"_id":"public/medias/article/journal/temperature-1.jpg","hash":"6d15eafef95b5c308bf4e8ad89f9853f32557280","modified":1558268120482},{"_id":"public/medias/article/journal/temperature-2.jpg","hash":"c67a485716f78feb96ad55fdb0ad9121077e5d7d","modified":1558268120483},{"_id":"public/medias/article/random-thoughts/The-Mcmoirs-of-a-Survivor.jpg","hash":"11e20aec3d554a3163656816ec9c2568dadaa10a","modified":1558268120484},{"_id":"public/medias/galleries/qinglong-sakura/IMG_20190320_144732.jpg","hash":"36adb04b7d3997d304e5dbb04a773b0e3c29b019","modified":1558268120486},{"_id":"public/medias/galleries/qinglong-sakura/IMG_20190320_145046.jpg","hash":"0da4514a0d932b2660b8b8153335640baacce2a0","modified":1558268120487},{"_id":"public/medias/galleries/qinglong-sakura/IMG_20190320_145943.jpg","hash":"af98ae39c54af1ebdaadf255759e8152dab4a46f","modified":1558268120487},{"_id":"public/medias/galleries/qinglong-sakura/IMG_20190320_150139.jpg","hash":"eb76c8a41c759610b9c4016689e63320031dd333","modified":1558268120487},{"_id":"public/medias/galleries/qinglong-sakura/IMG_20190320_151655.jpg","hash":"856a4701e87b2c33dcb40ba2875894084f0167bf","modified":1558268120487},{"_id":"public/medias/galleries/reflection/20180704_211340.jpg","hash":"92645a228973cc4804a16f63b881701cfbf974fd","modified":1558268120488},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1558268120488},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1558268120488},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1558268120489},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1558268120489},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1558268120489},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1558268120490},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1558268120490},{"_id":"public/medias/article/coding/ectx-scope-closure/ctx-ctxObj-varObj-scope-scopeChain.jpg","hash":"91b87b8688335dd60960722e70b934208f8caaa7","modified":1558268120490},{"_id":"public/medias/article/coding/news-spider/5.jpg","hash":"bfd2b59dfadc5e38ad14358821206fbdfca1bc6b","modified":1558268120491},{"_id":"public/medias/article/coding/news-spider/6.jpg","hash":"29e196a666666db102381c2f9b820ae5bba81961","modified":1558268120491},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1558268120491},{"_id":"public/css/custom.css","hash":"cc48d75c210b802621a549161834d4e0420a369f","modified":1558268120556},{"_id":"public/css/gitment.css","hash":"1961d6a2fb59f0c4b973d1ca3728f557cbcba25d","modified":1558268120557},{"_id":"public/js/matery.js","hash":"96c052c7f687d2c4716c0c473261fc072be2deb0","modified":1558268120557},{"_id":"public/js/search.js","hash":"6c86ddc9b8d8fc120fcfb22fca1dcafcf1c217c0","modified":1558268120557},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1558268120557},{"_id":"public/libs/baidu/autoPush.js","hash":"697e742621d341172731a187df826a69f6c75f5c","modified":1558268120558},{"_id":"public/libs/prismTheme/prism-a11y-dark.css","hash":"8d15adeef5bf941c895c40b188a4ed318d26bc69","modified":1558268120558},{"_id":"public/libs/prismTheme/prism-atom-dark.css","hash":"e4636f192355a3907b38b27847f83b3a5913039b","modified":1558268120558},{"_id":"public/libs/prismTheme/prism-base16-ateliersulphurpool.light.css","hash":"7c75c045b5e9d2d230c59882e2e9b84a967882e2","modified":1558268120558},{"_id":"public/libs/prismTheme/prism-cb.css","hash":"38e5c9c50802899cf95a55c42313cce5fa70cbc4","modified":1558268120558},{"_id":"public/libs/prismTheme/prism-darcula.css","hash":"4bb32a2a7ffa2027e62374051eadc07188a52ac2","modified":1558268120558},{"_id":"public/libs/prismTheme/prism-duotone-earth.css","hash":"c325b47242ba932aec56e341bc59c638acf60923","modified":1558268120558},{"_id":"public/libs/prismTheme/prism-duotone-dark.css","hash":"5b12175936f45ec46b32bbce75d78d41f3ebfe29","modified":1558268120558},{"_id":"public/libs/prismTheme/prism-duotone-forest.css","hash":"3e897aefedf83d1fd6b1412afc03bb80934c69d3","modified":1558268120559},{"_id":"public/libs/prismTheme/prism-duotone-light.css","hash":"6b59fe5e644fb6a61f12a205a513fc1178c57354","modified":1558268120559},{"_id":"public/libs/prismTheme/prism-duotone-sea.css","hash":"0750f483be0552b18938b646904acb126ae45199","modified":1558268120559},{"_id":"public/libs/prismTheme/prism-duotone-space.css","hash":"a3fe76f7e71100823fb00904599f8e0eefcbc523","modified":1558268120559},{"_id":"public/libs/prismTheme/prism-ghcolors.css","hash":"491dacd0af5961d7d75456ed9aebb0c6155f8016","modified":1558268120559},{"_id":"public/libs/prismTheme/prism-hopscotch.css","hash":"1641ce3c043292ead331496ab8618775126f9e0c","modified":1558268120559},{"_id":"public/libs/prismTheme/prism-pojoaque.css","hash":"f3b89aafecd709f1853a47174c5517a98763786b","modified":1558268120559},{"_id":"public/libs/prismTheme/prism-vs.css","hash":"29d61aedb9db75bf73ac4d906e31617861b82dbf","modified":1558268120559},{"_id":"public/libs/prismTheme/prism-xonokai.css","hash":"8da758309e05da7938ae9d7c4aecd52be780eced","modified":1558268120559},{"_id":"public/libs/prismTheme/prism.js","hash":"d4d94e8f44469b830a58b5e4267645f1cf3a99cb","modified":1558268120559},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1558268120560},{"_id":"public/libs/valine/custom.css","hash":"c8a1aa79ec633d90d019e3e52eca76e24e3935a3","modified":1558268120560},{"_id":"public/libs/prettify/css/atelier-cave-dark.css","hash":"09f3cd75ed03ccc20fc8f817908102ed26219125","modified":1558268120560},{"_id":"public/libs/prettify/css/atelier-cave-dark.min.css","hash":"54c272f1d4262b8c1b6043ccc8ff4734b3b1c636","modified":1558268120560},{"_id":"public/libs/prettify/css/atelier-cave-light.css","hash":"46bbc73ac8a735e2d907be44d964d9ba96e8a16b","modified":1558268120560},{"_id":"public/libs/prettify/css/atelier-dune-dark.css","hash":"47dcb8b3b91aeedf9d74abe760a986c7a0f78a8e","modified":1558268120560},{"_id":"public/libs/prettify/css/atelier-cave-light.min.css","hash":"2bbabca35533a5922fb1774db6eed9722ef0de3b","modified":1558268120560},{"_id":"public/libs/prettify/css/atelier-dune-dark.min.css","hash":"af53930094ac7a64aaf607ab57ba5b01a09e8efc","modified":1558268120560},{"_id":"public/libs/prettify/css/atelier-dune-light.css","hash":"8237c95fc706fd01725144c7e852f586f5269b2c","modified":1558268120560},{"_id":"public/libs/prettify/css/atelier-dune-light.min.css","hash":"f7b9b5347f85a0ff22cbaca0d78949ac13fe3eb5","modified":1558268120561},{"_id":"public/libs/prettify/css/atelier-estuary-dark.css","hash":"fccbba89b0e1e42b3676291aaf3098e7c46169a6","modified":1558268120561},{"_id":"public/libs/prettify/css/atelier-estuary-dark.min.css","hash":"cbc1f5ec42e9f28af3891523f168b0899f978469","modified":1558268120561},{"_id":"public/libs/prettify/css/atelier-estuary-light.css","hash":"641351e6e00f73c0b06208dc21dde214105b5333","modified":1558268120561},{"_id":"public/libs/prettify/css/atelier-estuary-light.min.css","hash":"a93a4b8ba506b7c1e9135167c9ccf0691ee8ad07","modified":1558268120561},{"_id":"public/libs/prettify/css/atelier-forest-dark.css","hash":"750da2899332c401e63c77f0b79c1280f060a24d","modified":1558268120561},{"_id":"public/libs/prettify/css/atelier-forest-dark.min.css","hash":"955e4eeee93268be21cdda62c4f0e31242fc580a","modified":1558268120561},{"_id":"public/libs/prettify/css/atelier-forest-light.css","hash":"ca610b6c535dccd8442ff412683509f9b5f7d42c","modified":1558268120561},{"_id":"public/libs/prettify/css/atelier-forest-light.min.css","hash":"debca8705bb18a407dfcda63234f1f2b7aef2916","modified":1558268120562},{"_id":"public/libs/prettify/css/atelier-heath-dark.css","hash":"9f751e5e2f741a2ca802119a0b9629456777495a","modified":1558268120562},{"_id":"public/libs/prettify/css/atelier-heath-dark.min.css","hash":"98a3fea2b8ac476b48b52b757dad939ce80d20b3","modified":1558268120562},{"_id":"public/libs/prettify/css/atelier-heath-light.css","hash":"f7a03f2a997bba346a350bedfc860594af29768b","modified":1558268120562},{"_id":"public/libs/prettify/css/atelier-heath-light.min.css","hash":"e07b521484b1b4933c0e60ffa6bdfc29bf0c7ec2","modified":1558268120562},{"_id":"public/libs/prettify/css/atelier-lakeside-dark.css","hash":"1c0a402a9f8b243f3ef18895ab4a56fbfcf49a1f","modified":1558268120563},{"_id":"public/libs/prettify/css/atelier-lakeside-dark.min.css","hash":"b8208a6d6b6dcfa1c4da9a98095f4fe91b519cd5","modified":1558268120563},{"_id":"public/libs/prettify/css/atelier-lakeside-light.min.css","hash":"89b917373b3763d4222a5106ba784239e3912a75","modified":1558268120564},{"_id":"public/libs/prettify/css/atelier-lakeside-light.css","hash":"74c98a39d22780b038551ab6c2a30759b5425518","modified":1558268120564},{"_id":"public/libs/prettify/css/atelier-plateau-dark.css","hash":"5be42e7c5fdc012500d13db48ddeab95ae297916","modified":1558268120564},{"_id":"public/libs/prettify/css/atelier-plateau-dark.min.css","hash":"7de8a010c6cf7d0e5e29e017ca620a24399e62ff","modified":1558268120564},{"_id":"public/libs/prettify/css/atelier-plateau-light.css","hash":"6160404d0e976cf8e4d8621e6b7e2e8814541771","modified":1558268120564},{"_id":"public/libs/prettify/css/atelier-savanna-dark.css","hash":"d34b76751cdf2d8fbb11b15af27c0a9b88d2d181","modified":1558268120565},{"_id":"public/libs/prettify/css/atelier-plateau-light.min.css","hash":"84dfbe203e661725913a73f0c573fc1c73565431","modified":1558268120565},{"_id":"public/libs/prettify/css/atelier-savanna-light.css","hash":"1a81911ada5f680e3af2a266cbebf68c8fc032aa","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-savanna-dark.min.css","hash":"06322bcdaa36bb45948828705456ad158415c3f8","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-savanna-light.min.css","hash":"e363e8b856e9048b99dcb94e416aba9e7f1a9886","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-seaside-dark.css","hash":"0e649a5526ff0e3452be4519465f9282705e68b1","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-seaside-dark.min.css","hash":"696a18e6d4d639fd14490262f9a2626203c43fea","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-seaside-light.css","hash":"4eae4f7ac1a5bc9947c403942d2fb0daef697cac","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-seaside-light.min.css","hash":"7c070b58bf089d259bf19309708452e6786e05a3","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-sulphurpool-dark.css","hash":"e8d643b9e6276f76d0ca873da654ce1760694710","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-sulphurpool-dark.min.css","hash":"9718078d1e2208d44bf5ea9a5bfa331f7d8d1fdb","modified":1558268120566},{"_id":"public/libs/prettify/css/atelier-sulphurpool-light.css","hash":"ec816451c57efebb77025f04b9191a22c4e573e0","modified":1558268120566},{"_id":"public/libs/prettify/css/github-v2.css","hash":"8b9e795a1dc3e79ab68d07d007d659d685f935ee","modified":1558268120567},{"_id":"public/libs/prettify/css/atelier-sulphurpool-light.min.css","hash":"4eb3ac86b14fdeb45b106580a8d80f359cbab57c","modified":1558268120567},{"_id":"public/libs/prettify/css/github.min.css","hash":"b156639209d7b9b27d3a8cd92bdd676ad358c628","modified":1558268120567},{"_id":"public/libs/prettify/css/hemisu-dark.css","hash":"dbe6c7f5effeec9c332b7d2a95505f1167027922","modified":1558268120567},{"_id":"public/libs/prettify/css/hemisu-dark.min.css","hash":"ffc544c52368f725c2ab98d3e6e7a86aca1e31a2","modified":1558268120567},{"_id":"public/libs/prettify/css/hemisu-light.css","hash":"923d9f6fa7b043b90a212246acdafdaf363aefc0","modified":1558268120567},{"_id":"public/libs/prettify/css/github-v2.min.css","hash":"cb06bb61052646b33d19a37ad14d68cdd7405d98","modified":1558268120567},{"_id":"public/libs/prettify/css/hemisu-light.min.css","hash":"ae6bb465d1f5e28366c66827b8ba4a5924898c04","modified":1558268120567},{"_id":"public/libs/prettify/css/github.css","hash":"741fde7dc9a25924f267dc251a018526525f6b98","modified":1558268120567},{"_id":"public/libs/prettify/css/tomorrow-night-blue.css","hash":"33e4483b73b72d561ec3ee6bac085a8ecfc07564","modified":1558268120567},{"_id":"public/libs/prettify/css/tomorrow-night-blue.min.css","hash":"c78e33010239894f25eac66b1f0d5a7c310313f5","modified":1558268120568},{"_id":"public/libs/prettify/css/tomorrow-night-bright.css","hash":"2a69a02e3820845a4e1f12c7ba4e00e8e61f15a9","modified":1558268120568},{"_id":"public/libs/prettify/css/tomorrow-night-bright.min.css","hash":"0cbd70932ebee3aca4a86fd0e23773e920bc0d5e","modified":1558268120568},{"_id":"public/libs/prettify/css/tomorrow-night-eighties.css","hash":"ab4a7ca393524f5c15c36ae46152a559cdcb2400","modified":1558268120568},{"_id":"public/libs/prettify/css/tomorrow-night-eighties.min.css","hash":"f654ece8ef13e740f844ce593912e040e3f21e5f","modified":1558268120568},{"_id":"public/libs/prettify/css/tomorrow-night.css","hash":"40d3a13e572b5e2743762aaff97738c3248acbf6","modified":1558268120568},{"_id":"public/libs/prettify/css/tomorrow-night.min.css","hash":"5bb9910676b08e6d2a6eac5ef07e08754de14a01","modified":1558268120568},{"_id":"public/libs/prettify/css/tomorrow.css","hash":"2b6bc58a2a889882a45be1c553f7f9a36f9b3f90","modified":1558268120568},{"_id":"public/libs/prettify/css/tomorrow.min.css","hash":"1f61e1f9c60f8be82e3a8287a4f46d87b4551400","modified":1558268120568},{"_id":"public/libs/prettify/css/tranquil-heart.min.css","hash":"9c669545e3517de77f5cff50a58e4ef035855c87","modified":1558268120569},{"_id":"public/libs/prettify/css/vibrant-ink.css","hash":"db15bbca779664e13472a84146f7f010dc011799","modified":1558268120569},{"_id":"public/libs/prettify/css/tranquil-heart.css","hash":"cb601cf28f7ec08fd1a9700aa755f7cb1645ac4a","modified":1558268120569},{"_id":"public/libs/prettify/css/vibrant-ink.min.css","hash":"feca319864faa3f8a6ae878553c1d960c7ff702f","modified":1558268120569},{"_id":"public/libs/prettify/js/lang-apollo.js","hash":"e19c633557b10eab4daad0c2586b3ecb44937ba3","modified":1558268120569},{"_id":"public/libs/prettify/js/lang-clj.js","hash":"fff2857ba9919e7a2e8b61b08f1b87be41ed3a46","modified":1558268120569},{"_id":"public/libs/prettify/js/lang-css.js","hash":"9df3f79343a2104339e5c3ab9d94a39c0291b37b","modified":1558268120569},{"_id":"public/libs/prettify/js/lang-basic.js","hash":"565276ee5ea2f117e07a8997d792b7d734e4063c","modified":1558268120569},{"_id":"public/libs/prettify/js/lang-dart.js","hash":"34c6c4897cf7d22e230ff9db55f2821c5eddbca8","modified":1558268120569},{"_id":"public/libs/prettify/js/lang-erlang.js","hash":"6cb9234429b62d55ff078346668725d6c08efea9","modified":1558268120569},{"_id":"public/libs/prettify/js/lang-ex.js","hash":"4a73c2a674799327a2dbe2691aff72d909034b7a","modified":1558268120570},{"_id":"public/libs/prettify/js/lang-go.js","hash":"9cfcf1a3e4f9884b369910d7ed2cd67f644ac284","modified":1558268120570},{"_id":"public/libs/prettify/js/lang-hs.js","hash":"602e2ff0c97f814773d3895f08c07b5efa8a63d5","modified":1558268120570},{"_id":"public/libs/prettify/js/lang-lasso.js","hash":"ba0b1a3ac1ad041a1adf6b90154713d1248391e1","modified":1558268120570},{"_id":"public/libs/prettify/js/lang-kotlin.js","hash":"4aa66901437d588ccaf669d40a91a5cf36f2ffaa","modified":1558268120570},{"_id":"public/libs/prettify/js/lang-lisp.js","hash":"48d79c12e1915e1166c3cb8cb1798f8ec2443cc9","modified":1558268120570},{"_id":"public/libs/prettify/js/lang-llvm.js","hash":"5138b9a56f063688205157703c629fefdb8ed4d0","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-logtalk.js","hash":"7836eccb85957e1dae2ca02a9530cf0c7369f949","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-lua.js","hash":"d907fa9f1e43aa6f86530d9803b6150b0852140b","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-ml.js","hash":"968bdc15137ae94b206e485b5bdfa5c96eff5857","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-mumps.js","hash":"9a1cae257b9b028b22ac2c4c9e4c3d2873898566","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-n.js","hash":"c2c992ba29d96410a93109ec2505b8e7a96782b9","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-pascal.js","hash":"17d60d30e6a73b3a8657baba733bb04ecbd53039","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-proto.js","hash":"8dc02debbff302b7d75df5728888abea01d885ae","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-r.js","hash":"0c6b75d79b64f603b5e66e4824e51b01df7dc841","modified":1558268120571},{"_id":"public/libs/prettify/js/lang-rd.js","hash":"5421a7fe15ddf2b5ea4ab37805e7b7df9784cb34","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-rust.js","hash":"d5320b7d04fa87634729120062047b4843d62e04","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-scala.js","hash":"74e6aef0b3c6ee2208d0ee3a4887766271724763","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-sql.js","hash":"75c9fcd8145b0312c103841ba4fa80bcb76c01e7","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-swift.js","hash":"0b12cb29773ac59b3e86a709982c06d1fb903e21","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-tcl.js","hash":"2270ce056e525578c4fdff32947fa44baeb3475a","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-tex.js","hash":"c30f64b85d576afbb7586a85bcfb471c4dace462","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-vb.js","hash":"ba5046fe3caa09c7e2b7e1b3a643b710285a1efa","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-vhdl.js","hash":"d19fd1f281d3f7b9583bbf446790d8c7f0022d9c","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-wiki.js","hash":"197ed2adc974afa9eba86f6eec4dbb864a8649c7","modified":1558268120572},{"_id":"public/libs/prettify/js/lang-yaml.js","hash":"a3a509eb7a2298b962d8b132bd19d093c5e75b25","modified":1558268120573},{"_id":"public/libs/prettify/js/prettify.css","hash":"3f5dc3139f7385092d5dd567bb273c4585dee82d","modified":1558268120573},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1558268120573},{"_id":"public/css/matery.css","hash":"9bb05d7062dad38de8811710138fcc3719dbef81","modified":1558268120573},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1558268120573},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1558268120573},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1558268120573},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1558268120573},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1558268120574},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1558268120574},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1558268120574},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1558268120574},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1558268120574},{"_id":"public/libs/prettify/js/lang-matlab.js","hash":"b71302c9a2aa5ed2b31a75ff364ec6270ac52b1b","modified":1558268120575},{"_id":"public/libs/prettify/js/lang-xq.js","hash":"dd0c434083a0fd01b144eb506caedf481abc4052","modified":1558268120575},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1558268120575},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1558268120575},{"_id":"public/libs/materialize/js/materialize.min.js","hash":"900e478fb609e18a4f785164fc6f6b0442e8a94e","modified":1558268120575},{"_id":"public/libs/prettify/js/node_prettify.js","hash":"a3b9a2e9b334ffd6fd1b59534b260a270c96c5c1","modified":1558268120575},{"_id":"public/libs/prettify/js/prettify.js","hash":"eec92d79f0678b390289981b01866ea5dd36c090","modified":1558268120576},{"_id":"public/libs/prettify/js/run_prettify.js","hash":"b029f610e84bf11d705927d92b0df4f376973a67","modified":1558268120576},{"_id":"public/libs/materialize/css/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1558268120576},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1558268120576},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558268120576},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1558268120577},{"_id":"public/medias/article/random-thoughts/plates-1.jpg","hash":"58825f9d64c1a6b1fe42fcd0d2b2737e1598e470","modified":1558268120577},{"_id":"public/medias/article/coding/news-spider/10.jpg","hash":"751ab3c82189366002e24744eca61aedf5cb0a7a","modified":1558268120578},{"_id":"public/medias/article/coding/news-spider/12.jpg","hash":"4184f197ece00ee5870a6b080be3702d4851fca8","modified":1558268120578},{"_id":"public/medias/article/coding/news-spider/7.jpg","hash":"db4bec364e473fe6c8601acc266666be970e6300","modified":1558268120578},{"_id":"public/medias/article/coding/news-spider/9.jpg","hash":"cae67f8df4b3876c16c612938e32973fc10423af","modified":1558268120579},{"_id":"public/medias/article/coding/news-spider/11.jpg","hash":"b174f5dce7761d432d5479c42acd631c8b32fb91","modified":1558268120580},{"_id":"public/medias/galleries/reflection/20180919_184602.jpg","hash":"0a1fdde570d7e68e0180e6ddbfd7907a9ca075b0","modified":1558268120834},{"_id":"public/medias/galleries/reflection/20180626_191742.jpg","hash":"66901fff477a8a233cb59102bc5c20fdb96cd175","modified":1558268120927},{"_id":"public/medias/galleries/reflection/20180905_191759.jpg","hash":"7db446a4c0eed1e61da5d944d9634f2ae8d025a1","modified":1558268120927},{"_id":"public/medias/galleries/reflection/20180920_193340.jpg","hash":"5140c526299a808e3f9ec08a51148f92ec16809b","modified":1558268120927},{"_id":"public/medias/galleries/reflection/20180920_193227.jpg","hash":"2110a1c342bcdc4f73346e89defac3acc9f1eaaf","modified":1558268120941},{"_id":"public/medias/galleries/reflection/20180920_193229.jpg","hash":"4bb1487f2b7d48c36f58eab036cfb92c04532ba6","modified":1558268120941},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"c5ff32ccf63106152dac687395d2e3551d9fcadb","modified":1558268120942},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1558268121019},{"_id":"public/medias/article/journal/timg.gif","hash":"b7a71d7ac6ec8ecd8b843a04c20a322cb02b2d64","modified":1558268121390},{"_id":"public/medias/article/journal/2018-summary.jpg","hash":"d6b5ffb0a000ce6d588b0fd59701e4a3fe8b7335","modified":1558268123369}],"Category":[{"name":"编程","_id":"cjvuu4mqk00039kvb563hptg4"},{"name":"日志","_id":"cjvuu4mux001h9kvb896kt8x3"},{"name":"影集","_id":"cjvuu4mva001r9kvbwa2oerza"},{"name":"随想","_id":"cjvuu4mvi001x9kvbhxajaaci"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-12-17T16:37:49.321Z","updated":"2018-12-17T16:37:49.321Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjvuu4mjv00009kvbsdrm5otq","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"关于作者","date":"2018-06-08T06:34:49.000Z","_content":"\n## 关于我\n\n一个爱文字，爱音乐的半文艺前端“程序猿”，坐标西安，主要从事前端开发工作，毕业时间不长，目前还在不断积累成长的阶段。\n\n说到家乡陕西西安，就想多说几句，介绍性的话无需多言，网上太多了......说一个有意思的现象，最近一段时间，西安在\"某音App\"上貌似很火，听朋友介绍，说是火得有点“丧心病狂”，抱着好奇的心态前一阵子用了几天，里面是全国各地朋友在西安“打卡”的短视频，有很多地方和活动，说真的，我自己都没怎么去过，甚至不知道。作为土生土长的西安人，很自豪也很感激，谢谢大家对西安的喜爱和支持！\n\n其实，我更喜欢称西安这座古城为“长安城”，这更符合她在我心中的地位和感觉，古典与现代交融，优雅和市井并存，传统与朋克碰撞，相互促进，相互融合。如果你对西安城的印象还停留在“八百里秦川尘土飞扬”、“面朝黄土背朝天”的阶段，那你可能真的可以抽空来次西安，看一看当年万国来朝的长安城，看看“九天阊阖开宫殿，万国衣冠拜冕旒”的长安城，看一看多年获得“国家卫生城市”、“国家森林城市”称号的长安城，感受一下当年孟郊“春风得意马蹄疾，一日看尽长安花”的快感，欣赏一下长安城“东风夜放花千树。更吹落、星如雨。宝马雕车香满路。凤箫声动，玉壶光转，一夜鱼龙舞”的夜景......\n\n西安也不是那么尽善尽美，她也有需要进步、需要努力、需要创新的地方，也请大家给西安城一些时间，我们一定给大家一个你曾经梦中的“唐长安城”......\n\n在我心里，西安人安土重迁，但又热情好客...希望有机会大家都能来西安转一转。我，在“长安”等着你......\n\n## 联系我\n\n> QQ邮箱：changAncgz@163.com","source":"about/index.md","raw":"---\ntitle: 关于作者\ndate: 2018-06-08 14:34:49\n---\n\n## 关于我\n\n一个爱文字，爱音乐的半文艺前端“程序猿”，坐标西安，主要从事前端开发工作，毕业时间不长，目前还在不断积累成长的阶段。\n\n说到家乡陕西西安，就想多说几句，介绍性的话无需多言，网上太多了......说一个有意思的现象，最近一段时间，西安在\"某音App\"上貌似很火，听朋友介绍，说是火得有点“丧心病狂”，抱着好奇的心态前一阵子用了几天，里面是全国各地朋友在西安“打卡”的短视频，有很多地方和活动，说真的，我自己都没怎么去过，甚至不知道。作为土生土长的西安人，很自豪也很感激，谢谢大家对西安的喜爱和支持！\n\n其实，我更喜欢称西安这座古城为“长安城”，这更符合她在我心中的地位和感觉，古典与现代交融，优雅和市井并存，传统与朋克碰撞，相互促进，相互融合。如果你对西安城的印象还停留在“八百里秦川尘土飞扬”、“面朝黄土背朝天”的阶段，那你可能真的可以抽空来次西安，看一看当年万国来朝的长安城，看看“九天阊阖开宫殿，万国衣冠拜冕旒”的长安城，看一看多年获得“国家卫生城市”、“国家森林城市”称号的长安城，感受一下当年孟郊“春风得意马蹄疾，一日看尽长安花”的快感，欣赏一下长安城“东风夜放花千树。更吹落、星如雨。宝马雕车香满路。凤箫声动，玉壶光转，一夜鱼龙舞”的夜景......\n\n西安也不是那么尽善尽美，她也有需要进步、需要努力、需要创新的地方，也请大家给西安城一些时间，我们一定给大家一个你曾经梦中的“唐长安城”......\n\n在我心里，西安人安土重迁，但又热情好客...希望有机会大家都能来西安转一转。我，在“长安”等着你......\n\n## 联系我\n\n> QQ邮箱：changAncgz@163.com","updated":"2018-12-17T16:37:49.334Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvuu4mu000139kvb7bvg3wur","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>一个爱文字，爱音乐的半文艺前端“程序猿”，坐标西安，主要从事前端开发工作，毕业时间不长，目前还在不断积累成长的阶段。</p>\n<p>说到家乡陕西西安，就想多说几句，介绍性的话无需多言，网上太多了……说一个有意思的现象，最近一段时间，西安在”某音App”上貌似很火，听朋友介绍，说是火得有点“丧心病狂”，抱着好奇的心态前一阵子用了几天，里面是全国各地朋友在西安“打卡”的短视频，有很多地方和活动，说真的，我自己都没怎么去过，甚至不知道。作为土生土长的西安人，很自豪也很感激，谢谢大家对西安的喜爱和支持！</p>\n<p>其实，我更喜欢称西安这座古城为“长安城”，这更符合她在我心中的地位和感觉，古典与现代交融，优雅和市井并存，传统与朋克碰撞，相互促进，相互融合。如果你对西安城的印象还停留在“八百里秦川尘土飞扬”、“面朝黄土背朝天”的阶段，那你可能真的可以抽空来次西安，看一看当年万国来朝的长安城，看看“九天阊阖开宫殿，万国衣冠拜冕旒”的长安城，看一看多年获得“国家卫生城市”、“国家森林城市”称号的长安城，感受一下当年孟郊“春风得意马蹄疾，一日看尽长安花”的快感，欣赏一下长安城“东风夜放花千树。更吹落、星如雨。宝马雕车香满路。凤箫声动，玉壶光转，一夜鱼龙舞”的夜景……</p>\n<p>西安也不是那么尽善尽美，她也有需要进步、需要努力、需要创新的地方，也请大家给西安城一些时间，我们一定给大家一个你曾经梦中的“唐长安城”……</p>\n<p>在我心里，西安人安土重迁，但又热情好客…希望有机会大家都能来西安转一转。我，在“长安”等着你……</p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><blockquote>\n<p>QQ邮箱：<a href=\"mailto:changAncgz@163.com\" target=\"_blank\" rel=\"noopener\">changAncgz@163.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>一个爱文字，爱音乐的半文艺前端“程序猿”，坐标西安，主要从事前端开发工作，毕业时间不长，目前还在不断积累成长的阶段。</p>\n<p>说到家乡陕西西安，就想多说几句，介绍性的话无需多言，网上太多了……说一个有意思的现象，最近一段时间，西安在”某音App”上貌似很火，听朋友介绍，说是火得有点“丧心病狂”，抱着好奇的心态前一阵子用了几天，里面是全国各地朋友在西安“打卡”的短视频，有很多地方和活动，说真的，我自己都没怎么去过，甚至不知道。作为土生土长的西安人，很自豪也很感激，谢谢大家对西安的喜爱和支持！</p>\n<p>其实，我更喜欢称西安这座古城为“长安城”，这更符合她在我心中的地位和感觉，古典与现代交融，优雅和市井并存，传统与朋克碰撞，相互促进，相互融合。如果你对西安城的印象还停留在“八百里秦川尘土飞扬”、“面朝黄土背朝天”的阶段，那你可能真的可以抽空来次西安，看一看当年万国来朝的长安城，看看“九天阊阖开宫殿，万国衣冠拜冕旒”的长安城，看一看多年获得“国家卫生城市”、“国家森林城市”称号的长安城，感受一下当年孟郊“春风得意马蹄疾，一日看尽长安花”的快感，欣赏一下长安城“东风夜放花千树。更吹落、星如雨。宝马雕车香满路。凤箫声动，玉壶光转，一夜鱼龙舞”的夜景……</p>\n<p>西安也不是那么尽善尽美，她也有需要进步、需要努力、需要创新的地方，也请大家给西安城一些时间，我们一定给大家一个你曾经梦中的“唐长安城”……</p>\n<p>在我心里，西安人安土重迁，但又热情好客…希望有机会大家都能来西安转一转。我，在“长安”等着你……</p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><blockquote>\n<p>QQ邮箱：<a href=\"mailto:changAncgz@163.com\" target=\"_blank\" rel=\"noopener\">changAncgz@163.com</a></p>\n</blockquote>\n"},{"title":"文章分类","date":"2018-06-08T06:41:06.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-06-08 14:41:06\ntype: \"categories\"\n---","updated":"2018-12-17T16:37:49.335Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjvuu4muf00159kvbzbai8cvs","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章列表-编程","date":"2018-06-11T08:40:00.000Z","layout":"codings","_content":"","source":"codings/index.md","raw":"---\ntitle: 文章列表-编程\ndate: 2018-06-11 16:40:00\nlayout: codings\n---\n","updated":"2018-12-17T16:37:49.337Z","path":"codings/index.html","comments":1,"_id":"cjvuu4mul00189kvb8m17npyn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"影集","date":"2018-09-26T01:46:22.000Z","layout":"galleries","_content":"","source":"galleries/index.md","raw":"---\ntitle: 影集\ndate: 2018-09-26 09:46:22\nlayout: \"galleries\"\n---\n","updated":"2018-12-17T16:37:49.338Z","path":"galleries/index.html","comments":1,"_id":"cjvuu4mur001c9kvbi1g5gcc5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章列表-日志","date":"2018-06-11T08:40:00.000Z","layout":"journals","_content":"","source":"journals/index.md","raw":"---\ntitle: 文章列表-日志\ndate: 2018-06-11 16:40:00\nlayout: \"journals\"\n---\n","updated":"2018-12-17T16:37:49.340Z","path":"journals/index.html","comments":1,"_id":"cjvuu4muw001g9kvbtq4dme2r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章列表-随想","date":"2018-06-11T08:40:00.000Z","layout":"random-thoughts","_content":"","source":"random-thoughts/index.md","raw":"---\ntitle: 文章列表-随想\ndate: 2018-06-11 16:40:00\nlayout: random-thoughts\n---\n","updated":"2018-12-17T16:37:49.342Z","path":"random-thoughts/index.html","comments":1,"_id":"cjvuu4mv1001m9kvbgcfw84yb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签页","date":"2018-06-11T03:29:22.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签页\ndate: 2018-06-11 11:29:22\nlayout: \"tags\"\n---\n","updated":"2018-12-17T16:37:49.343Z","path":"tags/index.html","comments":1,"_id":"cjvuu4mv5001o9kvb9d255lob","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ES6 - Generator函数","date":"2019-03-28T12:13:32.000Z","img":"/medias/article/featureimages/ES6.jpg","_content":"\n### 一、什么是Generator函数\n`Generator`函数是ES6标准中提出的一种异步编程的解决方案。这种函数与普通函数最大的区别在于它可以暂停执行，又可以从暂停的位置恢复继续执行。\n\n从语法上看，`Generator`函数就是一个状态机，封装了许多内部状态。\n\n从实质上看，`Generator`函数就是一个遍历器对象生成器。（关于遍历器对象，可以参考阮一峰老师的[这篇文章](http://es6.ruanyifeng.com/#docs/iterator)）`Generator`函数返回一个遍历器对象，遍历这个对象，就可以依次得到函数内部的每一个状态。\n\n\n### 二、基本语法\n#### 1、定义Generator函数\n定义一个Generator函数和定义一个普通函数的区别在于：\n * function关键字和函数名之间有一个 `*`（星号）。\n * 函数内部使用`yield`来定义每一个函数内部的状态。\n * 如果函数内部有`return`语句，那么他就是函数内部的最后一个状态。\n\n来看一个简单的例子：\n```\n// 定义\nfunction* sayHello() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n// 调用\n// 注意，hw获取到的值是一个遍历器对象\nlet g = sayHello();\n```\n上面的例子，定义了一个名为`sayHello`的Generator函数，它内部有两个`yield`表达式和一个`return`表达式。所以，该函数内部有三个状态：`hello`，`world` 和 `return`语句（结束执行）。最后，调用这个函数，得到一个遍历器对象并赋值给变量`g`。\n\nGenerator函数的调用方法与普通函数完全一样，`函数名()`。不同的是：\n * 函数调用后，内部代码（从第一行开始）都不会立即执行。\n * 函数调用后会有一个返回值，这个值是一个指向内部状态的指针对象，实质就是一个包含函数内部状态的遍历器对象。\n\nGenerator函数调用后不会立即执行，那么，我们如何让它开始执行内部的代码呢？又如何获取它内部的每一个状态呢？此时，我们必须调用返回的生成器对象的.next()方法，才能开始代码的执行，并且使得指针移向下一个状态。\n\n以上面的例子为例：\n```\ng.next();\n// { value: 'hello', done: false }\ng.next();\n// { value: 'world', done: false }\ng.next();\n// { value: 'ending', done: true }\ng.next();\n// { value: undefined, done: true }\n```\n上面的代码中，一共调用了四次`g`这个遍历器对象的`.next()`方法。第一次调用，`sayHello`这个Generator函数开始执行，直到遇到第一个`yield`表达式就会暂停执行。`.next()`方法会返回一个对象，它的`value`属性就是当前`yield`表达式的值`hello`，`done`属性的值`false`，表示遍历还没有结束。\n\n第二次再调用`.next()`，就会执行到第二个`yield`表达式处，并暂停执行，返回对应的对象。\n\n第三次调用`.next()`，函数执行到最后的`return`语句，此时标志着遍历器对象`g`遍历结束，所以返回的对象中`value`属性值就是`return`后面所跟的值`ending`，`done`属性值为`true`，表示遍历已经结束。\n\n第四次以及后面在调用.next()方法，返回的都会是`{value: undefined, done: true }`。\n\n\n#### 2、yield表达式\n由Generator函数返回的遍历器对象，只有调用`.next()`方法才会遍历到下一个内部状态，所以这其实是提供了一种可以暂停执行的函数，`yield`表达式就是暂停标志。\n\n遍历器对象的`.next()`方法的运行逻辑如下。\n 1. 遇到`yield`表达式，就暂停执行后面的操作，并将紧跟在`yield`后面的那个表达式的值，作为返回的对象的`value`属性值。\n 2. 下一次调用`.next()`方法时，再继续往下执行，直到遇到下一个`yield`表达式。\n 3. 如果没有再遇到新的`yield`表达式，就一直运行到函数结束，直到`return`语句为止，并将`return`语句后面的表达式的值，作为返回的对象的`value`属性值。\n 4. 如果该函数没有`return`语句，则返回的对象的`value`属性值为`undefined`。\n\n**值得注意的是：**\n\n 1. **`yield`关键字只能出现在Generator函数中，出现在别的函数中会报错。**\n```\n  // 出现在普通函数中，报错\n  (function () {\n    yield 'hello';\n  })()\n\n  // forEach不是Generator函数，报错\n  [1, 2, 3, 4, 5].forEach(val => {\n    yield val\n  });\n```\n\n 2. **`yield`关键字后面跟的表达式，是惰性求值的。** 只有当调用`.next()`方法、内部状态暂停到当前`yield`时，才会计算其后面跟的表达式的值。这等于为JavaScript提供了手动的“惰性求值”的语法功能。\n```\nfunction* step() {\n  yield 'step1';\n\n  // 下面的yield后面的表达式不会立即求值，\n  // 只有暂停到这一行时，才会计算表达式的值。\n  yield 'step' + 2;\n\n  yield 'setp3';\n  return 'end';\n}\n```\n\n 3. **`yield`表达式本身是没有返回值的，或者说它的返回值为`undefined`**。使用.next()传参可以为其设置返回值。（后面会讲到）\n```\nfunction* gen() {\n  for (let i = 0; i < 5; i++) {\n    let res = yield;  // yield表达式本身没有返回值\n    console.log(res); // undefined\n  }\n}\nlet g = gen();\ng.next();   // {value: 0, done: false}\ng.next();   // {value: 1, done: false}\ng.next();   // {value: 2, done: false}\n```\n\n**yield与return的异同：**\n\n相同点:\n * 两者都能返回跟在其后面的表达式的值。\n\n不同点：\n * yield表达式只是暂停函数向后执行，return是直接结束函数执行。\n * yield表达式可以出现多次，后面还可以有代码。return只能出现一次，后面的代码不会执行，在一些情况下还会报错。\n * 正常函数只能返回一个值，因为只能执行一次return。Generator函数可以返回一系列的值，因为可以有任意多个yield。\n\n\n#### 3、.next()方法传参\n前面我们说到过，`yield`表达式自身没有返回值，或者说返回值永远是`undefined`。但是，我们可以通过给`.next()`方法传入一个参数，来设置**上一个（是上一个）**`yield`表达式返回值。\n\n来看一个例子：\n```\nfunction* conoleNum() {\n  console.log('Started');\n  console.log(`data: ${yield}`);\n  console.log(`data: ${yield}`);\n  return 'Ending';\n}\nlet g = conoleNum();\n\ng.next();      // 控制台输出：'Started'\n\ng.next('a');   // 控制台输出：'data: a'\n// 不传入参数'a'，就会输出'data: undefined'\n\ng.next('b');   // 控制台输出：'data: b'\n// 不传入参数'a'，就会输出'data: undefined'\n```\n\n上面的例子，需要强调一个不易理解的地方。\n\n第一次调用`.next()`，此时函数暂停在代码第三行的`yield`表达式处。记得吗？`yield`会暂停函数执行，**此时打印它的`console.log()`，也就是代码第三行的console，由于暂停并没有被执行，所以不会打印出结果**，只输出了代码第二行的'Started'。\n\n当第二次调用`.next()`方法时，传入参数`'a'`，函数暂停在代码第四行的`yield`语句处。此时参数`'a'`会被当做**上一个`yield`表达式**的返回值，也就是代码第三行的`yiled`表达式的返回值，所以此时控制台输出`'data: a'`。而代码第四行的`console.log()`由于暂停，没有被输出。\n\n第三次调用，同理。所以输出`'data: b'`。\n\n\n#### 4、Generator.prototype.throw()\nGenerator函数返回的遍历器对象，都有一个`.throw()`方法，**可以在函数体外抛出错误，然后在Generator函数体内捕获**。\n```\nfunction* gen() {\n  try {\n    yield;\n  } catch (e) {\n    console.log('内部捕获', e);\n  }\n};\n\nvar g = gen();\n// 下面执行一次.next()\n// 是为了让gen函数体执行进入try语句中的yield处\n// 这样抛出错误，gen函数内部的catch语句才能捕获错误\ng.next();\n\ntry {\n  g.throw('a');\n  g.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n```\n上面例子中，遍历器对象`g`在`gen`函数体外连续抛出两个错误。第一个错误被`gen`函数体内的`catch`语句捕获。`g`第二次抛出错误，由于`gen`函数内部的`catch`语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就会被抛出`gen`函数体，被函数体外的`catch`语句捕获。\n\n**值得注意的是：**\n * 如果Generator函数内部没有部署`try...catch`代码块，那么遍历器对象的`throw`方法抛出的错误，将被外部`try...catch`代码块捕获。\n * 如果Generator函数内部和外部都没有部署`try...catch`代码块，那么程序将报错，直接中断执行。\n\n**遍历器对象的`throw`方法被捕获以后，会附带执行一次`.next()`方法，代码执行会暂停到下一条`yield`表达式处**。看下面这个例子：\n```\nfunction* gen(){\n  try {\n    yield console.log('a');\n  } catch (e) {\n    console.log(e);   // 'Error'\n  }\n  yield console.log('b');\n  yield console.log('c');\n}\nvar g = gen();\n\ng.next();   // 控制台输出：'a'\n\ng.throw('Error');  // 控制台输出：'b'\n// throw的错误被内部catch语句捕获，\n// 会自动在执行一次g.next()\n\ng.next();   // 控制台输出：'c'\n```\n\n\n#### 5、Generator.prototype.return()\nGenerator函数返回的遍历器对象，还有一个`.return()`方法，可以返回给定的值，并且直接结束对遍历器对象的遍历。\n```\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar g = gen();\n\ng.next();        // { value: 1, done: false }\n\n// 提前结束对g的遍历。尽管yield还没有执行完\n// 此时done属性值为true，说明遍历结束\ng.return('foo'); // { value: \"foo\", done: true }\n\ng.next();        // { value: undefined, done: true }\n```\n\n如果`.return()`方法调用时，不提供参数，则返回值的`value`属性为`undefined`。\n\n\n#### 6、yield* 表达式\n`yield*` 用来在一个Generator函数里面执行另一个Generator函数。\n\n如果在一个Generator函数内部，直接调用另一个Generator函数，默认情况下是没有效果的。\n```\nfunction* gen1() {\n  yield 'a';\n  yield 'b';\n}\nfunction* gen2() {\n  yield 'x';\n  // 直接调用gen1()\n  gen1();\n  yield 'y';\n}\n// 遍历器对象可以使用for...of遍历所有状态\nfor (let v of gen2()){\n  只输出了gen1的状态\n  console.log(v);   // 'x' 'y'\n}\n```\n上面的例子中，`gen1`和`gen2`都是Generator函数，在`gen2`里面直接调用`gen1`，是不会有效果的。\n\n这个就需要用到 `yield*` 表达式。\n```\nfunction* gen1() {\n  yield 'a';\n  yield 'b';\n}\nfunction* gen2() {\n  yield 'x';\n  // 用 yield* 调用gen1()\n  yield* gen1();\n  yield 'y';\n}\n\nfor (let v of gen2()){\n  输出了gen1、gen2的状态\n  console.log(v);   // 'x' 'a' 'b' 'y'\n}\n```\n\n### 小结\n本文主要讲解Generator函数的基本语法和一些细节，Generator函数的定义、`yield`表达式、`.next()`方法及传参、`.throw()`方法、`.return()`方法以及 `yield*` 表达式。\n\n文章开头讲到，Generator函数时ES6提出的异步编程的一种解决方案。在实际应用中，**一般在`yield`关键字后面会跟随一个异步操作，当异步操作成功返回后调用`.next()`方法，将异步流程交给下一个yield表达式。**具体关于Generator函数的异步应用，大家可以参考阮一峰老师的[这篇文章](http://es6.ruanyifeng.com/#docs/generator-async)，或参考其他网上资料，继续深入学习。","source":"_posts/ES6-Generator.md","raw":"---\ntitle: ES6 - Generator函数\ndate: 2019-03-28 20:13:32\ncategories: 编程\ntags:\n- ES6\n- Generator函数\nimg: /medias/article/featureimages/ES6.jpg\n---\n\n### 一、什么是Generator函数\n`Generator`函数是ES6标准中提出的一种异步编程的解决方案。这种函数与普通函数最大的区别在于它可以暂停执行，又可以从暂停的位置恢复继续执行。\n\n从语法上看，`Generator`函数就是一个状态机，封装了许多内部状态。\n\n从实质上看，`Generator`函数就是一个遍历器对象生成器。（关于遍历器对象，可以参考阮一峰老师的[这篇文章](http://es6.ruanyifeng.com/#docs/iterator)）`Generator`函数返回一个遍历器对象，遍历这个对象，就可以依次得到函数内部的每一个状态。\n\n\n### 二、基本语法\n#### 1、定义Generator函数\n定义一个Generator函数和定义一个普通函数的区别在于：\n * function关键字和函数名之间有一个 `*`（星号）。\n * 函数内部使用`yield`来定义每一个函数内部的状态。\n * 如果函数内部有`return`语句，那么他就是函数内部的最后一个状态。\n\n来看一个简单的例子：\n```\n// 定义\nfunction* sayHello() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n// 调用\n// 注意，hw获取到的值是一个遍历器对象\nlet g = sayHello();\n```\n上面的例子，定义了一个名为`sayHello`的Generator函数，它内部有两个`yield`表达式和一个`return`表达式。所以，该函数内部有三个状态：`hello`，`world` 和 `return`语句（结束执行）。最后，调用这个函数，得到一个遍历器对象并赋值给变量`g`。\n\nGenerator函数的调用方法与普通函数完全一样，`函数名()`。不同的是：\n * 函数调用后，内部代码（从第一行开始）都不会立即执行。\n * 函数调用后会有一个返回值，这个值是一个指向内部状态的指针对象，实质就是一个包含函数内部状态的遍历器对象。\n\nGenerator函数调用后不会立即执行，那么，我们如何让它开始执行内部的代码呢？又如何获取它内部的每一个状态呢？此时，我们必须调用返回的生成器对象的.next()方法，才能开始代码的执行，并且使得指针移向下一个状态。\n\n以上面的例子为例：\n```\ng.next();\n// { value: 'hello', done: false }\ng.next();\n// { value: 'world', done: false }\ng.next();\n// { value: 'ending', done: true }\ng.next();\n// { value: undefined, done: true }\n```\n上面的代码中，一共调用了四次`g`这个遍历器对象的`.next()`方法。第一次调用，`sayHello`这个Generator函数开始执行，直到遇到第一个`yield`表达式就会暂停执行。`.next()`方法会返回一个对象，它的`value`属性就是当前`yield`表达式的值`hello`，`done`属性的值`false`，表示遍历还没有结束。\n\n第二次再调用`.next()`，就会执行到第二个`yield`表达式处，并暂停执行，返回对应的对象。\n\n第三次调用`.next()`，函数执行到最后的`return`语句，此时标志着遍历器对象`g`遍历结束，所以返回的对象中`value`属性值就是`return`后面所跟的值`ending`，`done`属性值为`true`，表示遍历已经结束。\n\n第四次以及后面在调用.next()方法，返回的都会是`{value: undefined, done: true }`。\n\n\n#### 2、yield表达式\n由Generator函数返回的遍历器对象，只有调用`.next()`方法才会遍历到下一个内部状态，所以这其实是提供了一种可以暂停执行的函数，`yield`表达式就是暂停标志。\n\n遍历器对象的`.next()`方法的运行逻辑如下。\n 1. 遇到`yield`表达式，就暂停执行后面的操作，并将紧跟在`yield`后面的那个表达式的值，作为返回的对象的`value`属性值。\n 2. 下一次调用`.next()`方法时，再继续往下执行，直到遇到下一个`yield`表达式。\n 3. 如果没有再遇到新的`yield`表达式，就一直运行到函数结束，直到`return`语句为止，并将`return`语句后面的表达式的值，作为返回的对象的`value`属性值。\n 4. 如果该函数没有`return`语句，则返回的对象的`value`属性值为`undefined`。\n\n**值得注意的是：**\n\n 1. **`yield`关键字只能出现在Generator函数中，出现在别的函数中会报错。**\n```\n  // 出现在普通函数中，报错\n  (function () {\n    yield 'hello';\n  })()\n\n  // forEach不是Generator函数，报错\n  [1, 2, 3, 4, 5].forEach(val => {\n    yield val\n  });\n```\n\n 2. **`yield`关键字后面跟的表达式，是惰性求值的。** 只有当调用`.next()`方法、内部状态暂停到当前`yield`时，才会计算其后面跟的表达式的值。这等于为JavaScript提供了手动的“惰性求值”的语法功能。\n```\nfunction* step() {\n  yield 'step1';\n\n  // 下面的yield后面的表达式不会立即求值，\n  // 只有暂停到这一行时，才会计算表达式的值。\n  yield 'step' + 2;\n\n  yield 'setp3';\n  return 'end';\n}\n```\n\n 3. **`yield`表达式本身是没有返回值的，或者说它的返回值为`undefined`**。使用.next()传参可以为其设置返回值。（后面会讲到）\n```\nfunction* gen() {\n  for (let i = 0; i < 5; i++) {\n    let res = yield;  // yield表达式本身没有返回值\n    console.log(res); // undefined\n  }\n}\nlet g = gen();\ng.next();   // {value: 0, done: false}\ng.next();   // {value: 1, done: false}\ng.next();   // {value: 2, done: false}\n```\n\n**yield与return的异同：**\n\n相同点:\n * 两者都能返回跟在其后面的表达式的值。\n\n不同点：\n * yield表达式只是暂停函数向后执行，return是直接结束函数执行。\n * yield表达式可以出现多次，后面还可以有代码。return只能出现一次，后面的代码不会执行，在一些情况下还会报错。\n * 正常函数只能返回一个值，因为只能执行一次return。Generator函数可以返回一系列的值，因为可以有任意多个yield。\n\n\n#### 3、.next()方法传参\n前面我们说到过，`yield`表达式自身没有返回值，或者说返回值永远是`undefined`。但是，我们可以通过给`.next()`方法传入一个参数，来设置**上一个（是上一个）**`yield`表达式返回值。\n\n来看一个例子：\n```\nfunction* conoleNum() {\n  console.log('Started');\n  console.log(`data: ${yield}`);\n  console.log(`data: ${yield}`);\n  return 'Ending';\n}\nlet g = conoleNum();\n\ng.next();      // 控制台输出：'Started'\n\ng.next('a');   // 控制台输出：'data: a'\n// 不传入参数'a'，就会输出'data: undefined'\n\ng.next('b');   // 控制台输出：'data: b'\n// 不传入参数'a'，就会输出'data: undefined'\n```\n\n上面的例子，需要强调一个不易理解的地方。\n\n第一次调用`.next()`，此时函数暂停在代码第三行的`yield`表达式处。记得吗？`yield`会暂停函数执行，**此时打印它的`console.log()`，也就是代码第三行的console，由于暂停并没有被执行，所以不会打印出结果**，只输出了代码第二行的'Started'。\n\n当第二次调用`.next()`方法时，传入参数`'a'`，函数暂停在代码第四行的`yield`语句处。此时参数`'a'`会被当做**上一个`yield`表达式**的返回值，也就是代码第三行的`yiled`表达式的返回值，所以此时控制台输出`'data: a'`。而代码第四行的`console.log()`由于暂停，没有被输出。\n\n第三次调用，同理。所以输出`'data: b'`。\n\n\n#### 4、Generator.prototype.throw()\nGenerator函数返回的遍历器对象，都有一个`.throw()`方法，**可以在函数体外抛出错误，然后在Generator函数体内捕获**。\n```\nfunction* gen() {\n  try {\n    yield;\n  } catch (e) {\n    console.log('内部捕获', e);\n  }\n};\n\nvar g = gen();\n// 下面执行一次.next()\n// 是为了让gen函数体执行进入try语句中的yield处\n// 这样抛出错误，gen函数内部的catch语句才能捕获错误\ng.next();\n\ntry {\n  g.throw('a');\n  g.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n```\n上面例子中，遍历器对象`g`在`gen`函数体外连续抛出两个错误。第一个错误被`gen`函数体内的`catch`语句捕获。`g`第二次抛出错误，由于`gen`函数内部的`catch`语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就会被抛出`gen`函数体，被函数体外的`catch`语句捕获。\n\n**值得注意的是：**\n * 如果Generator函数内部没有部署`try...catch`代码块，那么遍历器对象的`throw`方法抛出的错误，将被外部`try...catch`代码块捕获。\n * 如果Generator函数内部和外部都没有部署`try...catch`代码块，那么程序将报错，直接中断执行。\n\n**遍历器对象的`throw`方法被捕获以后，会附带执行一次`.next()`方法，代码执行会暂停到下一条`yield`表达式处**。看下面这个例子：\n```\nfunction* gen(){\n  try {\n    yield console.log('a');\n  } catch (e) {\n    console.log(e);   // 'Error'\n  }\n  yield console.log('b');\n  yield console.log('c');\n}\nvar g = gen();\n\ng.next();   // 控制台输出：'a'\n\ng.throw('Error');  // 控制台输出：'b'\n// throw的错误被内部catch语句捕获，\n// 会自动在执行一次g.next()\n\ng.next();   // 控制台输出：'c'\n```\n\n\n#### 5、Generator.prototype.return()\nGenerator函数返回的遍历器对象，还有一个`.return()`方法，可以返回给定的值，并且直接结束对遍历器对象的遍历。\n```\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar g = gen();\n\ng.next();        // { value: 1, done: false }\n\n// 提前结束对g的遍历。尽管yield还没有执行完\n// 此时done属性值为true，说明遍历结束\ng.return('foo'); // { value: \"foo\", done: true }\n\ng.next();        // { value: undefined, done: true }\n```\n\n如果`.return()`方法调用时，不提供参数，则返回值的`value`属性为`undefined`。\n\n\n#### 6、yield* 表达式\n`yield*` 用来在一个Generator函数里面执行另一个Generator函数。\n\n如果在一个Generator函数内部，直接调用另一个Generator函数，默认情况下是没有效果的。\n```\nfunction* gen1() {\n  yield 'a';\n  yield 'b';\n}\nfunction* gen2() {\n  yield 'x';\n  // 直接调用gen1()\n  gen1();\n  yield 'y';\n}\n// 遍历器对象可以使用for...of遍历所有状态\nfor (let v of gen2()){\n  只输出了gen1的状态\n  console.log(v);   // 'x' 'y'\n}\n```\n上面的例子中，`gen1`和`gen2`都是Generator函数，在`gen2`里面直接调用`gen1`，是不会有效果的。\n\n这个就需要用到 `yield*` 表达式。\n```\nfunction* gen1() {\n  yield 'a';\n  yield 'b';\n}\nfunction* gen2() {\n  yield 'x';\n  // 用 yield* 调用gen1()\n  yield* gen1();\n  yield 'y';\n}\n\nfor (let v of gen2()){\n  输出了gen1、gen2的状态\n  console.log(v);   // 'x' 'a' 'b' 'y'\n}\n```\n\n### 小结\n本文主要讲解Generator函数的基本语法和一些细节，Generator函数的定义、`yield`表达式、`.next()`方法及传参、`.throw()`方法、`.return()`方法以及 `yield*` 表达式。\n\n文章开头讲到，Generator函数时ES6提出的异步编程的一种解决方案。在实际应用中，**一般在`yield`关键字后面会跟随一个异步操作，当异步操作成功返回后调用`.next()`方法，将异步流程交给下一个yield表达式。**具体关于Generator函数的异步应用，大家可以参考阮一峰老师的[这篇文章](http://es6.ruanyifeng.com/#docs/generator-async)，或参考其他网上资料，继续深入学习。","slug":"ES6-Generator","published":1,"updated":"2019-05-19T11:30:16.964Z","_id":"cjvuu4mq500019kvbceipz2vn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、什么是Generator函数\"><a href=\"#一、什么是Generator函数\" class=\"headerlink\" title=\"一、什么是Generator函数\"></a>一、什么是Generator函数</h3><p><code>Generator</code>函数是ES6标准中提出的一种异步编程的解决方案。这种函数与普通函数最大的区别在于它可以暂停执行，又可以从暂停的位置恢复继续执行。</p>\n<p>从语法上看，<code>Generator</code>函数就是一个状态机，封装了许多内部状态。</p>\n<p>从实质上看，<code>Generator</code>函数就是一个遍历器对象生成器。（关于遍历器对象，可以参考阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"noopener\">这篇文章</a>）<code>Generator</code>函数返回一个遍历器对象，遍历这个对象，就可以依次得到函数内部的每一个状态。</p>\n<h3 id=\"二、基本语法\"><a href=\"#二、基本语法\" class=\"headerlink\" title=\"二、基本语法\"></a>二、基本语法</h3><h4 id=\"1、定义Generator函数\"><a href=\"#1、定义Generator函数\" class=\"headerlink\" title=\"1、定义Generator函数\"></a>1、定义Generator函数</h4><p>定义一个Generator函数和定义一个普通函数的区别在于：</p>\n<ul>\n<li>function关键字和函数名之间有一个 <code>*</code>（星号）。</li>\n<li>函数内部使用<code>yield</code>来定义每一个函数内部的状态。</li>\n<li>如果函数内部有<code>return</code>语句，那么他就是函数内部的最后一个状态。</li>\n</ul>\n<p>来看一个简单的例子：</p>\n<pre><code>// 定义\nfunction* sayHello() {\n  yield &#39;hello&#39;;\n  yield &#39;world&#39;;\n  return &#39;ending&#39;;\n}\n// 调用\n// 注意，hw获取到的值是一个遍历器对象\nlet g = sayHello();\n</code></pre><p>上面的例子，定义了一个名为<code>sayHello</code>的Generator函数，它内部有两个<code>yield</code>表达式和一个<code>return</code>表达式。所以，该函数内部有三个状态：<code>hello</code>，<code>world</code> 和 <code>return</code>语句（结束执行）。最后，调用这个函数，得到一个遍历器对象并赋值给变量<code>g</code>。</p>\n<p>Generator函数的调用方法与普通函数完全一样，<code>函数名()</code>。不同的是：</p>\n<ul>\n<li>函数调用后，内部代码（从第一行开始）都不会立即执行。</li>\n<li>函数调用后会有一个返回值，这个值是一个指向内部状态的指针对象，实质就是一个包含函数内部状态的遍历器对象。</li>\n</ul>\n<p>Generator函数调用后不会立即执行，那么，我们如何让它开始执行内部的代码呢？又如何获取它内部的每一个状态呢？此时，我们必须调用返回的生成器对象的.next()方法，才能开始代码的执行，并且使得指针移向下一个状态。</p>\n<p>以上面的例子为例：</p>\n<pre><code>g.next();\n// { value: &#39;hello&#39;, done: false }\ng.next();\n// { value: &#39;world&#39;, done: false }\ng.next();\n// { value: &#39;ending&#39;, done: true }\ng.next();\n// { value: undefined, done: true }\n</code></pre><p>上面的代码中，一共调用了四次<code>g</code>这个遍历器对象的<code>.next()</code>方法。第一次调用，<code>sayHello</code>这个Generator函数开始执行，直到遇到第一个<code>yield</code>表达式就会暂停执行。<code>.next()</code>方法会返回一个对象，它的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>hello</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>\n<p>第二次再调用<code>.next()</code>，就会执行到第二个<code>yield</code>表达式处，并暂停执行，返回对应的对象。</p>\n<p>第三次调用<code>.next()</code>，函数执行到最后的<code>return</code>语句，此时标志着遍历器对象<code>g</code>遍历结束，所以返回的对象中<code>value</code>属性值就是<code>return</code>后面所跟的值<code>ending</code>，<code>done</code>属性值为<code>true</code>，表示遍历已经结束。</p>\n<p>第四次以及后面在调用.next()方法，返回的都会是<code>{value: undefined, done: true }</code>。</p>\n<h4 id=\"2、yield表达式\"><a href=\"#2、yield表达式\" class=\"headerlink\" title=\"2、yield表达式\"></a>2、yield表达式</h4><p>由Generator函数返回的遍历器对象，只有调用<code>.next()</code>方法才会遍历到下一个内部状态，所以这其实是提供了一种可以暂停执行的函数，<code>yield</code>表达式就是暂停标志。</p>\n<p>遍历器对象的<code>.next()</code>方法的运行逻辑如下。</p>\n<ol>\n<li>遇到<code>yield</code>表达式，就暂停执行后面的操作，并将紧跟在<code>yield</code>后面的那个表达式的值，作为返回的对象的<code>value</code>属性值。</li>\n<li>下一次调用<code>.next()</code>方法时，再继续往下执行，直到遇到下一个<code>yield</code>表达式。</li>\n<li>如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止，并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</li>\n<li>如果该函数没有<code>return</code>语句，则返回的对象的<code>value</code>属性值为<code>undefined</code>。</li>\n</ol>\n<p><strong>值得注意的是：</strong></p>\n<ol>\n<li><p><strong><code>yield</code>关键字只能出现在Generator函数中，出现在别的函数中会报错。</strong></p>\n<pre><code>// 出现在普通函数中，报错\n(function () {\nyield &#39;hello&#39;;\n})()\n\n// forEach不是Generator函数，报错\n[1, 2, 3, 4, 5].forEach(val =&gt; {\nyield val\n});\n</code></pre></li>\n<li><p><strong><code>yield</code>关键字后面跟的表达式，是惰性求值的。</strong> 只有当调用<code>.next()</code>方法、内部状态暂停到当前<code>yield</code>时，才会计算其后面跟的表达式的值。这等于为JavaScript提供了手动的“惰性求值”的语法功能。</p>\n<pre><code>function* step() {\nyield &#39;step1&#39;;\n\n// 下面的yield后面的表达式不会立即求值，\n// 只有暂停到这一行时，才会计算表达式的值。\nyield &#39;step&#39; + 2;\n\nyield &#39;setp3&#39;;\nreturn &#39;end&#39;;\n}\n</code></pre></li>\n<li><p><strong><code>yield</code>表达式本身是没有返回值的，或者说它的返回值为<code>undefined</code></strong>。使用.next()传参可以为其设置返回值。（后面会讲到）</p>\n<pre><code>function* gen() {\nfor (let i = 0; i &lt; 5; i++) {\nlet res = yield;  // yield表达式本身没有返回值\nconsole.log(res); // undefined\n}\n}\nlet g = gen();\ng.next();   // {value: 0, done: false}\ng.next();   // {value: 1, done: false}\ng.next();   // {value: 2, done: false}\n</code></pre></li>\n</ol>\n<p><strong>yield与return的异同：</strong></p>\n<p>相同点:</p>\n<ul>\n<li>两者都能返回跟在其后面的表达式的值。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>yield表达式只是暂停函数向后执行，return是直接结束函数执行。</li>\n<li>yield表达式可以出现多次，后面还可以有代码。return只能出现一次，后面的代码不会执行，在一些情况下还会报错。</li>\n<li>正常函数只能返回一个值，因为只能执行一次return。Generator函数可以返回一系列的值，因为可以有任意多个yield。</li>\n</ul>\n<h4 id=\"3、-next-方法传参\"><a href=\"#3、-next-方法传参\" class=\"headerlink\" title=\"3、.next()方法传参\"></a>3、.next()方法传参</h4><p>前面我们说到过，<code>yield</code>表达式自身没有返回值，或者说返回值永远是<code>undefined</code>。但是，我们可以通过给<code>.next()</code>方法传入一个参数，来设置<strong>上一个（是上一个）</strong><code>yield</code>表达式返回值。</p>\n<p>来看一个例子：</p>\n<pre><code>function* conoleNum() {\n  console.log(&#39;Started&#39;);\n  console.log(`data: ${yield}`);\n  console.log(`data: ${yield}`);\n  return &#39;Ending&#39;;\n}\nlet g = conoleNum();\n\ng.next();      // 控制台输出：&#39;Started&#39;\n\ng.next(&#39;a&#39;);   // 控制台输出：&#39;data: a&#39;\n// 不传入参数&#39;a&#39;，就会输出&#39;data: undefined&#39;\n\ng.next(&#39;b&#39;);   // 控制台输出：&#39;data: b&#39;\n// 不传入参数&#39;a&#39;，就会输出&#39;data: undefined&#39;\n</code></pre><p>上面的例子，需要强调一个不易理解的地方。</p>\n<p>第一次调用<code>.next()</code>，此时函数暂停在代码第三行的<code>yield</code>表达式处。记得吗？<code>yield</code>会暂停函数执行，<strong>此时打印它的<code>console.log()</code>，也就是代码第三行的console，由于暂停并没有被执行，所以不会打印出结果</strong>，只输出了代码第二行的’Started’。</p>\n<p>当第二次调用<code>.next()</code>方法时，传入参数<code>&#39;a&#39;</code>，函数暂停在代码第四行的<code>yield</code>语句处。此时参数<code>&#39;a&#39;</code>会被当做<strong>上一个<code>yield</code>表达式</strong>的返回值，也就是代码第三行的<code>yiled</code>表达式的返回值，所以此时控制台输出<code>&#39;data: a&#39;</code>。而代码第四行的<code>console.log()</code>由于暂停，没有被输出。</p>\n<p>第三次调用，同理。所以输出<code>&#39;data: b&#39;</code>。</p>\n<h4 id=\"4、Generator-prototype-throw\"><a href=\"#4、Generator-prototype-throw\" class=\"headerlink\" title=\"4、Generator.prototype.throw()\"></a>4、Generator.prototype.throw()</h4><p>Generator函数返回的遍历器对象，都有一个<code>.throw()</code>方法，<strong>可以在函数体外抛出错误，然后在Generator函数体内捕获</strong>。</p>\n<pre><code>function* gen() {\n  try {\n    yield;\n  } catch (e) {\n    console.log(&#39;内部捕获&#39;, e);\n  }\n};\n\nvar g = gen();\n// 下面执行一次.next()\n// 是为了让gen函数体执行进入try语句中的yield处\n// 这样抛出错误，gen函数内部的catch语句才能捕获错误\ng.next();\n\ntry {\n  g.throw(&#39;a&#39;);\n  g.throw(&#39;b&#39;);\n} catch (e) {\n  console.log(&#39;外部捕获&#39;, e);\n}\n</code></pre><p>上面例子中，遍历器对象<code>g</code>在<code>gen</code>函数体外连续抛出两个错误。第一个错误被<code>gen</code>函数体内的<code>catch</code>语句捕获。<code>g</code>第二次抛出错误，由于<code>gen</code>函数内部的<code>catch</code>语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就会被抛出<code>gen</code>函数体，被函数体外的<code>catch</code>语句捕获。</p>\n<p><strong>值得注意的是：</strong></p>\n<ul>\n<li>如果Generator函数内部没有部署<code>try...catch</code>代码块，那么遍历器对象的<code>throw</code>方法抛出的错误，将被外部<code>try...catch</code>代码块捕获。</li>\n<li>如果Generator函数内部和外部都没有部署<code>try...catch</code>代码块，那么程序将报错，直接中断执行。</li>\n</ul>\n<p><strong>遍历器对象的<code>throw</code>方法被捕获以后，会附带执行一次<code>.next()</code>方法，代码执行会暂停到下一条<code>yield</code>表达式处</strong>。看下面这个例子：</p>\n<pre><code>function* gen(){\n  try {\n    yield console.log(&#39;a&#39;);\n  } catch (e) {\n    console.log(e);   // &#39;Error&#39;\n  }\n  yield console.log(&#39;b&#39;);\n  yield console.log(&#39;c&#39;);\n}\nvar g = gen();\n\ng.next();   // 控制台输出：&#39;a&#39;\n\ng.throw(&#39;Error&#39;);  // 控制台输出：&#39;b&#39;\n// throw的错误被内部catch语句捕获，\n// 会自动在执行一次g.next()\n\ng.next();   // 控制台输出：&#39;c&#39;\n</code></pre><h4 id=\"5、Generator-prototype-return\"><a href=\"#5、Generator-prototype-return\" class=\"headerlink\" title=\"5、Generator.prototype.return()\"></a>5、Generator.prototype.return()</h4><p>Generator函数返回的遍历器对象，还有一个<code>.return()</code>方法，可以返回给定的值，并且直接结束对遍历器对象的遍历。</p>\n<pre><code>function* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar g = gen();\n\ng.next();        // { value: 1, done: false }\n\n// 提前结束对g的遍历。尽管yield还没有执行完\n// 此时done属性值为true，说明遍历结束\ng.return(&#39;foo&#39;); // { value: &quot;foo&quot;, done: true }\n\ng.next();        // { value: undefined, done: true }\n</code></pre><p>如果<code>.return()</code>方法调用时，不提供参数，则返回值的<code>value</code>属性为<code>undefined</code>。</p>\n<h4 id=\"6、yield-表达式\"><a href=\"#6、yield-表达式\" class=\"headerlink\" title=\"6、yield* 表达式\"></a>6、yield* 表达式</h4><p><code>yield*</code> 用来在一个Generator函数里面执行另一个Generator函数。</p>\n<p>如果在一个Generator函数内部，直接调用另一个Generator函数，默认情况下是没有效果的。</p>\n<pre><code>function* gen1() {\n  yield &#39;a&#39;;\n  yield &#39;b&#39;;\n}\nfunction* gen2() {\n  yield &#39;x&#39;;\n  // 直接调用gen1()\n  gen1();\n  yield &#39;y&#39;;\n}\n// 遍历器对象可以使用for...of遍历所有状态\nfor (let v of gen2()){\n  只输出了gen1的状态\n  console.log(v);   // &#39;x&#39; &#39;y&#39;\n}\n</code></pre><p>上面的例子中，<code>gen1</code>和<code>gen2</code>都是Generator函数，在<code>gen2</code>里面直接调用<code>gen1</code>，是不会有效果的。</p>\n<p>这个就需要用到 <code>yield*</code> 表达式。</p>\n<pre><code>function* gen1() {\n  yield &#39;a&#39;;\n  yield &#39;b&#39;;\n}\nfunction* gen2() {\n  yield &#39;x&#39;;\n  // 用 yield* 调用gen1()\n  yield* gen1();\n  yield &#39;y&#39;;\n}\n\nfor (let v of gen2()){\n  输出了gen1、gen2的状态\n  console.log(v);   // &#39;x&#39; &#39;a&#39; &#39;b&#39; &#39;y&#39;\n}\n</code></pre><h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本文主要讲解Generator函数的基本语法和一些细节，Generator函数的定义、<code>yield</code>表达式、<code>.next()</code>方法及传参、<code>.throw()</code>方法、<code>.return()</code>方法以及 <code>yield*</code> 表达式。</p>\n<p>文章开头讲到，Generator函数时ES6提出的异步编程的一种解决方案。在实际应用中，<strong>一般在<code>yield</code>关键字后面会跟随一个异步操作，当异步操作成功返回后调用<code>.next()</code>方法，将异步流程交给下一个yield表达式。</strong>具体关于Generator函数的异步应用，大家可以参考阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/generator-async\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，或参考其他网上资料，继续深入学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、什么是Generator函数\"><a href=\"#一、什么是Generator函数\" class=\"headerlink\" title=\"一、什么是Generator函数\"></a>一、什么是Generator函数</h3><p><code>Generator</code>函数是ES6标准中提出的一种异步编程的解决方案。这种函数与普通函数最大的区别在于它可以暂停执行，又可以从暂停的位置恢复继续执行。</p>\n<p>从语法上看，<code>Generator</code>函数就是一个状态机，封装了许多内部状态。</p>\n<p>从实质上看，<code>Generator</code>函数就是一个遍历器对象生成器。（关于遍历器对象，可以参考阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"noopener\">这篇文章</a>）<code>Generator</code>函数返回一个遍历器对象，遍历这个对象，就可以依次得到函数内部的每一个状态。</p>\n<h3 id=\"二、基本语法\"><a href=\"#二、基本语法\" class=\"headerlink\" title=\"二、基本语法\"></a>二、基本语法</h3><h4 id=\"1、定义Generator函数\"><a href=\"#1、定义Generator函数\" class=\"headerlink\" title=\"1、定义Generator函数\"></a>1、定义Generator函数</h4><p>定义一个Generator函数和定义一个普通函数的区别在于：</p>\n<ul>\n<li>function关键字和函数名之间有一个 <code>*</code>（星号）。</li>\n<li>函数内部使用<code>yield</code>来定义每一个函数内部的状态。</li>\n<li>如果函数内部有<code>return</code>语句，那么他就是函数内部的最后一个状态。</li>\n</ul>\n<p>来看一个简单的例子：</p>\n<pre><code>// 定义\nfunction* sayHello() {\n  yield &#39;hello&#39;;\n  yield &#39;world&#39;;\n  return &#39;ending&#39;;\n}\n// 调用\n// 注意，hw获取到的值是一个遍历器对象\nlet g = sayHello();\n</code></pre><p>上面的例子，定义了一个名为<code>sayHello</code>的Generator函数，它内部有两个<code>yield</code>表达式和一个<code>return</code>表达式。所以，该函数内部有三个状态：<code>hello</code>，<code>world</code> 和 <code>return</code>语句（结束执行）。最后，调用这个函数，得到一个遍历器对象并赋值给变量<code>g</code>。</p>\n<p>Generator函数的调用方法与普通函数完全一样，<code>函数名()</code>。不同的是：</p>\n<ul>\n<li>函数调用后，内部代码（从第一行开始）都不会立即执行。</li>\n<li>函数调用后会有一个返回值，这个值是一个指向内部状态的指针对象，实质就是一个包含函数内部状态的遍历器对象。</li>\n</ul>\n<p>Generator函数调用后不会立即执行，那么，我们如何让它开始执行内部的代码呢？又如何获取它内部的每一个状态呢？此时，我们必须调用返回的生成器对象的.next()方法，才能开始代码的执行，并且使得指针移向下一个状态。</p>\n<p>以上面的例子为例：</p>\n<pre><code>g.next();\n// { value: &#39;hello&#39;, done: false }\ng.next();\n// { value: &#39;world&#39;, done: false }\ng.next();\n// { value: &#39;ending&#39;, done: true }\ng.next();\n// { value: undefined, done: true }\n</code></pre><p>上面的代码中，一共调用了四次<code>g</code>这个遍历器对象的<code>.next()</code>方法。第一次调用，<code>sayHello</code>这个Generator函数开始执行，直到遇到第一个<code>yield</code>表达式就会暂停执行。<code>.next()</code>方法会返回一个对象，它的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>hello</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>\n<p>第二次再调用<code>.next()</code>，就会执行到第二个<code>yield</code>表达式处，并暂停执行，返回对应的对象。</p>\n<p>第三次调用<code>.next()</code>，函数执行到最后的<code>return</code>语句，此时标志着遍历器对象<code>g</code>遍历结束，所以返回的对象中<code>value</code>属性值就是<code>return</code>后面所跟的值<code>ending</code>，<code>done</code>属性值为<code>true</code>，表示遍历已经结束。</p>\n<p>第四次以及后面在调用.next()方法，返回的都会是<code>{value: undefined, done: true }</code>。</p>\n<h4 id=\"2、yield表达式\"><a href=\"#2、yield表达式\" class=\"headerlink\" title=\"2、yield表达式\"></a>2、yield表达式</h4><p>由Generator函数返回的遍历器对象，只有调用<code>.next()</code>方法才会遍历到下一个内部状态，所以这其实是提供了一种可以暂停执行的函数，<code>yield</code>表达式就是暂停标志。</p>\n<p>遍历器对象的<code>.next()</code>方法的运行逻辑如下。</p>\n<ol>\n<li>遇到<code>yield</code>表达式，就暂停执行后面的操作，并将紧跟在<code>yield</code>后面的那个表达式的值，作为返回的对象的<code>value</code>属性值。</li>\n<li>下一次调用<code>.next()</code>方法时，再继续往下执行，直到遇到下一个<code>yield</code>表达式。</li>\n<li>如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止，并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</li>\n<li>如果该函数没有<code>return</code>语句，则返回的对象的<code>value</code>属性值为<code>undefined</code>。</li>\n</ol>\n<p><strong>值得注意的是：</strong></p>\n<ol>\n<li><p><strong><code>yield</code>关键字只能出现在Generator函数中，出现在别的函数中会报错。</strong></p>\n<pre><code>// 出现在普通函数中，报错\n(function () {\nyield &#39;hello&#39;;\n})()\n\n// forEach不是Generator函数，报错\n[1, 2, 3, 4, 5].forEach(val =&gt; {\nyield val\n});\n</code></pre></li>\n<li><p><strong><code>yield</code>关键字后面跟的表达式，是惰性求值的。</strong> 只有当调用<code>.next()</code>方法、内部状态暂停到当前<code>yield</code>时，才会计算其后面跟的表达式的值。这等于为JavaScript提供了手动的“惰性求值”的语法功能。</p>\n<pre><code>function* step() {\nyield &#39;step1&#39;;\n\n// 下面的yield后面的表达式不会立即求值，\n// 只有暂停到这一行时，才会计算表达式的值。\nyield &#39;step&#39; + 2;\n\nyield &#39;setp3&#39;;\nreturn &#39;end&#39;;\n}\n</code></pre></li>\n<li><p><strong><code>yield</code>表达式本身是没有返回值的，或者说它的返回值为<code>undefined</code></strong>。使用.next()传参可以为其设置返回值。（后面会讲到）</p>\n<pre><code>function* gen() {\nfor (let i = 0; i &lt; 5; i++) {\nlet res = yield;  // yield表达式本身没有返回值\nconsole.log(res); // undefined\n}\n}\nlet g = gen();\ng.next();   // {value: 0, done: false}\ng.next();   // {value: 1, done: false}\ng.next();   // {value: 2, done: false}\n</code></pre></li>\n</ol>\n<p><strong>yield与return的异同：</strong></p>\n<p>相同点:</p>\n<ul>\n<li>两者都能返回跟在其后面的表达式的值。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>yield表达式只是暂停函数向后执行，return是直接结束函数执行。</li>\n<li>yield表达式可以出现多次，后面还可以有代码。return只能出现一次，后面的代码不会执行，在一些情况下还会报错。</li>\n<li>正常函数只能返回一个值，因为只能执行一次return。Generator函数可以返回一系列的值，因为可以有任意多个yield。</li>\n</ul>\n<h4 id=\"3、-next-方法传参\"><a href=\"#3、-next-方法传参\" class=\"headerlink\" title=\"3、.next()方法传参\"></a>3、.next()方法传参</h4><p>前面我们说到过，<code>yield</code>表达式自身没有返回值，或者说返回值永远是<code>undefined</code>。但是，我们可以通过给<code>.next()</code>方法传入一个参数，来设置<strong>上一个（是上一个）</strong><code>yield</code>表达式返回值。</p>\n<p>来看一个例子：</p>\n<pre><code>function* conoleNum() {\n  console.log(&#39;Started&#39;);\n  console.log(`data: ${yield}`);\n  console.log(`data: ${yield}`);\n  return &#39;Ending&#39;;\n}\nlet g = conoleNum();\n\ng.next();      // 控制台输出：&#39;Started&#39;\n\ng.next(&#39;a&#39;);   // 控制台输出：&#39;data: a&#39;\n// 不传入参数&#39;a&#39;，就会输出&#39;data: undefined&#39;\n\ng.next(&#39;b&#39;);   // 控制台输出：&#39;data: b&#39;\n// 不传入参数&#39;a&#39;，就会输出&#39;data: undefined&#39;\n</code></pre><p>上面的例子，需要强调一个不易理解的地方。</p>\n<p>第一次调用<code>.next()</code>，此时函数暂停在代码第三行的<code>yield</code>表达式处。记得吗？<code>yield</code>会暂停函数执行，<strong>此时打印它的<code>console.log()</code>，也就是代码第三行的console，由于暂停并没有被执行，所以不会打印出结果</strong>，只输出了代码第二行的’Started’。</p>\n<p>当第二次调用<code>.next()</code>方法时，传入参数<code>&#39;a&#39;</code>，函数暂停在代码第四行的<code>yield</code>语句处。此时参数<code>&#39;a&#39;</code>会被当做<strong>上一个<code>yield</code>表达式</strong>的返回值，也就是代码第三行的<code>yiled</code>表达式的返回值，所以此时控制台输出<code>&#39;data: a&#39;</code>。而代码第四行的<code>console.log()</code>由于暂停，没有被输出。</p>\n<p>第三次调用，同理。所以输出<code>&#39;data: b&#39;</code>。</p>\n<h4 id=\"4、Generator-prototype-throw\"><a href=\"#4、Generator-prototype-throw\" class=\"headerlink\" title=\"4、Generator.prototype.throw()\"></a>4、Generator.prototype.throw()</h4><p>Generator函数返回的遍历器对象，都有一个<code>.throw()</code>方法，<strong>可以在函数体外抛出错误，然后在Generator函数体内捕获</strong>。</p>\n<pre><code>function* gen() {\n  try {\n    yield;\n  } catch (e) {\n    console.log(&#39;内部捕获&#39;, e);\n  }\n};\n\nvar g = gen();\n// 下面执行一次.next()\n// 是为了让gen函数体执行进入try语句中的yield处\n// 这样抛出错误，gen函数内部的catch语句才能捕获错误\ng.next();\n\ntry {\n  g.throw(&#39;a&#39;);\n  g.throw(&#39;b&#39;);\n} catch (e) {\n  console.log(&#39;外部捕获&#39;, e);\n}\n</code></pre><p>上面例子中，遍历器对象<code>g</code>在<code>gen</code>函数体外连续抛出两个错误。第一个错误被<code>gen</code>函数体内的<code>catch</code>语句捕获。<code>g</code>第二次抛出错误，由于<code>gen</code>函数内部的<code>catch</code>语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就会被抛出<code>gen</code>函数体，被函数体外的<code>catch</code>语句捕获。</p>\n<p><strong>值得注意的是：</strong></p>\n<ul>\n<li>如果Generator函数内部没有部署<code>try...catch</code>代码块，那么遍历器对象的<code>throw</code>方法抛出的错误，将被外部<code>try...catch</code>代码块捕获。</li>\n<li>如果Generator函数内部和外部都没有部署<code>try...catch</code>代码块，那么程序将报错，直接中断执行。</li>\n</ul>\n<p><strong>遍历器对象的<code>throw</code>方法被捕获以后，会附带执行一次<code>.next()</code>方法，代码执行会暂停到下一条<code>yield</code>表达式处</strong>。看下面这个例子：</p>\n<pre><code>function* gen(){\n  try {\n    yield console.log(&#39;a&#39;);\n  } catch (e) {\n    console.log(e);   // &#39;Error&#39;\n  }\n  yield console.log(&#39;b&#39;);\n  yield console.log(&#39;c&#39;);\n}\nvar g = gen();\n\ng.next();   // 控制台输出：&#39;a&#39;\n\ng.throw(&#39;Error&#39;);  // 控制台输出：&#39;b&#39;\n// throw的错误被内部catch语句捕获，\n// 会自动在执行一次g.next()\n\ng.next();   // 控制台输出：&#39;c&#39;\n</code></pre><h4 id=\"5、Generator-prototype-return\"><a href=\"#5、Generator-prototype-return\" class=\"headerlink\" title=\"5、Generator.prototype.return()\"></a>5、Generator.prototype.return()</h4><p>Generator函数返回的遍历器对象，还有一个<code>.return()</code>方法，可以返回给定的值，并且直接结束对遍历器对象的遍历。</p>\n<pre><code>function* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar g = gen();\n\ng.next();        // { value: 1, done: false }\n\n// 提前结束对g的遍历。尽管yield还没有执行完\n// 此时done属性值为true，说明遍历结束\ng.return(&#39;foo&#39;); // { value: &quot;foo&quot;, done: true }\n\ng.next();        // { value: undefined, done: true }\n</code></pre><p>如果<code>.return()</code>方法调用时，不提供参数，则返回值的<code>value</code>属性为<code>undefined</code>。</p>\n<h4 id=\"6、yield-表达式\"><a href=\"#6、yield-表达式\" class=\"headerlink\" title=\"6、yield* 表达式\"></a>6、yield* 表达式</h4><p><code>yield*</code> 用来在一个Generator函数里面执行另一个Generator函数。</p>\n<p>如果在一个Generator函数内部，直接调用另一个Generator函数，默认情况下是没有效果的。</p>\n<pre><code>function* gen1() {\n  yield &#39;a&#39;;\n  yield &#39;b&#39;;\n}\nfunction* gen2() {\n  yield &#39;x&#39;;\n  // 直接调用gen1()\n  gen1();\n  yield &#39;y&#39;;\n}\n// 遍历器对象可以使用for...of遍历所有状态\nfor (let v of gen2()){\n  只输出了gen1的状态\n  console.log(v);   // &#39;x&#39; &#39;y&#39;\n}\n</code></pre><p>上面的例子中，<code>gen1</code>和<code>gen2</code>都是Generator函数，在<code>gen2</code>里面直接调用<code>gen1</code>，是不会有效果的。</p>\n<p>这个就需要用到 <code>yield*</code> 表达式。</p>\n<pre><code>function* gen1() {\n  yield &#39;a&#39;;\n  yield &#39;b&#39;;\n}\nfunction* gen2() {\n  yield &#39;x&#39;;\n  // 用 yield* 调用gen1()\n  yield* gen1();\n  yield &#39;y&#39;;\n}\n\nfor (let v of gen2()){\n  输出了gen1、gen2的状态\n  console.log(v);   // &#39;x&#39; &#39;a&#39; &#39;b&#39; &#39;y&#39;\n}\n</code></pre><h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本文主要讲解Generator函数的基本语法和一些细节，Generator函数的定义、<code>yield</code>表达式、<code>.next()</code>方法及传参、<code>.throw()</code>方法、<code>.return()</code>方法以及 <code>yield*</code> 表达式。</p>\n<p>文章开头讲到，Generator函数时ES6提出的异步编程的一种解决方案。在实际应用中，<strong>一般在<code>yield</code>关键字后面会跟随一个异步操作，当异步操作成功返回后调用<code>.next()</code>方法，将异步流程交给下一个yield表达式。</strong>具体关于Generator函数的异步应用，大家可以参考阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/generator-async\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，或参考其他网上资料，继续深入学习。</p>\n"},{"title":"JavaScript - 执行环境、作用域、作用域链、闭包","date":"2019-03-13T06:30:37.000Z","img":"/medias/article/featureimages/JavaScript.jpg","_content":"\n> JavaScript中的执行环境、作用域、作用域链、闭包一直是一个非常有意思的话题，很多博主和大神都分享过相关的文章。这些知识点不仅比较抽象，不易理解，更重要的是与这些知识点相关的问题在面试中高频出现。之前我也看过不少文章，依旧是似懂非懂，模模糊糊。最近，仔细捋了捋相关问题的思路，对这些问题的理解清晰深入了不少，在这里和大家分享。\n\n这篇文章，我会按照执行环境、作用域、作用域链、闭包的顺序，结合着JS中函数的运行机制来梳理相关知识。因为这样的顺序刚好也是这些知识点相互关联且递进的顺序，同时这些知识点都又与函数有着千丝万缕的联系。这样讲解，会更容易让大家彻底理解，至少我就是这样理解清晰的。\n\n废话不再多说，我们开始。\n\n### 执行环境\n\n首先，我们还是要理解一下什么是执行环境，这也是理清后面问题的基础。\n\n> 执行环境是JavaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。——《JavaScript高级程序设计》\n\n抽象！不理解！没关系，我来解释：其实，执行环境就是JS中提出的一个概念，它是为了保证代码合理运行采用的一种机制。\n\n一种概念...机制...更抽象，那它到底是什么？**实际上，执行环境在JS机制内部`就是用一个对象来表示的`，称作`执行环境对象`，简称`环境对象`**。\n\n那么，这个执行环境对象到底又是何时、怎么产生的呢？有以下两种情况：\n\n1. 在页面中的脚本开始执行时，就会产生一个“全局执行环境”。它是最外围（范围最大，或者说层级最高）的一个执行环境，对应着一个全局环境对象。在Web浏览器中，这个对象就是`Window`对象。\n2. 当一个函数被调用的时候，也会创建一个属于该函数的执行环境，称作“局部执行环境”（或者称作函数执行环境），它也对应着自己的环境对象。\n\n因此，执行环境就分为`全局执行环境`和`局部执行环境`两种，每个执行环境都有一个属于自己的环境对象。\n\n既然执行环境是使用一个对象表示的，那么对象就有属性。我们来看看环境对象的三个有意思的属性。`变量对象`、`[[scope]]`、`this`。\n\n![环境对象][1]\n\n#### 环境对象中的变量对象\n\n《JS高程》中明确说明，执行环境定义了变量或函数有权访问的其他数据。那么这些数据到底被放（存储）在哪里呢？\n\n其实，每个执行环境都有一个与之关联的变量对象，在环境中定义的所有变量和函数都保存在这个对象中。我们在代码无法访问这个对象，但解析器在处理数据时会在内部使用它。\n\n通俗地说就是：一个执行环境中的所有变量和函数都保存在它对应的环境对象的变量对象（属性）中。\n\n#### 认识[[scope]]前先理解作用域\n\n在讲`[[scope]]`前，我们就需要先弄清楚什么是**作用域**了。因为作用域与`[[scope]]`之间存在着非常紧密的关系。\n\n>《JS高程》中没有明确给出作用域的定义和描述。其实，作用域就是变量或者函数可以被访问的代码范围，或者说作用域就是变量和函数所起作用的范围。\n\n这样看来作用域也像是一个概念，它是用来描述一个区域（或者说范围）的。在JS中，作用域分为`全局作用域`、`局部作用域`两种。\n\n我们来看看这两种作用域的具体描述：\n\n  **①**在页面中的脚本开始执行时，就会产生一个“全局作用域”。它是最外围（范围最大，或者说层级最高）的一个作用域。全局作用域的变量、函数\n可以在代码的任何地方访问到。\n  **②**当一个函数被创建的时候，会创建一个“局部作用域”。局部作用域中的函数、变量只能在某些局部代码中可以访问到。\n\n看一个例子：\n```\nvar g = 'Global';\n\nfunction outer() {\n  var out = 'outer';\n\n  function inner() {\n    var inn = 'inner';\n  }\n} \n```\n\n上面这个例子，产生的作用域就如下图所示：\n\n![作用域][2]\n\n**请注意上面**①**、**②**这两段话！！！**是不是觉得很熟悉，似曾相识？！没错，这两段话和介绍全局/局部执行环境（全局/局部环境对象）时候的描述几乎一摸一样！作用域是不是和环境对象有着千丝万缕的联系呢？与此同时，我们再仔细回忆一下：1、作用域就是变量或者函数可以被访问的代码范围。2、一个执行环境中定义的所有变量和函数都保存在它对应的环境对象中。\n\n结合上面所述，其实不难得出：尽管作用域的描述更像是一个概念，但如果一定要将它具象化，问它到底是什么东西，与执行环境有什么关系？**`其实，作用域所对应的（不是相等、等于）是环境对象中的变量对象。`**\n\n明白了这些，我们就可以来看看环境对象中的`[[scope]]`属性。\n\n#### 环境对象中的[[scope]]\n\n首先，要明确的是，环境对象中的`[[scope]]`属性值是一个指针，它指向该执行环境的作用域链。\n\n到底什么是作用域链呢？**作用域链本质上就是一个`有序的列表`，而列表中的每一项都是一个`指向不同环境对象中的变量对象的指针`。**\n\n那么，这个作用域链到底是怎么形成的呢？它里面指向变量对象的指针的顺序又是如何规定的呢？我们用下面这个简单的例子说明。\n\n```\nvar g = 'Hello';\n\nfunction inner() {\n  var inn = 'Inner';\n  var res = g + inn;\n  return res;\n}\n\ninner();\n```\n\n当执行了`inner();`这一行代码后，代码执行流进入`inner`函数内部，此时，JS内部会先创建`inner`函数的局部执行环境，然后创建该环境的作用域链。这个作用域链的最前端，就是`inner`执行环境自己的环境对象中的`变量对象`，作用域链第二项，就是全局环境的环境对象中的`变量对象`。这条作用域链如下图所示：\n\n![作用域链][3]\n\n形成了这样的作用域链之后，就可以有秩序地访问一个变量了。以这个例子为例：当执行`inner();`进入函数体内后，执行`g + inn;`一行，需要访问变量`g、inn`，此时JS内部机制就会沿着这条作用域链查找所需变量。在当前`inner`函数的作用域中找到了变量`inn`，值为`'Inner'`，查找终止。但是却没有找到变量`g`，于是沿着作用域链向上查找，进入全局作用域，在全局变量对象中找到了变量`g`，值为`'Hello'`，查找终止。计算得出`res`为`'HelloInner'`，并在最后返回结果。\n\n与上面所讲机制完全相同，如果是多层执行环境嵌套，则作用域链是这么形成的：\n\n> 当代码执行进入一个执行环境时，JS内部会开始创建该环境的作用域链。作用域链的**最前端**，始终都是**当前执行环境的执行环境对象中的变量对象**。如果这个环境是**局部执行环境（函数执行环境）**，则将其**活动对象**作为**变量对象**。作用域链中的下一个是来自**外层环境对象的变量对象**，而再下一个则是来自**再外层环境对象的变量对象**...... 这样**一直延续到全局环境对象的变量对象**。所以，全局执行环境的变量对象始终都是作用域链中的最后一个对象。\n\n讲到这里，可能你已经对执行环境、执行环境对象、变量对象、作用域、作用域链的理解已经他们之间的关系有了一个较清晰的认识。也有可能，对这么多的抽象问题还是有些懵懵懂懂。没关系，我们用下面这一张图，将上面的所有内容串联起来，来直观感受和理解他们。\n```\nvar g = 'Global';\nfunction outer() {\n  var out = 'outer';\n  function inner() {\n    var inn = 'inner';\n  }\n  inner();\n}\nouter();\n```\n\n![环境、环境对象、变量对象、作用域、作用域链][4]\n\n**对于这张图，有一些需要注意的地方：**\n1. 当函数调用时，才会创建函数的执行环境和它的环境对象，再创建函数的活动对象，再创建函数环境的作用域链。\n2. 上图中间一列变量对象中，`outer`、`inner`的变量对象其实是该函数的活动对象。**全局环境是没有活动对象的，只有在函数环境中，才会使用函数的活动对象来作为它的变量对象**。\n3. 函数的活动对象，是在函数创建时使用函数内置的`arguments`类数组和**其他命名参数**来初始化的。所以实际上，**函数的变量对象中应该还包含一个指向`arguments`类数组的指针**。\n\n\n有了对作用域、作用域链的理解，最后，我们来说一说闭包。\n\n### 闭包\n\n#### 什么是闭包\n\n> 闭包就是有权访问另一个函数作用域中的变量的函数。——《JavaScript高级程序设计》\n\n对于闭包，最简单的大白话可以这么理解：\n\n> **①**外部函数声明内部函数，内部函数引用外部函数的局部变量，这些变量不会被释放！——这是我曾经看到的别人的说法\n\n或者这么理解：\n\n> **②**当在一个函数中返回另一个函数的时候（是返回一个函数，不是返回函数的调用或者函数的执行结果），就会形成闭包，被返回的这个函数就叫做闭包函数。——这是我自己的理解\n\n上面两句话看似不同，其实本质是一样的。来看一个最简单的闭包的例子：\n```\nfunction sum() {\n  var num1 = 100;\n\n  // 这里返回的是函数(体)，不是函数的调用\n  return function(num2) {\n    return num1 + num2;\n  }\n}\n\n// 此时result指向sum返回的那个匿名函数\n// 注意！此时该匿名函数并没有被执行\nlet result = sum()；\n\nresult(200);\n```\n\n那么，上面几行代码，为什么就会形成闭包呢？我们来分析一下，代码执行中JS内部到底做了什么？\n\n首先，有一点必须明确，就是**一般情况下，一个函数执行完内部的代码，函数调用时所创建的执行环境、环境对象（包括变量对象、[[scope]]等）都会被销毁，它们的生命周期就只有函数调用到函数执行结束这一段时间**。\n\n但是上面的例子，就会出现例外。\n\n当执行`sum()`时，调用该函数，创建它的环境对象，其中作用域链中第一项是自己环境的变量对象，第二项是全局环境的变量对象。当创建匿名函数的时候，也会创建匿名函数的环境对象，其中作用域链第一项是自己环境的变量对象，第二项是`sum`环境的变量对象，第三项是全局变量对象。\n\n这时，问题就来了。按说，当函数`sum`执行完`return`之后，他的执行环境、变量对象、作用域链都会被销毁。**可是这时候却不能销毁他的变量对象，因为返回的匿名函数（此时由`result`指向该函数）并没有执行，这个匿名函数的作用域链中还引用着`sum`函数的变量对象**。换句话说，即使，`sum`执行完了，其执行环境的作用域链会被销毁，但是**它的变量对象还会保存在内存中**，我们在`sum`函数外部，还能访问到它内部的变量`num1`、`num2`，这就是形成闭包的真正原因。但是，当result()执行完后，这些变量对象、作用域链就会被销毁。\n\n#### 闭包存在的问题\n\n因为闭包形成后，会在函数执行完仍将他的变量对象保存在内存中，当引用时间过长或者引用对象很多的时候，会占用大量内存，严重影响性能。\n\n来看下面的例子：（这个例子曾经是Tencent微众银行的笔试原题，出现在《JS高程》的7.2.3章节——P184）\n```\nfunction assignHandler() {\n  var element = document.getElementById(\"someElement\");\n  element.onclick = function(){\n    alert(element.id);\n  };\n}\n\n```\n`assignHandler`函数中定义的匿名函数是作为`element`元素的事件处理函数的，且内部使用了`element`元素（访问元素的`id``），因此`assignHandler`函数执行完，对于`element`的引用也会一直存在，`element`元素会一直保存在内存中。\n\n将上面的例子改成下面这样，就能解决这个问题。\n\n```\nfunction assignHandler(){\n  var element = document.getElementById(\"someElement\");\n\n  // 这里获取element的id，为其创建一个副本\n  // 这样是为了在下面事件处理函数中解除对element元素的引用\n  var id = element.id;\n\n  element.onclick = function(){\n    alert(id);\n  };\n\n  // 将element置为null，断开对element元素的引用\n  // 这样方便垃圾回收机制回收element所占的内存\n  element = null;\n} \n```\n\n\n[1]: /medias/article/coding/ectx-scope-closure/context-object.jpg\n[2]: /medias/article/coding/ectx-scope-closure/scope.jpg\n[3]: /medias/article/coding/ectx-scope-closure/scope-chain.jpg\n[4]: /medias/article/coding/ectx-scope-closure/ctx-ctxObj-varObj-scope-scopeChain.jpg","source":"_posts/ECtx-scope-closure.md","raw":"---\ntitle: JavaScript - 执行环境、作用域、作用域链、闭包\ndate: 2019-03-13 14:30:37\ncategories: 编程\ntags: JavaScript\nimg: /medias/article/featureimages/JavaScript.jpg\n---\n\n> JavaScript中的执行环境、作用域、作用域链、闭包一直是一个非常有意思的话题，很多博主和大神都分享过相关的文章。这些知识点不仅比较抽象，不易理解，更重要的是与这些知识点相关的问题在面试中高频出现。之前我也看过不少文章，依旧是似懂非懂，模模糊糊。最近，仔细捋了捋相关问题的思路，对这些问题的理解清晰深入了不少，在这里和大家分享。\n\n这篇文章，我会按照执行环境、作用域、作用域链、闭包的顺序，结合着JS中函数的运行机制来梳理相关知识。因为这样的顺序刚好也是这些知识点相互关联且递进的顺序，同时这些知识点都又与函数有着千丝万缕的联系。这样讲解，会更容易让大家彻底理解，至少我就是这样理解清晰的。\n\n废话不再多说，我们开始。\n\n### 执行环境\n\n首先，我们还是要理解一下什么是执行环境，这也是理清后面问题的基础。\n\n> 执行环境是JavaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。——《JavaScript高级程序设计》\n\n抽象！不理解！没关系，我来解释：其实，执行环境就是JS中提出的一个概念，它是为了保证代码合理运行采用的一种机制。\n\n一种概念...机制...更抽象，那它到底是什么？**实际上，执行环境在JS机制内部`就是用一个对象来表示的`，称作`执行环境对象`，简称`环境对象`**。\n\n那么，这个执行环境对象到底又是何时、怎么产生的呢？有以下两种情况：\n\n1. 在页面中的脚本开始执行时，就会产生一个“全局执行环境”。它是最外围（范围最大，或者说层级最高）的一个执行环境，对应着一个全局环境对象。在Web浏览器中，这个对象就是`Window`对象。\n2. 当一个函数被调用的时候，也会创建一个属于该函数的执行环境，称作“局部执行环境”（或者称作函数执行环境），它也对应着自己的环境对象。\n\n因此，执行环境就分为`全局执行环境`和`局部执行环境`两种，每个执行环境都有一个属于自己的环境对象。\n\n既然执行环境是使用一个对象表示的，那么对象就有属性。我们来看看环境对象的三个有意思的属性。`变量对象`、`[[scope]]`、`this`。\n\n![环境对象][1]\n\n#### 环境对象中的变量对象\n\n《JS高程》中明确说明，执行环境定义了变量或函数有权访问的其他数据。那么这些数据到底被放（存储）在哪里呢？\n\n其实，每个执行环境都有一个与之关联的变量对象，在环境中定义的所有变量和函数都保存在这个对象中。我们在代码无法访问这个对象，但解析器在处理数据时会在内部使用它。\n\n通俗地说就是：一个执行环境中的所有变量和函数都保存在它对应的环境对象的变量对象（属性）中。\n\n#### 认识[[scope]]前先理解作用域\n\n在讲`[[scope]]`前，我们就需要先弄清楚什么是**作用域**了。因为作用域与`[[scope]]`之间存在着非常紧密的关系。\n\n>《JS高程》中没有明确给出作用域的定义和描述。其实，作用域就是变量或者函数可以被访问的代码范围，或者说作用域就是变量和函数所起作用的范围。\n\n这样看来作用域也像是一个概念，它是用来描述一个区域（或者说范围）的。在JS中，作用域分为`全局作用域`、`局部作用域`两种。\n\n我们来看看这两种作用域的具体描述：\n\n  **①**在页面中的脚本开始执行时，就会产生一个“全局作用域”。它是最外围（范围最大，或者说层级最高）的一个作用域。全局作用域的变量、函数\n可以在代码的任何地方访问到。\n  **②**当一个函数被创建的时候，会创建一个“局部作用域”。局部作用域中的函数、变量只能在某些局部代码中可以访问到。\n\n看一个例子：\n```\nvar g = 'Global';\n\nfunction outer() {\n  var out = 'outer';\n\n  function inner() {\n    var inn = 'inner';\n  }\n} \n```\n\n上面这个例子，产生的作用域就如下图所示：\n\n![作用域][2]\n\n**请注意上面**①**、**②**这两段话！！！**是不是觉得很熟悉，似曾相识？！没错，这两段话和介绍全局/局部执行环境（全局/局部环境对象）时候的描述几乎一摸一样！作用域是不是和环境对象有着千丝万缕的联系呢？与此同时，我们再仔细回忆一下：1、作用域就是变量或者函数可以被访问的代码范围。2、一个执行环境中定义的所有变量和函数都保存在它对应的环境对象中。\n\n结合上面所述，其实不难得出：尽管作用域的描述更像是一个概念，但如果一定要将它具象化，问它到底是什么东西，与执行环境有什么关系？**`其实，作用域所对应的（不是相等、等于）是环境对象中的变量对象。`**\n\n明白了这些，我们就可以来看看环境对象中的`[[scope]]`属性。\n\n#### 环境对象中的[[scope]]\n\n首先，要明确的是，环境对象中的`[[scope]]`属性值是一个指针，它指向该执行环境的作用域链。\n\n到底什么是作用域链呢？**作用域链本质上就是一个`有序的列表`，而列表中的每一项都是一个`指向不同环境对象中的变量对象的指针`。**\n\n那么，这个作用域链到底是怎么形成的呢？它里面指向变量对象的指针的顺序又是如何规定的呢？我们用下面这个简单的例子说明。\n\n```\nvar g = 'Hello';\n\nfunction inner() {\n  var inn = 'Inner';\n  var res = g + inn;\n  return res;\n}\n\ninner();\n```\n\n当执行了`inner();`这一行代码后，代码执行流进入`inner`函数内部，此时，JS内部会先创建`inner`函数的局部执行环境，然后创建该环境的作用域链。这个作用域链的最前端，就是`inner`执行环境自己的环境对象中的`变量对象`，作用域链第二项，就是全局环境的环境对象中的`变量对象`。这条作用域链如下图所示：\n\n![作用域链][3]\n\n形成了这样的作用域链之后，就可以有秩序地访问一个变量了。以这个例子为例：当执行`inner();`进入函数体内后，执行`g + inn;`一行，需要访问变量`g、inn`，此时JS内部机制就会沿着这条作用域链查找所需变量。在当前`inner`函数的作用域中找到了变量`inn`，值为`'Inner'`，查找终止。但是却没有找到变量`g`，于是沿着作用域链向上查找，进入全局作用域，在全局变量对象中找到了变量`g`，值为`'Hello'`，查找终止。计算得出`res`为`'HelloInner'`，并在最后返回结果。\n\n与上面所讲机制完全相同，如果是多层执行环境嵌套，则作用域链是这么形成的：\n\n> 当代码执行进入一个执行环境时，JS内部会开始创建该环境的作用域链。作用域链的**最前端**，始终都是**当前执行环境的执行环境对象中的变量对象**。如果这个环境是**局部执行环境（函数执行环境）**，则将其**活动对象**作为**变量对象**。作用域链中的下一个是来自**外层环境对象的变量对象**，而再下一个则是来自**再外层环境对象的变量对象**...... 这样**一直延续到全局环境对象的变量对象**。所以，全局执行环境的变量对象始终都是作用域链中的最后一个对象。\n\n讲到这里，可能你已经对执行环境、执行环境对象、变量对象、作用域、作用域链的理解已经他们之间的关系有了一个较清晰的认识。也有可能，对这么多的抽象问题还是有些懵懵懂懂。没关系，我们用下面这一张图，将上面的所有内容串联起来，来直观感受和理解他们。\n```\nvar g = 'Global';\nfunction outer() {\n  var out = 'outer';\n  function inner() {\n    var inn = 'inner';\n  }\n  inner();\n}\nouter();\n```\n\n![环境、环境对象、变量对象、作用域、作用域链][4]\n\n**对于这张图，有一些需要注意的地方：**\n1. 当函数调用时，才会创建函数的执行环境和它的环境对象，再创建函数的活动对象，再创建函数环境的作用域链。\n2. 上图中间一列变量对象中，`outer`、`inner`的变量对象其实是该函数的活动对象。**全局环境是没有活动对象的，只有在函数环境中，才会使用函数的活动对象来作为它的变量对象**。\n3. 函数的活动对象，是在函数创建时使用函数内置的`arguments`类数组和**其他命名参数**来初始化的。所以实际上，**函数的变量对象中应该还包含一个指向`arguments`类数组的指针**。\n\n\n有了对作用域、作用域链的理解，最后，我们来说一说闭包。\n\n### 闭包\n\n#### 什么是闭包\n\n> 闭包就是有权访问另一个函数作用域中的变量的函数。——《JavaScript高级程序设计》\n\n对于闭包，最简单的大白话可以这么理解：\n\n> **①**外部函数声明内部函数，内部函数引用外部函数的局部变量，这些变量不会被释放！——这是我曾经看到的别人的说法\n\n或者这么理解：\n\n> **②**当在一个函数中返回另一个函数的时候（是返回一个函数，不是返回函数的调用或者函数的执行结果），就会形成闭包，被返回的这个函数就叫做闭包函数。——这是我自己的理解\n\n上面两句话看似不同，其实本质是一样的。来看一个最简单的闭包的例子：\n```\nfunction sum() {\n  var num1 = 100;\n\n  // 这里返回的是函数(体)，不是函数的调用\n  return function(num2) {\n    return num1 + num2;\n  }\n}\n\n// 此时result指向sum返回的那个匿名函数\n// 注意！此时该匿名函数并没有被执行\nlet result = sum()；\n\nresult(200);\n```\n\n那么，上面几行代码，为什么就会形成闭包呢？我们来分析一下，代码执行中JS内部到底做了什么？\n\n首先，有一点必须明确，就是**一般情况下，一个函数执行完内部的代码，函数调用时所创建的执行环境、环境对象（包括变量对象、[[scope]]等）都会被销毁，它们的生命周期就只有函数调用到函数执行结束这一段时间**。\n\n但是上面的例子，就会出现例外。\n\n当执行`sum()`时，调用该函数，创建它的环境对象，其中作用域链中第一项是自己环境的变量对象，第二项是全局环境的变量对象。当创建匿名函数的时候，也会创建匿名函数的环境对象，其中作用域链第一项是自己环境的变量对象，第二项是`sum`环境的变量对象，第三项是全局变量对象。\n\n这时，问题就来了。按说，当函数`sum`执行完`return`之后，他的执行环境、变量对象、作用域链都会被销毁。**可是这时候却不能销毁他的变量对象，因为返回的匿名函数（此时由`result`指向该函数）并没有执行，这个匿名函数的作用域链中还引用着`sum`函数的变量对象**。换句话说，即使，`sum`执行完了，其执行环境的作用域链会被销毁，但是**它的变量对象还会保存在内存中**，我们在`sum`函数外部，还能访问到它内部的变量`num1`、`num2`，这就是形成闭包的真正原因。但是，当result()执行完后，这些变量对象、作用域链就会被销毁。\n\n#### 闭包存在的问题\n\n因为闭包形成后，会在函数执行完仍将他的变量对象保存在内存中，当引用时间过长或者引用对象很多的时候，会占用大量内存，严重影响性能。\n\n来看下面的例子：（这个例子曾经是Tencent微众银行的笔试原题，出现在《JS高程》的7.2.3章节——P184）\n```\nfunction assignHandler() {\n  var element = document.getElementById(\"someElement\");\n  element.onclick = function(){\n    alert(element.id);\n  };\n}\n\n```\n`assignHandler`函数中定义的匿名函数是作为`element`元素的事件处理函数的，且内部使用了`element`元素（访问元素的`id``），因此`assignHandler`函数执行完，对于`element`的引用也会一直存在，`element`元素会一直保存在内存中。\n\n将上面的例子改成下面这样，就能解决这个问题。\n\n```\nfunction assignHandler(){\n  var element = document.getElementById(\"someElement\");\n\n  // 这里获取element的id，为其创建一个副本\n  // 这样是为了在下面事件处理函数中解除对element元素的引用\n  var id = element.id;\n\n  element.onclick = function(){\n    alert(id);\n  };\n\n  // 将element置为null，断开对element元素的引用\n  // 这样方便垃圾回收机制回收element所占的内存\n  element = null;\n} \n```\n\n\n[1]: /medias/article/coding/ectx-scope-closure/context-object.jpg\n[2]: /medias/article/coding/ectx-scope-closure/scope.jpg\n[3]: /medias/article/coding/ectx-scope-closure/scope-chain.jpg\n[4]: /medias/article/coding/ectx-scope-closure/ctx-ctxObj-varObj-scope-scopeChain.jpg","slug":"ECtx-scope-closure","published":1,"updated":"2019-05-19T11:29:39.079Z","_id":"cjvuu4mqf00029kvbqar5xz3q","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>JavaScript中的执行环境、作用域、作用域链、闭包一直是一个非常有意思的话题，很多博主和大神都分享过相关的文章。这些知识点不仅比较抽象，不易理解，更重要的是与这些知识点相关的问题在面试中高频出现。之前我也看过不少文章，依旧是似懂非懂，模模糊糊。最近，仔细捋了捋相关问题的思路，对这些问题的理解清晰深入了不少，在这里和大家分享。</p>\n</blockquote>\n<p>这篇文章，我会按照执行环境、作用域、作用域链、闭包的顺序，结合着JS中函数的运行机制来梳理相关知识。因为这样的顺序刚好也是这些知识点相互关联且递进的顺序，同时这些知识点都又与函数有着千丝万缕的联系。这样讲解，会更容易让大家彻底理解，至少我就是这样理解清晰的。</p>\n<p>废话不再多说，我们开始。</p>\n<h3 id=\"执行环境\"><a href=\"#执行环境\" class=\"headerlink\" title=\"执行环境\"></a>执行环境</h3><p>首先，我们还是要理解一下什么是执行环境，这也是理清后面问题的基础。</p>\n<blockquote>\n<p>执行环境是JavaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>抽象！不理解！没关系，我来解释：其实，执行环境就是JS中提出的一个概念，它是为了保证代码合理运行采用的一种机制。</p>\n<p>一种概念…机制…更抽象，那它到底是什么？<strong>实际上，执行环境在JS机制内部<code>就是用一个对象来表示的</code>，称作<code>执行环境对象</code>，简称<code>环境对象</code></strong>。</p>\n<p>那么，这个执行环境对象到底又是何时、怎么产生的呢？有以下两种情况：</p>\n<ol>\n<li>在页面中的脚本开始执行时，就会产生一个“全局执行环境”。它是最外围（范围最大，或者说层级最高）的一个执行环境，对应着一个全局环境对象。在Web浏览器中，这个对象就是<code>Window</code>对象。</li>\n<li>当一个函数被调用的时候，也会创建一个属于该函数的执行环境，称作“局部执行环境”（或者称作函数执行环境），它也对应着自己的环境对象。</li>\n</ol>\n<p>因此，执行环境就分为<code>全局执行环境</code>和<code>局部执行环境</code>两种，每个执行环境都有一个属于自己的环境对象。</p>\n<p>既然执行环境是使用一个对象表示的，那么对象就有属性。我们来看看环境对象的三个有意思的属性。<code>变量对象</code>、<code>[[scope]]</code>、<code>this</code>。</p>\n<p><img src=\"/medias/article/coding/ectx-scope-closure/context-object.jpg\" alt=\"环境对象\"></p>\n<h4 id=\"环境对象中的变量对象\"><a href=\"#环境对象中的变量对象\" class=\"headerlink\" title=\"环境对象中的变量对象\"></a>环境对象中的变量对象</h4><p>《JS高程》中明确说明，执行环境定义了变量或函数有权访问的其他数据。那么这些数据到底被放（存储）在哪里呢？</p>\n<p>其实，每个执行环境都有一个与之关联的变量对象，在环境中定义的所有变量和函数都保存在这个对象中。我们在代码无法访问这个对象，但解析器在处理数据时会在内部使用它。</p>\n<p>通俗地说就是：一个执行环境中的所有变量和函数都保存在它对应的环境对象的变量对象（属性）中。</p>\n<h4 id=\"认识-scope-前先理解作用域\"><a href=\"#认识-scope-前先理解作用域\" class=\"headerlink\" title=\"认识[[scope]]前先理解作用域\"></a>认识[[scope]]前先理解作用域</h4><p>在讲<code>[[scope]]</code>前，我们就需要先弄清楚什么是<strong>作用域</strong>了。因为作用域与<code>[[scope]]</code>之间存在着非常紧密的关系。</p>\n<blockquote>\n<p>《JS高程》中没有明确给出作用域的定义和描述。其实，作用域就是变量或者函数可以被访问的代码范围，或者说作用域就是变量和函数所起作用的范围。</p>\n</blockquote>\n<p>这样看来作用域也像是一个概念，它是用来描述一个区域（或者说范围）的。在JS中，作用域分为<code>全局作用域</code>、<code>局部作用域</code>两种。</p>\n<p>我们来看看这两种作用域的具体描述：</p>\n<p>  <strong>①</strong>在页面中的脚本开始执行时，就会产生一个“全局作用域”。它是最外围（范围最大，或者说层级最高）的一个作用域。全局作用域的变量、函数<br>可以在代码的任何地方访问到。<br>  <strong>②</strong>当一个函数被创建的时候，会创建一个“局部作用域”。局部作用域中的函数、变量只能在某些局部代码中可以访问到。</p>\n<p>看一个例子：</p>\n<pre><code>var g = &#39;Global&#39;;\n\nfunction outer() {\n  var out = &#39;outer&#39;;\n\n  function inner() {\n    var inn = &#39;inner&#39;;\n  }\n} \n</code></pre><p>上面这个例子，产生的作用域就如下图所示：</p>\n<p><img src=\"/medias/article/coding/ectx-scope-closure/scope.jpg\" alt=\"作用域\"></p>\n<p><strong>请注意上面</strong>①<strong>、</strong>②<strong>这两段话！！！</strong>是不是觉得很熟悉，似曾相识？！没错，这两段话和介绍全局/局部执行环境（全局/局部环境对象）时候的描述几乎一摸一样！作用域是不是和环境对象有着千丝万缕的联系呢？与此同时，我们再仔细回忆一下：1、作用域就是变量或者函数可以被访问的代码范围。2、一个执行环境中定义的所有变量和函数都保存在它对应的环境对象中。</p>\n<p>结合上面所述，其实不难得出：尽管作用域的描述更像是一个概念，但如果一定要将它具象化，问它到底是什么东西，与执行环境有什么关系？<strong><code>其实，作用域所对应的（不是相等、等于）是环境对象中的变量对象。</code></strong></p>\n<p>明白了这些，我们就可以来看看环境对象中的<code>[[scope]]</code>属性。</p>\n<h4 id=\"环境对象中的-scope\"><a href=\"#环境对象中的-scope\" class=\"headerlink\" title=\"环境对象中的[[scope]]\"></a>环境对象中的[[scope]]</h4><p>首先，要明确的是，环境对象中的<code>[[scope]]</code>属性值是一个指针，它指向该执行环境的作用域链。</p>\n<p>到底什么是作用域链呢？<strong>作用域链本质上就是一个<code>有序的列表</code>，而列表中的每一项都是一个<code>指向不同环境对象中的变量对象的指针</code>。</strong></p>\n<p>那么，这个作用域链到底是怎么形成的呢？它里面指向变量对象的指针的顺序又是如何规定的呢？我们用下面这个简单的例子说明。</p>\n<pre><code>var g = &#39;Hello&#39;;\n\nfunction inner() {\n  var inn = &#39;Inner&#39;;\n  var res = g + inn;\n  return res;\n}\n\ninner();\n</code></pre><p>当执行了<code>inner();</code>这一行代码后，代码执行流进入<code>inner</code>函数内部，此时，JS内部会先创建<code>inner</code>函数的局部执行环境，然后创建该环境的作用域链。这个作用域链的最前端，就是<code>inner</code>执行环境自己的环境对象中的<code>变量对象</code>，作用域链第二项，就是全局环境的环境对象中的<code>变量对象</code>。这条作用域链如下图所示：</p>\n<p><img src=\"/medias/article/coding/ectx-scope-closure/scope-chain.jpg\" alt=\"作用域链\"></p>\n<p>形成了这样的作用域链之后，就可以有秩序地访问一个变量了。以这个例子为例：当执行<code>inner();</code>进入函数体内后，执行<code>g + inn;</code>一行，需要访问变量<code>g、inn</code>，此时JS内部机制就会沿着这条作用域链查找所需变量。在当前<code>inner</code>函数的作用域中找到了变量<code>inn</code>，值为<code>&#39;Inner&#39;</code>，查找终止。但是却没有找到变量<code>g</code>，于是沿着作用域链向上查找，进入全局作用域，在全局变量对象中找到了变量<code>g</code>，值为<code>&#39;Hello&#39;</code>，查找终止。计算得出<code>res</code>为<code>&#39;HelloInner&#39;</code>，并在最后返回结果。</p>\n<p>与上面所讲机制完全相同，如果是多层执行环境嵌套，则作用域链是这么形成的：</p>\n<blockquote>\n<p>当代码执行进入一个执行环境时，JS内部会开始创建该环境的作用域链。作用域链的<strong>最前端</strong>，始终都是<strong>当前执行环境的执行环境对象中的变量对象</strong>。如果这个环境是<strong>局部执行环境（函数执行环境）</strong>，则将其<strong>活动对象</strong>作为<strong>变量对象</strong>。作用域链中的下一个是来自<strong>外层环境对象的变量对象</strong>，而再下一个则是来自<strong>再外层环境对象的变量对象</strong>…… 这样<strong>一直延续到全局环境对象的变量对象</strong>。所以，全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p>\n</blockquote>\n<p>讲到这里，可能你已经对执行环境、执行环境对象、变量对象、作用域、作用域链的理解已经他们之间的关系有了一个较清晰的认识。也有可能，对这么多的抽象问题还是有些懵懵懂懂。没关系，我们用下面这一张图，将上面的所有内容串联起来，来直观感受和理解他们。</p>\n<pre><code>var g = &#39;Global&#39;;\nfunction outer() {\n  var out = &#39;outer&#39;;\n  function inner() {\n    var inn = &#39;inner&#39;;\n  }\n  inner();\n}\nouter();\n</code></pre><p><img src=\"/medias/article/coding/ectx-scope-closure/ctx-ctxObj-varObj-scope-scopeChain.jpg\" alt=\"环境、环境对象、变量对象、作用域、作用域链\"></p>\n<p><strong>对于这张图，有一些需要注意的地方：</strong></p>\n<ol>\n<li>当函数调用时，才会创建函数的执行环境和它的环境对象，再创建函数的活动对象，再创建函数环境的作用域链。</li>\n<li>上图中间一列变量对象中，<code>outer</code>、<code>inner</code>的变量对象其实是该函数的活动对象。<strong>全局环境是没有活动对象的，只有在函数环境中，才会使用函数的活动对象来作为它的变量对象</strong>。</li>\n<li>函数的活动对象，是在函数创建时使用函数内置的<code>arguments</code>类数组和<strong>其他命名参数</strong>来初始化的。所以实际上，<strong>函数的变量对象中应该还包含一个指向<code>arguments</code>类数组的指针</strong>。</li>\n</ol>\n<p>有了对作用域、作用域链的理解，最后，我们来说一说闭包。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><h4 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h4><blockquote>\n<p>闭包就是有权访问另一个函数作用域中的变量的函数。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>对于闭包，最简单的大白话可以这么理解：</p>\n<blockquote>\n<p><strong>①</strong>外部函数声明内部函数，内部函数引用外部函数的局部变量，这些变量不会被释放！——这是我曾经看到的别人的说法</p>\n</blockquote>\n<p>或者这么理解：</p>\n<blockquote>\n<p><strong>②</strong>当在一个函数中返回另一个函数的时候（是返回一个函数，不是返回函数的调用或者函数的执行结果），就会形成闭包，被返回的这个函数就叫做闭包函数。——这是我自己的理解</p>\n</blockquote>\n<p>上面两句话看似不同，其实本质是一样的。来看一个最简单的闭包的例子：</p>\n<pre><code>function sum() {\n  var num1 = 100;\n\n  // 这里返回的是函数(体)，不是函数的调用\n  return function(num2) {\n    return num1 + num2;\n  }\n}\n\n// 此时result指向sum返回的那个匿名函数\n// 注意！此时该匿名函数并没有被执行\nlet result = sum()；\n\nresult(200);\n</code></pre><p>那么，上面几行代码，为什么就会形成闭包呢？我们来分析一下，代码执行中JS内部到底做了什么？</p>\n<p>首先，有一点必须明确，就是<strong>一般情况下，一个函数执行完内部的代码，函数调用时所创建的执行环境、环境对象（包括变量对象、[[scope]]等）都会被销毁，它们的生命周期就只有函数调用到函数执行结束这一段时间</strong>。</p>\n<p>但是上面的例子，就会出现例外。</p>\n<p>当执行<code>sum()</code>时，调用该函数，创建它的环境对象，其中作用域链中第一项是自己环境的变量对象，第二项是全局环境的变量对象。当创建匿名函数的时候，也会创建匿名函数的环境对象，其中作用域链第一项是自己环境的变量对象，第二项是<code>sum</code>环境的变量对象，第三项是全局变量对象。</p>\n<p>这时，问题就来了。按说，当函数<code>sum</code>执行完<code>return</code>之后，他的执行环境、变量对象、作用域链都会被销毁。<strong>可是这时候却不能销毁他的变量对象，因为返回的匿名函数（此时由<code>result</code>指向该函数）并没有执行，这个匿名函数的作用域链中还引用着<code>sum</code>函数的变量对象</strong>。换句话说，即使，<code>sum</code>执行完了，其执行环境的作用域链会被销毁，但是<strong>它的变量对象还会保存在内存中</strong>，我们在<code>sum</code>函数外部，还能访问到它内部的变量<code>num1</code>、<code>num2</code>，这就是形成闭包的真正原因。但是，当result()执行完后，这些变量对象、作用域链就会被销毁。</p>\n<h4 id=\"闭包存在的问题\"><a href=\"#闭包存在的问题\" class=\"headerlink\" title=\"闭包存在的问题\"></a>闭包存在的问题</h4><p>因为闭包形成后，会在函数执行完仍将他的变量对象保存在内存中，当引用时间过长或者引用对象很多的时候，会占用大量内存，严重影响性能。</p>\n<p>来看下面的例子：（这个例子曾经是Tencent微众银行的笔试原题，出现在《JS高程》的7.2.3章节——P184）</p>\n<pre><code>function assignHandler() {\n  var element = document.getElementById(&quot;someElement&quot;);\n  element.onclick = function(){\n    alert(element.id);\n  };\n}\n\n</code></pre><p><code>assignHandler</code>函数中定义的匿名函数是作为<code>element</code>元素的事件处理函数的，且内部使用了<code>element</code>元素（访问元素的<code>id`</code>），因此<code>assignHandler</code>函数执行完，对于<code>element</code>的引用也会一直存在，<code>element</code>元素会一直保存在内存中。</p>\n<p>将上面的例子改成下面这样，就能解决这个问题。</p>\n<pre><code>function assignHandler(){\n  var element = document.getElementById(&quot;someElement&quot;);\n\n  // 这里获取element的id，为其创建一个副本\n  // 这样是为了在下面事件处理函数中解除对element元素的引用\n  var id = element.id;\n\n  element.onclick = function(){\n    alert(id);\n  };\n\n  // 将element置为null，断开对element元素的引用\n  // 这样方便垃圾回收机制回收element所占的内存\n  element = null;\n} \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>JavaScript中的执行环境、作用域、作用域链、闭包一直是一个非常有意思的话题，很多博主和大神都分享过相关的文章。这些知识点不仅比较抽象，不易理解，更重要的是与这些知识点相关的问题在面试中高频出现。之前我也看过不少文章，依旧是似懂非懂，模模糊糊。最近，仔细捋了捋相关问题的思路，对这些问题的理解清晰深入了不少，在这里和大家分享。</p>\n</blockquote>\n<p>这篇文章，我会按照执行环境、作用域、作用域链、闭包的顺序，结合着JS中函数的运行机制来梳理相关知识。因为这样的顺序刚好也是这些知识点相互关联且递进的顺序，同时这些知识点都又与函数有着千丝万缕的联系。这样讲解，会更容易让大家彻底理解，至少我就是这样理解清晰的。</p>\n<p>废话不再多说，我们开始。</p>\n<h3 id=\"执行环境\"><a href=\"#执行环境\" class=\"headerlink\" title=\"执行环境\"></a>执行环境</h3><p>首先，我们还是要理解一下什么是执行环境，这也是理清后面问题的基础。</p>\n<blockquote>\n<p>执行环境是JavaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>抽象！不理解！没关系，我来解释：其实，执行环境就是JS中提出的一个概念，它是为了保证代码合理运行采用的一种机制。</p>\n<p>一种概念…机制…更抽象，那它到底是什么？<strong>实际上，执行环境在JS机制内部<code>就是用一个对象来表示的</code>，称作<code>执行环境对象</code>，简称<code>环境对象</code></strong>。</p>\n<p>那么，这个执行环境对象到底又是何时、怎么产生的呢？有以下两种情况：</p>\n<ol>\n<li>在页面中的脚本开始执行时，就会产生一个“全局执行环境”。它是最外围（范围最大，或者说层级最高）的一个执行环境，对应着一个全局环境对象。在Web浏览器中，这个对象就是<code>Window</code>对象。</li>\n<li>当一个函数被调用的时候，也会创建一个属于该函数的执行环境，称作“局部执行环境”（或者称作函数执行环境），它也对应着自己的环境对象。</li>\n</ol>\n<p>因此，执行环境就分为<code>全局执行环境</code>和<code>局部执行环境</code>两种，每个执行环境都有一个属于自己的环境对象。</p>\n<p>既然执行环境是使用一个对象表示的，那么对象就有属性。我们来看看环境对象的三个有意思的属性。<code>变量对象</code>、<code>[[scope]]</code>、<code>this</code>。</p>\n<p><img src=\"/medias/article/coding/ectx-scope-closure/context-object.jpg\" alt=\"环境对象\"></p>\n<h4 id=\"环境对象中的变量对象\"><a href=\"#环境对象中的变量对象\" class=\"headerlink\" title=\"环境对象中的变量对象\"></a>环境对象中的变量对象</h4><p>《JS高程》中明确说明，执行环境定义了变量或函数有权访问的其他数据。那么这些数据到底被放（存储）在哪里呢？</p>\n<p>其实，每个执行环境都有一个与之关联的变量对象，在环境中定义的所有变量和函数都保存在这个对象中。我们在代码无法访问这个对象，但解析器在处理数据时会在内部使用它。</p>\n<p>通俗地说就是：一个执行环境中的所有变量和函数都保存在它对应的环境对象的变量对象（属性）中。</p>\n<h4 id=\"认识-scope-前先理解作用域\"><a href=\"#认识-scope-前先理解作用域\" class=\"headerlink\" title=\"认识[[scope]]前先理解作用域\"></a>认识[[scope]]前先理解作用域</h4><p>在讲<code>[[scope]]</code>前，我们就需要先弄清楚什么是<strong>作用域</strong>了。因为作用域与<code>[[scope]]</code>之间存在着非常紧密的关系。</p>\n<blockquote>\n<p>《JS高程》中没有明确给出作用域的定义和描述。其实，作用域就是变量或者函数可以被访问的代码范围，或者说作用域就是变量和函数所起作用的范围。</p>\n</blockquote>\n<p>这样看来作用域也像是一个概念，它是用来描述一个区域（或者说范围）的。在JS中，作用域分为<code>全局作用域</code>、<code>局部作用域</code>两种。</p>\n<p>我们来看看这两种作用域的具体描述：</p>\n<p>  <strong>①</strong>在页面中的脚本开始执行时，就会产生一个“全局作用域”。它是最外围（范围最大，或者说层级最高）的一个作用域。全局作用域的变量、函数<br>可以在代码的任何地方访问到。<br>  <strong>②</strong>当一个函数被创建的时候，会创建一个“局部作用域”。局部作用域中的函数、变量只能在某些局部代码中可以访问到。</p>\n<p>看一个例子：</p>\n<pre><code>var g = &#39;Global&#39;;\n\nfunction outer() {\n  var out = &#39;outer&#39;;\n\n  function inner() {\n    var inn = &#39;inner&#39;;\n  }\n} \n</code></pre><p>上面这个例子，产生的作用域就如下图所示：</p>\n<p><img src=\"/medias/article/coding/ectx-scope-closure/scope.jpg\" alt=\"作用域\"></p>\n<p><strong>请注意上面</strong>①<strong>、</strong>②<strong>这两段话！！！</strong>是不是觉得很熟悉，似曾相识？！没错，这两段话和介绍全局/局部执行环境（全局/局部环境对象）时候的描述几乎一摸一样！作用域是不是和环境对象有着千丝万缕的联系呢？与此同时，我们再仔细回忆一下：1、作用域就是变量或者函数可以被访问的代码范围。2、一个执行环境中定义的所有变量和函数都保存在它对应的环境对象中。</p>\n<p>结合上面所述，其实不难得出：尽管作用域的描述更像是一个概念，但如果一定要将它具象化，问它到底是什么东西，与执行环境有什么关系？<strong><code>其实，作用域所对应的（不是相等、等于）是环境对象中的变量对象。</code></strong></p>\n<p>明白了这些，我们就可以来看看环境对象中的<code>[[scope]]</code>属性。</p>\n<h4 id=\"环境对象中的-scope\"><a href=\"#环境对象中的-scope\" class=\"headerlink\" title=\"环境对象中的[[scope]]\"></a>环境对象中的[[scope]]</h4><p>首先，要明确的是，环境对象中的<code>[[scope]]</code>属性值是一个指针，它指向该执行环境的作用域链。</p>\n<p>到底什么是作用域链呢？<strong>作用域链本质上就是一个<code>有序的列表</code>，而列表中的每一项都是一个<code>指向不同环境对象中的变量对象的指针</code>。</strong></p>\n<p>那么，这个作用域链到底是怎么形成的呢？它里面指向变量对象的指针的顺序又是如何规定的呢？我们用下面这个简单的例子说明。</p>\n<pre><code>var g = &#39;Hello&#39;;\n\nfunction inner() {\n  var inn = &#39;Inner&#39;;\n  var res = g + inn;\n  return res;\n}\n\ninner();\n</code></pre><p>当执行了<code>inner();</code>这一行代码后，代码执行流进入<code>inner</code>函数内部，此时，JS内部会先创建<code>inner</code>函数的局部执行环境，然后创建该环境的作用域链。这个作用域链的最前端，就是<code>inner</code>执行环境自己的环境对象中的<code>变量对象</code>，作用域链第二项，就是全局环境的环境对象中的<code>变量对象</code>。这条作用域链如下图所示：</p>\n<p><img src=\"/medias/article/coding/ectx-scope-closure/scope-chain.jpg\" alt=\"作用域链\"></p>\n<p>形成了这样的作用域链之后，就可以有秩序地访问一个变量了。以这个例子为例：当执行<code>inner();</code>进入函数体内后，执行<code>g + inn;</code>一行，需要访问变量<code>g、inn</code>，此时JS内部机制就会沿着这条作用域链查找所需变量。在当前<code>inner</code>函数的作用域中找到了变量<code>inn</code>，值为<code>&#39;Inner&#39;</code>，查找终止。但是却没有找到变量<code>g</code>，于是沿着作用域链向上查找，进入全局作用域，在全局变量对象中找到了变量<code>g</code>，值为<code>&#39;Hello&#39;</code>，查找终止。计算得出<code>res</code>为<code>&#39;HelloInner&#39;</code>，并在最后返回结果。</p>\n<p>与上面所讲机制完全相同，如果是多层执行环境嵌套，则作用域链是这么形成的：</p>\n<blockquote>\n<p>当代码执行进入一个执行环境时，JS内部会开始创建该环境的作用域链。作用域链的<strong>最前端</strong>，始终都是<strong>当前执行环境的执行环境对象中的变量对象</strong>。如果这个环境是<strong>局部执行环境（函数执行环境）</strong>，则将其<strong>活动对象</strong>作为<strong>变量对象</strong>。作用域链中的下一个是来自<strong>外层环境对象的变量对象</strong>，而再下一个则是来自<strong>再外层环境对象的变量对象</strong>…… 这样<strong>一直延续到全局环境对象的变量对象</strong>。所以，全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p>\n</blockquote>\n<p>讲到这里，可能你已经对执行环境、执行环境对象、变量对象、作用域、作用域链的理解已经他们之间的关系有了一个较清晰的认识。也有可能，对这么多的抽象问题还是有些懵懵懂懂。没关系，我们用下面这一张图，将上面的所有内容串联起来，来直观感受和理解他们。</p>\n<pre><code>var g = &#39;Global&#39;;\nfunction outer() {\n  var out = &#39;outer&#39;;\n  function inner() {\n    var inn = &#39;inner&#39;;\n  }\n  inner();\n}\nouter();\n</code></pre><p><img src=\"/medias/article/coding/ectx-scope-closure/ctx-ctxObj-varObj-scope-scopeChain.jpg\" alt=\"环境、环境对象、变量对象、作用域、作用域链\"></p>\n<p><strong>对于这张图，有一些需要注意的地方：</strong></p>\n<ol>\n<li>当函数调用时，才会创建函数的执行环境和它的环境对象，再创建函数的活动对象，再创建函数环境的作用域链。</li>\n<li>上图中间一列变量对象中，<code>outer</code>、<code>inner</code>的变量对象其实是该函数的活动对象。<strong>全局环境是没有活动对象的，只有在函数环境中，才会使用函数的活动对象来作为它的变量对象</strong>。</li>\n<li>函数的活动对象，是在函数创建时使用函数内置的<code>arguments</code>类数组和<strong>其他命名参数</strong>来初始化的。所以实际上，<strong>函数的变量对象中应该还包含一个指向<code>arguments</code>类数组的指针</strong>。</li>\n</ol>\n<p>有了对作用域、作用域链的理解，最后，我们来说一说闭包。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><h4 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h4><blockquote>\n<p>闭包就是有权访问另一个函数作用域中的变量的函数。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>对于闭包，最简单的大白话可以这么理解：</p>\n<blockquote>\n<p><strong>①</strong>外部函数声明内部函数，内部函数引用外部函数的局部变量，这些变量不会被释放！——这是我曾经看到的别人的说法</p>\n</blockquote>\n<p>或者这么理解：</p>\n<blockquote>\n<p><strong>②</strong>当在一个函数中返回另一个函数的时候（是返回一个函数，不是返回函数的调用或者函数的执行结果），就会形成闭包，被返回的这个函数就叫做闭包函数。——这是我自己的理解</p>\n</blockquote>\n<p>上面两句话看似不同，其实本质是一样的。来看一个最简单的闭包的例子：</p>\n<pre><code>function sum() {\n  var num1 = 100;\n\n  // 这里返回的是函数(体)，不是函数的调用\n  return function(num2) {\n    return num1 + num2;\n  }\n}\n\n// 此时result指向sum返回的那个匿名函数\n// 注意！此时该匿名函数并没有被执行\nlet result = sum()；\n\nresult(200);\n</code></pre><p>那么，上面几行代码，为什么就会形成闭包呢？我们来分析一下，代码执行中JS内部到底做了什么？</p>\n<p>首先，有一点必须明确，就是<strong>一般情况下，一个函数执行完内部的代码，函数调用时所创建的执行环境、环境对象（包括变量对象、[[scope]]等）都会被销毁，它们的生命周期就只有函数调用到函数执行结束这一段时间</strong>。</p>\n<p>但是上面的例子，就会出现例外。</p>\n<p>当执行<code>sum()</code>时，调用该函数，创建它的环境对象，其中作用域链中第一项是自己环境的变量对象，第二项是全局环境的变量对象。当创建匿名函数的时候，也会创建匿名函数的环境对象，其中作用域链第一项是自己环境的变量对象，第二项是<code>sum</code>环境的变量对象，第三项是全局变量对象。</p>\n<p>这时，问题就来了。按说，当函数<code>sum</code>执行完<code>return</code>之后，他的执行环境、变量对象、作用域链都会被销毁。<strong>可是这时候却不能销毁他的变量对象，因为返回的匿名函数（此时由<code>result</code>指向该函数）并没有执行，这个匿名函数的作用域链中还引用着<code>sum</code>函数的变量对象</strong>。换句话说，即使，<code>sum</code>执行完了，其执行环境的作用域链会被销毁，但是<strong>它的变量对象还会保存在内存中</strong>，我们在<code>sum</code>函数外部，还能访问到它内部的变量<code>num1</code>、<code>num2</code>，这就是形成闭包的真正原因。但是，当result()执行完后，这些变量对象、作用域链就会被销毁。</p>\n<h4 id=\"闭包存在的问题\"><a href=\"#闭包存在的问题\" class=\"headerlink\" title=\"闭包存在的问题\"></a>闭包存在的问题</h4><p>因为闭包形成后，会在函数执行完仍将他的变量对象保存在内存中，当引用时间过长或者引用对象很多的时候，会占用大量内存，严重影响性能。</p>\n<p>来看下面的例子：（这个例子曾经是Tencent微众银行的笔试原题，出现在《JS高程》的7.2.3章节——P184）</p>\n<pre><code>function assignHandler() {\n  var element = document.getElementById(&quot;someElement&quot;);\n  element.onclick = function(){\n    alert(element.id);\n  };\n}\n\n</code></pre><p><code>assignHandler</code>函数中定义的匿名函数是作为<code>element</code>元素的事件处理函数的，且内部使用了<code>element</code>元素（访问元素的<code>id`</code>），因此<code>assignHandler</code>函数执行完，对于<code>element</code>的引用也会一直存在，<code>element</code>元素会一直保存在内存中。</p>\n<p>将上面的例子改成下面这样，就能解决这个问题。</p>\n<pre><code>function assignHandler(){\n  var element = document.getElementById(&quot;someElement&quot;);\n\n  // 这里获取element的id，为其创建一个副本\n  // 这样是为了在下面事件处理函数中解除对element元素的引用\n  var id = element.id;\n\n  element.onclick = function(){\n    alert(id);\n  };\n\n  // 将element置为null，断开对element元素的引用\n  // 这样方便垃圾回收机制回收element所占的内存\n  element = null;\n} \n</code></pre>"},{"title":"ES6 - Promise","date":"2019-03-25T14:10:52.000Z","img":"/medias/article/featureimages/ES6-Promise.jpg","_content":"> Promise是面试中最常见的问题之一，也是ES6中很有用、很核心的一个新特性。尤其在如今异步操作越来越多、越来越复杂的情况下，Prmoise更是显示出了它强大而又优雅的本质。这篇文章，我们来系统地讲解一下Promise相关的核心知识点。\n\n本文，我们按照以下的思路来逐步深入Promise：\n 一、什么是Promise？(What)\n 二、为什么需要Promise？或者说Promise的用途是什么？(Why)\n 三、如何使用Promise？(How)\n 四、Promise的其他方法。\n\n ### 一、什么是Promise\n\n`Promise`是一种异步编程的解决方案，它可以将异步操作以同步的流程表达出来，它比传统的使用回调函数和事件来处理异步问题更加合理，更符合人们线性处理问题的逻辑。\n从语法上说，`Promise`是一个对象，它里面保存着一个将来才会发生的事情（一般是一个异步操作）的状态和结果。\n\n听起来，有些抽象，全是概念性的东西。那接下来我们看看为什么ES6中会出现`Promise`？通过具体示例，可以帮助我们更好的理解什么是`Promise`。\n\n### 二、为什么需要Promise？它的用途是什么？\n\n在ES6出现Promise之前，我们要处理一个异步请求，通常是这样的：\n```\n// 利用回调函数来处理异步请求结果\n// 很多异步请求方法也会设计一些事件，在事件中处理异步请求结果\nasyncRequest(function(resData) {\n    // 处理请求结果\n});\n```\n\n这样看着没什么问题，但需求总是各种各样甚至是变态的。如果我们需要在第一个请求返回结果后再发起第二个请求呢？再如果，第二个请求结果返回后后，我们需要再发起第三个请求呢？之后，再是第四个...第五个......此时，代码应该会变成这样：\n```\nasyncRequest1(function(resData1) {\n    asyncRequest2(function(resData2) {\n        asyncRequest3(function(resData3) {\n            asyncRequest4(function(resData4) {\n                asyncRequest5(function(resData5) {\n                    // ......\n                    // 处理请求结果\n                });\n            });\n        });\n    });\n});\n```\n\n这时，代码嵌套层次太深，再加上每次请求结束我们应该还需要做一些适当的逻辑处理，这样每个处理请求结果的地方还需要额外的代码，这样整个代码块显得很臃肿，一点也不优雅！最主要的是，这样的代码很容易出错，而且出错后不容易定位错误，阅读和维护起来十分费劲。\n\n这就是异步编程最让人头疼和无语的地方：由于异步操作嵌套层次过深而导致的“**回调地狱**”！\n\n出现这种情况，就需要思考新的异步编程的处理方法。有没有什么方法能在满足上面例子的需求的同时又能解决这种嵌套式的回调地狱呢？能不能不使用嵌套式回调，而使用链式回调呢？肯定是有的，这也就是`Promise`出现的原因。同时，能不能最好不使用回调的方式来处理异步请求呢？当然也是可以的，这就是我们后面文章会讲的`async/awiat`。\n\n我们来看看，上面的例子，如果使用Promise来实现是什么样子？应该是这样：\n```\nnew Promise(asyncRequest1)\n    .then(asyncRequest2(resData1))\n    .then(asyncRequest3(resData2))\n    .then(asyncRequest4(resData3))\n    .then(asyncRequest5(resData4))\n    .catch(handleError(errorMsg))\n```\n上面的例子，只有每个一步请求`asyncRequest`成功返回结果，才会进入下一个`.then()`方法中，从而进行下一个异步请求......以此类推。当任何一个请求出错时，就会进入`.catch()`方法中，可以在这里处理错误。这样的链式回调，既满足前面例子的需求，同时又避免了嵌套回调，从而避免了“回调地狱”的出现。\n\n这里具体的语法看不懂，不要紧！不要慌！这个例子只是为了说明`Promise`是如何用链式回调来解决嵌套回调地狱的。接下来，我们就来说说如何使用`Promise`，讲讲它的基本语法。\n\n### 三、如何使用Promise（基本语法）\n\n#### 1、创建一个Promise对象实例\nES6中规定，`Promise`是一个构造函数，可以用来实例化一个`Promise`对象。下面是一个简单的例子：\n```\n// Promise构造函数接收一个函数作为参数\nlet promise = new Promise(Function);\n```\n#### 2、Promise的状态及其改变\n文章最开始介绍什么是Promise的时候说过：`Promise`是一个对象，它里面保存着一个将来才会发生的事情（一般是一个异步操作）的状态和结果。\n\n我们先来看看Promise代表的异步操作的状态有哪几种？——一共只有三种状态：\n 1. pending（进行中）\n 2. fulfilled（已成功）\n 3. rejected（已失败）\n\n这三种状态，不会共存，`Promise`只会处于其中某一种状态。当异步请求开始并且未结束（没有返回结果）时，处于`pending`状态。当异步请求返回结果后，可以根据请求返回的结果将`Promise`的状态修改为`fulfilled`或者`rejected`。并且，一旦`Promise`的状态第一次改变，就再也不能更改为其它任何状态。所以，`Promise`的状态改变过程**只有**两种情况：\n 1. pending --> fulfilled（进行中 --> 已成功）\n 2. pending --> rejected（进行中 --> 已失败）\n\n那么，如何修改`Promise`的状态呢？这就需要了解调用`Promise`构造函数时，传递给构造函数的`Function`参数了。`Promise`会为这个函数设置两个参数，`resolve`、`reject`。这两个参数是两个函数，由JavaScript引擎提供，不用自己部署。\n\n`resolve()`函数，可以将`Promise`的状态由`pending`改变为`fulfilled`。`reject()`函数，可以将`Promise`的状态由`pending`改变为`rejected`。\n\n**这里有两点需要注意的地方！！**\n 1. 在`Promise`内部只有用`resolve()`、`reject()`才能改变它的状态。`return`任何值（包括一个Error实例）都不会改变它的状态。\n 2. `resolve()`、`reject()`和`return`的意义不同。它们只是改变了`Promise`的状态，并不会结束代码执行。也就是说`resolve()`、`reject()`之后的代码依旧会执行。（虽然不建议在他们后面再有代码出现）\n 3. 在定义`Promise`时，参数函数中异步操作之外的同步代码都会立即执行。\n\n来看一个示例，简单明了地理解上面的文字。\n```\nlet promise = new Promise(function(resolve, reject) {\n    // 下面两行代码会立即执行，不会等待异步操作结果返回、状态改变\n    let a = '123';\n    console.log(a); // '123'\n\n    // 一个异步请求\n    asyncRequest(function(resData) {\n        if (/* 异步操作成功 */){\n            // 将Promise的状态改为fulfilled（已成功）\n            resolve(resData);   // resData一般是异步操作的结果\n        } else {\n            // 将Promise的状态改为rejected（已失败）\n            reject(resData);    // resData一般是一些错误信息\n        }\n    });\n});\n```\n上面的例子，在`Promise`内部发起了一个异步请求，当请求完成，拿到返回值`resData`时，我们可以根据具体的业务需求修改`Promise`的对应状态。\n\n#### 3、Promise保存异步操作的结果\n细心的同学会发现，上面的例子中，我们在`resolve()`和`reject()`函数中传入了参数`resData`，这是在干什么？还记得么？`Promise`不仅能保存异步操作的状态，还能保存异步操作的结果。我们将将异步操作的结果`resData`传给这两个函数，就是将其保存到了`Promise`对象中。\n\n#### 4、获取Promise中的状态和结果（.then()/.catch()）\n那么，`Prmoise`对象中保存了异步操作的最终状态和结果，我们如何获取呢？换句话说，我们怎么知道异步操作的状态和结果分别是什么呢？\n\n其实，每个`Promise`的对象实例都会有一个`.then()`和`.catch()`方法，这两个方法都接收一个函数作为参数，这个函数会被`Promise`传入一个参数，这个参数就是传入`resolve()`、`reject()`方法中的异步请求的结果（上个例子中的`resData`）。当`Promise`内部状态变为`fulfilled`时，就会进入`.then()`方法中，执行里面的回调函数。同理，当`Promise`内部状态变为`rejected`时，就会进入`.catch()`方法中，执行里面的回调函数。\n\n```\n/***接着上面例子***/\npromise.then(function(resData) {\n    // promise状态变为fulfilled，执行这里\n    console.log(resData);\n}).catch(function(resData) {\n    // promise状态变为rejected，执行这里\n    console.log(resData);\n});\n```\n\n像上面这样，当执行进入`.then()`中，就说明`Promise`的状态是`fulfilled`。进入`.catch()`中，就说明状态是`rejected`，一般会在这里进行错误处理。同时，异步操作的结果会被传入定义在`.then()`、`.catch()`内部的函数中，我们可以直接访问使用。\n\n#### 5、.then()/.catch()的链式调用\n\n**在`.then()/.catch()`的返回值依旧是一个`Promise`实例。**也就是说，在`.then()/.catch()`中`return`任何值，都会被转化成一个`Promise`实例。所以`.then()`后面可以链式继续调用`.then()/.catch`，`.catch()`后面同样也可以。于是，就有可能出现下面这样的代码：\n```\n// 这样的代码是完全没有问题的。\npromise.then(function(resData) {\n    // 一些代码\n}).then(function(resData) {\n    // 一些代码\n}).catch(function(error) {\n    // 一些代码\n}).then(function(resData) {\n    // 一些代码\n}).catch(function(error) {\n    // 一些代码\n});\n```\n\n**这里有一些需要注意的地方！！**\n 1. 前一个`.then()`中`return`任何值（包括一个`Error`实例），都会进入后面最邻近的`.then()`。\n 2. 前一个`.then()`中`throw`任何值或者内部代码报错，都会进入后面最邻近的`.catch()`。\n 3. 同理，上述原理在`.catch()`中的情况与`.then()`中完全一致。\n\n### 四、Promise的其他方法\n\n#### 1、 Promise.resolve()\n`Promise.resolve`方法接收一个任意值作为参数，可以将其转换为Promise对象。\n\n该方法对参数的处理，可以分为以下四种不同的情况：\n##### （1）参数是一个Promise实例\n此时，`Promise.resolve`方法将不会做任何转换，直接原封不动的返回这个实例。\n\n##### （2）参数是一个thenable对象\n`thenable`对象是指对象内部实现了`then`方法的对象。此时，`Promise.resolve`方法会先将该对象转换为`Promise`对象，然后立即执行参数对象自己的`then`方法。\n\n**最终，转换成的`Promise`对象的状态完全依赖于它内部`then`方法的具体实现，不一定是`fulfilled`状态，也有可能是`rejected`。**\n```\n// 定义一个thenable对象\nlet thenable = {\n    then: function(resolve, reject) {\n        resolve(42);\n        // 如果换成执行下面一行代码，后面将会进入.catch()中\n        // reject('error');\n    }\n};\nlet p1 = Promise.resolve(thenable);\np1.then(function(value) {\n    console.log(value);       // 42\n}).catch(function(value) {\n    console.log(value);     // 'error'\n});\n```\n\n##### （3）参数不是thenable对象，或者不是一个对象\n如果参数不是`thenable`对象，或者不是一个对象，`Promise.resolve`方法返回一个新的`Promise`对象，**状态为`fulfilled`**，对象保存的值就是这个参数值。\n\n```\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'));\n\nlet p = Promise.resolve('Hello');\np.then(function (s){\n    console.log(s);   // 'Hello'\n});\n```\n\n##### （4）不传任何参数\n`Promise.resolve`方法允许调用时不带参数，直接返回一个`fulfilled`状态的`Promise`对象，对象保存的值为`undefined`。\n\n```\nlet p = Promise.resolve();\n\np.then(function (value) {\n  console.log(value);   // undefined\n});\n```\n\n#### 2、Promise.reject()\n`Promise.reject`方法也会返回一个新的`Promise`实例。**不论传入的参数是什么数据类型，有没有`thenable`方法，该实例的状态一定为为`rejected`，且返回的`Promise`对象中保存的值就是传入`Promise.reject`方法时原封不动的参数值**。\n```\n例子一\nlet p = Promise.reject('error');\n// 等同于\nlet p = new Promise((resolve, reject) => reject('error'));\n\n// 例子二\nlet thenable = {\n    then(resolve, reject) {\n        /**\n         * 不论执行下面的哪一行，\n         * 最后Promise对象的状态都是rejected，\n         * 都会进入.catch中\n         *\n        reject('error');\n        // resolve('fulfilled');\n    }\n};\n\nPromise.reject(thenable).then(data => {\n    // 不会进入这里！！\n    console.log('进入then！');\n}).catch(e => {\n    console.log('进入catch！');\n    // ！注意！这里的e的值是传入Promise.reject()方法的thenable对象\n    console.log(e === thenable);  // true\n})\n```\n\n#### 2、Promise.all()\n`Promise.all`方法用于将多个`Promise`实例，包装成一个新的`Promise`实例。\n```\nlet p = Promise.all([p1, p2, p3]);\n```\n\n`Promise.all`方法接收一个数组作为参数，数组元素`p1`/`p2`/`p3`都是`Promise`实例。如果不是，就会先调用`Promise.resolve()`方法，将参数转为`Promise`实例，再进一步处理。\n\n最终，`p`的状态由`p1`/`p2`/`p3`共同决定，分成两种情况：\n 1. 只有`p1`/`p2`/`p3`的状态都变成`fulfilled`，`p`的状态才会变成`fulfilled`。此时`p1`/`p2`/`p3`的返回值组成一个数组，传递给`p`的回调函数。\n 2. 只要`p1`/`p2`/`p3`之中有一个被`rejected`，`p`的状态就变成`rejected`。此时第一个被`reject`的实例的返回值，会传递给`p`的回调函数。\n\n#### 2、Promise.race()\n`Promise.race`方法同样是将多个`Promise`实例，包装成一个新的`Promise`实例。\n```\nlet p = Promise.race([p1, p2, p3]);\n```\n\n`Promise.race`方法接收的参数与`Promise.all`方法一样，如果不是 `Promise` 实例，就会先调用`Promise.resolve()`方法，将参数转为 `Promise` 实例，再进一步处理。\n\n上面的例子中，只要`p1`/`p2`/`p3`之中任意一个实例率先改变状态，不论变为哪种状态，`p`的状态就跟着改变。那个率先改变状态的`Promise`实例的返回值，就传递给`p`的回调函数。","source":"_posts/ES6-Promise.md","raw":"---\ntitle: ES6 - Promise\ndate: 2019-03-25 22:10:52\ncategories: 编程\ntags:\n- ES6\n- Promise\nimg: /medias/article/featureimages/ES6-Promise.jpg\n---\n> Promise是面试中最常见的问题之一，也是ES6中很有用、很核心的一个新特性。尤其在如今异步操作越来越多、越来越复杂的情况下，Prmoise更是显示出了它强大而又优雅的本质。这篇文章，我们来系统地讲解一下Promise相关的核心知识点。\n\n本文，我们按照以下的思路来逐步深入Promise：\n 一、什么是Promise？(What)\n 二、为什么需要Promise？或者说Promise的用途是什么？(Why)\n 三、如何使用Promise？(How)\n 四、Promise的其他方法。\n\n ### 一、什么是Promise\n\n`Promise`是一种异步编程的解决方案，它可以将异步操作以同步的流程表达出来，它比传统的使用回调函数和事件来处理异步问题更加合理，更符合人们线性处理问题的逻辑。\n从语法上说，`Promise`是一个对象，它里面保存着一个将来才会发生的事情（一般是一个异步操作）的状态和结果。\n\n听起来，有些抽象，全是概念性的东西。那接下来我们看看为什么ES6中会出现`Promise`？通过具体示例，可以帮助我们更好的理解什么是`Promise`。\n\n### 二、为什么需要Promise？它的用途是什么？\n\n在ES6出现Promise之前，我们要处理一个异步请求，通常是这样的：\n```\n// 利用回调函数来处理异步请求结果\n// 很多异步请求方法也会设计一些事件，在事件中处理异步请求结果\nasyncRequest(function(resData) {\n    // 处理请求结果\n});\n```\n\n这样看着没什么问题，但需求总是各种各样甚至是变态的。如果我们需要在第一个请求返回结果后再发起第二个请求呢？再如果，第二个请求结果返回后后，我们需要再发起第三个请求呢？之后，再是第四个...第五个......此时，代码应该会变成这样：\n```\nasyncRequest1(function(resData1) {\n    asyncRequest2(function(resData2) {\n        asyncRequest3(function(resData3) {\n            asyncRequest4(function(resData4) {\n                asyncRequest5(function(resData5) {\n                    // ......\n                    // 处理请求结果\n                });\n            });\n        });\n    });\n});\n```\n\n这时，代码嵌套层次太深，再加上每次请求结束我们应该还需要做一些适当的逻辑处理，这样每个处理请求结果的地方还需要额外的代码，这样整个代码块显得很臃肿，一点也不优雅！最主要的是，这样的代码很容易出错，而且出错后不容易定位错误，阅读和维护起来十分费劲。\n\n这就是异步编程最让人头疼和无语的地方：由于异步操作嵌套层次过深而导致的“**回调地狱**”！\n\n出现这种情况，就需要思考新的异步编程的处理方法。有没有什么方法能在满足上面例子的需求的同时又能解决这种嵌套式的回调地狱呢？能不能不使用嵌套式回调，而使用链式回调呢？肯定是有的，这也就是`Promise`出现的原因。同时，能不能最好不使用回调的方式来处理异步请求呢？当然也是可以的，这就是我们后面文章会讲的`async/awiat`。\n\n我们来看看，上面的例子，如果使用Promise来实现是什么样子？应该是这样：\n```\nnew Promise(asyncRequest1)\n    .then(asyncRequest2(resData1))\n    .then(asyncRequest3(resData2))\n    .then(asyncRequest4(resData3))\n    .then(asyncRequest5(resData4))\n    .catch(handleError(errorMsg))\n```\n上面的例子，只有每个一步请求`asyncRequest`成功返回结果，才会进入下一个`.then()`方法中，从而进行下一个异步请求......以此类推。当任何一个请求出错时，就会进入`.catch()`方法中，可以在这里处理错误。这样的链式回调，既满足前面例子的需求，同时又避免了嵌套回调，从而避免了“回调地狱”的出现。\n\n这里具体的语法看不懂，不要紧！不要慌！这个例子只是为了说明`Promise`是如何用链式回调来解决嵌套回调地狱的。接下来，我们就来说说如何使用`Promise`，讲讲它的基本语法。\n\n### 三、如何使用Promise（基本语法）\n\n#### 1、创建一个Promise对象实例\nES6中规定，`Promise`是一个构造函数，可以用来实例化一个`Promise`对象。下面是一个简单的例子：\n```\n// Promise构造函数接收一个函数作为参数\nlet promise = new Promise(Function);\n```\n#### 2、Promise的状态及其改变\n文章最开始介绍什么是Promise的时候说过：`Promise`是一个对象，它里面保存着一个将来才会发生的事情（一般是一个异步操作）的状态和结果。\n\n我们先来看看Promise代表的异步操作的状态有哪几种？——一共只有三种状态：\n 1. pending（进行中）\n 2. fulfilled（已成功）\n 3. rejected（已失败）\n\n这三种状态，不会共存，`Promise`只会处于其中某一种状态。当异步请求开始并且未结束（没有返回结果）时，处于`pending`状态。当异步请求返回结果后，可以根据请求返回的结果将`Promise`的状态修改为`fulfilled`或者`rejected`。并且，一旦`Promise`的状态第一次改变，就再也不能更改为其它任何状态。所以，`Promise`的状态改变过程**只有**两种情况：\n 1. pending --> fulfilled（进行中 --> 已成功）\n 2. pending --> rejected（进行中 --> 已失败）\n\n那么，如何修改`Promise`的状态呢？这就需要了解调用`Promise`构造函数时，传递给构造函数的`Function`参数了。`Promise`会为这个函数设置两个参数，`resolve`、`reject`。这两个参数是两个函数，由JavaScript引擎提供，不用自己部署。\n\n`resolve()`函数，可以将`Promise`的状态由`pending`改变为`fulfilled`。`reject()`函数，可以将`Promise`的状态由`pending`改变为`rejected`。\n\n**这里有两点需要注意的地方！！**\n 1. 在`Promise`内部只有用`resolve()`、`reject()`才能改变它的状态。`return`任何值（包括一个Error实例）都不会改变它的状态。\n 2. `resolve()`、`reject()`和`return`的意义不同。它们只是改变了`Promise`的状态，并不会结束代码执行。也就是说`resolve()`、`reject()`之后的代码依旧会执行。（虽然不建议在他们后面再有代码出现）\n 3. 在定义`Promise`时，参数函数中异步操作之外的同步代码都会立即执行。\n\n来看一个示例，简单明了地理解上面的文字。\n```\nlet promise = new Promise(function(resolve, reject) {\n    // 下面两行代码会立即执行，不会等待异步操作结果返回、状态改变\n    let a = '123';\n    console.log(a); // '123'\n\n    // 一个异步请求\n    asyncRequest(function(resData) {\n        if (/* 异步操作成功 */){\n            // 将Promise的状态改为fulfilled（已成功）\n            resolve(resData);   // resData一般是异步操作的结果\n        } else {\n            // 将Promise的状态改为rejected（已失败）\n            reject(resData);    // resData一般是一些错误信息\n        }\n    });\n});\n```\n上面的例子，在`Promise`内部发起了一个异步请求，当请求完成，拿到返回值`resData`时，我们可以根据具体的业务需求修改`Promise`的对应状态。\n\n#### 3、Promise保存异步操作的结果\n细心的同学会发现，上面的例子中，我们在`resolve()`和`reject()`函数中传入了参数`resData`，这是在干什么？还记得么？`Promise`不仅能保存异步操作的状态，还能保存异步操作的结果。我们将将异步操作的结果`resData`传给这两个函数，就是将其保存到了`Promise`对象中。\n\n#### 4、获取Promise中的状态和结果（.then()/.catch()）\n那么，`Prmoise`对象中保存了异步操作的最终状态和结果，我们如何获取呢？换句话说，我们怎么知道异步操作的状态和结果分别是什么呢？\n\n其实，每个`Promise`的对象实例都会有一个`.then()`和`.catch()`方法，这两个方法都接收一个函数作为参数，这个函数会被`Promise`传入一个参数，这个参数就是传入`resolve()`、`reject()`方法中的异步请求的结果（上个例子中的`resData`）。当`Promise`内部状态变为`fulfilled`时，就会进入`.then()`方法中，执行里面的回调函数。同理，当`Promise`内部状态变为`rejected`时，就会进入`.catch()`方法中，执行里面的回调函数。\n\n```\n/***接着上面例子***/\npromise.then(function(resData) {\n    // promise状态变为fulfilled，执行这里\n    console.log(resData);\n}).catch(function(resData) {\n    // promise状态变为rejected，执行这里\n    console.log(resData);\n});\n```\n\n像上面这样，当执行进入`.then()`中，就说明`Promise`的状态是`fulfilled`。进入`.catch()`中，就说明状态是`rejected`，一般会在这里进行错误处理。同时，异步操作的结果会被传入定义在`.then()`、`.catch()`内部的函数中，我们可以直接访问使用。\n\n#### 5、.then()/.catch()的链式调用\n\n**在`.then()/.catch()`的返回值依旧是一个`Promise`实例。**也就是说，在`.then()/.catch()`中`return`任何值，都会被转化成一个`Promise`实例。所以`.then()`后面可以链式继续调用`.then()/.catch`，`.catch()`后面同样也可以。于是，就有可能出现下面这样的代码：\n```\n// 这样的代码是完全没有问题的。\npromise.then(function(resData) {\n    // 一些代码\n}).then(function(resData) {\n    // 一些代码\n}).catch(function(error) {\n    // 一些代码\n}).then(function(resData) {\n    // 一些代码\n}).catch(function(error) {\n    // 一些代码\n});\n```\n\n**这里有一些需要注意的地方！！**\n 1. 前一个`.then()`中`return`任何值（包括一个`Error`实例），都会进入后面最邻近的`.then()`。\n 2. 前一个`.then()`中`throw`任何值或者内部代码报错，都会进入后面最邻近的`.catch()`。\n 3. 同理，上述原理在`.catch()`中的情况与`.then()`中完全一致。\n\n### 四、Promise的其他方法\n\n#### 1、 Promise.resolve()\n`Promise.resolve`方法接收一个任意值作为参数，可以将其转换为Promise对象。\n\n该方法对参数的处理，可以分为以下四种不同的情况：\n##### （1）参数是一个Promise实例\n此时，`Promise.resolve`方法将不会做任何转换，直接原封不动的返回这个实例。\n\n##### （2）参数是一个thenable对象\n`thenable`对象是指对象内部实现了`then`方法的对象。此时，`Promise.resolve`方法会先将该对象转换为`Promise`对象，然后立即执行参数对象自己的`then`方法。\n\n**最终，转换成的`Promise`对象的状态完全依赖于它内部`then`方法的具体实现，不一定是`fulfilled`状态，也有可能是`rejected`。**\n```\n// 定义一个thenable对象\nlet thenable = {\n    then: function(resolve, reject) {\n        resolve(42);\n        // 如果换成执行下面一行代码，后面将会进入.catch()中\n        // reject('error');\n    }\n};\nlet p1 = Promise.resolve(thenable);\np1.then(function(value) {\n    console.log(value);       // 42\n}).catch(function(value) {\n    console.log(value);     // 'error'\n});\n```\n\n##### （3）参数不是thenable对象，或者不是一个对象\n如果参数不是`thenable`对象，或者不是一个对象，`Promise.resolve`方法返回一个新的`Promise`对象，**状态为`fulfilled`**，对象保存的值就是这个参数值。\n\n```\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'));\n\nlet p = Promise.resolve('Hello');\np.then(function (s){\n    console.log(s);   // 'Hello'\n});\n```\n\n##### （4）不传任何参数\n`Promise.resolve`方法允许调用时不带参数，直接返回一个`fulfilled`状态的`Promise`对象，对象保存的值为`undefined`。\n\n```\nlet p = Promise.resolve();\n\np.then(function (value) {\n  console.log(value);   // undefined\n});\n```\n\n#### 2、Promise.reject()\n`Promise.reject`方法也会返回一个新的`Promise`实例。**不论传入的参数是什么数据类型，有没有`thenable`方法，该实例的状态一定为为`rejected`，且返回的`Promise`对象中保存的值就是传入`Promise.reject`方法时原封不动的参数值**。\n```\n例子一\nlet p = Promise.reject('error');\n// 等同于\nlet p = new Promise((resolve, reject) => reject('error'));\n\n// 例子二\nlet thenable = {\n    then(resolve, reject) {\n        /**\n         * 不论执行下面的哪一行，\n         * 最后Promise对象的状态都是rejected，\n         * 都会进入.catch中\n         *\n        reject('error');\n        // resolve('fulfilled');\n    }\n};\n\nPromise.reject(thenable).then(data => {\n    // 不会进入这里！！\n    console.log('进入then！');\n}).catch(e => {\n    console.log('进入catch！');\n    // ！注意！这里的e的值是传入Promise.reject()方法的thenable对象\n    console.log(e === thenable);  // true\n})\n```\n\n#### 2、Promise.all()\n`Promise.all`方法用于将多个`Promise`实例，包装成一个新的`Promise`实例。\n```\nlet p = Promise.all([p1, p2, p3]);\n```\n\n`Promise.all`方法接收一个数组作为参数，数组元素`p1`/`p2`/`p3`都是`Promise`实例。如果不是，就会先调用`Promise.resolve()`方法，将参数转为`Promise`实例，再进一步处理。\n\n最终，`p`的状态由`p1`/`p2`/`p3`共同决定，分成两种情况：\n 1. 只有`p1`/`p2`/`p3`的状态都变成`fulfilled`，`p`的状态才会变成`fulfilled`。此时`p1`/`p2`/`p3`的返回值组成一个数组，传递给`p`的回调函数。\n 2. 只要`p1`/`p2`/`p3`之中有一个被`rejected`，`p`的状态就变成`rejected`。此时第一个被`reject`的实例的返回值，会传递给`p`的回调函数。\n\n#### 2、Promise.race()\n`Promise.race`方法同样是将多个`Promise`实例，包装成一个新的`Promise`实例。\n```\nlet p = Promise.race([p1, p2, p3]);\n```\n\n`Promise.race`方法接收的参数与`Promise.all`方法一样，如果不是 `Promise` 实例，就会先调用`Promise.resolve()`方法，将参数转为 `Promise` 实例，再进一步处理。\n\n上面的例子中，只要`p1`/`p2`/`p3`之中任意一个实例率先改变状态，不论变为哪种状态，`p`的状态就跟着改变。那个率先改变状态的`Promise`实例的返回值，就传递给`p`的回调函数。","slug":"ES6-Promise","published":1,"updated":"2019-05-19T11:30:31.727Z","_id":"cjvuu4mqp00059kvbxqqs93yg","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Promise是面试中最常见的问题之一，也是ES6中很有用、很核心的一个新特性。尤其在如今异步操作越来越多、越来越复杂的情况下，Prmoise更是显示出了它强大而又优雅的本质。这篇文章，我们来系统地讲解一下Promise相关的核心知识点。</p>\n</blockquote>\n<p>本文，我们按照以下的思路来逐步深入Promise：<br> 一、什么是Promise？(What)<br> 二、为什么需要Promise？或者说Promise的用途是什么？(Why)<br> 三、如何使用Promise？(How)<br> 四、Promise的其他方法。</p>\n<h3 id=\"一、什么是Promise\"><a href=\"#一、什么是Promise\" class=\"headerlink\" title=\"一、什么是Promise\"></a>一、什么是Promise</h3><p><code>Promise</code>是一种异步编程的解决方案，它可以将异步操作以同步的流程表达出来，它比传统的使用回调函数和事件来处理异步问题更加合理，更符合人们线性处理问题的逻辑。<br>从语法上说，<code>Promise</code>是一个对象，它里面保存着一个将来才会发生的事情（一般是一个异步操作）的状态和结果。</p>\n<p>听起来，有些抽象，全是概念性的东西。那接下来我们看看为什么ES6中会出现<code>Promise</code>？通过具体示例，可以帮助我们更好的理解什么是<code>Promise</code>。</p>\n<h3 id=\"二、为什么需要Promise？它的用途是什么？\"><a href=\"#二、为什么需要Promise？它的用途是什么？\" class=\"headerlink\" title=\"二、为什么需要Promise？它的用途是什么？\"></a>二、为什么需要Promise？它的用途是什么？</h3><p>在ES6出现Promise之前，我们要处理一个异步请求，通常是这样的：</p>\n<pre><code>// 利用回调函数来处理异步请求结果\n// 很多异步请求方法也会设计一些事件，在事件中处理异步请求结果\nasyncRequest(function(resData) {\n    // 处理请求结果\n});\n</code></pre><p>这样看着没什么问题，但需求总是各种各样甚至是变态的。如果我们需要在第一个请求返回结果后再发起第二个请求呢？再如果，第二个请求结果返回后后，我们需要再发起第三个请求呢？之后，再是第四个…第五个……此时，代码应该会变成这样：</p>\n<pre><code>asyncRequest1(function(resData1) {\n    asyncRequest2(function(resData2) {\n        asyncRequest3(function(resData3) {\n            asyncRequest4(function(resData4) {\n                asyncRequest5(function(resData5) {\n                    // ......\n                    // 处理请求结果\n                });\n            });\n        });\n    });\n});\n</code></pre><p>这时，代码嵌套层次太深，再加上每次请求结束我们应该还需要做一些适当的逻辑处理，这样每个处理请求结果的地方还需要额外的代码，这样整个代码块显得很臃肿，一点也不优雅！最主要的是，这样的代码很容易出错，而且出错后不容易定位错误，阅读和维护起来十分费劲。</p>\n<p>这就是异步编程最让人头疼和无语的地方：由于异步操作嵌套层次过深而导致的“<strong>回调地狱</strong>”！</p>\n<p>出现这种情况，就需要思考新的异步编程的处理方法。有没有什么方法能在满足上面例子的需求的同时又能解决这种嵌套式的回调地狱呢？能不能不使用嵌套式回调，而使用链式回调呢？肯定是有的，这也就是<code>Promise</code>出现的原因。同时，能不能最好不使用回调的方式来处理异步请求呢？当然也是可以的，这就是我们后面文章会讲的<code>async/awiat</code>。</p>\n<p>我们来看看，上面的例子，如果使用Promise来实现是什么样子？应该是这样：</p>\n<pre><code>new Promise(asyncRequest1)\n    .then(asyncRequest2(resData1))\n    .then(asyncRequest3(resData2))\n    .then(asyncRequest4(resData3))\n    .then(asyncRequest5(resData4))\n    .catch(handleError(errorMsg))\n</code></pre><p>上面的例子，只有每个一步请求<code>asyncRequest</code>成功返回结果，才会进入下一个<code>.then()</code>方法中，从而进行下一个异步请求……以此类推。当任何一个请求出错时，就会进入<code>.catch()</code>方法中，可以在这里处理错误。这样的链式回调，既满足前面例子的需求，同时又避免了嵌套回调，从而避免了“回调地狱”的出现。</p>\n<p>这里具体的语法看不懂，不要紧！不要慌！这个例子只是为了说明<code>Promise</code>是如何用链式回调来解决嵌套回调地狱的。接下来，我们就来说说如何使用<code>Promise</code>，讲讲它的基本语法。</p>\n<h3 id=\"三、如何使用Promise（基本语法）\"><a href=\"#三、如何使用Promise（基本语法）\" class=\"headerlink\" title=\"三、如何使用Promise（基本语法）\"></a>三、如何使用Promise（基本语法）</h3><h4 id=\"1、创建一个Promise对象实例\"><a href=\"#1、创建一个Promise对象实例\" class=\"headerlink\" title=\"1、创建一个Promise对象实例\"></a>1、创建一个Promise对象实例</h4><p>ES6中规定，<code>Promise</code>是一个构造函数，可以用来实例化一个<code>Promise</code>对象。下面是一个简单的例子：</p>\n<pre><code>// Promise构造函数接收一个函数作为参数\nlet promise = new Promise(Function);\n</code></pre><h4 id=\"2、Promise的状态及其改变\"><a href=\"#2、Promise的状态及其改变\" class=\"headerlink\" title=\"2、Promise的状态及其改变\"></a>2、Promise的状态及其改变</h4><p>文章最开始介绍什么是Promise的时候说过：<code>Promise</code>是一个对象，它里面保存着一个将来才会发生的事情（一般是一个异步操作）的状态和结果。</p>\n<p>我们先来看看Promise代表的异步操作的状态有哪几种？——一共只有三种状态：</p>\n<ol>\n<li>pending（进行中）</li>\n<li>fulfilled（已成功）</li>\n<li>rejected（已失败）</li>\n</ol>\n<p>这三种状态，不会共存，<code>Promise</code>只会处于其中某一种状态。当异步请求开始并且未结束（没有返回结果）时，处于<code>pending</code>状态。当异步请求返回结果后，可以根据请求返回的结果将<code>Promise</code>的状态修改为<code>fulfilled</code>或者<code>rejected</code>。并且，一旦<code>Promise</code>的状态第一次改变，就再也不能更改为其它任何状态。所以，<code>Promise</code>的状态改变过程<strong>只有</strong>两种情况：</p>\n<ol>\n<li>pending –&gt; fulfilled（进行中 –&gt; 已成功）</li>\n<li>pending –&gt; rejected（进行中 –&gt; 已失败）</li>\n</ol>\n<p>那么，如何修改<code>Promise</code>的状态呢？这就需要了解调用<code>Promise</code>构造函数时，传递给构造函数的<code>Function</code>参数了。<code>Promise</code>会为这个函数设置两个参数，<code>resolve</code>、<code>reject</code>。这两个参数是两个函数，由JavaScript引擎提供，不用自己部署。</p>\n<p><code>resolve()</code>函数，可以将<code>Promise</code>的状态由<code>pending</code>改变为<code>fulfilled</code>。<code>reject()</code>函数，可以将<code>Promise</code>的状态由<code>pending</code>改变为<code>rejected</code>。</p>\n<p><strong>这里有两点需要注意的地方！！</strong></p>\n<ol>\n<li>在<code>Promise</code>内部只有用<code>resolve()</code>、<code>reject()</code>才能改变它的状态。<code>return</code>任何值（包括一个Error实例）都不会改变它的状态。</li>\n<li><code>resolve()</code>、<code>reject()</code>和<code>return</code>的意义不同。它们只是改变了<code>Promise</code>的状态，并不会结束代码执行。也就是说<code>resolve()</code>、<code>reject()</code>之后的代码依旧会执行。（虽然不建议在他们后面再有代码出现）</li>\n<li>在定义<code>Promise</code>时，参数函数中异步操作之外的同步代码都会立即执行。</li>\n</ol>\n<p>来看一个示例，简单明了地理解上面的文字。</p>\n<pre><code>let promise = new Promise(function(resolve, reject) {\n    // 下面两行代码会立即执行，不会等待异步操作结果返回、状态改变\n    let a = &#39;123&#39;;\n    console.log(a); // &#39;123&#39;\n\n    // 一个异步请求\n    asyncRequest(function(resData) {\n        if (/* 异步操作成功 */){\n            // 将Promise的状态改为fulfilled（已成功）\n            resolve(resData);   // resData一般是异步操作的结果\n        } else {\n            // 将Promise的状态改为rejected（已失败）\n            reject(resData);    // resData一般是一些错误信息\n        }\n    });\n});\n</code></pre><p>上面的例子，在<code>Promise</code>内部发起了一个异步请求，当请求完成，拿到返回值<code>resData</code>时，我们可以根据具体的业务需求修改<code>Promise</code>的对应状态。</p>\n<h4 id=\"3、Promise保存异步操作的结果\"><a href=\"#3、Promise保存异步操作的结果\" class=\"headerlink\" title=\"3、Promise保存异步操作的结果\"></a>3、Promise保存异步操作的结果</h4><p>细心的同学会发现，上面的例子中，我们在<code>resolve()</code>和<code>reject()</code>函数中传入了参数<code>resData</code>，这是在干什么？还记得么？<code>Promise</code>不仅能保存异步操作的状态，还能保存异步操作的结果。我们将将异步操作的结果<code>resData</code>传给这两个函数，就是将其保存到了<code>Promise</code>对象中。</p>\n<h4 id=\"4、获取Promise中的状态和结果（-then-catch-）\"><a href=\"#4、获取Promise中的状态和结果（-then-catch-）\" class=\"headerlink\" title=\"4、获取Promise中的状态和结果（.then()/.catch()）\"></a>4、获取Promise中的状态和结果（.then()/.catch()）</h4><p>那么，<code>Prmoise</code>对象中保存了异步操作的最终状态和结果，我们如何获取呢？换句话说，我们怎么知道异步操作的状态和结果分别是什么呢？</p>\n<p>其实，每个<code>Promise</code>的对象实例都会有一个<code>.then()</code>和<code>.catch()</code>方法，这两个方法都接收一个函数作为参数，这个函数会被<code>Promise</code>传入一个参数，这个参数就是传入<code>resolve()</code>、<code>reject()</code>方法中的异步请求的结果（上个例子中的<code>resData</code>）。当<code>Promise</code>内部状态变为<code>fulfilled</code>时，就会进入<code>.then()</code>方法中，执行里面的回调函数。同理，当<code>Promise</code>内部状态变为<code>rejected</code>时，就会进入<code>.catch()</code>方法中，执行里面的回调函数。</p>\n<pre><code>/***接着上面例子***/\npromise.then(function(resData) {\n    // promise状态变为fulfilled，执行这里\n    console.log(resData);\n}).catch(function(resData) {\n    // promise状态变为rejected，执行这里\n    console.log(resData);\n});\n</code></pre><p>像上面这样，当执行进入<code>.then()</code>中，就说明<code>Promise</code>的状态是<code>fulfilled</code>。进入<code>.catch()</code>中，就说明状态是<code>rejected</code>，一般会在这里进行错误处理。同时，异步操作的结果会被传入定义在<code>.then()</code>、<code>.catch()</code>内部的函数中，我们可以直接访问使用。</p>\n<h4 id=\"5、-then-catch-的链式调用\"><a href=\"#5、-then-catch-的链式调用\" class=\"headerlink\" title=\"5、.then()/.catch()的链式调用\"></a>5、.then()/.catch()的链式调用</h4><p><strong>在<code>.then()/.catch()</code>的返回值依旧是一个<code>Promise</code>实例。</strong>也就是说，在<code>.then()/.catch()</code>中<code>return</code>任何值，都会被转化成一个<code>Promise</code>实例。所以<code>.then()</code>后面可以链式继续调用<code>.then()/.catch</code>，<code>.catch()</code>后面同样也可以。于是，就有可能出现下面这样的代码：</p>\n<pre><code>// 这样的代码是完全没有问题的。\npromise.then(function(resData) {\n    // 一些代码\n}).then(function(resData) {\n    // 一些代码\n}).catch(function(error) {\n    // 一些代码\n}).then(function(resData) {\n    // 一些代码\n}).catch(function(error) {\n    // 一些代码\n});\n</code></pre><p><strong>这里有一些需要注意的地方！！</strong></p>\n<ol>\n<li>前一个<code>.then()</code>中<code>return</code>任何值（包括一个<code>Error</code>实例），都会进入后面最邻近的<code>.then()</code>。</li>\n<li>前一个<code>.then()</code>中<code>throw</code>任何值或者内部代码报错，都会进入后面最邻近的<code>.catch()</code>。</li>\n<li>同理，上述原理在<code>.catch()</code>中的情况与<code>.then()</code>中完全一致。</li>\n</ol>\n<h3 id=\"四、Promise的其他方法\"><a href=\"#四、Promise的其他方法\" class=\"headerlink\" title=\"四、Promise的其他方法\"></a>四、Promise的其他方法</h3><h4 id=\"1、-Promise-resolve\"><a href=\"#1、-Promise-resolve\" class=\"headerlink\" title=\"1、 Promise.resolve()\"></a>1、 Promise.resolve()</h4><p><code>Promise.resolve</code>方法接收一个任意值作为参数，可以将其转换为Promise对象。</p>\n<p>该方法对参数的处理，可以分为以下四种不同的情况：</p>\n<h5 id=\"（1）参数是一个Promise实例\"><a href=\"#（1）参数是一个Promise实例\" class=\"headerlink\" title=\"（1）参数是一个Promise实例\"></a>（1）参数是一个Promise实例</h5><p>此时，<code>Promise.resolve</code>方法将不会做任何转换，直接原封不动的返回这个实例。</p>\n<h5 id=\"（2）参数是一个thenable对象\"><a href=\"#（2）参数是一个thenable对象\" class=\"headerlink\" title=\"（2）参数是一个thenable对象\"></a>（2）参数是一个thenable对象</h5><p><code>thenable</code>对象是指对象内部实现了<code>then</code>方法的对象。此时，<code>Promise.resolve</code>方法会先将该对象转换为<code>Promise</code>对象，然后立即执行参数对象自己的<code>then</code>方法。</p>\n<p><strong>最终，转换成的<code>Promise</code>对象的状态完全依赖于它内部<code>then</code>方法的具体实现，不一定是<code>fulfilled</code>状态，也有可能是<code>rejected</code>。</strong></p>\n<pre><code>// 定义一个thenable对象\nlet thenable = {\n    then: function(resolve, reject) {\n        resolve(42);\n        // 如果换成执行下面一行代码，后面将会进入.catch()中\n        // reject(&#39;error&#39;);\n    }\n};\nlet p1 = Promise.resolve(thenable);\np1.then(function(value) {\n    console.log(value);       // 42\n}).catch(function(value) {\n    console.log(value);     // &#39;error&#39;\n});\n</code></pre><h5 id=\"（3）参数不是thenable对象，或者不是一个对象\"><a href=\"#（3）参数不是thenable对象，或者不是一个对象\" class=\"headerlink\" title=\"（3）参数不是thenable对象，或者不是一个对象\"></a>（3）参数不是thenable对象，或者不是一个对象</h5><p>如果参数不是<code>thenable</code>对象，或者不是一个对象，<code>Promise.resolve</code>方法返回一个新的<code>Promise</code>对象，<strong>状态为<code>fulfilled</code></strong>，对象保存的值就是这个参数值。</p>\n<pre><code>Promise.resolve(&#39;foo&#39;)\n// 等价于\nnew Promise(resolve =&gt; resolve(&#39;foo&#39;));\n\nlet p = Promise.resolve(&#39;Hello&#39;);\np.then(function (s){\n    console.log(s);   // &#39;Hello&#39;\n});\n</code></pre><h5 id=\"（4）不传任何参数\"><a href=\"#（4）不传任何参数\" class=\"headerlink\" title=\"（4）不传任何参数\"></a>（4）不传任何参数</h5><p><code>Promise.resolve</code>方法允许调用时不带参数，直接返回一个<code>fulfilled</code>状态的<code>Promise</code>对象，对象保存的值为<code>undefined</code>。</p>\n<pre><code>let p = Promise.resolve();\n\np.then(function (value) {\n  console.log(value);   // undefined\n});\n</code></pre><h4 id=\"2、Promise-reject\"><a href=\"#2、Promise-reject\" class=\"headerlink\" title=\"2、Promise.reject()\"></a>2、Promise.reject()</h4><p><code>Promise.reject</code>方法也会返回一个新的<code>Promise</code>实例。<strong>不论传入的参数是什么数据类型，有没有<code>thenable</code>方法，该实例的状态一定为为<code>rejected</code>，且返回的<code>Promise</code>对象中保存的值就是传入<code>Promise.reject</code>方法时原封不动的参数值</strong>。</p>\n<pre><code>例子一\nlet p = Promise.reject(&#39;error&#39;);\n// 等同于\nlet p = new Promise((resolve, reject) =&gt; reject(&#39;error&#39;));\n\n// 例子二\nlet thenable = {\n    then(resolve, reject) {\n        /**\n         * 不论执行下面的哪一行，\n         * 最后Promise对象的状态都是rejected，\n         * 都会进入.catch中\n         *\n        reject(&#39;error&#39;);\n        // resolve(&#39;fulfilled&#39;);\n    }\n};\n\nPromise.reject(thenable).then(data =&gt; {\n    // 不会进入这里！！\n    console.log(&#39;进入then！&#39;);\n}).catch(e =&gt; {\n    console.log(&#39;进入catch！&#39;);\n    // ！注意！这里的e的值是传入Promise.reject()方法的thenable对象\n    console.log(e === thenable);  // true\n})\n</code></pre><h4 id=\"2、Promise-all\"><a href=\"#2、Promise-all\" class=\"headerlink\" title=\"2、Promise.all()\"></a>2、Promise.all()</h4><p><code>Promise.all</code>方法用于将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例。</p>\n<pre><code>let p = Promise.all([p1, p2, p3]);\n</code></pre><p><code>Promise.all</code>方法接收一个数组作为参数，数组元素<code>p1</code>/<code>p2</code>/<code>p3</code>都是<code>Promise</code>实例。如果不是，就会先调用<code>Promise.resolve()</code>方法，将参数转为<code>Promise</code>实例，再进一步处理。</p>\n<p>最终，<code>p</code>的状态由<code>p1</code>/<code>p2</code>/<code>p3</code>共同决定，分成两种情况：</p>\n<ol>\n<li>只有<code>p1</code>/<code>p2</code>/<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>。此时<code>p1</code>/<code>p2</code>/<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</li>\n<li>只要<code>p1</code>/<code>p2</code>/<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>。此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</li>\n</ol>\n<h4 id=\"2、Promise-race\"><a href=\"#2、Promise-race\" class=\"headerlink\" title=\"2、Promise.race()\"></a>2、Promise.race()</h4><p><code>Promise.race</code>方法同样是将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例。</p>\n<pre><code>let p = Promise.race([p1, p2, p3]);\n</code></pre><p><code>Promise.race</code>方法接收的参数与<code>Promise.all</code>方法一样，如果不是 <code>Promise</code> 实例，就会先调用<code>Promise.resolve()</code>方法，将参数转为 <code>Promise</code> 实例，再进一步处理。</p>\n<p>上面的例子中，只要<code>p1</code>/<code>p2</code>/<code>p3</code>之中任意一个实例率先改变状态，不论变为哪种状态，<code>p</code>的状态就跟着改变。那个率先改变状态的<code>Promise</code>实例的返回值，就传递给<code>p</code>的回调函数。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Promise是面试中最常见的问题之一，也是ES6中很有用、很核心的一个新特性。尤其在如今异步操作越来越多、越来越复杂的情况下，Prmoise更是显示出了它强大而又优雅的本质。这篇文章，我们来系统地讲解一下Promise相关的核心知识点。</p>\n</blockquote>\n<p>本文，我们按照以下的思路来逐步深入Promise：<br> 一、什么是Promise？(What)<br> 二、为什么需要Promise？或者说Promise的用途是什么？(Why)<br> 三、如何使用Promise？(How)<br> 四、Promise的其他方法。</p>\n<h3 id=\"一、什么是Promise\"><a href=\"#一、什么是Promise\" class=\"headerlink\" title=\"一、什么是Promise\"></a>一、什么是Promise</h3><p><code>Promise</code>是一种异步编程的解决方案，它可以将异步操作以同步的流程表达出来，它比传统的使用回调函数和事件来处理异步问题更加合理，更符合人们线性处理问题的逻辑。<br>从语法上说，<code>Promise</code>是一个对象，它里面保存着一个将来才会发生的事情（一般是一个异步操作）的状态和结果。</p>\n<p>听起来，有些抽象，全是概念性的东西。那接下来我们看看为什么ES6中会出现<code>Promise</code>？通过具体示例，可以帮助我们更好的理解什么是<code>Promise</code>。</p>\n<h3 id=\"二、为什么需要Promise？它的用途是什么？\"><a href=\"#二、为什么需要Promise？它的用途是什么？\" class=\"headerlink\" title=\"二、为什么需要Promise？它的用途是什么？\"></a>二、为什么需要Promise？它的用途是什么？</h3><p>在ES6出现Promise之前，我们要处理一个异步请求，通常是这样的：</p>\n<pre><code>// 利用回调函数来处理异步请求结果\n// 很多异步请求方法也会设计一些事件，在事件中处理异步请求结果\nasyncRequest(function(resData) {\n    // 处理请求结果\n});\n</code></pre><p>这样看着没什么问题，但需求总是各种各样甚至是变态的。如果我们需要在第一个请求返回结果后再发起第二个请求呢？再如果，第二个请求结果返回后后，我们需要再发起第三个请求呢？之后，再是第四个…第五个……此时，代码应该会变成这样：</p>\n<pre><code>asyncRequest1(function(resData1) {\n    asyncRequest2(function(resData2) {\n        asyncRequest3(function(resData3) {\n            asyncRequest4(function(resData4) {\n                asyncRequest5(function(resData5) {\n                    // ......\n                    // 处理请求结果\n                });\n            });\n        });\n    });\n});\n</code></pre><p>这时，代码嵌套层次太深，再加上每次请求结束我们应该还需要做一些适当的逻辑处理，这样每个处理请求结果的地方还需要额外的代码，这样整个代码块显得很臃肿，一点也不优雅！最主要的是，这样的代码很容易出错，而且出错后不容易定位错误，阅读和维护起来十分费劲。</p>\n<p>这就是异步编程最让人头疼和无语的地方：由于异步操作嵌套层次过深而导致的“<strong>回调地狱</strong>”！</p>\n<p>出现这种情况，就需要思考新的异步编程的处理方法。有没有什么方法能在满足上面例子的需求的同时又能解决这种嵌套式的回调地狱呢？能不能不使用嵌套式回调，而使用链式回调呢？肯定是有的，这也就是<code>Promise</code>出现的原因。同时，能不能最好不使用回调的方式来处理异步请求呢？当然也是可以的，这就是我们后面文章会讲的<code>async/awiat</code>。</p>\n<p>我们来看看，上面的例子，如果使用Promise来实现是什么样子？应该是这样：</p>\n<pre><code>new Promise(asyncRequest1)\n    .then(asyncRequest2(resData1))\n    .then(asyncRequest3(resData2))\n    .then(asyncRequest4(resData3))\n    .then(asyncRequest5(resData4))\n    .catch(handleError(errorMsg))\n</code></pre><p>上面的例子，只有每个一步请求<code>asyncRequest</code>成功返回结果，才会进入下一个<code>.then()</code>方法中，从而进行下一个异步请求……以此类推。当任何一个请求出错时，就会进入<code>.catch()</code>方法中，可以在这里处理错误。这样的链式回调，既满足前面例子的需求，同时又避免了嵌套回调，从而避免了“回调地狱”的出现。</p>\n<p>这里具体的语法看不懂，不要紧！不要慌！这个例子只是为了说明<code>Promise</code>是如何用链式回调来解决嵌套回调地狱的。接下来，我们就来说说如何使用<code>Promise</code>，讲讲它的基本语法。</p>\n<h3 id=\"三、如何使用Promise（基本语法）\"><a href=\"#三、如何使用Promise（基本语法）\" class=\"headerlink\" title=\"三、如何使用Promise（基本语法）\"></a>三、如何使用Promise（基本语法）</h3><h4 id=\"1、创建一个Promise对象实例\"><a href=\"#1、创建一个Promise对象实例\" class=\"headerlink\" title=\"1、创建一个Promise对象实例\"></a>1、创建一个Promise对象实例</h4><p>ES6中规定，<code>Promise</code>是一个构造函数，可以用来实例化一个<code>Promise</code>对象。下面是一个简单的例子：</p>\n<pre><code>// Promise构造函数接收一个函数作为参数\nlet promise = new Promise(Function);\n</code></pre><h4 id=\"2、Promise的状态及其改变\"><a href=\"#2、Promise的状态及其改变\" class=\"headerlink\" title=\"2、Promise的状态及其改变\"></a>2、Promise的状态及其改变</h4><p>文章最开始介绍什么是Promise的时候说过：<code>Promise</code>是一个对象，它里面保存着一个将来才会发生的事情（一般是一个异步操作）的状态和结果。</p>\n<p>我们先来看看Promise代表的异步操作的状态有哪几种？——一共只有三种状态：</p>\n<ol>\n<li>pending（进行中）</li>\n<li>fulfilled（已成功）</li>\n<li>rejected（已失败）</li>\n</ol>\n<p>这三种状态，不会共存，<code>Promise</code>只会处于其中某一种状态。当异步请求开始并且未结束（没有返回结果）时，处于<code>pending</code>状态。当异步请求返回结果后，可以根据请求返回的结果将<code>Promise</code>的状态修改为<code>fulfilled</code>或者<code>rejected</code>。并且，一旦<code>Promise</code>的状态第一次改变，就再也不能更改为其它任何状态。所以，<code>Promise</code>的状态改变过程<strong>只有</strong>两种情况：</p>\n<ol>\n<li>pending –&gt; fulfilled（进行中 –&gt; 已成功）</li>\n<li>pending –&gt; rejected（进行中 –&gt; 已失败）</li>\n</ol>\n<p>那么，如何修改<code>Promise</code>的状态呢？这就需要了解调用<code>Promise</code>构造函数时，传递给构造函数的<code>Function</code>参数了。<code>Promise</code>会为这个函数设置两个参数，<code>resolve</code>、<code>reject</code>。这两个参数是两个函数，由JavaScript引擎提供，不用自己部署。</p>\n<p><code>resolve()</code>函数，可以将<code>Promise</code>的状态由<code>pending</code>改变为<code>fulfilled</code>。<code>reject()</code>函数，可以将<code>Promise</code>的状态由<code>pending</code>改变为<code>rejected</code>。</p>\n<p><strong>这里有两点需要注意的地方！！</strong></p>\n<ol>\n<li>在<code>Promise</code>内部只有用<code>resolve()</code>、<code>reject()</code>才能改变它的状态。<code>return</code>任何值（包括一个Error实例）都不会改变它的状态。</li>\n<li><code>resolve()</code>、<code>reject()</code>和<code>return</code>的意义不同。它们只是改变了<code>Promise</code>的状态，并不会结束代码执行。也就是说<code>resolve()</code>、<code>reject()</code>之后的代码依旧会执行。（虽然不建议在他们后面再有代码出现）</li>\n<li>在定义<code>Promise</code>时，参数函数中异步操作之外的同步代码都会立即执行。</li>\n</ol>\n<p>来看一个示例，简单明了地理解上面的文字。</p>\n<pre><code>let promise = new Promise(function(resolve, reject) {\n    // 下面两行代码会立即执行，不会等待异步操作结果返回、状态改变\n    let a = &#39;123&#39;;\n    console.log(a); // &#39;123&#39;\n\n    // 一个异步请求\n    asyncRequest(function(resData) {\n        if (/* 异步操作成功 */){\n            // 将Promise的状态改为fulfilled（已成功）\n            resolve(resData);   // resData一般是异步操作的结果\n        } else {\n            // 将Promise的状态改为rejected（已失败）\n            reject(resData);    // resData一般是一些错误信息\n        }\n    });\n});\n</code></pre><p>上面的例子，在<code>Promise</code>内部发起了一个异步请求，当请求完成，拿到返回值<code>resData</code>时，我们可以根据具体的业务需求修改<code>Promise</code>的对应状态。</p>\n<h4 id=\"3、Promise保存异步操作的结果\"><a href=\"#3、Promise保存异步操作的结果\" class=\"headerlink\" title=\"3、Promise保存异步操作的结果\"></a>3、Promise保存异步操作的结果</h4><p>细心的同学会发现，上面的例子中，我们在<code>resolve()</code>和<code>reject()</code>函数中传入了参数<code>resData</code>，这是在干什么？还记得么？<code>Promise</code>不仅能保存异步操作的状态，还能保存异步操作的结果。我们将将异步操作的结果<code>resData</code>传给这两个函数，就是将其保存到了<code>Promise</code>对象中。</p>\n<h4 id=\"4、获取Promise中的状态和结果（-then-catch-）\"><a href=\"#4、获取Promise中的状态和结果（-then-catch-）\" class=\"headerlink\" title=\"4、获取Promise中的状态和结果（.then()/.catch()）\"></a>4、获取Promise中的状态和结果（.then()/.catch()）</h4><p>那么，<code>Prmoise</code>对象中保存了异步操作的最终状态和结果，我们如何获取呢？换句话说，我们怎么知道异步操作的状态和结果分别是什么呢？</p>\n<p>其实，每个<code>Promise</code>的对象实例都会有一个<code>.then()</code>和<code>.catch()</code>方法，这两个方法都接收一个函数作为参数，这个函数会被<code>Promise</code>传入一个参数，这个参数就是传入<code>resolve()</code>、<code>reject()</code>方法中的异步请求的结果（上个例子中的<code>resData</code>）。当<code>Promise</code>内部状态变为<code>fulfilled</code>时，就会进入<code>.then()</code>方法中，执行里面的回调函数。同理，当<code>Promise</code>内部状态变为<code>rejected</code>时，就会进入<code>.catch()</code>方法中，执行里面的回调函数。</p>\n<pre><code>/***接着上面例子***/\npromise.then(function(resData) {\n    // promise状态变为fulfilled，执行这里\n    console.log(resData);\n}).catch(function(resData) {\n    // promise状态变为rejected，执行这里\n    console.log(resData);\n});\n</code></pre><p>像上面这样，当执行进入<code>.then()</code>中，就说明<code>Promise</code>的状态是<code>fulfilled</code>。进入<code>.catch()</code>中，就说明状态是<code>rejected</code>，一般会在这里进行错误处理。同时，异步操作的结果会被传入定义在<code>.then()</code>、<code>.catch()</code>内部的函数中，我们可以直接访问使用。</p>\n<h4 id=\"5、-then-catch-的链式调用\"><a href=\"#5、-then-catch-的链式调用\" class=\"headerlink\" title=\"5、.then()/.catch()的链式调用\"></a>5、.then()/.catch()的链式调用</h4><p><strong>在<code>.then()/.catch()</code>的返回值依旧是一个<code>Promise</code>实例。</strong>也就是说，在<code>.then()/.catch()</code>中<code>return</code>任何值，都会被转化成一个<code>Promise</code>实例。所以<code>.then()</code>后面可以链式继续调用<code>.then()/.catch</code>，<code>.catch()</code>后面同样也可以。于是，就有可能出现下面这样的代码：</p>\n<pre><code>// 这样的代码是完全没有问题的。\npromise.then(function(resData) {\n    // 一些代码\n}).then(function(resData) {\n    // 一些代码\n}).catch(function(error) {\n    // 一些代码\n}).then(function(resData) {\n    // 一些代码\n}).catch(function(error) {\n    // 一些代码\n});\n</code></pre><p><strong>这里有一些需要注意的地方！！</strong></p>\n<ol>\n<li>前一个<code>.then()</code>中<code>return</code>任何值（包括一个<code>Error</code>实例），都会进入后面最邻近的<code>.then()</code>。</li>\n<li>前一个<code>.then()</code>中<code>throw</code>任何值或者内部代码报错，都会进入后面最邻近的<code>.catch()</code>。</li>\n<li>同理，上述原理在<code>.catch()</code>中的情况与<code>.then()</code>中完全一致。</li>\n</ol>\n<h3 id=\"四、Promise的其他方法\"><a href=\"#四、Promise的其他方法\" class=\"headerlink\" title=\"四、Promise的其他方法\"></a>四、Promise的其他方法</h3><h4 id=\"1、-Promise-resolve\"><a href=\"#1、-Promise-resolve\" class=\"headerlink\" title=\"1、 Promise.resolve()\"></a>1、 Promise.resolve()</h4><p><code>Promise.resolve</code>方法接收一个任意值作为参数，可以将其转换为Promise对象。</p>\n<p>该方法对参数的处理，可以分为以下四种不同的情况：</p>\n<h5 id=\"（1）参数是一个Promise实例\"><a href=\"#（1）参数是一个Promise实例\" class=\"headerlink\" title=\"（1）参数是一个Promise实例\"></a>（1）参数是一个Promise实例</h5><p>此时，<code>Promise.resolve</code>方法将不会做任何转换，直接原封不动的返回这个实例。</p>\n<h5 id=\"（2）参数是一个thenable对象\"><a href=\"#（2）参数是一个thenable对象\" class=\"headerlink\" title=\"（2）参数是一个thenable对象\"></a>（2）参数是一个thenable对象</h5><p><code>thenable</code>对象是指对象内部实现了<code>then</code>方法的对象。此时，<code>Promise.resolve</code>方法会先将该对象转换为<code>Promise</code>对象，然后立即执行参数对象自己的<code>then</code>方法。</p>\n<p><strong>最终，转换成的<code>Promise</code>对象的状态完全依赖于它内部<code>then</code>方法的具体实现，不一定是<code>fulfilled</code>状态，也有可能是<code>rejected</code>。</strong></p>\n<pre><code>// 定义一个thenable对象\nlet thenable = {\n    then: function(resolve, reject) {\n        resolve(42);\n        // 如果换成执行下面一行代码，后面将会进入.catch()中\n        // reject(&#39;error&#39;);\n    }\n};\nlet p1 = Promise.resolve(thenable);\np1.then(function(value) {\n    console.log(value);       // 42\n}).catch(function(value) {\n    console.log(value);     // &#39;error&#39;\n});\n</code></pre><h5 id=\"（3）参数不是thenable对象，或者不是一个对象\"><a href=\"#（3）参数不是thenable对象，或者不是一个对象\" class=\"headerlink\" title=\"（3）参数不是thenable对象，或者不是一个对象\"></a>（3）参数不是thenable对象，或者不是一个对象</h5><p>如果参数不是<code>thenable</code>对象，或者不是一个对象，<code>Promise.resolve</code>方法返回一个新的<code>Promise</code>对象，<strong>状态为<code>fulfilled</code></strong>，对象保存的值就是这个参数值。</p>\n<pre><code>Promise.resolve(&#39;foo&#39;)\n// 等价于\nnew Promise(resolve =&gt; resolve(&#39;foo&#39;));\n\nlet p = Promise.resolve(&#39;Hello&#39;);\np.then(function (s){\n    console.log(s);   // &#39;Hello&#39;\n});\n</code></pre><h5 id=\"（4）不传任何参数\"><a href=\"#（4）不传任何参数\" class=\"headerlink\" title=\"（4）不传任何参数\"></a>（4）不传任何参数</h5><p><code>Promise.resolve</code>方法允许调用时不带参数，直接返回一个<code>fulfilled</code>状态的<code>Promise</code>对象，对象保存的值为<code>undefined</code>。</p>\n<pre><code>let p = Promise.resolve();\n\np.then(function (value) {\n  console.log(value);   // undefined\n});\n</code></pre><h4 id=\"2、Promise-reject\"><a href=\"#2、Promise-reject\" class=\"headerlink\" title=\"2、Promise.reject()\"></a>2、Promise.reject()</h4><p><code>Promise.reject</code>方法也会返回一个新的<code>Promise</code>实例。<strong>不论传入的参数是什么数据类型，有没有<code>thenable</code>方法，该实例的状态一定为为<code>rejected</code>，且返回的<code>Promise</code>对象中保存的值就是传入<code>Promise.reject</code>方法时原封不动的参数值</strong>。</p>\n<pre><code>例子一\nlet p = Promise.reject(&#39;error&#39;);\n// 等同于\nlet p = new Promise((resolve, reject) =&gt; reject(&#39;error&#39;));\n\n// 例子二\nlet thenable = {\n    then(resolve, reject) {\n        /**\n         * 不论执行下面的哪一行，\n         * 最后Promise对象的状态都是rejected，\n         * 都会进入.catch中\n         *\n        reject(&#39;error&#39;);\n        // resolve(&#39;fulfilled&#39;);\n    }\n};\n\nPromise.reject(thenable).then(data =&gt; {\n    // 不会进入这里！！\n    console.log(&#39;进入then！&#39;);\n}).catch(e =&gt; {\n    console.log(&#39;进入catch！&#39;);\n    // ！注意！这里的e的值是传入Promise.reject()方法的thenable对象\n    console.log(e === thenable);  // true\n})\n</code></pre><h4 id=\"2、Promise-all\"><a href=\"#2、Promise-all\" class=\"headerlink\" title=\"2、Promise.all()\"></a>2、Promise.all()</h4><p><code>Promise.all</code>方法用于将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例。</p>\n<pre><code>let p = Promise.all([p1, p2, p3]);\n</code></pre><p><code>Promise.all</code>方法接收一个数组作为参数，数组元素<code>p1</code>/<code>p2</code>/<code>p3</code>都是<code>Promise</code>实例。如果不是，就会先调用<code>Promise.resolve()</code>方法，将参数转为<code>Promise</code>实例，再进一步处理。</p>\n<p>最终，<code>p</code>的状态由<code>p1</code>/<code>p2</code>/<code>p3</code>共同决定，分成两种情况：</p>\n<ol>\n<li>只有<code>p1</code>/<code>p2</code>/<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>。此时<code>p1</code>/<code>p2</code>/<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</li>\n<li>只要<code>p1</code>/<code>p2</code>/<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>。此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</li>\n</ol>\n<h4 id=\"2、Promise-race\"><a href=\"#2、Promise-race\" class=\"headerlink\" title=\"2、Promise.race()\"></a>2、Promise.race()</h4><p><code>Promise.race</code>方法同样是将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例。</p>\n<pre><code>let p = Promise.race([p1, p2, p3]);\n</code></pre><p><code>Promise.race</code>方法接收的参数与<code>Promise.all</code>方法一样，如果不是 <code>Promise</code> 实例，就会先调用<code>Promise.resolve()</code>方法，将参数转为 <code>Promise</code> 实例，再进一步处理。</p>\n<p>上面的例子中，只要<code>p1</code>/<code>p2</code>/<code>p3</code>之中任意一个实例率先改变状态，不论变为哪种状态，<code>p</code>的状态就跟着改变。那个率先改变状态的<code>Promise</code>实例的返回值，就传递给<code>p</code>的回调函数。</p>\n"},{"title":"ES6 - 箭头函数","date":"2019-03-24T07:44:41.000Z","img":"/medias/article/featureimages/arrow-function.jpg","_content":"> 这篇文章我们来了解一下ES6中的箭头函数。首先会介绍一下箭头函数的基本语法，因为基本语法比较好理解，我们用示例做简单介绍即可。之后，我们重点来讨论一下箭头函数与普通函数之间的区别。\n\n### 一、基本语法\nES6中允许使用箭头`=>`来定义箭头函数，具体语法，我们来看一个简单的例子：\n```\n// 箭头函数\nlet fun = (name) => {\n    // 函数体\n    return `Hello ${name} !`;\n};\n\n// 等同于\nlet fun = function (name) {\n    // 函数体\n    return `Hello ${name} !`;\n};\n```\n\n可以看出，定义箭头函在数语法上要比普通函数简洁得多。箭头函数省去了`function`关键字，采用箭头`=>`来定义函数。函数的参数放在`=>`前面的括号中，函数体跟在`=>`后的花括号中。\n\n**关于箭头函数的参数：**\n **①** 如果箭头函数没有参数，直接写一个空括号即可。\n **②** 如果箭头函数的参数只有一个，也可以省去包裹参数的括号。\n **③** 如果箭头函数有多个参数，将参数依次用逗号(,)分隔，包裹在括号中即可。\n\n```\n// 没有参数\nlet fun1 = () => {\n    console.log(111);\n};\n\n// 只有一个参数，可以省去参数括号\nlet fun2 = name => {\n    console.log(`Hello ${name} !`)\n};\n\n// 有多个参数\nlet fun3 = (val1, val2, val3) => {\n    return [val1, val2, val3];\n};\n```\n\n**关于箭头函数的函数体：**\n **①** 如果箭头函数的函数体只有一句代码，就是简单返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号{ }。\n```\nlet f = val => val;\n// 等同于\nlet f = function (val) { return val };\n\nlet sum = (num1, num2) => num1 + num2;\n// 等同于\nlet sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n\n **②** 如果箭头函数的函数体只有一句代码，就是返回一个对象，可以像下面这样写：\n ```\n// 用小括号包裹要返回的对象，不报错\nlet getTempItem = id => ({ id: id, name: \"Temp\" });\n\n// 但绝不能这样写，会报错。\n// 因为对象的大括号会被解释为函数体的大括号\nlet getTempItem = id => { id: id, name: \"Temp\" };\n ```\n\n **③** 如果箭头函数的函数体只有一条语句并且不需要返回值（最常见是调用一个函数），可以给这条语句前面加一个`void`关键字\n```\nlet fn = () => void doesNotReturn();\n```\n\n箭头函数最常见的用处就是简化回调函数。\n```\n// 例子一\n// 正常函数写法\n[1,2,3].map(function (x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1,2,3].map(x => x * x);\n\n// 例子二\n// 正常函数写法\nvar result = [2, 5, 1, 4, 3].sort(function (a, b) {\n  return a - b;\n});\n\n// 箭头函数写法\nvar result = [2, 5, 1, 4, 3].sort((a, b) => a - b);\n```\n\n\n### 二、箭头函数与普通函数的区别\n\n#### 1、语法更加简洁、清晰\n从上面的基本语法示例中可以看出，箭头函数的定义要比普通函数定义简洁、清晰得多，很快捷。\n\n#### 2、箭头函数不会创建自己的this（重要！！深入理解！！）\n我们先来看看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)上对箭头函数`this`的解释。\n\n> 箭头函数不会创建自己的`this`，所以它没有自己的`this`，它只会从自己的作用域链的上一层继承`this`。\n\n箭头函数没有自己的`this`，它会捕获自己在**定义时**（注意，是定义时，不是调用时）所处的**外层执行环境的`this`**，并继承这个`this`值。所以，箭头函数中`this`的指向在它被定义的时候就已经确定了，之后永远不会改变。\n\n来看个例子：\n```\nvar id = 'Global';\n\nfunction fun1() {\n    // setTimeout中使用普通函数\n    setTimeout(function(){\n        console.log(this.id);\n    }, 2000);\n}\n\nfunction fun2() {\n    // setTimeout中使用箭头函数\n    setTimeout(() => {\n        console.log(this.id);\n    }, 2000)\n}\n\nfun1.call({id: 'Obj'});     // 'Global'\n\nfun2.call({id: 'Obj'});     // 'Obj'\n```\n\n上面这个例子，函数`fun1`中的`setTimeout`中使用普通函数，2秒后函数执行时，这时函数其实是在全局作用域执行的，所以`this`指向`Window`对象，`this.id`就指向全局变量`id`，所以输出`'Global'`。\n但是函数`fun2`中的`setTimeout`中使用的是箭头函数，这个箭头函数的`this`在定义时就确定了，它继承了它外层`fun2`的执行环境中的`this`，而`fun2`调用时`this`被`call`方法改变到了对象`{id: 'Obj'}`中，所以输出`'Obj'`。\n\n再来看另一个例子：\n```\nvar id = 'GLOBAL';\nvar obj = {\n  id: 'OBJ',\n  a: function(){\n    console.log(this.id);\n  },\n  b: () => {\n      console.log(this.id);\n  }\n};\n\nobj.a();    // 'OBJ'\nobj.b();    // 'GLOBAL'\n```\n\n上面这个例子，对象`obj`的方法`a`使用普通函数定义的，**普通函数作为对象的方法调用时，`this`指向它所属的对象**。所以，`this.id`就是`obj.id`，所以输出`'OBJ'`。\n但是方法`b`是使用箭头函数定义的，箭头函数中的`this`实际是继承的它定义时所处的全局执行环境中的`this`，所以指向`Window`对象，所以输出`'GLOBAL'`。（**这里要注意，定义对象的大括号`{}`是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中！！**）\n\n#### 3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\n上面的例子，就完全可以说明箭头函数继承而来的`this`指向永远不变。对象`obj`的方法`b`是使用箭头函数定义的，这个函数中的`this`就**永远指向**它定义时所处的全局执行环境中的`this`，即便这个函数是作为对象`obj`的方法调用，`this`依旧指向`Window`对象。\n\n#### 4、.call()/.apply()/.bind()无法改变箭头函数中this的指向\n`.call()`/`.apply()`/`.bind()`方法可以用来动态修改函数执行时`this`的指向，但由于箭头函数的`this`定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数`this`的指向，虽然这么做代码不会报错。\n\n```\nvar id = 'Global';\n// 箭头函数定义在全局作用域\nlet fun1 = () => {\n    console.log(this.id)\n};\n\nfun1();     // 'Global'\n// this的指向不会改变，永远指向Window对象\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n```\n\n#### 5、箭头函数不能作为构造函数使用\n我们先了解一下构造函数的new都做了些什么？简单来说，分为四步：\n ① JS内部首先会先生成一个对象；\n ② 再把函数中的this指向该对象；\n ③ 然后执行构造函数中的语句；\n ④ 最终返回该对象实例。\n\n但是！！因为箭头函数没有自己的`this`，它的`this`其实是继承了外层执行环境中的`this`，且`this`指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用`new`调用时会报错！\n\n```\nlet Fun = (name, age) => {\n    this.name = name;\n    this.age = age;\n};\n\n// 报错\nlet p = new Fun('cao', 24);\n```\n\n#### 6、箭头函数没有自己的arguments\n箭头函数没有自己的`arguments`对象。在箭头函数中访问`arguments`实际上获得的是外层局部（函数）执行环境中的值。\n\n```\n// 例子一\nlet fun = (val) => {\n    console.log(val);   // 111\n    // 下面一行会报错\n    // Uncaught ReferenceError: arguments is not defined\n    // 因为外层全局环境没有arguments对象\n    console.log(arguments); \n};\nfun(111);\n\n// 例子二\nfunction outer(val1, val2) {\n    let argOut = arguments;\n    console.log(argOut);    // ①\n    let fun = () => {\n        let argIn = arguments;\n        console.log(argIn);     // ②\n        console.log(argOut === argIn);  // ③\n    };\n    fun();\n}\nouter(111, 222);\n```\n上面例子二，①②③处的输出结果如下：\n![箭头函数的arguments][1]\n很明显，普通函数`outer`内部的箭头函数`fun`中的`arguments`对象，其实是沿作用域链向上访问的外层`outer`函数的`arguments`对象。\n\n**可以在箭头函数中使用rest参数代替arguments对象，来访问箭头函数的参数列表！！**\n\n#### 7、箭头函数没有原型prototype\n```\nlet sayHi = () => {\n    console.log('Hello World !')\n};\nconsole.log(sayHi.prototype); // undefined\n```\n\n#### 8、箭头函数不能用作Generator函数，不能使用yeild关键字\n\n这一点等到讲解Generator函数的时候我们在深入讨论。\n\n\n[1]: /medias/article/coding/arrow-function/arrow-function-arguments.png","source":"_posts/ES6-arrow-function.md","raw":"---\ntitle: ES6 - 箭头函数\ndate: 2019-03-24 15:44:41\ncategories: 编程\ntags:\n- ES6\n- Function\n- 箭头函数\nimg: /medias/article/featureimages/arrow-function.jpg\n---\n> 这篇文章我们来了解一下ES6中的箭头函数。首先会介绍一下箭头函数的基本语法，因为基本语法比较好理解，我们用示例做简单介绍即可。之后，我们重点来讨论一下箭头函数与普通函数之间的区别。\n\n### 一、基本语法\nES6中允许使用箭头`=>`来定义箭头函数，具体语法，我们来看一个简单的例子：\n```\n// 箭头函数\nlet fun = (name) => {\n    // 函数体\n    return `Hello ${name} !`;\n};\n\n// 等同于\nlet fun = function (name) {\n    // 函数体\n    return `Hello ${name} !`;\n};\n```\n\n可以看出，定义箭头函在数语法上要比普通函数简洁得多。箭头函数省去了`function`关键字，采用箭头`=>`来定义函数。函数的参数放在`=>`前面的括号中，函数体跟在`=>`后的花括号中。\n\n**关于箭头函数的参数：**\n **①** 如果箭头函数没有参数，直接写一个空括号即可。\n **②** 如果箭头函数的参数只有一个，也可以省去包裹参数的括号。\n **③** 如果箭头函数有多个参数，将参数依次用逗号(,)分隔，包裹在括号中即可。\n\n```\n// 没有参数\nlet fun1 = () => {\n    console.log(111);\n};\n\n// 只有一个参数，可以省去参数括号\nlet fun2 = name => {\n    console.log(`Hello ${name} !`)\n};\n\n// 有多个参数\nlet fun3 = (val1, val2, val3) => {\n    return [val1, val2, val3];\n};\n```\n\n**关于箭头函数的函数体：**\n **①** 如果箭头函数的函数体只有一句代码，就是简单返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号{ }。\n```\nlet f = val => val;\n// 等同于\nlet f = function (val) { return val };\n\nlet sum = (num1, num2) => num1 + num2;\n// 等同于\nlet sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n\n **②** 如果箭头函数的函数体只有一句代码，就是返回一个对象，可以像下面这样写：\n ```\n// 用小括号包裹要返回的对象，不报错\nlet getTempItem = id => ({ id: id, name: \"Temp\" });\n\n// 但绝不能这样写，会报错。\n// 因为对象的大括号会被解释为函数体的大括号\nlet getTempItem = id => { id: id, name: \"Temp\" };\n ```\n\n **③** 如果箭头函数的函数体只有一条语句并且不需要返回值（最常见是调用一个函数），可以给这条语句前面加一个`void`关键字\n```\nlet fn = () => void doesNotReturn();\n```\n\n箭头函数最常见的用处就是简化回调函数。\n```\n// 例子一\n// 正常函数写法\n[1,2,3].map(function (x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1,2,3].map(x => x * x);\n\n// 例子二\n// 正常函数写法\nvar result = [2, 5, 1, 4, 3].sort(function (a, b) {\n  return a - b;\n});\n\n// 箭头函数写法\nvar result = [2, 5, 1, 4, 3].sort((a, b) => a - b);\n```\n\n\n### 二、箭头函数与普通函数的区别\n\n#### 1、语法更加简洁、清晰\n从上面的基本语法示例中可以看出，箭头函数的定义要比普通函数定义简洁、清晰得多，很快捷。\n\n#### 2、箭头函数不会创建自己的this（重要！！深入理解！！）\n我们先来看看[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)上对箭头函数`this`的解释。\n\n> 箭头函数不会创建自己的`this`，所以它没有自己的`this`，它只会从自己的作用域链的上一层继承`this`。\n\n箭头函数没有自己的`this`，它会捕获自己在**定义时**（注意，是定义时，不是调用时）所处的**外层执行环境的`this`**，并继承这个`this`值。所以，箭头函数中`this`的指向在它被定义的时候就已经确定了，之后永远不会改变。\n\n来看个例子：\n```\nvar id = 'Global';\n\nfunction fun1() {\n    // setTimeout中使用普通函数\n    setTimeout(function(){\n        console.log(this.id);\n    }, 2000);\n}\n\nfunction fun2() {\n    // setTimeout中使用箭头函数\n    setTimeout(() => {\n        console.log(this.id);\n    }, 2000)\n}\n\nfun1.call({id: 'Obj'});     // 'Global'\n\nfun2.call({id: 'Obj'});     // 'Obj'\n```\n\n上面这个例子，函数`fun1`中的`setTimeout`中使用普通函数，2秒后函数执行时，这时函数其实是在全局作用域执行的，所以`this`指向`Window`对象，`this.id`就指向全局变量`id`，所以输出`'Global'`。\n但是函数`fun2`中的`setTimeout`中使用的是箭头函数，这个箭头函数的`this`在定义时就确定了，它继承了它外层`fun2`的执行环境中的`this`，而`fun2`调用时`this`被`call`方法改变到了对象`{id: 'Obj'}`中，所以输出`'Obj'`。\n\n再来看另一个例子：\n```\nvar id = 'GLOBAL';\nvar obj = {\n  id: 'OBJ',\n  a: function(){\n    console.log(this.id);\n  },\n  b: () => {\n      console.log(this.id);\n  }\n};\n\nobj.a();    // 'OBJ'\nobj.b();    // 'GLOBAL'\n```\n\n上面这个例子，对象`obj`的方法`a`使用普通函数定义的，**普通函数作为对象的方法调用时，`this`指向它所属的对象**。所以，`this.id`就是`obj.id`，所以输出`'OBJ'`。\n但是方法`b`是使用箭头函数定义的，箭头函数中的`this`实际是继承的它定义时所处的全局执行环境中的`this`，所以指向`Window`对象，所以输出`'GLOBAL'`。（**这里要注意，定义对象的大括号`{}`是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中！！**）\n\n#### 3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\n上面的例子，就完全可以说明箭头函数继承而来的`this`指向永远不变。对象`obj`的方法`b`是使用箭头函数定义的，这个函数中的`this`就**永远指向**它定义时所处的全局执行环境中的`this`，即便这个函数是作为对象`obj`的方法调用，`this`依旧指向`Window`对象。\n\n#### 4、.call()/.apply()/.bind()无法改变箭头函数中this的指向\n`.call()`/`.apply()`/`.bind()`方法可以用来动态修改函数执行时`this`的指向，但由于箭头函数的`this`定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数`this`的指向，虽然这么做代码不会报错。\n\n```\nvar id = 'Global';\n// 箭头函数定义在全局作用域\nlet fun1 = () => {\n    console.log(this.id)\n};\n\nfun1();     // 'Global'\n// this的指向不会改变，永远指向Window对象\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n```\n\n#### 5、箭头函数不能作为构造函数使用\n我们先了解一下构造函数的new都做了些什么？简单来说，分为四步：\n ① JS内部首先会先生成一个对象；\n ② 再把函数中的this指向该对象；\n ③ 然后执行构造函数中的语句；\n ④ 最终返回该对象实例。\n\n但是！！因为箭头函数没有自己的`this`，它的`this`其实是继承了外层执行环境中的`this`，且`this`指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用`new`调用时会报错！\n\n```\nlet Fun = (name, age) => {\n    this.name = name;\n    this.age = age;\n};\n\n// 报错\nlet p = new Fun('cao', 24);\n```\n\n#### 6、箭头函数没有自己的arguments\n箭头函数没有自己的`arguments`对象。在箭头函数中访问`arguments`实际上获得的是外层局部（函数）执行环境中的值。\n\n```\n// 例子一\nlet fun = (val) => {\n    console.log(val);   // 111\n    // 下面一行会报错\n    // Uncaught ReferenceError: arguments is not defined\n    // 因为外层全局环境没有arguments对象\n    console.log(arguments); \n};\nfun(111);\n\n// 例子二\nfunction outer(val1, val2) {\n    let argOut = arguments;\n    console.log(argOut);    // ①\n    let fun = () => {\n        let argIn = arguments;\n        console.log(argIn);     // ②\n        console.log(argOut === argIn);  // ③\n    };\n    fun();\n}\nouter(111, 222);\n```\n上面例子二，①②③处的输出结果如下：\n![箭头函数的arguments][1]\n很明显，普通函数`outer`内部的箭头函数`fun`中的`arguments`对象，其实是沿作用域链向上访问的外层`outer`函数的`arguments`对象。\n\n**可以在箭头函数中使用rest参数代替arguments对象，来访问箭头函数的参数列表！！**\n\n#### 7、箭头函数没有原型prototype\n```\nlet sayHi = () => {\n    console.log('Hello World !')\n};\nconsole.log(sayHi.prototype); // undefined\n```\n\n#### 8、箭头函数不能用作Generator函数，不能使用yeild关键字\n\n这一点等到讲解Generator函数的时候我们在深入讨论。\n\n\n[1]: /medias/article/coding/arrow-function/arrow-function-arguments.png","slug":"ES6-arrow-function","published":1,"updated":"2019-05-19T11:29:53.797Z","_id":"cjvuu4mqt00069kvbq78230ls","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>这篇文章我们来了解一下ES6中的箭头函数。首先会介绍一下箭头函数的基本语法，因为基本语法比较好理解，我们用示例做简单介绍即可。之后，我们重点来讨论一下箭头函数与普通函数之间的区别。</p>\n</blockquote>\n<h3 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h3><p>ES6中允许使用箭头<code>=&gt;</code>来定义箭头函数，具体语法，我们来看一个简单的例子：</p>\n<pre><code>// 箭头函数\nlet fun = (name) =&gt; {\n    // 函数体\n    return `Hello ${name} !`;\n};\n\n// 等同于\nlet fun = function (name) {\n    // 函数体\n    return `Hello ${name} !`;\n};\n</code></pre><p>可以看出，定义箭头函在数语法上要比普通函数简洁得多。箭头函数省去了<code>function</code>关键字，采用箭头<code>=&gt;</code>来定义函数。函数的参数放在<code>=&gt;</code>前面的括号中，函数体跟在<code>=&gt;</code>后的花括号中。</p>\n<p><strong>关于箭头函数的参数：</strong><br> <strong>①</strong> 如果箭头函数没有参数，直接写一个空括号即可。<br> <strong>②</strong> 如果箭头函数的参数只有一个，也可以省去包裹参数的括号。<br> <strong>③</strong> 如果箭头函数有多个参数，将参数依次用逗号(,)分隔，包裹在括号中即可。</p>\n<pre><code>// 没有参数\nlet fun1 = () =&gt; {\n    console.log(111);\n};\n\n// 只有一个参数，可以省去参数括号\nlet fun2 = name =&gt; {\n    console.log(`Hello ${name} !`)\n};\n\n// 有多个参数\nlet fun3 = (val1, val2, val3) =&gt; {\n    return [val1, val2, val3];\n};\n</code></pre><p><strong>关于箭头函数的函数体：</strong><br> <strong>①</strong> 如果箭头函数的函数体只有一句代码，就是简单返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号{ }。</p>\n<pre><code>let f = val =&gt; val;\n// 等同于\nlet f = function (val) { return val };\n\nlet sum = (num1, num2) =&gt; num1 + num2;\n// 等同于\nlet sum = function(num1, num2) {\n  return num1 + num2;\n};\n</code></pre><p> <strong>②</strong> 如果箭头函数的函数体只有一句代码，就是返回一个对象，可以像下面这样写：</p>\n<pre><code>// 用小括号包裹要返回的对象，不报错\nlet getTempItem = id =&gt; ({ id: id, name: &quot;Temp&quot; });\n\n// 但绝不能这样写，会报错。\n// 因为对象的大括号会被解释为函数体的大括号\nlet getTempItem = id =&gt; { id: id, name: &quot;Temp&quot; };\n</code></pre><p> <strong>③</strong> 如果箭头函数的函数体只有一条语句并且不需要返回值（最常见是调用一个函数），可以给这条语句前面加一个<code>void</code>关键字</p>\n<pre><code>let fn = () =&gt; void doesNotReturn();\n</code></pre><p>箭头函数最常见的用处就是简化回调函数。</p>\n<pre><code>// 例子一\n// 正常函数写法\n[1,2,3].map(function (x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1,2,3].map(x =&gt; x * x);\n\n// 例子二\n// 正常函数写法\nvar result = [2, 5, 1, 4, 3].sort(function (a, b) {\n  return a - b;\n});\n\n// 箭头函数写法\nvar result = [2, 5, 1, 4, 3].sort((a, b) =&gt; a - b);\n</code></pre><h3 id=\"二、箭头函数与普通函数的区别\"><a href=\"#二、箭头函数与普通函数的区别\" class=\"headerlink\" title=\"二、箭头函数与普通函数的区别\"></a>二、箭头函数与普通函数的区别</h3><h4 id=\"1、语法更加简洁、清晰\"><a href=\"#1、语法更加简洁、清晰\" class=\"headerlink\" title=\"1、语法更加简洁、清晰\"></a>1、语法更加简洁、清晰</h4><p>从上面的基本语法示例中可以看出，箭头函数的定义要比普通函数定义简洁、清晰得多，很快捷。</p>\n<h4 id=\"2、箭头函数不会创建自己的this（重要！！深入理解！！）\"><a href=\"#2、箭头函数不会创建自己的this（重要！！深入理解！！）\" class=\"headerlink\" title=\"2、箭头函数不会创建自己的this（重要！！深入理解！！）\"></a>2、箭头函数不会创建自己的this（重要！！深入理解！！）</h4><p>我们先来看看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">MDN</a>上对箭头函数<code>this</code>的解释。</p>\n<blockquote>\n<p>箭头函数不会创建自己的<code>this</code>，所以它没有自己的<code>this</code>，它只会从自己的作用域链的上一层继承<code>this</code>。</p>\n</blockquote>\n<p>箭头函数没有自己的<code>this</code>，它会捕获自己在<strong>定义时</strong>（注意，是定义时，不是调用时）所处的<strong>外层执行环境的<code>this</code></strong>，并继承这个<code>this</code>值。所以，箭头函数中<code>this</code>的指向在它被定义的时候就已经确定了，之后永远不会改变。</p>\n<p>来看个例子：</p>\n<pre><code>var id = &#39;Global&#39;;\n\nfunction fun1() {\n    // setTimeout中使用普通函数\n    setTimeout(function(){\n        console.log(this.id);\n    }, 2000);\n}\n\nfunction fun2() {\n    // setTimeout中使用箭头函数\n    setTimeout(() =&gt; {\n        console.log(this.id);\n    }, 2000)\n}\n\nfun1.call({id: &#39;Obj&#39;});     // &#39;Global&#39;\n\nfun2.call({id: &#39;Obj&#39;});     // &#39;Obj&#39;\n</code></pre><p>上面这个例子，函数<code>fun1</code>中的<code>setTimeout</code>中使用普通函数，2秒后函数执行时，这时函数其实是在全局作用域执行的，所以<code>this</code>指向<code>Window</code>对象，<code>this.id</code>就指向全局变量<code>id</code>，所以输出<code>&#39;Global&#39;</code>。<br>但是函数<code>fun2</code>中的<code>setTimeout</code>中使用的是箭头函数，这个箭头函数的<code>this</code>在定义时就确定了，它继承了它外层<code>fun2</code>的执行环境中的<code>this</code>，而<code>fun2</code>调用时<code>this</code>被<code>call</code>方法改变到了对象<code>{id: &#39;Obj&#39;}</code>中，所以输出<code>&#39;Obj&#39;</code>。</p>\n<p>再来看另一个例子：</p>\n<pre><code>var id = &#39;GLOBAL&#39;;\nvar obj = {\n  id: &#39;OBJ&#39;,\n  a: function(){\n    console.log(this.id);\n  },\n  b: () =&gt; {\n      console.log(this.id);\n  }\n};\n\nobj.a();    // &#39;OBJ&#39;\nobj.b();    // &#39;GLOBAL&#39;\n</code></pre><p>上面这个例子，对象<code>obj</code>的方法<code>a</code>使用普通函数定义的，<strong>普通函数作为对象的方法调用时，<code>this</code>指向它所属的对象</strong>。所以，<code>this.id</code>就是<code>obj.id</code>，所以输出<code>&#39;OBJ&#39;</code>。<br>但是方法<code>b</code>是使用箭头函数定义的，箭头函数中的<code>this</code>实际是继承的它定义时所处的全局执行环境中的<code>this</code>，所以指向<code>Window</code>对象，所以输出<code>&#39;GLOBAL&#39;</code>。（<strong>这里要注意，定义对象的大括号<code>{}</code>是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中！！</strong>）</p>\n<h4 id=\"3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\"><a href=\"#3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\" class=\"headerlink\" title=\"3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\"></a>3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）</h4><p>上面的例子，就完全可以说明箭头函数继承而来的<code>this</code>指向永远不变。对象<code>obj</code>的方法<code>b</code>是使用箭头函数定义的，这个函数中的<code>this</code>就<strong>永远指向</strong>它定义时所处的全局执行环境中的<code>this</code>，即便这个函数是作为对象<code>obj</code>的方法调用，<code>this</code>依旧指向<code>Window</code>对象。</p>\n<h4 id=\"4、-call-apply-bind-无法改变箭头函数中this的指向\"><a href=\"#4、-call-apply-bind-无法改变箭头函数中this的指向\" class=\"headerlink\" title=\"4、.call()/.apply()/.bind()无法改变箭头函数中this的指向\"></a>4、.call()/.apply()/.bind()无法改变箭头函数中this的指向</h4><p><code>.call()</code>/<code>.apply()</code>/<code>.bind()</code>方法可以用来动态修改函数执行时<code>this</code>的指向，但由于箭头函数的<code>this</code>定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数<code>this</code>的指向，虽然这么做代码不会报错。</p>\n<pre><code>var id = &#39;Global&#39;;\n// 箭头函数定义在全局作用域\nlet fun1 = () =&gt; {\n    console.log(this.id)\n};\n\nfun1();     // &#39;Global&#39;\n// this的指向不会改变，永远指向Window对象\nfun1.call({id: &#39;Obj&#39;});     // &#39;Global&#39;\nfun1.apply({id: &#39;Obj&#39;});    // &#39;Global&#39;\nfun1.bind({id: &#39;Obj&#39;})();   // &#39;Global&#39;\n</code></pre><h4 id=\"5、箭头函数不能作为构造函数使用\"><a href=\"#5、箭头函数不能作为构造函数使用\" class=\"headerlink\" title=\"5、箭头函数不能作为构造函数使用\"></a>5、箭头函数不能作为构造函数使用</h4><p>我们先了解一下构造函数的new都做了些什么？简单来说，分为四步：<br> ① JS内部首先会先生成一个对象；<br> ② 再把函数中的this指向该对象；<br> ③ 然后执行构造函数中的语句；<br> ④ 最终返回该对象实例。</p>\n<p>但是！！因为箭头函数没有自己的<code>this</code>，它的<code>this</code>其实是继承了外层执行环境中的<code>this</code>，且<code>this</code>指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用<code>new</code>调用时会报错！</p>\n<pre><code>let Fun = (name, age) =&gt; {\n    this.name = name;\n    this.age = age;\n};\n\n// 报错\nlet p = new Fun(&#39;cao&#39;, 24);\n</code></pre><h4 id=\"6、箭头函数没有自己的arguments\"><a href=\"#6、箭头函数没有自己的arguments\" class=\"headerlink\" title=\"6、箭头函数没有自己的arguments\"></a>6、箭头函数没有自己的arguments</h4><p>箭头函数没有自己的<code>arguments</code>对象。在箭头函数中访问<code>arguments</code>实际上获得的是外层局部（函数）执行环境中的值。</p>\n<pre><code>// 例子一\nlet fun = (val) =&gt; {\n    console.log(val);   // 111\n    // 下面一行会报错\n    // Uncaught ReferenceError: arguments is not defined\n    // 因为外层全局环境没有arguments对象\n    console.log(arguments); \n};\nfun(111);\n\n// 例子二\nfunction outer(val1, val2) {\n    let argOut = arguments;\n    console.log(argOut);    // ①\n    let fun = () =&gt; {\n        let argIn = arguments;\n        console.log(argIn);     // ②\n        console.log(argOut === argIn);  // ③\n    };\n    fun();\n}\nouter(111, 222);\n</code></pre><p>上面例子二，①②③处的输出结果如下：<br><img src=\"/medias/article/coding/arrow-function/arrow-function-arguments.png\" alt=\"箭头函数的arguments\"><br>很明显，普通函数<code>outer</code>内部的箭头函数<code>fun</code>中的<code>arguments</code>对象，其实是沿作用域链向上访问的外层<code>outer</code>函数的<code>arguments</code>对象。</p>\n<p><strong>可以在箭头函数中使用rest参数代替arguments对象，来访问箭头函数的参数列表！！</strong></p>\n<h4 id=\"7、箭头函数没有原型prototype\"><a href=\"#7、箭头函数没有原型prototype\" class=\"headerlink\" title=\"7、箭头函数没有原型prototype\"></a>7、箭头函数没有原型prototype</h4><pre><code>let sayHi = () =&gt; {\n    console.log(&#39;Hello World !&#39;)\n};\nconsole.log(sayHi.prototype); // undefined\n</code></pre><h4 id=\"8、箭头函数不能用作Generator函数，不能使用yeild关键字\"><a href=\"#8、箭头函数不能用作Generator函数，不能使用yeild关键字\" class=\"headerlink\" title=\"8、箭头函数不能用作Generator函数，不能使用yeild关键字\"></a>8、箭头函数不能用作Generator函数，不能使用yeild关键字</h4><p>这一点等到讲解Generator函数的时候我们在深入讨论。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这篇文章我们来了解一下ES6中的箭头函数。首先会介绍一下箭头函数的基本语法，因为基本语法比较好理解，我们用示例做简单介绍即可。之后，我们重点来讨论一下箭头函数与普通函数之间的区别。</p>\n</blockquote>\n<h3 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h3><p>ES6中允许使用箭头<code>=&gt;</code>来定义箭头函数，具体语法，我们来看一个简单的例子：</p>\n<pre><code>// 箭头函数\nlet fun = (name) =&gt; {\n    // 函数体\n    return `Hello ${name} !`;\n};\n\n// 等同于\nlet fun = function (name) {\n    // 函数体\n    return `Hello ${name} !`;\n};\n</code></pre><p>可以看出，定义箭头函在数语法上要比普通函数简洁得多。箭头函数省去了<code>function</code>关键字，采用箭头<code>=&gt;</code>来定义函数。函数的参数放在<code>=&gt;</code>前面的括号中，函数体跟在<code>=&gt;</code>后的花括号中。</p>\n<p><strong>关于箭头函数的参数：</strong><br> <strong>①</strong> 如果箭头函数没有参数，直接写一个空括号即可。<br> <strong>②</strong> 如果箭头函数的参数只有一个，也可以省去包裹参数的括号。<br> <strong>③</strong> 如果箭头函数有多个参数，将参数依次用逗号(,)分隔，包裹在括号中即可。</p>\n<pre><code>// 没有参数\nlet fun1 = () =&gt; {\n    console.log(111);\n};\n\n// 只有一个参数，可以省去参数括号\nlet fun2 = name =&gt; {\n    console.log(`Hello ${name} !`)\n};\n\n// 有多个参数\nlet fun3 = (val1, val2, val3) =&gt; {\n    return [val1, val2, val3];\n};\n</code></pre><p><strong>关于箭头函数的函数体：</strong><br> <strong>①</strong> 如果箭头函数的函数体只有一句代码，就是简单返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号{ }。</p>\n<pre><code>let f = val =&gt; val;\n// 等同于\nlet f = function (val) { return val };\n\nlet sum = (num1, num2) =&gt; num1 + num2;\n// 等同于\nlet sum = function(num1, num2) {\n  return num1 + num2;\n};\n</code></pre><p> <strong>②</strong> 如果箭头函数的函数体只有一句代码，就是返回一个对象，可以像下面这样写：</p>\n<pre><code>// 用小括号包裹要返回的对象，不报错\nlet getTempItem = id =&gt; ({ id: id, name: &quot;Temp&quot; });\n\n// 但绝不能这样写，会报错。\n// 因为对象的大括号会被解释为函数体的大括号\nlet getTempItem = id =&gt; { id: id, name: &quot;Temp&quot; };\n</code></pre><p> <strong>③</strong> 如果箭头函数的函数体只有一条语句并且不需要返回值（最常见是调用一个函数），可以给这条语句前面加一个<code>void</code>关键字</p>\n<pre><code>let fn = () =&gt; void doesNotReturn();\n</code></pre><p>箭头函数最常见的用处就是简化回调函数。</p>\n<pre><code>// 例子一\n// 正常函数写法\n[1,2,3].map(function (x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1,2,3].map(x =&gt; x * x);\n\n// 例子二\n// 正常函数写法\nvar result = [2, 5, 1, 4, 3].sort(function (a, b) {\n  return a - b;\n});\n\n// 箭头函数写法\nvar result = [2, 5, 1, 4, 3].sort((a, b) =&gt; a - b);\n</code></pre><h3 id=\"二、箭头函数与普通函数的区别\"><a href=\"#二、箭头函数与普通函数的区别\" class=\"headerlink\" title=\"二、箭头函数与普通函数的区别\"></a>二、箭头函数与普通函数的区别</h3><h4 id=\"1、语法更加简洁、清晰\"><a href=\"#1、语法更加简洁、清晰\" class=\"headerlink\" title=\"1、语法更加简洁、清晰\"></a>1、语法更加简洁、清晰</h4><p>从上面的基本语法示例中可以看出，箭头函数的定义要比普通函数定义简洁、清晰得多，很快捷。</p>\n<h4 id=\"2、箭头函数不会创建自己的this（重要！！深入理解！！）\"><a href=\"#2、箭头函数不会创建自己的this（重要！！深入理解！！）\" class=\"headerlink\" title=\"2、箭头函数不会创建自己的this（重要！！深入理解！！）\"></a>2、箭头函数不会创建自己的this（重要！！深入理解！！）</h4><p>我们先来看看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">MDN</a>上对箭头函数<code>this</code>的解释。</p>\n<blockquote>\n<p>箭头函数不会创建自己的<code>this</code>，所以它没有自己的<code>this</code>，它只会从自己的作用域链的上一层继承<code>this</code>。</p>\n</blockquote>\n<p>箭头函数没有自己的<code>this</code>，它会捕获自己在<strong>定义时</strong>（注意，是定义时，不是调用时）所处的<strong>外层执行环境的<code>this</code></strong>，并继承这个<code>this</code>值。所以，箭头函数中<code>this</code>的指向在它被定义的时候就已经确定了，之后永远不会改变。</p>\n<p>来看个例子：</p>\n<pre><code>var id = &#39;Global&#39;;\n\nfunction fun1() {\n    // setTimeout中使用普通函数\n    setTimeout(function(){\n        console.log(this.id);\n    }, 2000);\n}\n\nfunction fun2() {\n    // setTimeout中使用箭头函数\n    setTimeout(() =&gt; {\n        console.log(this.id);\n    }, 2000)\n}\n\nfun1.call({id: &#39;Obj&#39;});     // &#39;Global&#39;\n\nfun2.call({id: &#39;Obj&#39;});     // &#39;Obj&#39;\n</code></pre><p>上面这个例子，函数<code>fun1</code>中的<code>setTimeout</code>中使用普通函数，2秒后函数执行时，这时函数其实是在全局作用域执行的，所以<code>this</code>指向<code>Window</code>对象，<code>this.id</code>就指向全局变量<code>id</code>，所以输出<code>&#39;Global&#39;</code>。<br>但是函数<code>fun2</code>中的<code>setTimeout</code>中使用的是箭头函数，这个箭头函数的<code>this</code>在定义时就确定了，它继承了它外层<code>fun2</code>的执行环境中的<code>this</code>，而<code>fun2</code>调用时<code>this</code>被<code>call</code>方法改变到了对象<code>{id: &#39;Obj&#39;}</code>中，所以输出<code>&#39;Obj&#39;</code>。</p>\n<p>再来看另一个例子：</p>\n<pre><code>var id = &#39;GLOBAL&#39;;\nvar obj = {\n  id: &#39;OBJ&#39;,\n  a: function(){\n    console.log(this.id);\n  },\n  b: () =&gt; {\n      console.log(this.id);\n  }\n};\n\nobj.a();    // &#39;OBJ&#39;\nobj.b();    // &#39;GLOBAL&#39;\n</code></pre><p>上面这个例子，对象<code>obj</code>的方法<code>a</code>使用普通函数定义的，<strong>普通函数作为对象的方法调用时，<code>this</code>指向它所属的对象</strong>。所以，<code>this.id</code>就是<code>obj.id</code>，所以输出<code>&#39;OBJ&#39;</code>。<br>但是方法<code>b</code>是使用箭头函数定义的，箭头函数中的<code>this</code>实际是继承的它定义时所处的全局执行环境中的<code>this</code>，所以指向<code>Window</code>对象，所以输出<code>&#39;GLOBAL&#39;</code>。（<strong>这里要注意，定义对象的大括号<code>{}</code>是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中！！</strong>）</p>\n<h4 id=\"3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\"><a href=\"#3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\" class=\"headerlink\" title=\"3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）\"></a>3、箭头函数继承而来的this指向永远不变（重要！！深入理解！！）</h4><p>上面的例子，就完全可以说明箭头函数继承而来的<code>this</code>指向永远不变。对象<code>obj</code>的方法<code>b</code>是使用箭头函数定义的，这个函数中的<code>this</code>就<strong>永远指向</strong>它定义时所处的全局执行环境中的<code>this</code>，即便这个函数是作为对象<code>obj</code>的方法调用，<code>this</code>依旧指向<code>Window</code>对象。</p>\n<h4 id=\"4、-call-apply-bind-无法改变箭头函数中this的指向\"><a href=\"#4、-call-apply-bind-无法改变箭头函数中this的指向\" class=\"headerlink\" title=\"4、.call()/.apply()/.bind()无法改变箭头函数中this的指向\"></a>4、.call()/.apply()/.bind()无法改变箭头函数中this的指向</h4><p><code>.call()</code>/<code>.apply()</code>/<code>.bind()</code>方法可以用来动态修改函数执行时<code>this</code>的指向，但由于箭头函数的<code>this</code>定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数<code>this</code>的指向，虽然这么做代码不会报错。</p>\n<pre><code>var id = &#39;Global&#39;;\n// 箭头函数定义在全局作用域\nlet fun1 = () =&gt; {\n    console.log(this.id)\n};\n\nfun1();     // &#39;Global&#39;\n// this的指向不会改变，永远指向Window对象\nfun1.call({id: &#39;Obj&#39;});     // &#39;Global&#39;\nfun1.apply({id: &#39;Obj&#39;});    // &#39;Global&#39;\nfun1.bind({id: &#39;Obj&#39;})();   // &#39;Global&#39;\n</code></pre><h4 id=\"5、箭头函数不能作为构造函数使用\"><a href=\"#5、箭头函数不能作为构造函数使用\" class=\"headerlink\" title=\"5、箭头函数不能作为构造函数使用\"></a>5、箭头函数不能作为构造函数使用</h4><p>我们先了解一下构造函数的new都做了些什么？简单来说，分为四步：<br> ① JS内部首先会先生成一个对象；<br> ② 再把函数中的this指向该对象；<br> ③ 然后执行构造函数中的语句；<br> ④ 最终返回该对象实例。</p>\n<p>但是！！因为箭头函数没有自己的<code>this</code>，它的<code>this</code>其实是继承了外层执行环境中的<code>this</code>，且<code>this</code>指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用<code>new</code>调用时会报错！</p>\n<pre><code>let Fun = (name, age) =&gt; {\n    this.name = name;\n    this.age = age;\n};\n\n// 报错\nlet p = new Fun(&#39;cao&#39;, 24);\n</code></pre><h4 id=\"6、箭头函数没有自己的arguments\"><a href=\"#6、箭头函数没有自己的arguments\" class=\"headerlink\" title=\"6、箭头函数没有自己的arguments\"></a>6、箭头函数没有自己的arguments</h4><p>箭头函数没有自己的<code>arguments</code>对象。在箭头函数中访问<code>arguments</code>实际上获得的是外层局部（函数）执行环境中的值。</p>\n<pre><code>// 例子一\nlet fun = (val) =&gt; {\n    console.log(val);   // 111\n    // 下面一行会报错\n    // Uncaught ReferenceError: arguments is not defined\n    // 因为外层全局环境没有arguments对象\n    console.log(arguments); \n};\nfun(111);\n\n// 例子二\nfunction outer(val1, val2) {\n    let argOut = arguments;\n    console.log(argOut);    // ①\n    let fun = () =&gt; {\n        let argIn = arguments;\n        console.log(argIn);     // ②\n        console.log(argOut === argIn);  // ③\n    };\n    fun();\n}\nouter(111, 222);\n</code></pre><p>上面例子二，①②③处的输出结果如下：<br><img src=\"/medias/article/coding/arrow-function/arrow-function-arguments.png\" alt=\"箭头函数的arguments\"><br>很明显，普通函数<code>outer</code>内部的箭头函数<code>fun</code>中的<code>arguments</code>对象，其实是沿作用域链向上访问的外层<code>outer</code>函数的<code>arguments</code>对象。</p>\n<p><strong>可以在箭头函数中使用rest参数代替arguments对象，来访问箭头函数的参数列表！！</strong></p>\n<h4 id=\"7、箭头函数没有原型prototype\"><a href=\"#7、箭头函数没有原型prototype\" class=\"headerlink\" title=\"7、箭头函数没有原型prototype\"></a>7、箭头函数没有原型prototype</h4><pre><code>let sayHi = () =&gt; {\n    console.log(&#39;Hello World !&#39;)\n};\nconsole.log(sayHi.prototype); // undefined\n</code></pre><h4 id=\"8、箭头函数不能用作Generator函数，不能使用yeild关键字\"><a href=\"#8、箭头函数不能用作Generator函数，不能使用yeild关键字\" class=\"headerlink\" title=\"8、箭头函数不能用作Generator函数，不能使用yeild关键字\"></a>8、箭头函数不能用作Generator函数，不能使用yeild关键字</h4><p>这一点等到讲解Generator函数的时候我们在深入讨论。</p>\n"},{"title":"ES6 - 解构赋值","date":"2019-03-17T16:41:12.000Z","img":"/medias/article/featureimages/ES6.jpg","_content":"### 解构赋值\n\n> ES6允许按照**一定的模式**，从数组和对象中提取值，然后对变量赋值，这被称为`解构赋值`。\n\n这听起来比较抽象。我们来用一个简单的例子，直观明了的解释什么是解构赋值。\n\n在解构赋值之前，我们如果需要一次性声明并赋值多个变量，需要这样操作：\n\n```\nlet a = 123;\nlet b = 'bbb';\nlet c = true;\n```\n\n这样，如果要声明初始化的变量很多（假设有十几二十个），这样写显得很麻烦，不够优雅。ES6中的解构赋值，就简化了这一操作。\n\n上面的例子用解构赋值，可以像下面这样操作，同样可以达到相同的效果。\n```\n// 为了让大家先直观了解什么是解构赋值，我们先用数组的结构赋值来演示讲解。\nlet [a, b, c] = [123, 'bbb', true]\n```\n这样一次性声明赋值多个变量就方便了很多。其实，这种写法属于`“模式匹配”`，只要等号两边的模式相同，就能将左边模式对应的值赋值给最右边对应模式处的变量。\n\n所以，本质上**解构赋值就是采用`模式匹配`的方法，从数组/对象中提取对应位置或者对应名称属性的值，对变量进行赋值**。\n\n#### 一、数组的解构赋值\n\n##### 1、常用的数组解构赋值\n我们先来看看数组解构赋值都有哪些方式。\n\n```\n// 最基本的数组解构赋值\nlet [a, b, c] = [1, '2', false];\nconsole.log(a, b, c);       // 1 '2' false\n\n// 使用嵌套数组进行解构赋值\nlet [d, [e, f], g] = [1, [2, '3'], [4]];\nconsole.log(d, e, f, g);    // 1 2 '3' [4]\n\n// 左边（声明变量）的模式中，可以有缺省\nlet [ , h, , i] = ['one', [1, 2, 3], null, {hProperty: 'HHH'}];\nconsole.log(h, i);          // [1, 2, 3] {hProperty: 'HHH'}\n\n// 数组解构赋值可以使用rest参数\nlet [first, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(first, rest);   // 1 [2, 3, 4, 5]\n\n// !!!这个例子需要特别注意!!!\nlet [x, y, ...z] = ['a'];\nconsole.log(x, y, z);       // 'a' undefined []\n/**\n * 1、使用数组解构赋值，如果rest参数（上面的例子为变量z）没有对应赋值匹配\n *    那么该变量会被赋值为空数组。\n * 2、如果有的变量模式匹配失败，上面的例子中变量y没有匹配到赋值，\n *    则会被赋值为 undefined\n */\n```\n\n##### 2、等号左侧（变量）模式匹配不成功\n如果左侧模式匹配不成功，则变量会被赋值为`undefined`。\n\n```\nlet [a] = [];       // a匹配失败\nconsole.log(a);     // undefined\n\nlet [a, b] = ['AAA'];   // b匹配失败\nconsole.log(a, b);      // 'AAA' undefined\n```\n\n##### 3、等号右侧（赋值）模式匹配不成功\n如果等号左边（变量）的模式只匹配等号右边（赋值）的模式中的一部分，称为`不完全结构`。这样也是可以成功解构赋值的。\n\n```\n// 等号右边的值'string'并未匹配到左侧的变量\nlet [a, b] = [1, {bProperty: 'BBB'}, 'string'];\nconsole.log(a, b);      // 1 {bProperty: 'BBB'}\n\n// 等号右侧的值3，并未匹配到左侧的变量\nlet [c, [d], e] = [1, [2, 3], 4];\nconsole.log(c, d, e);      // 1 2 4\n```\n\n以上的例子都是不完全结构，依旧可以正常运行，完成解构赋值。\n\n##### 4、等号右侧不具备 Iterator 接口\n如果等号的右边不是数组（或者严格地说，不具备 Iterator 接口），那么将会报错。下面的解构赋值都会报错！！\n\n```\n// 作为简单类型的值，解构赋值时，会将其转换为对象（基本包装类型）\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\n\n// 本身就不具备 Iterator 接口\nlet [foo] = {};\n```\n\n在解构赋值时，简单类型的值会被临时转换为对象（基本包装类型），它不具备 Iterator 接口，`{ }`本身也不具备 Iterator 接口，所以上面的解构赋值都会报错。\n\n\n##### 5、数组解构赋值设置默认值\n\n数组结构赋值时，允许为任何一个变量设置默认值。并且，**当且仅当**等号右侧的赋值严格等于（`===`，三个等号的严格等于）`undefined`时，默认值才会生效。\n\n```\n/**\n * 下面这个例子，首先是变量a匹配右侧失败，被设置为默认的 undefined\n * 因为a为 undefined，所以默认值生效\n */\nlet [a = 123] = [];\nconsole.log(a);     // 123\n\nlet [b, c = 'CCC'] = [[1, 2]];\nconsole,log(b, c);  // [1, 2] CCC\n\nlet [d = false] = [true];\nconsole.log(d);     // true\n\nlet [e = {}, f = 100, g = {gProperty: 'GGG'}] = [false, 0, undefined];\nconsole.log(e, f, g);       // false 0 {gProperty: 'GGG'}\n```\n\n还有一个细节需要明确！**默认值取值是`惰性求值`的**。也就是说，当一个默认值是一个JS表达式的时候，如果默认值不需要生效，那么这个表达式是不会运行计算求值的。\n\n```\n// 因为 null 并不严格等于 undefined，所以 b 的默认值不会生效\n// 因此，a + 1是不会执行的。\nlet [a, b = a + 1] = [1, null]\nconsole.log(a, b);      // 1 null\n\n// 这个例子同上\nfunction calDefault() {\n    return 123\n}\nlet [c, d = calDefault()] = [1, 2];\nconsole.log(c, d);      // 1 2\n```\n\n#### 二、对象的解构赋值\n\n对象的解构赋值和数组的类似，区别在于数组的解构赋值是有顺序的，是按照对应位置顺序来解构并赋值的。但是，对象的解构赋值不受顺序影响，是按照变量名和属性名相同的对应关系来解构并赋值的。\n\n##### 1、常用的对象解构赋值\n```\n// 最简单的对象解构赋值\nlet {name, age} = {name: 'cao', age: 24};\nconsole.log(name, age);     // 'world' 24\n\n// 嵌套对象解构赋值\nlet person = {\n    base: {\n        name: 'cao',\n        age: 24\n    },\n    address: \"Xi'An\"\n}\nlet {base: {name, age}, address} = person;\nconsole.log(name, age, address);        // 'cao' 24 \"Xi'An\"\n```\n\n##### 2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）\n```\n// 多层次嵌套\nlet node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\nlet { loc, loc: { start }, loc: { start: { line }} } = node;\n\nconsole.log(loc,);      // {start: {line: 1, column: 5}}\nconsole.log(start);     // {line: 1, column: 5}\nconsole.log(line);      // 1\n```\n**！！注意！！**这里要特别说明，对`line`进行解构赋值的时候，只有`line`是变量，`loc`和`start`都是模式，不是变量。\n\n##### 3、等号左侧模式匹配不成功\n和数组解构赋值类似，对象解构赋值中，如果等号左侧的变量名未匹配到右侧对象中相同的属性名，那么该变量默认赋值为`undefined`。\n\n```\n// 左侧 b 匹配失败\nlet {a, b} = {a: [1, 2], c: 'CCC'};\nconsole.log(b);     // undefined\n\n// 左侧c、d都匹配失败\nlet {c, d} = {};\nconsole.log(c, d);      // undefined undefined\n```\n\n##### 4、等号右侧模式匹配不成功\n等号右侧模式匹配不成功依旧可以成功解构赋值。\n\n```\nlet val = {\n    a: 'AAA',\n    b: {\n        c: 'CCC'\n    },\n    d: [1, 2, 3]\n};\n// 右侧属性 d 未匹配到左侧对应变量，不完全结构，不会报错\nlet {a, b: {c}} = val;  // 这里b是模式，不是变量。\nconsole.log(a, c);      // 'AAA' 'CCC'\n```\n\n##### 5、变量名与属性名不一致时\n从上面对象解构赋值可以看出，要声明的变量名和属性名相同时才能成功解构并赋值。但如果要声明的变量名和对象名不一致呢？或者说我们需要将和属性名相同而解构赋值得到的同名变量定义成别的名字呢？这种情况，**只能（只能）**像下面这样。\n\n```\n// 这相当于把右侧的属性n的值解构到左侧，并重新起名为变量name\nlet {n: name, a: age} = {n: 'cao', a: 24};\nconsole.log(name, age);     // 'cao' 24\n```\n\n上面的例子，其实我们最终定义的是`name`、`age`两个变量。相当于把右侧对象的属性`n`的值解构到左侧变量`n`（实际不存在变量`n`），并重新起名为变量`name`。变量`age`同理。\n\n##### 6、对象解构赋值设置默认值\n和数组解构赋值类似，对象的解构赋值也可以指定默认值。默认值生效的条件是，**当且仅当**对象的属性值**严格等于**`undefined`。\n\n```\nlet {a = 3} = {};\nconsole.log(a);     // 3\n\nlet {b, c = 5} = {b: 1};\nconsole.log(b, c);     // 1 5\n\nlet {c: d = 3} = {};\nconsole.log(d);     // 3\n\nlet {c: e = 3} = {c: 5};\nconsole.log(e);     // 5\n\nlet {message: msg = 'msg Content'} = {};\nconsole.log(msg);     // 'msg Content'\n```\n\n#### 三、基本数据类型的解构赋值\n\n##### 1、字符串解构赋值\n字符串也可以解构赋值。因为解构时，字符串会被转换成了一个类似数组的对象。\n\n```\nconst [a, b, c, d, e] = 'hello';\nconsole.log(a, b, c, e);        // 'h' 'e' 'l' 'l' 'o' \n\nlet {length} = 'hello';\nconsole.log(length);        // 5\n```\n\n##### 2、数值、布尔值的解构赋值\n解构赋值时，如果等号右边是数值和布尔值，则会先将其转换为对象（基本包装类型）。\n\n```\nlet {toString: s1} = 123;\nconsole.log(s1 === Number.prototype.toString);   // true\n\nlet {toString: s2} = true;\nconsole.log(s2 === Boolean.prototype.toString); // true\n```\n\n##### 3、undefined 和 null 的解构赋值（报错！！）\n**解构赋值的规则是，只要等号右边的值不是数组或者对象，就先将其转为对象**。由于`undefined`和`null`无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```\nlet { x } = undefined;  // TypeError\nlet { y } = null;       // TypeError\n```","source":"_posts/ES6-destructuring.md","raw":"---\ntitle: ES6 - 解构赋值\ndate: 2019-03-18 00:41:12\ncategories: 编程\ntags: ES6\nimg: /medias/article/featureimages/ES6.jpg\n---\n### 解构赋值\n\n> ES6允许按照**一定的模式**，从数组和对象中提取值，然后对变量赋值，这被称为`解构赋值`。\n\n这听起来比较抽象。我们来用一个简单的例子，直观明了的解释什么是解构赋值。\n\n在解构赋值之前，我们如果需要一次性声明并赋值多个变量，需要这样操作：\n\n```\nlet a = 123;\nlet b = 'bbb';\nlet c = true;\n```\n\n这样，如果要声明初始化的变量很多（假设有十几二十个），这样写显得很麻烦，不够优雅。ES6中的解构赋值，就简化了这一操作。\n\n上面的例子用解构赋值，可以像下面这样操作，同样可以达到相同的效果。\n```\n// 为了让大家先直观了解什么是解构赋值，我们先用数组的结构赋值来演示讲解。\nlet [a, b, c] = [123, 'bbb', true]\n```\n这样一次性声明赋值多个变量就方便了很多。其实，这种写法属于`“模式匹配”`，只要等号两边的模式相同，就能将左边模式对应的值赋值给最右边对应模式处的变量。\n\n所以，本质上**解构赋值就是采用`模式匹配`的方法，从数组/对象中提取对应位置或者对应名称属性的值，对变量进行赋值**。\n\n#### 一、数组的解构赋值\n\n##### 1、常用的数组解构赋值\n我们先来看看数组解构赋值都有哪些方式。\n\n```\n// 最基本的数组解构赋值\nlet [a, b, c] = [1, '2', false];\nconsole.log(a, b, c);       // 1 '2' false\n\n// 使用嵌套数组进行解构赋值\nlet [d, [e, f], g] = [1, [2, '3'], [4]];\nconsole.log(d, e, f, g);    // 1 2 '3' [4]\n\n// 左边（声明变量）的模式中，可以有缺省\nlet [ , h, , i] = ['one', [1, 2, 3], null, {hProperty: 'HHH'}];\nconsole.log(h, i);          // [1, 2, 3] {hProperty: 'HHH'}\n\n// 数组解构赋值可以使用rest参数\nlet [first, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(first, rest);   // 1 [2, 3, 4, 5]\n\n// !!!这个例子需要特别注意!!!\nlet [x, y, ...z] = ['a'];\nconsole.log(x, y, z);       // 'a' undefined []\n/**\n * 1、使用数组解构赋值，如果rest参数（上面的例子为变量z）没有对应赋值匹配\n *    那么该变量会被赋值为空数组。\n * 2、如果有的变量模式匹配失败，上面的例子中变量y没有匹配到赋值，\n *    则会被赋值为 undefined\n */\n```\n\n##### 2、等号左侧（变量）模式匹配不成功\n如果左侧模式匹配不成功，则变量会被赋值为`undefined`。\n\n```\nlet [a] = [];       // a匹配失败\nconsole.log(a);     // undefined\n\nlet [a, b] = ['AAA'];   // b匹配失败\nconsole.log(a, b);      // 'AAA' undefined\n```\n\n##### 3、等号右侧（赋值）模式匹配不成功\n如果等号左边（变量）的模式只匹配等号右边（赋值）的模式中的一部分，称为`不完全结构`。这样也是可以成功解构赋值的。\n\n```\n// 等号右边的值'string'并未匹配到左侧的变量\nlet [a, b] = [1, {bProperty: 'BBB'}, 'string'];\nconsole.log(a, b);      // 1 {bProperty: 'BBB'}\n\n// 等号右侧的值3，并未匹配到左侧的变量\nlet [c, [d], e] = [1, [2, 3], 4];\nconsole.log(c, d, e);      // 1 2 4\n```\n\n以上的例子都是不完全结构，依旧可以正常运行，完成解构赋值。\n\n##### 4、等号右侧不具备 Iterator 接口\n如果等号的右边不是数组（或者严格地说，不具备 Iterator 接口），那么将会报错。下面的解构赋值都会报错！！\n\n```\n// 作为简单类型的值，解构赋值时，会将其转换为对象（基本包装类型）\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\n\n// 本身就不具备 Iterator 接口\nlet [foo] = {};\n```\n\n在解构赋值时，简单类型的值会被临时转换为对象（基本包装类型），它不具备 Iterator 接口，`{ }`本身也不具备 Iterator 接口，所以上面的解构赋值都会报错。\n\n\n##### 5、数组解构赋值设置默认值\n\n数组结构赋值时，允许为任何一个变量设置默认值。并且，**当且仅当**等号右侧的赋值严格等于（`===`，三个等号的严格等于）`undefined`时，默认值才会生效。\n\n```\n/**\n * 下面这个例子，首先是变量a匹配右侧失败，被设置为默认的 undefined\n * 因为a为 undefined，所以默认值生效\n */\nlet [a = 123] = [];\nconsole.log(a);     // 123\n\nlet [b, c = 'CCC'] = [[1, 2]];\nconsole,log(b, c);  // [1, 2] CCC\n\nlet [d = false] = [true];\nconsole.log(d);     // true\n\nlet [e = {}, f = 100, g = {gProperty: 'GGG'}] = [false, 0, undefined];\nconsole.log(e, f, g);       // false 0 {gProperty: 'GGG'}\n```\n\n还有一个细节需要明确！**默认值取值是`惰性求值`的**。也就是说，当一个默认值是一个JS表达式的时候，如果默认值不需要生效，那么这个表达式是不会运行计算求值的。\n\n```\n// 因为 null 并不严格等于 undefined，所以 b 的默认值不会生效\n// 因此，a + 1是不会执行的。\nlet [a, b = a + 1] = [1, null]\nconsole.log(a, b);      // 1 null\n\n// 这个例子同上\nfunction calDefault() {\n    return 123\n}\nlet [c, d = calDefault()] = [1, 2];\nconsole.log(c, d);      // 1 2\n```\n\n#### 二、对象的解构赋值\n\n对象的解构赋值和数组的类似，区别在于数组的解构赋值是有顺序的，是按照对应位置顺序来解构并赋值的。但是，对象的解构赋值不受顺序影响，是按照变量名和属性名相同的对应关系来解构并赋值的。\n\n##### 1、常用的对象解构赋值\n```\n// 最简单的对象解构赋值\nlet {name, age} = {name: 'cao', age: 24};\nconsole.log(name, age);     // 'world' 24\n\n// 嵌套对象解构赋值\nlet person = {\n    base: {\n        name: 'cao',\n        age: 24\n    },\n    address: \"Xi'An\"\n}\nlet {base: {name, age}, address} = person;\nconsole.log(name, age, address);        // 'cao' 24 \"Xi'An\"\n```\n\n##### 2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）\n```\n// 多层次嵌套\nlet node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\nlet { loc, loc: { start }, loc: { start: { line }} } = node;\n\nconsole.log(loc,);      // {start: {line: 1, column: 5}}\nconsole.log(start);     // {line: 1, column: 5}\nconsole.log(line);      // 1\n```\n**！！注意！！**这里要特别说明，对`line`进行解构赋值的时候，只有`line`是变量，`loc`和`start`都是模式，不是变量。\n\n##### 3、等号左侧模式匹配不成功\n和数组解构赋值类似，对象解构赋值中，如果等号左侧的变量名未匹配到右侧对象中相同的属性名，那么该变量默认赋值为`undefined`。\n\n```\n// 左侧 b 匹配失败\nlet {a, b} = {a: [1, 2], c: 'CCC'};\nconsole.log(b);     // undefined\n\n// 左侧c、d都匹配失败\nlet {c, d} = {};\nconsole.log(c, d);      // undefined undefined\n```\n\n##### 4、等号右侧模式匹配不成功\n等号右侧模式匹配不成功依旧可以成功解构赋值。\n\n```\nlet val = {\n    a: 'AAA',\n    b: {\n        c: 'CCC'\n    },\n    d: [1, 2, 3]\n};\n// 右侧属性 d 未匹配到左侧对应变量，不完全结构，不会报错\nlet {a, b: {c}} = val;  // 这里b是模式，不是变量。\nconsole.log(a, c);      // 'AAA' 'CCC'\n```\n\n##### 5、变量名与属性名不一致时\n从上面对象解构赋值可以看出，要声明的变量名和属性名相同时才能成功解构并赋值。但如果要声明的变量名和对象名不一致呢？或者说我们需要将和属性名相同而解构赋值得到的同名变量定义成别的名字呢？这种情况，**只能（只能）**像下面这样。\n\n```\n// 这相当于把右侧的属性n的值解构到左侧，并重新起名为变量name\nlet {n: name, a: age} = {n: 'cao', a: 24};\nconsole.log(name, age);     // 'cao' 24\n```\n\n上面的例子，其实我们最终定义的是`name`、`age`两个变量。相当于把右侧对象的属性`n`的值解构到左侧变量`n`（实际不存在变量`n`），并重新起名为变量`name`。变量`age`同理。\n\n##### 6、对象解构赋值设置默认值\n和数组解构赋值类似，对象的解构赋值也可以指定默认值。默认值生效的条件是，**当且仅当**对象的属性值**严格等于**`undefined`。\n\n```\nlet {a = 3} = {};\nconsole.log(a);     // 3\n\nlet {b, c = 5} = {b: 1};\nconsole.log(b, c);     // 1 5\n\nlet {c: d = 3} = {};\nconsole.log(d);     // 3\n\nlet {c: e = 3} = {c: 5};\nconsole.log(e);     // 5\n\nlet {message: msg = 'msg Content'} = {};\nconsole.log(msg);     // 'msg Content'\n```\n\n#### 三、基本数据类型的解构赋值\n\n##### 1、字符串解构赋值\n字符串也可以解构赋值。因为解构时，字符串会被转换成了一个类似数组的对象。\n\n```\nconst [a, b, c, d, e] = 'hello';\nconsole.log(a, b, c, e);        // 'h' 'e' 'l' 'l' 'o' \n\nlet {length} = 'hello';\nconsole.log(length);        // 5\n```\n\n##### 2、数值、布尔值的解构赋值\n解构赋值时，如果等号右边是数值和布尔值，则会先将其转换为对象（基本包装类型）。\n\n```\nlet {toString: s1} = 123;\nconsole.log(s1 === Number.prototype.toString);   // true\n\nlet {toString: s2} = true;\nconsole.log(s2 === Boolean.prototype.toString); // true\n```\n\n##### 3、undefined 和 null 的解构赋值（报错！！）\n**解构赋值的规则是，只要等号右边的值不是数组或者对象，就先将其转为对象**。由于`undefined`和`null`无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```\nlet { x } = undefined;  // TypeError\nlet { y } = null;       // TypeError\n```","slug":"ES6-destructuring","published":1,"updated":"2019-05-19T11:29:59.629Z","_id":"cjvuu4mqv00079kvbtp2mc20s","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><blockquote>\n<p>ES6允许按照<strong>一定的模式</strong>，从数组和对象中提取值，然后对变量赋值，这被称为<code>解构赋值</code>。</p>\n</blockquote>\n<p>这听起来比较抽象。我们来用一个简单的例子，直观明了的解释什么是解构赋值。</p>\n<p>在解构赋值之前，我们如果需要一次性声明并赋值多个变量，需要这样操作：</p>\n<pre><code>let a = 123;\nlet b = &#39;bbb&#39;;\nlet c = true;\n</code></pre><p>这样，如果要声明初始化的变量很多（假设有十几二十个），这样写显得很麻烦，不够优雅。ES6中的解构赋值，就简化了这一操作。</p>\n<p>上面的例子用解构赋值，可以像下面这样操作，同样可以达到相同的效果。</p>\n<pre><code>// 为了让大家先直观了解什么是解构赋值，我们先用数组的结构赋值来演示讲解。\nlet [a, b, c] = [123, &#39;bbb&#39;, true]\n</code></pre><p>这样一次性声明赋值多个变量就方便了很多。其实，这种写法属于<code>“模式匹配”</code>，只要等号两边的模式相同，就能将左边模式对应的值赋值给最右边对应模式处的变量。</p>\n<p>所以，本质上<strong>解构赋值就是采用<code>模式匹配</code>的方法，从数组/对象中提取对应位置或者对应名称属性的值，对变量进行赋值</strong>。</p>\n<h4 id=\"一、数组的解构赋值\"><a href=\"#一、数组的解构赋值\" class=\"headerlink\" title=\"一、数组的解构赋值\"></a>一、数组的解构赋值</h4><h5 id=\"1、常用的数组解构赋值\"><a href=\"#1、常用的数组解构赋值\" class=\"headerlink\" title=\"1、常用的数组解构赋值\"></a>1、常用的数组解构赋值</h5><p>我们先来看看数组解构赋值都有哪些方式。</p>\n<pre><code>// 最基本的数组解构赋值\nlet [a, b, c] = [1, &#39;2&#39;, false];\nconsole.log(a, b, c);       // 1 &#39;2&#39; false\n\n// 使用嵌套数组进行解构赋值\nlet [d, [e, f], g] = [1, [2, &#39;3&#39;], [4]];\nconsole.log(d, e, f, g);    // 1 2 &#39;3&#39; [4]\n\n// 左边（声明变量）的模式中，可以有缺省\nlet [ , h, , i] = [&#39;one&#39;, [1, 2, 3], null, {hProperty: &#39;HHH&#39;}];\nconsole.log(h, i);          // [1, 2, 3] {hProperty: &#39;HHH&#39;}\n\n// 数组解构赋值可以使用rest参数\nlet [first, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(first, rest);   // 1 [2, 3, 4, 5]\n\n// !!!这个例子需要特别注意!!!\nlet [x, y, ...z] = [&#39;a&#39;];\nconsole.log(x, y, z);       // &#39;a&#39; undefined []\n/**\n * 1、使用数组解构赋值，如果rest参数（上面的例子为变量z）没有对应赋值匹配\n *    那么该变量会被赋值为空数组。\n * 2、如果有的变量模式匹配失败，上面的例子中变量y没有匹配到赋值，\n *    则会被赋值为 undefined\n */\n</code></pre><h5 id=\"2、等号左侧（变量）模式匹配不成功\"><a href=\"#2、等号左侧（变量）模式匹配不成功\" class=\"headerlink\" title=\"2、等号左侧（变量）模式匹配不成功\"></a>2、等号左侧（变量）模式匹配不成功</h5><p>如果左侧模式匹配不成功，则变量会被赋值为<code>undefined</code>。</p>\n<pre><code>let [a] = [];       // a匹配失败\nconsole.log(a);     // undefined\n\nlet [a, b] = [&#39;AAA&#39;];   // b匹配失败\nconsole.log(a, b);      // &#39;AAA&#39; undefined\n</code></pre><h5 id=\"3、等号右侧（赋值）模式匹配不成功\"><a href=\"#3、等号右侧（赋值）模式匹配不成功\" class=\"headerlink\" title=\"3、等号右侧（赋值）模式匹配不成功\"></a>3、等号右侧（赋值）模式匹配不成功</h5><p>如果等号左边（变量）的模式只匹配等号右边（赋值）的模式中的一部分，称为<code>不完全结构</code>。这样也是可以成功解构赋值的。</p>\n<pre><code>// 等号右边的值&#39;string&#39;并未匹配到左侧的变量\nlet [a, b] = [1, {bProperty: &#39;BBB&#39;}, &#39;string&#39;];\nconsole.log(a, b);      // 1 {bProperty: &#39;BBB&#39;}\n\n// 等号右侧的值3，并未匹配到左侧的变量\nlet [c, [d], e] = [1, [2, 3], 4];\nconsole.log(c, d, e);      // 1 2 4\n</code></pre><p>以上的例子都是不完全结构，依旧可以正常运行，完成解构赋值。</p>\n<h5 id=\"4、等号右侧不具备-Iterator-接口\"><a href=\"#4、等号右侧不具备-Iterator-接口\" class=\"headerlink\" title=\"4、等号右侧不具备 Iterator 接口\"></a>4、等号右侧不具备 Iterator 接口</h5><p>如果等号的右边不是数组（或者严格地说，不具备 Iterator 接口），那么将会报错。下面的解构赋值都会报错！！</p>\n<pre><code>// 作为简单类型的值，解构赋值时，会将其转换为对象（基本包装类型）\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\n\n// 本身就不具备 Iterator 接口\nlet [foo] = {};\n</code></pre><p>在解构赋值时，简单类型的值会被临时转换为对象（基本包装类型），它不具备 Iterator 接口，<code>{ }</code>本身也不具备 Iterator 接口，所以上面的解构赋值都会报错。</p>\n<h5 id=\"5、数组解构赋值设置默认值\"><a href=\"#5、数组解构赋值设置默认值\" class=\"headerlink\" title=\"5、数组解构赋值设置默认值\"></a>5、数组解构赋值设置默认值</h5><p>数组结构赋值时，允许为任何一个变量设置默认值。并且，<strong>当且仅当</strong>等号右侧的赋值严格等于（<code>===</code>，三个等号的严格等于）<code>undefined</code>时，默认值才会生效。</p>\n<pre><code>/**\n * 下面这个例子，首先是变量a匹配右侧失败，被设置为默认的 undefined\n * 因为a为 undefined，所以默认值生效\n */\nlet [a = 123] = [];\nconsole.log(a);     // 123\n\nlet [b, c = &#39;CCC&#39;] = [[1, 2]];\nconsole,log(b, c);  // [1, 2] CCC\n\nlet [d = false] = [true];\nconsole.log(d);     // true\n\nlet [e = {}, f = 100, g = {gProperty: &#39;GGG&#39;}] = [false, 0, undefined];\nconsole.log(e, f, g);       // false 0 {gProperty: &#39;GGG&#39;}\n</code></pre><p>还有一个细节需要明确！<strong>默认值取值是<code>惰性求值</code>的</strong>。也就是说，当一个默认值是一个JS表达式的时候，如果默认值不需要生效，那么这个表达式是不会运行计算求值的。</p>\n<pre><code>// 因为 null 并不严格等于 undefined，所以 b 的默认值不会生效\n// 因此，a + 1是不会执行的。\nlet [a, b = a + 1] = [1, null]\nconsole.log(a, b);      // 1 null\n\n// 这个例子同上\nfunction calDefault() {\n    return 123\n}\nlet [c, d = calDefault()] = [1, 2];\nconsole.log(c, d);      // 1 2\n</code></pre><h4 id=\"二、对象的解构赋值\"><a href=\"#二、对象的解构赋值\" class=\"headerlink\" title=\"二、对象的解构赋值\"></a>二、对象的解构赋值</h4><p>对象的解构赋值和数组的类似，区别在于数组的解构赋值是有顺序的，是按照对应位置顺序来解构并赋值的。但是，对象的解构赋值不受顺序影响，是按照变量名和属性名相同的对应关系来解构并赋值的。</p>\n<h5 id=\"1、常用的对象解构赋值\"><a href=\"#1、常用的对象解构赋值\" class=\"headerlink\" title=\"1、常用的对象解构赋值\"></a>1、常用的对象解构赋值</h5><pre><code>// 最简单的对象解构赋值\nlet {name, age} = {name: &#39;cao&#39;, age: 24};\nconsole.log(name, age);     // &#39;world&#39; 24\n\n// 嵌套对象解构赋值\nlet person = {\n    base: {\n        name: &#39;cao&#39;,\n        age: 24\n    },\n    address: &quot;Xi&#39;An&quot;\n}\nlet {base: {name, age}, address} = person;\nconsole.log(name, age, address);        // &#39;cao&#39; 24 &quot;Xi&#39;An&quot;\n</code></pre><h5 id=\"2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）\"><a href=\"#2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）\" class=\"headerlink\" title=\"2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）\"></a>2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）</h5><pre><code>// 多层次嵌套\nlet node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\nlet { loc, loc: { start }, loc: { start: { line }} } = node;\n\nconsole.log(loc,);      // {start: {line: 1, column: 5}}\nconsole.log(start);     // {line: 1, column: 5}\nconsole.log(line);      // 1\n</code></pre><p><strong>！！注意！！</strong>这里要特别说明，对<code>line</code>进行解构赋值的时候，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<h5 id=\"3、等号左侧模式匹配不成功\"><a href=\"#3、等号左侧模式匹配不成功\" class=\"headerlink\" title=\"3、等号左侧模式匹配不成功\"></a>3、等号左侧模式匹配不成功</h5><p>和数组解构赋值类似，对象解构赋值中，如果等号左侧的变量名未匹配到右侧对象中相同的属性名，那么该变量默认赋值为<code>undefined</code>。</p>\n<pre><code>// 左侧 b 匹配失败\nlet {a, b} = {a: [1, 2], c: &#39;CCC&#39;};\nconsole.log(b);     // undefined\n\n// 左侧c、d都匹配失败\nlet {c, d} = {};\nconsole.log(c, d);      // undefined undefined\n</code></pre><h5 id=\"4、等号右侧模式匹配不成功\"><a href=\"#4、等号右侧模式匹配不成功\" class=\"headerlink\" title=\"4、等号右侧模式匹配不成功\"></a>4、等号右侧模式匹配不成功</h5><p>等号右侧模式匹配不成功依旧可以成功解构赋值。</p>\n<pre><code>let val = {\n    a: &#39;AAA&#39;,\n    b: {\n        c: &#39;CCC&#39;\n    },\n    d: [1, 2, 3]\n};\n// 右侧属性 d 未匹配到左侧对应变量，不完全结构，不会报错\nlet {a, b: {c}} = val;  // 这里b是模式，不是变量。\nconsole.log(a, c);      // &#39;AAA&#39; &#39;CCC&#39;\n</code></pre><h5 id=\"5、变量名与属性名不一致时\"><a href=\"#5、变量名与属性名不一致时\" class=\"headerlink\" title=\"5、变量名与属性名不一致时\"></a>5、变量名与属性名不一致时</h5><p>从上面对象解构赋值可以看出，要声明的变量名和属性名相同时才能成功解构并赋值。但如果要声明的变量名和对象名不一致呢？或者说我们需要将和属性名相同而解构赋值得到的同名变量定义成别的名字呢？这种情况，<strong>只能（只能）</strong>像下面这样。</p>\n<pre><code>// 这相当于把右侧的属性n的值解构到左侧，并重新起名为变量name\nlet {n: name, a: age} = {n: &#39;cao&#39;, a: 24};\nconsole.log(name, age);     // &#39;cao&#39; 24\n</code></pre><p>上面的例子，其实我们最终定义的是<code>name</code>、<code>age</code>两个变量。相当于把右侧对象的属性<code>n</code>的值解构到左侧变量<code>n</code>（实际不存在变量<code>n</code>），并重新起名为变量<code>name</code>。变量<code>age</code>同理。</p>\n<h5 id=\"6、对象解构赋值设置默认值\"><a href=\"#6、对象解构赋值设置默认值\" class=\"headerlink\" title=\"6、对象解构赋值设置默认值\"></a>6、对象解构赋值设置默认值</h5><p>和数组解构赋值类似，对象的解构赋值也可以指定默认值。默认值生效的条件是，<strong>当且仅当</strong>对象的属性值<strong>严格等于</strong><code>undefined</code>。</p>\n<pre><code>let {a = 3} = {};\nconsole.log(a);     // 3\n\nlet {b, c = 5} = {b: 1};\nconsole.log(b, c);     // 1 5\n\nlet {c: d = 3} = {};\nconsole.log(d);     // 3\n\nlet {c: e = 3} = {c: 5};\nconsole.log(e);     // 5\n\nlet {message: msg = &#39;msg Content&#39;} = {};\nconsole.log(msg);     // &#39;msg Content&#39;\n</code></pre><h4 id=\"三、基本数据类型的解构赋值\"><a href=\"#三、基本数据类型的解构赋值\" class=\"headerlink\" title=\"三、基本数据类型的解构赋值\"></a>三、基本数据类型的解构赋值</h4><h5 id=\"1、字符串解构赋值\"><a href=\"#1、字符串解构赋值\" class=\"headerlink\" title=\"1、字符串解构赋值\"></a>1、字符串解构赋值</h5><p>字符串也可以解构赋值。因为解构时，字符串会被转换成了一个类似数组的对象。</p>\n<pre><code>const [a, b, c, d, e] = &#39;hello&#39;;\nconsole.log(a, b, c, e);        // &#39;h&#39; &#39;e&#39; &#39;l&#39; &#39;l&#39; &#39;o&#39; \n\nlet {length} = &#39;hello&#39;;\nconsole.log(length);        // 5\n</code></pre><h5 id=\"2、数值、布尔值的解构赋值\"><a href=\"#2、数值、布尔值的解构赋值\" class=\"headerlink\" title=\"2、数值、布尔值的解构赋值\"></a>2、数值、布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先将其转换为对象（基本包装类型）。</p>\n<pre><code>let {toString: s1} = 123;\nconsole.log(s1 === Number.prototype.toString);   // true\n\nlet {toString: s2} = true;\nconsole.log(s2 === Boolean.prototype.toString); // true\n</code></pre><h5 id=\"3、undefined-和-null-的解构赋值（报错！！）\"><a href=\"#3、undefined-和-null-的解构赋值（报错！！）\" class=\"headerlink\" title=\"3、undefined 和 null 的解构赋值（报错！！）\"></a>3、undefined 和 null 的解构赋值（报错！！）</h5><p><strong>解构赋值的规则是，只要等号右边的值不是数组或者对象，就先将其转为对象</strong>。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<pre><code>let { x } = undefined;  // TypeError\nlet { y } = null;       // TypeError\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><blockquote>\n<p>ES6允许按照<strong>一定的模式</strong>，从数组和对象中提取值，然后对变量赋值，这被称为<code>解构赋值</code>。</p>\n</blockquote>\n<p>这听起来比较抽象。我们来用一个简单的例子，直观明了的解释什么是解构赋值。</p>\n<p>在解构赋值之前，我们如果需要一次性声明并赋值多个变量，需要这样操作：</p>\n<pre><code>let a = 123;\nlet b = &#39;bbb&#39;;\nlet c = true;\n</code></pre><p>这样，如果要声明初始化的变量很多（假设有十几二十个），这样写显得很麻烦，不够优雅。ES6中的解构赋值，就简化了这一操作。</p>\n<p>上面的例子用解构赋值，可以像下面这样操作，同样可以达到相同的效果。</p>\n<pre><code>// 为了让大家先直观了解什么是解构赋值，我们先用数组的结构赋值来演示讲解。\nlet [a, b, c] = [123, &#39;bbb&#39;, true]\n</code></pre><p>这样一次性声明赋值多个变量就方便了很多。其实，这种写法属于<code>“模式匹配”</code>，只要等号两边的模式相同，就能将左边模式对应的值赋值给最右边对应模式处的变量。</p>\n<p>所以，本质上<strong>解构赋值就是采用<code>模式匹配</code>的方法，从数组/对象中提取对应位置或者对应名称属性的值，对变量进行赋值</strong>。</p>\n<h4 id=\"一、数组的解构赋值\"><a href=\"#一、数组的解构赋值\" class=\"headerlink\" title=\"一、数组的解构赋值\"></a>一、数组的解构赋值</h4><h5 id=\"1、常用的数组解构赋值\"><a href=\"#1、常用的数组解构赋值\" class=\"headerlink\" title=\"1、常用的数组解构赋值\"></a>1、常用的数组解构赋值</h5><p>我们先来看看数组解构赋值都有哪些方式。</p>\n<pre><code>// 最基本的数组解构赋值\nlet [a, b, c] = [1, &#39;2&#39;, false];\nconsole.log(a, b, c);       // 1 &#39;2&#39; false\n\n// 使用嵌套数组进行解构赋值\nlet [d, [e, f], g] = [1, [2, &#39;3&#39;], [4]];\nconsole.log(d, e, f, g);    // 1 2 &#39;3&#39; [4]\n\n// 左边（声明变量）的模式中，可以有缺省\nlet [ , h, , i] = [&#39;one&#39;, [1, 2, 3], null, {hProperty: &#39;HHH&#39;}];\nconsole.log(h, i);          // [1, 2, 3] {hProperty: &#39;HHH&#39;}\n\n// 数组解构赋值可以使用rest参数\nlet [first, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(first, rest);   // 1 [2, 3, 4, 5]\n\n// !!!这个例子需要特别注意!!!\nlet [x, y, ...z] = [&#39;a&#39;];\nconsole.log(x, y, z);       // &#39;a&#39; undefined []\n/**\n * 1、使用数组解构赋值，如果rest参数（上面的例子为变量z）没有对应赋值匹配\n *    那么该变量会被赋值为空数组。\n * 2、如果有的变量模式匹配失败，上面的例子中变量y没有匹配到赋值，\n *    则会被赋值为 undefined\n */\n</code></pre><h5 id=\"2、等号左侧（变量）模式匹配不成功\"><a href=\"#2、等号左侧（变量）模式匹配不成功\" class=\"headerlink\" title=\"2、等号左侧（变量）模式匹配不成功\"></a>2、等号左侧（变量）模式匹配不成功</h5><p>如果左侧模式匹配不成功，则变量会被赋值为<code>undefined</code>。</p>\n<pre><code>let [a] = [];       // a匹配失败\nconsole.log(a);     // undefined\n\nlet [a, b] = [&#39;AAA&#39;];   // b匹配失败\nconsole.log(a, b);      // &#39;AAA&#39; undefined\n</code></pre><h5 id=\"3、等号右侧（赋值）模式匹配不成功\"><a href=\"#3、等号右侧（赋值）模式匹配不成功\" class=\"headerlink\" title=\"3、等号右侧（赋值）模式匹配不成功\"></a>3、等号右侧（赋值）模式匹配不成功</h5><p>如果等号左边（变量）的模式只匹配等号右边（赋值）的模式中的一部分，称为<code>不完全结构</code>。这样也是可以成功解构赋值的。</p>\n<pre><code>// 等号右边的值&#39;string&#39;并未匹配到左侧的变量\nlet [a, b] = [1, {bProperty: &#39;BBB&#39;}, &#39;string&#39;];\nconsole.log(a, b);      // 1 {bProperty: &#39;BBB&#39;}\n\n// 等号右侧的值3，并未匹配到左侧的变量\nlet [c, [d], e] = [1, [2, 3], 4];\nconsole.log(c, d, e);      // 1 2 4\n</code></pre><p>以上的例子都是不完全结构，依旧可以正常运行，完成解构赋值。</p>\n<h5 id=\"4、等号右侧不具备-Iterator-接口\"><a href=\"#4、等号右侧不具备-Iterator-接口\" class=\"headerlink\" title=\"4、等号右侧不具备 Iterator 接口\"></a>4、等号右侧不具备 Iterator 接口</h5><p>如果等号的右边不是数组（或者严格地说，不具备 Iterator 接口），那么将会报错。下面的解构赋值都会报错！！</p>\n<pre><code>// 作为简单类型的值，解构赋值时，会将其转换为对象（基本包装类型）\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\n\n// 本身就不具备 Iterator 接口\nlet [foo] = {};\n</code></pre><p>在解构赋值时，简单类型的值会被临时转换为对象（基本包装类型），它不具备 Iterator 接口，<code>{ }</code>本身也不具备 Iterator 接口，所以上面的解构赋值都会报错。</p>\n<h5 id=\"5、数组解构赋值设置默认值\"><a href=\"#5、数组解构赋值设置默认值\" class=\"headerlink\" title=\"5、数组解构赋值设置默认值\"></a>5、数组解构赋值设置默认值</h5><p>数组结构赋值时，允许为任何一个变量设置默认值。并且，<strong>当且仅当</strong>等号右侧的赋值严格等于（<code>===</code>，三个等号的严格等于）<code>undefined</code>时，默认值才会生效。</p>\n<pre><code>/**\n * 下面这个例子，首先是变量a匹配右侧失败，被设置为默认的 undefined\n * 因为a为 undefined，所以默认值生效\n */\nlet [a = 123] = [];\nconsole.log(a);     // 123\n\nlet [b, c = &#39;CCC&#39;] = [[1, 2]];\nconsole,log(b, c);  // [1, 2] CCC\n\nlet [d = false] = [true];\nconsole.log(d);     // true\n\nlet [e = {}, f = 100, g = {gProperty: &#39;GGG&#39;}] = [false, 0, undefined];\nconsole.log(e, f, g);       // false 0 {gProperty: &#39;GGG&#39;}\n</code></pre><p>还有一个细节需要明确！<strong>默认值取值是<code>惰性求值</code>的</strong>。也就是说，当一个默认值是一个JS表达式的时候，如果默认值不需要生效，那么这个表达式是不会运行计算求值的。</p>\n<pre><code>// 因为 null 并不严格等于 undefined，所以 b 的默认值不会生效\n// 因此，a + 1是不会执行的。\nlet [a, b = a + 1] = [1, null]\nconsole.log(a, b);      // 1 null\n\n// 这个例子同上\nfunction calDefault() {\n    return 123\n}\nlet [c, d = calDefault()] = [1, 2];\nconsole.log(c, d);      // 1 2\n</code></pre><h4 id=\"二、对象的解构赋值\"><a href=\"#二、对象的解构赋值\" class=\"headerlink\" title=\"二、对象的解构赋值\"></a>二、对象的解构赋值</h4><p>对象的解构赋值和数组的类似，区别在于数组的解构赋值是有顺序的，是按照对应位置顺序来解构并赋值的。但是，对象的解构赋值不受顺序影响，是按照变量名和属性名相同的对应关系来解构并赋值的。</p>\n<h5 id=\"1、常用的对象解构赋值\"><a href=\"#1、常用的对象解构赋值\" class=\"headerlink\" title=\"1、常用的对象解构赋值\"></a>1、常用的对象解构赋值</h5><pre><code>// 最简单的对象解构赋值\nlet {name, age} = {name: &#39;cao&#39;, age: 24};\nconsole.log(name, age);     // &#39;world&#39; 24\n\n// 嵌套对象解构赋值\nlet person = {\n    base: {\n        name: &#39;cao&#39;,\n        age: 24\n    },\n    address: &quot;Xi&#39;An&quot;\n}\nlet {base: {name, age}, address} = person;\nconsole.log(name, age, address);        // &#39;cao&#39; 24 &quot;Xi&#39;An&quot;\n</code></pre><h5 id=\"2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）\"><a href=\"#2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）\" class=\"headerlink\" title=\"2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）\"></a>2、嵌套对象解构赋值的特别说明！！（重要，一定要理解！）</h5><pre><code>// 多层次嵌套\nlet node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\nlet { loc, loc: { start }, loc: { start: { line }} } = node;\n\nconsole.log(loc,);      // {start: {line: 1, column: 5}}\nconsole.log(start);     // {line: 1, column: 5}\nconsole.log(line);      // 1\n</code></pre><p><strong>！！注意！！</strong>这里要特别说明，对<code>line</code>进行解构赋值的时候，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<h5 id=\"3、等号左侧模式匹配不成功\"><a href=\"#3、等号左侧模式匹配不成功\" class=\"headerlink\" title=\"3、等号左侧模式匹配不成功\"></a>3、等号左侧模式匹配不成功</h5><p>和数组解构赋值类似，对象解构赋值中，如果等号左侧的变量名未匹配到右侧对象中相同的属性名，那么该变量默认赋值为<code>undefined</code>。</p>\n<pre><code>// 左侧 b 匹配失败\nlet {a, b} = {a: [1, 2], c: &#39;CCC&#39;};\nconsole.log(b);     // undefined\n\n// 左侧c、d都匹配失败\nlet {c, d} = {};\nconsole.log(c, d);      // undefined undefined\n</code></pre><h5 id=\"4、等号右侧模式匹配不成功\"><a href=\"#4、等号右侧模式匹配不成功\" class=\"headerlink\" title=\"4、等号右侧模式匹配不成功\"></a>4、等号右侧模式匹配不成功</h5><p>等号右侧模式匹配不成功依旧可以成功解构赋值。</p>\n<pre><code>let val = {\n    a: &#39;AAA&#39;,\n    b: {\n        c: &#39;CCC&#39;\n    },\n    d: [1, 2, 3]\n};\n// 右侧属性 d 未匹配到左侧对应变量，不完全结构，不会报错\nlet {a, b: {c}} = val;  // 这里b是模式，不是变量。\nconsole.log(a, c);      // &#39;AAA&#39; &#39;CCC&#39;\n</code></pre><h5 id=\"5、变量名与属性名不一致时\"><a href=\"#5、变量名与属性名不一致时\" class=\"headerlink\" title=\"5、变量名与属性名不一致时\"></a>5、变量名与属性名不一致时</h5><p>从上面对象解构赋值可以看出，要声明的变量名和属性名相同时才能成功解构并赋值。但如果要声明的变量名和对象名不一致呢？或者说我们需要将和属性名相同而解构赋值得到的同名变量定义成别的名字呢？这种情况，<strong>只能（只能）</strong>像下面这样。</p>\n<pre><code>// 这相当于把右侧的属性n的值解构到左侧，并重新起名为变量name\nlet {n: name, a: age} = {n: &#39;cao&#39;, a: 24};\nconsole.log(name, age);     // &#39;cao&#39; 24\n</code></pre><p>上面的例子，其实我们最终定义的是<code>name</code>、<code>age</code>两个变量。相当于把右侧对象的属性<code>n</code>的值解构到左侧变量<code>n</code>（实际不存在变量<code>n</code>），并重新起名为变量<code>name</code>。变量<code>age</code>同理。</p>\n<h5 id=\"6、对象解构赋值设置默认值\"><a href=\"#6、对象解构赋值设置默认值\" class=\"headerlink\" title=\"6、对象解构赋值设置默认值\"></a>6、对象解构赋值设置默认值</h5><p>和数组解构赋值类似，对象的解构赋值也可以指定默认值。默认值生效的条件是，<strong>当且仅当</strong>对象的属性值<strong>严格等于</strong><code>undefined</code>。</p>\n<pre><code>let {a = 3} = {};\nconsole.log(a);     // 3\n\nlet {b, c = 5} = {b: 1};\nconsole.log(b, c);     // 1 5\n\nlet {c: d = 3} = {};\nconsole.log(d);     // 3\n\nlet {c: e = 3} = {c: 5};\nconsole.log(e);     // 5\n\nlet {message: msg = &#39;msg Content&#39;} = {};\nconsole.log(msg);     // &#39;msg Content&#39;\n</code></pre><h4 id=\"三、基本数据类型的解构赋值\"><a href=\"#三、基本数据类型的解构赋值\" class=\"headerlink\" title=\"三、基本数据类型的解构赋值\"></a>三、基本数据类型的解构赋值</h4><h5 id=\"1、字符串解构赋值\"><a href=\"#1、字符串解构赋值\" class=\"headerlink\" title=\"1、字符串解构赋值\"></a>1、字符串解构赋值</h5><p>字符串也可以解构赋值。因为解构时，字符串会被转换成了一个类似数组的对象。</p>\n<pre><code>const [a, b, c, d, e] = &#39;hello&#39;;\nconsole.log(a, b, c, e);        // &#39;h&#39; &#39;e&#39; &#39;l&#39; &#39;l&#39; &#39;o&#39; \n\nlet {length} = &#39;hello&#39;;\nconsole.log(length);        // 5\n</code></pre><h5 id=\"2、数值、布尔值的解构赋值\"><a href=\"#2、数值、布尔值的解构赋值\" class=\"headerlink\" title=\"2、数值、布尔值的解构赋值\"></a>2、数值、布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先将其转换为对象（基本包装类型）。</p>\n<pre><code>let {toString: s1} = 123;\nconsole.log(s1 === Number.prototype.toString);   // true\n\nlet {toString: s2} = true;\nconsole.log(s2 === Boolean.prototype.toString); // true\n</code></pre><h5 id=\"3、undefined-和-null-的解构赋值（报错！！）\"><a href=\"#3、undefined-和-null-的解构赋值（报错！！）\" class=\"headerlink\" title=\"3、undefined 和 null 的解构赋值（报错！！）\"></a>3、undefined 和 null 的解构赋值（报错！！）</h5><p><strong>解构赋值的规则是，只要等号右边的值不是数组或者对象，就先将其转为对象</strong>。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<pre><code>let { x } = undefined;  // TypeError\nlet { y } = null;       // TypeError\n</code></pre>"},{"title":"ES6 - 函数的扩展","date":"2019-03-22T12:35:25.000Z","img":"/medias/article/featureimages/ES6.jpg","_content":"### 1、函数参数的默认值\n\n在ES6之前，是不能直接给函数参数设置默认值的。如果需要设置默认值，就只能采用`||`（或）的短路原则来设置参数的默认值。\n\n```\nfunction say (x, y) {\n    y = y || 'World';\n    console.log(x + ' ' + y + '!');\n}\n\nsay('Hello');           // 'Hello World!'\nsay('Hello', 'China');  // 'Hello China!'\nsay('Hello', '');       // 'Hello World!'\n```\n\n像上面这样定义函数默认值，虽然基本能达到想要的结果，但也存在一个最大的问题：如果想要传给函数的参数值本身就是`''`（空字符串,比如上面例子最后一次函数调用）、`0`、`false`、`null`这样的值，但使用`||`短路原则却会使默认值生效。\n\n所以，我们需要在函数中加以判断，当某个参数确定未传值时，再赋默认值。\n\n```\nfunction say (x, y) {\n    if (typeof x === 'undefined') {\n        y = 'World'\n    }\n}\n```\n\n这样虽然解决了前面所说的问题，但是，当一个函数的参数较多时，尤其在函数参数值需要做多种数据类型判断的时候，可能需要写很多`if`语句来判断，或者`if`语句的条件会变得很复杂，这样也不利于阅读和维护。\n\n所以，为了解决以上问题，ES6中允许在函数声明时在形参的位置就给函数参数设置默认值，直接将默认值赋值在形参后面即可。\n\n```\nfunction say (x, y = 'World') {\n    console.log(x + ' ' + y + '!');\n}\n\nsay('Hello');           // 'Hello World!'\nsay('Hello', 'China');  // 'Hello China!'\n\n// 传入 ''、null、0、false都取值所传参数的值，不会使默认值生效\nsay('Hello', '');       // 'Hello !'\nsay('Hello', null);       // 'Hello null!'\nsay('Hello', 0);       // 'Hello 0!'\nsay('Hello', false);       // 'Hello false!'\n\n// 只有参数未传值或者所传参数值严格等于undefined时，默认参数才生效\nsay('Hello', undefined);       // 'Hello World!'\n\n// 构造函数也可以定义参数默认值\nfunction Point(x = 0, y = 0) {\n  this.x = x;\n  this.y = y;\n}\nconst p = new Point(1);\nconsole.log(p);     // { x: 1, y: 0 }\n```\n\n显然，ES6这种定义函数参数默认值的方法要简单、清晰得多。**最重要的是，这种方法定义的参数默认值只有当参数未传值或者传值严格等于`undefined`的时候，默认值才会生效**。\n\n这里，还有一些需要格外注意的地方！！\n\n**① 函数参数（不论是否设置了默认值）都是JS内部默认声明过的，所以不能在函数体内再使用let/const重复声明。**否则，会报错！\n\n```\nfunction createArr(x, y = 0) {\n    let x = 0;      // 报错\n    let y = 0;      // 也会报错\n    return [x, y];\n}\n```\n\n**② 如果一个函数设置了参数默认值，则该函数任何一个参数（包括设置了默认值的参数）都不能重名！**\n\n```\n// 没有参数设置默认值，这不会报错\nfunction fn1(x, x, y) {\n  console.log(x, y);\n}\n// 注意，最终x输出为2。因为第二个参数覆盖了第一个\nfn1(1, 2, 3);   // 2 3\n\n// 参数设置了默认值，x又重名，所以会报错\nfunction fn2(x, x, y = 1) {\n  // ...\n}\n```\n\n**③ 函数参数的默认值可以是任何JS表达式，但每调用一次函数，该表达式都会重新计算求值！**\n\n```\nlet x = 99;\nfunction cal(p = x + 1) {\n  console.log(p);\n}\n\ncal();  // 100\n\nx = 100;\ncal();  // 101\n```\n\n上面的例子，每调用一次`cal`函数，参数`p`都会重新计算默认值`x + 1`，并不会记住上次调用所求得的`p`的默认值！\n\n### 2、参数默认值可以和解构赋值结合使用\n\n函数参数的默认值可以和解构赋值、解构赋值的默认值，结合起来使用。\n\n#### 2.1 只使用解构赋值默认值\n\n```\n// 这里只使用了解构赋值的默认值，未使用参数默认值\nfunction foo({x, y = 5}) {\n  console.log([x, y]);\n}\n\n/**\n * 下面调用时传的参数，\n * 会与{x, y = 5}进行模式匹配，进行解构赋值\n */\nfoo({});        // [undefined, 5]\nfoo({x: 1});    // [1, 5]\nfoo({x: 1, y: 2});      // [1, 2]\nfoo();      // TypeError: Cannot read property 'x' of undefined\n```\n\n上面的例子，只使用了解构赋值的默认值，未使用参数默认值。如果将一个对象传给`foo`函数，那么这个对象就会和{x, y = 5}进行模式匹配，最终为参数解构赋值。但如果不给函数传参（例如最后一行——`foo()`），或者传参为`null`，那么就会报错。因为，`undefined`、`null`无法进行解构赋值。\n\n上面的例子的报错问题，其实可以通过结合使用函数参数默认值的方法来避免。\n\n#### 2.2 同时使用解构赋值默认值和参数默认值\n\n```\n// 这里不仅使用了解构赋值默认值，同时使用了函数参数默认值\nfunction foo({x, y = 5} = {}) {\n  console.log(x, y);\n}\n\n// 这样调用不会报错\nfoo();  // undefined 5\n```\n\n上面的例子，调用`foo`函数未传入参数。此时，首先会使函数参数的默认值（也就是声明函数时的` = {} `）生效。接下来，参数默认值`{ }`会与`{x, y = 5}`再进行解构赋值。其中解构赋值中，参数`y`具有默认值为`5`。\n\n\n作为练习，请思考下面两种写法有什么区别？\n\n```\n// 写法一\nfunction f1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction f2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n```\n\n### 3、需要设置默认值的参数最好放在其余参数最后面\n\n一般情况下，建议将需要设置默认值的参数放在其余参数最后面。原因主要有以下两点：\n * 因为这样比较容易看出来，到底省略了哪些参数。\n * 如果非尾部的参数设置默认值，实际上这个参数是没法省略的,必须显式传入`undefined`才能使默认值生效。\n\n```\nfunction f(x, y = 5, z) {\n  return [x, y, z];\n}\n\nf();    // [undefined, 5, undefined]\nf(1);   // [1, 5, undefined]\nf(1, ,2);   // 省略第二个参数，会报错\n\n// 需要显式传入undefined作为第二个参数值\nf(1, undefined, 2);     // [1, 5, 2]\n```\n\n### 4、函数的rest参数\n\nES6引入了`rest`参数（形为`...变量名`）。这个变量名对应的值是一个数组，里面按参数传入的顺序存放着函数除了具名参数以外的剩余参数。\n\n**剩余参数只能/必须是函数的最后一个参数**。但它有可能保存的是传入函数的所有参数值，也可能是传入函数的一部分参数值。\n\n```\n// 这个rest参数——param保存的就是所有传入参数的值\nfunction r1(...param) {\n    console.log(param);\n}\nr1(1, 2, 3, 4, 5);  // [1, 2, 3, 4, 5]\n\n// 这个rest参数——param保存的就是除具名参数以外的参数值\nfunction r2(param1, param2, ...param) {\n    console.log(param1, param2, ...param)\n}\nr2();   // 1 2 [3, 4, 5]\n```\n\n我们可以使用`rest`参数来代替函数的`arguments`对象。最重要的是，`rest`参数是一个数组，可以使用所有数组的方法。但是，`arguments`只是一个类数组对象，很多数组的方法无法使用。\n\n### 5、函数的length、name属性\n\n首先，要明确一点：所有函数都是Function类型的一个实例对象。所以每个函数都有一些自己的属性和方法。最后我们就来了解一下函数对象的`length`和`name`属性。\n\n#### 5.1、length属性\n\n函数的`length`属性一般情况下表示函数期望接收到的参数的个数。但在设置了参数默认值或者rest参数时，会有一些变化。\n\n```\n(function (a) {}).length;           // 1\n\n(function (a = 0, b, c) {}).length; // 0\n(function (a, b = 1, c) {}).length; // 1\n(function (a, b, c = 5) {}).length; // 2\n\n(function(arg1, ...args) {}).length;      // 1  \n(function(...args) {}).length;      // 0\n```\n\n可以看出：\n * 一般情况下，`length`属性返回的是函数声明时所定义的的参数的个数；\n * 当设置了参数默认值时，`length`属性返回的是**第一个设置了默认值的参数之前的参数个数，之后的参数不再计入**；\n * 当设置了`rest`参数，因为`rest`参数只能是函数的最后一个参数。所以`length`返回的是`rest`参数之前的参数个数。\n\n#### 5.2、name属性\n\n函数的`name`属性，返回的是该函数的函数名。\n\n```\n// 函数声明\nfunction fun1() {}\nconsole.log(fun1.name);  // 'fun1'（ES5/ES6）\n\n// 函数表达式\nlet fun2 = function() {};\n// ES5：''(空字符串)\n// ES6：'fun2'\nconsole.log(fun2.name);\n\n// 将具名函数赋值给一个变量\nlet temp = function fun3() {};\nconsole.log(temp.name);\n// 'fun3'(ES5/ES6)\n\n// Function()构造函数——返回'anonymous'\nconsole.log((new Function).name);   // 'anonymous'\n\n// .bind()方法返回的函数，name属性值会加上'bound '（带个空格）前缀。\nfunction fun4() {};\nconsole.log(fun4.bind({}).name);     // 'bound fun4'\n\nconsole.log((function(){}).bind({}).name);  // 'bound '\n```","source":"_posts/ES6-function-extend.md","raw":"---\ntitle: ES6 - 函数的扩展\ndate: 2019-03-22 20:35:25\ncategories: 编程\ntags:\n- ES6\n- Function\nimg: /medias/article/featureimages/ES6.jpg\n---\n### 1、函数参数的默认值\n\n在ES6之前，是不能直接给函数参数设置默认值的。如果需要设置默认值，就只能采用`||`（或）的短路原则来设置参数的默认值。\n\n```\nfunction say (x, y) {\n    y = y || 'World';\n    console.log(x + ' ' + y + '!');\n}\n\nsay('Hello');           // 'Hello World!'\nsay('Hello', 'China');  // 'Hello China!'\nsay('Hello', '');       // 'Hello World!'\n```\n\n像上面这样定义函数默认值，虽然基本能达到想要的结果，但也存在一个最大的问题：如果想要传给函数的参数值本身就是`''`（空字符串,比如上面例子最后一次函数调用）、`0`、`false`、`null`这样的值，但使用`||`短路原则却会使默认值生效。\n\n所以，我们需要在函数中加以判断，当某个参数确定未传值时，再赋默认值。\n\n```\nfunction say (x, y) {\n    if (typeof x === 'undefined') {\n        y = 'World'\n    }\n}\n```\n\n这样虽然解决了前面所说的问题，但是，当一个函数的参数较多时，尤其在函数参数值需要做多种数据类型判断的时候，可能需要写很多`if`语句来判断，或者`if`语句的条件会变得很复杂，这样也不利于阅读和维护。\n\n所以，为了解决以上问题，ES6中允许在函数声明时在形参的位置就给函数参数设置默认值，直接将默认值赋值在形参后面即可。\n\n```\nfunction say (x, y = 'World') {\n    console.log(x + ' ' + y + '!');\n}\n\nsay('Hello');           // 'Hello World!'\nsay('Hello', 'China');  // 'Hello China!'\n\n// 传入 ''、null、0、false都取值所传参数的值，不会使默认值生效\nsay('Hello', '');       // 'Hello !'\nsay('Hello', null);       // 'Hello null!'\nsay('Hello', 0);       // 'Hello 0!'\nsay('Hello', false);       // 'Hello false!'\n\n// 只有参数未传值或者所传参数值严格等于undefined时，默认参数才生效\nsay('Hello', undefined);       // 'Hello World!'\n\n// 构造函数也可以定义参数默认值\nfunction Point(x = 0, y = 0) {\n  this.x = x;\n  this.y = y;\n}\nconst p = new Point(1);\nconsole.log(p);     // { x: 1, y: 0 }\n```\n\n显然，ES6这种定义函数参数默认值的方法要简单、清晰得多。**最重要的是，这种方法定义的参数默认值只有当参数未传值或者传值严格等于`undefined`的时候，默认值才会生效**。\n\n这里，还有一些需要格外注意的地方！！\n\n**① 函数参数（不论是否设置了默认值）都是JS内部默认声明过的，所以不能在函数体内再使用let/const重复声明。**否则，会报错！\n\n```\nfunction createArr(x, y = 0) {\n    let x = 0;      // 报错\n    let y = 0;      // 也会报错\n    return [x, y];\n}\n```\n\n**② 如果一个函数设置了参数默认值，则该函数任何一个参数（包括设置了默认值的参数）都不能重名！**\n\n```\n// 没有参数设置默认值，这不会报错\nfunction fn1(x, x, y) {\n  console.log(x, y);\n}\n// 注意，最终x输出为2。因为第二个参数覆盖了第一个\nfn1(1, 2, 3);   // 2 3\n\n// 参数设置了默认值，x又重名，所以会报错\nfunction fn2(x, x, y = 1) {\n  // ...\n}\n```\n\n**③ 函数参数的默认值可以是任何JS表达式，但每调用一次函数，该表达式都会重新计算求值！**\n\n```\nlet x = 99;\nfunction cal(p = x + 1) {\n  console.log(p);\n}\n\ncal();  // 100\n\nx = 100;\ncal();  // 101\n```\n\n上面的例子，每调用一次`cal`函数，参数`p`都会重新计算默认值`x + 1`，并不会记住上次调用所求得的`p`的默认值！\n\n### 2、参数默认值可以和解构赋值结合使用\n\n函数参数的默认值可以和解构赋值、解构赋值的默认值，结合起来使用。\n\n#### 2.1 只使用解构赋值默认值\n\n```\n// 这里只使用了解构赋值的默认值，未使用参数默认值\nfunction foo({x, y = 5}) {\n  console.log([x, y]);\n}\n\n/**\n * 下面调用时传的参数，\n * 会与{x, y = 5}进行模式匹配，进行解构赋值\n */\nfoo({});        // [undefined, 5]\nfoo({x: 1});    // [1, 5]\nfoo({x: 1, y: 2});      // [1, 2]\nfoo();      // TypeError: Cannot read property 'x' of undefined\n```\n\n上面的例子，只使用了解构赋值的默认值，未使用参数默认值。如果将一个对象传给`foo`函数，那么这个对象就会和{x, y = 5}进行模式匹配，最终为参数解构赋值。但如果不给函数传参（例如最后一行——`foo()`），或者传参为`null`，那么就会报错。因为，`undefined`、`null`无法进行解构赋值。\n\n上面的例子的报错问题，其实可以通过结合使用函数参数默认值的方法来避免。\n\n#### 2.2 同时使用解构赋值默认值和参数默认值\n\n```\n// 这里不仅使用了解构赋值默认值，同时使用了函数参数默认值\nfunction foo({x, y = 5} = {}) {\n  console.log(x, y);\n}\n\n// 这样调用不会报错\nfoo();  // undefined 5\n```\n\n上面的例子，调用`foo`函数未传入参数。此时，首先会使函数参数的默认值（也就是声明函数时的` = {} `）生效。接下来，参数默认值`{ }`会与`{x, y = 5}`再进行解构赋值。其中解构赋值中，参数`y`具有默认值为`5`。\n\n\n作为练习，请思考下面两种写法有什么区别？\n\n```\n// 写法一\nfunction f1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction f2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n```\n\n### 3、需要设置默认值的参数最好放在其余参数最后面\n\n一般情况下，建议将需要设置默认值的参数放在其余参数最后面。原因主要有以下两点：\n * 因为这样比较容易看出来，到底省略了哪些参数。\n * 如果非尾部的参数设置默认值，实际上这个参数是没法省略的,必须显式传入`undefined`才能使默认值生效。\n\n```\nfunction f(x, y = 5, z) {\n  return [x, y, z];\n}\n\nf();    // [undefined, 5, undefined]\nf(1);   // [1, 5, undefined]\nf(1, ,2);   // 省略第二个参数，会报错\n\n// 需要显式传入undefined作为第二个参数值\nf(1, undefined, 2);     // [1, 5, 2]\n```\n\n### 4、函数的rest参数\n\nES6引入了`rest`参数（形为`...变量名`）。这个变量名对应的值是一个数组，里面按参数传入的顺序存放着函数除了具名参数以外的剩余参数。\n\n**剩余参数只能/必须是函数的最后一个参数**。但它有可能保存的是传入函数的所有参数值，也可能是传入函数的一部分参数值。\n\n```\n// 这个rest参数——param保存的就是所有传入参数的值\nfunction r1(...param) {\n    console.log(param);\n}\nr1(1, 2, 3, 4, 5);  // [1, 2, 3, 4, 5]\n\n// 这个rest参数——param保存的就是除具名参数以外的参数值\nfunction r2(param1, param2, ...param) {\n    console.log(param1, param2, ...param)\n}\nr2();   // 1 2 [3, 4, 5]\n```\n\n我们可以使用`rest`参数来代替函数的`arguments`对象。最重要的是，`rest`参数是一个数组，可以使用所有数组的方法。但是，`arguments`只是一个类数组对象，很多数组的方法无法使用。\n\n### 5、函数的length、name属性\n\n首先，要明确一点：所有函数都是Function类型的一个实例对象。所以每个函数都有一些自己的属性和方法。最后我们就来了解一下函数对象的`length`和`name`属性。\n\n#### 5.1、length属性\n\n函数的`length`属性一般情况下表示函数期望接收到的参数的个数。但在设置了参数默认值或者rest参数时，会有一些变化。\n\n```\n(function (a) {}).length;           // 1\n\n(function (a = 0, b, c) {}).length; // 0\n(function (a, b = 1, c) {}).length; // 1\n(function (a, b, c = 5) {}).length; // 2\n\n(function(arg1, ...args) {}).length;      // 1  \n(function(...args) {}).length;      // 0\n```\n\n可以看出：\n * 一般情况下，`length`属性返回的是函数声明时所定义的的参数的个数；\n * 当设置了参数默认值时，`length`属性返回的是**第一个设置了默认值的参数之前的参数个数，之后的参数不再计入**；\n * 当设置了`rest`参数，因为`rest`参数只能是函数的最后一个参数。所以`length`返回的是`rest`参数之前的参数个数。\n\n#### 5.2、name属性\n\n函数的`name`属性，返回的是该函数的函数名。\n\n```\n// 函数声明\nfunction fun1() {}\nconsole.log(fun1.name);  // 'fun1'（ES5/ES6）\n\n// 函数表达式\nlet fun2 = function() {};\n// ES5：''(空字符串)\n// ES6：'fun2'\nconsole.log(fun2.name);\n\n// 将具名函数赋值给一个变量\nlet temp = function fun3() {};\nconsole.log(temp.name);\n// 'fun3'(ES5/ES6)\n\n// Function()构造函数——返回'anonymous'\nconsole.log((new Function).name);   // 'anonymous'\n\n// .bind()方法返回的函数，name属性值会加上'bound '（带个空格）前缀。\nfunction fun4() {};\nconsole.log(fun4.bind({}).name);     // 'bound fun4'\n\nconsole.log((function(){}).bind({}).name);  // 'bound '\n```","slug":"ES6-function-extend","published":1,"updated":"2019-05-19T11:30:05.871Z","_id":"cjvuu4mr3000a9kvb2eynwcrv","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、函数参数的默认值\"><a href=\"#1、函数参数的默认值\" class=\"headerlink\" title=\"1、函数参数的默认值\"></a>1、函数参数的默认值</h3><p>在ES6之前，是不能直接给函数参数设置默认值的。如果需要设置默认值，就只能采用<code>||</code>（或）的短路原则来设置参数的默认值。</p>\n<pre><code>function say (x, y) {\n    y = y || &#39;World&#39;;\n    console.log(x + &#39; &#39; + y + &#39;!&#39;);\n}\n\nsay(&#39;Hello&#39;);           // &#39;Hello World!&#39;\nsay(&#39;Hello&#39;, &#39;China&#39;);  // &#39;Hello China!&#39;\nsay(&#39;Hello&#39;, &#39;&#39;);       // &#39;Hello World!&#39;\n</code></pre><p>像上面这样定义函数默认值，虽然基本能达到想要的结果，但也存在一个最大的问题：如果想要传给函数的参数值本身就是<code>&#39;&#39;</code>（空字符串,比如上面例子最后一次函数调用）、<code>0</code>、<code>false</code>、<code>null</code>这样的值，但使用<code>||</code>短路原则却会使默认值生效。</p>\n<p>所以，我们需要在函数中加以判断，当某个参数确定未传值时，再赋默认值。</p>\n<pre><code>function say (x, y) {\n    if (typeof x === &#39;undefined&#39;) {\n        y = &#39;World&#39;\n    }\n}\n</code></pre><p>这样虽然解决了前面所说的问题，但是，当一个函数的参数较多时，尤其在函数参数值需要做多种数据类型判断的时候，可能需要写很多<code>if</code>语句来判断，或者<code>if</code>语句的条件会变得很复杂，这样也不利于阅读和维护。</p>\n<p>所以，为了解决以上问题，ES6中允许在函数声明时在形参的位置就给函数参数设置默认值，直接将默认值赋值在形参后面即可。</p>\n<pre><code>function say (x, y = &#39;World&#39;) {\n    console.log(x + &#39; &#39; + y + &#39;!&#39;);\n}\n\nsay(&#39;Hello&#39;);           // &#39;Hello World!&#39;\nsay(&#39;Hello&#39;, &#39;China&#39;);  // &#39;Hello China!&#39;\n\n// 传入 &#39;&#39;、null、0、false都取值所传参数的值，不会使默认值生效\nsay(&#39;Hello&#39;, &#39;&#39;);       // &#39;Hello !&#39;\nsay(&#39;Hello&#39;, null);       // &#39;Hello null!&#39;\nsay(&#39;Hello&#39;, 0);       // &#39;Hello 0!&#39;\nsay(&#39;Hello&#39;, false);       // &#39;Hello false!&#39;\n\n// 只有参数未传值或者所传参数值严格等于undefined时，默认参数才生效\nsay(&#39;Hello&#39;, undefined);       // &#39;Hello World!&#39;\n\n// 构造函数也可以定义参数默认值\nfunction Point(x = 0, y = 0) {\n  this.x = x;\n  this.y = y;\n}\nconst p = new Point(1);\nconsole.log(p);     // { x: 1, y: 0 }\n</code></pre><p>显然，ES6这种定义函数参数默认值的方法要简单、清晰得多。<strong>最重要的是，这种方法定义的参数默认值只有当参数未传值或者传值严格等于<code>undefined</code>的时候，默认值才会生效</strong>。</p>\n<p>这里，还有一些需要格外注意的地方！！</p>\n<p><strong>① 函数参数（不论是否设置了默认值）都是JS内部默认声明过的，所以不能在函数体内再使用let/const重复声明。</strong>否则，会报错！</p>\n<pre><code>function createArr(x, y = 0) {\n    let x = 0;      // 报错\n    let y = 0;      // 也会报错\n    return [x, y];\n}\n</code></pre><p><strong>② 如果一个函数设置了参数默认值，则该函数任何一个参数（包括设置了默认值的参数）都不能重名！</strong></p>\n<pre><code>// 没有参数设置默认值，这不会报错\nfunction fn1(x, x, y) {\n  console.log(x, y);\n}\n// 注意，最终x输出为2。因为第二个参数覆盖了第一个\nfn1(1, 2, 3);   // 2 3\n\n// 参数设置了默认值，x又重名，所以会报错\nfunction fn2(x, x, y = 1) {\n  // ...\n}\n</code></pre><p><strong>③ 函数参数的默认值可以是任何JS表达式，但每调用一次函数，该表达式都会重新计算求值！</strong></p>\n<pre><code>let x = 99;\nfunction cal(p = x + 1) {\n  console.log(p);\n}\n\ncal();  // 100\n\nx = 100;\ncal();  // 101\n</code></pre><p>上面的例子，每调用一次<code>cal</code>函数，参数<code>p</code>都会重新计算默认值<code>x + 1</code>，并不会记住上次调用所求得的<code>p</code>的默认值！</p>\n<h3 id=\"2、参数默认值可以和解构赋值结合使用\"><a href=\"#2、参数默认值可以和解构赋值结合使用\" class=\"headerlink\" title=\"2、参数默认值可以和解构赋值结合使用\"></a>2、参数默认值可以和解构赋值结合使用</h3><p>函数参数的默认值可以和解构赋值、解构赋值的默认值，结合起来使用。</p>\n<h4 id=\"2-1-只使用解构赋值默认值\"><a href=\"#2-1-只使用解构赋值默认值\" class=\"headerlink\" title=\"2.1 只使用解构赋值默认值\"></a>2.1 只使用解构赋值默认值</h4><pre><code>// 这里只使用了解构赋值的默认值，未使用参数默认值\nfunction foo({x, y = 5}) {\n  console.log([x, y]);\n}\n\n/**\n * 下面调用时传的参数，\n * 会与{x, y = 5}进行模式匹配，进行解构赋值\n */\nfoo({});        // [undefined, 5]\nfoo({x: 1});    // [1, 5]\nfoo({x: 1, y: 2});      // [1, 2]\nfoo();      // TypeError: Cannot read property &#39;x&#39; of undefined\n</code></pre><p>上面的例子，只使用了解构赋值的默认值，未使用参数默认值。如果将一个对象传给<code>foo</code>函数，那么这个对象就会和{x, y = 5}进行模式匹配，最终为参数解构赋值。但如果不给函数传参（例如最后一行——<code>foo()</code>），或者传参为<code>null</code>，那么就会报错。因为，<code>undefined</code>、<code>null</code>无法进行解构赋值。</p>\n<p>上面的例子的报错问题，其实可以通过结合使用函数参数默认值的方法来避免。</p>\n<h4 id=\"2-2-同时使用解构赋值默认值和参数默认值\"><a href=\"#2-2-同时使用解构赋值默认值和参数默认值\" class=\"headerlink\" title=\"2.2 同时使用解构赋值默认值和参数默认值\"></a>2.2 同时使用解构赋值默认值和参数默认值</h4><pre><code>// 这里不仅使用了解构赋值默认值，同时使用了函数参数默认值\nfunction foo({x, y = 5} = {}) {\n  console.log(x, y);\n}\n\n// 这样调用不会报错\nfoo();  // undefined 5\n</code></pre><p>上面的例子，调用<code>foo</code>函数未传入参数。此时，首先会使函数参数的默认值（也就是声明函数时的<code>= {}</code>）生效。接下来，参数默认值<code>{ }</code>会与<code>{x, y = 5}</code>再进行解构赋值。其中解构赋值中，参数<code>y</code>具有默认值为<code>5</code>。</p>\n<p>作为练习，请思考下面两种写法有什么区别？</p>\n<pre><code>// 写法一\nfunction f1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction f2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n</code></pre><h3 id=\"3、需要设置默认值的参数最好放在其余参数最后面\"><a href=\"#3、需要设置默认值的参数最好放在其余参数最后面\" class=\"headerlink\" title=\"3、需要设置默认值的参数最好放在其余参数最后面\"></a>3、需要设置默认值的参数最好放在其余参数最后面</h3><p>一般情况下，建议将需要设置默认值的参数放在其余参数最后面。原因主要有以下两点：</p>\n<ul>\n<li>因为这样比较容易看出来，到底省略了哪些参数。</li>\n<li>如果非尾部的参数设置默认值，实际上这个参数是没法省略的,必须显式传入<code>undefined</code>才能使默认值生效。</li>\n</ul>\n<pre><code>function f(x, y = 5, z) {\n  return [x, y, z];\n}\n\nf();    // [undefined, 5, undefined]\nf(1);   // [1, 5, undefined]\nf(1, ,2);   // 省略第二个参数，会报错\n\n// 需要显式传入undefined作为第二个参数值\nf(1, undefined, 2);     // [1, 5, 2]\n</code></pre><h3 id=\"4、函数的rest参数\"><a href=\"#4、函数的rest参数\" class=\"headerlink\" title=\"4、函数的rest参数\"></a>4、函数的rest参数</h3><p>ES6引入了<code>rest</code>参数（形为<code>...变量名</code>）。这个变量名对应的值是一个数组，里面按参数传入的顺序存放着函数除了具名参数以外的剩余参数。</p>\n<p><strong>剩余参数只能/必须是函数的最后一个参数</strong>。但它有可能保存的是传入函数的所有参数值，也可能是传入函数的一部分参数值。</p>\n<pre><code>// 这个rest参数——param保存的就是所有传入参数的值\nfunction r1(...param) {\n    console.log(param);\n}\nr1(1, 2, 3, 4, 5);  // [1, 2, 3, 4, 5]\n\n// 这个rest参数——param保存的就是除具名参数以外的参数值\nfunction r2(param1, param2, ...param) {\n    console.log(param1, param2, ...param)\n}\nr2();   // 1 2 [3, 4, 5]\n</code></pre><p>我们可以使用<code>rest</code>参数来代替函数的<code>arguments</code>对象。最重要的是，<code>rest</code>参数是一个数组，可以使用所有数组的方法。但是，<code>arguments</code>只是一个类数组对象，很多数组的方法无法使用。</p>\n<h3 id=\"5、函数的length、name属性\"><a href=\"#5、函数的length、name属性\" class=\"headerlink\" title=\"5、函数的length、name属性\"></a>5、函数的length、name属性</h3><p>首先，要明确一点：所有函数都是Function类型的一个实例对象。所以每个函数都有一些自己的属性和方法。最后我们就来了解一下函数对象的<code>length</code>和<code>name</code>属性。</p>\n<h4 id=\"5-1、length属性\"><a href=\"#5-1、length属性\" class=\"headerlink\" title=\"5.1、length属性\"></a>5.1、length属性</h4><p>函数的<code>length</code>属性一般情况下表示函数期望接收到的参数的个数。但在设置了参数默认值或者rest参数时，会有一些变化。</p>\n<pre><code>(function (a) {}).length;           // 1\n\n(function (a = 0, b, c) {}).length; // 0\n(function (a, b = 1, c) {}).length; // 1\n(function (a, b, c = 5) {}).length; // 2\n\n(function(arg1, ...args) {}).length;      // 1  \n(function(...args) {}).length;      // 0\n</code></pre><p>可以看出：</p>\n<ul>\n<li>一般情况下，<code>length</code>属性返回的是函数声明时所定义的的参数的个数；</li>\n<li>当设置了参数默认值时，<code>length</code>属性返回的是<strong>第一个设置了默认值的参数之前的参数个数，之后的参数不再计入</strong>；</li>\n<li>当设置了<code>rest</code>参数，因为<code>rest</code>参数只能是函数的最后一个参数。所以<code>length</code>返回的是<code>rest</code>参数之前的参数个数。</li>\n</ul>\n<h4 id=\"5-2、name属性\"><a href=\"#5-2、name属性\" class=\"headerlink\" title=\"5.2、name属性\"></a>5.2、name属性</h4><p>函数的<code>name</code>属性，返回的是该函数的函数名。</p>\n<pre><code>// 函数声明\nfunction fun1() {}\nconsole.log(fun1.name);  // &#39;fun1&#39;（ES5/ES6）\n\n// 函数表达式\nlet fun2 = function() {};\n// ES5：&#39;&#39;(空字符串)\n// ES6：&#39;fun2&#39;\nconsole.log(fun2.name);\n\n// 将具名函数赋值给一个变量\nlet temp = function fun3() {};\nconsole.log(temp.name);\n// &#39;fun3&#39;(ES5/ES6)\n\n// Function()构造函数——返回&#39;anonymous&#39;\nconsole.log((new Function).name);   // &#39;anonymous&#39;\n\n// .bind()方法返回的函数，name属性值会加上&#39;bound &#39;（带个空格）前缀。\nfunction fun4() {};\nconsole.log(fun4.bind({}).name);     // &#39;bound fun4&#39;\n\nconsole.log((function(){}).bind({}).name);  // &#39;bound &#39;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、函数参数的默认值\"><a href=\"#1、函数参数的默认值\" class=\"headerlink\" title=\"1、函数参数的默认值\"></a>1、函数参数的默认值</h3><p>在ES6之前，是不能直接给函数参数设置默认值的。如果需要设置默认值，就只能采用<code>||</code>（或）的短路原则来设置参数的默认值。</p>\n<pre><code>function say (x, y) {\n    y = y || &#39;World&#39;;\n    console.log(x + &#39; &#39; + y + &#39;!&#39;);\n}\n\nsay(&#39;Hello&#39;);           // &#39;Hello World!&#39;\nsay(&#39;Hello&#39;, &#39;China&#39;);  // &#39;Hello China!&#39;\nsay(&#39;Hello&#39;, &#39;&#39;);       // &#39;Hello World!&#39;\n</code></pre><p>像上面这样定义函数默认值，虽然基本能达到想要的结果，但也存在一个最大的问题：如果想要传给函数的参数值本身就是<code>&#39;&#39;</code>（空字符串,比如上面例子最后一次函数调用）、<code>0</code>、<code>false</code>、<code>null</code>这样的值，但使用<code>||</code>短路原则却会使默认值生效。</p>\n<p>所以，我们需要在函数中加以判断，当某个参数确定未传值时，再赋默认值。</p>\n<pre><code>function say (x, y) {\n    if (typeof x === &#39;undefined&#39;) {\n        y = &#39;World&#39;\n    }\n}\n</code></pre><p>这样虽然解决了前面所说的问题，但是，当一个函数的参数较多时，尤其在函数参数值需要做多种数据类型判断的时候，可能需要写很多<code>if</code>语句来判断，或者<code>if</code>语句的条件会变得很复杂，这样也不利于阅读和维护。</p>\n<p>所以，为了解决以上问题，ES6中允许在函数声明时在形参的位置就给函数参数设置默认值，直接将默认值赋值在形参后面即可。</p>\n<pre><code>function say (x, y = &#39;World&#39;) {\n    console.log(x + &#39; &#39; + y + &#39;!&#39;);\n}\n\nsay(&#39;Hello&#39;);           // &#39;Hello World!&#39;\nsay(&#39;Hello&#39;, &#39;China&#39;);  // &#39;Hello China!&#39;\n\n// 传入 &#39;&#39;、null、0、false都取值所传参数的值，不会使默认值生效\nsay(&#39;Hello&#39;, &#39;&#39;);       // &#39;Hello !&#39;\nsay(&#39;Hello&#39;, null);       // &#39;Hello null!&#39;\nsay(&#39;Hello&#39;, 0);       // &#39;Hello 0!&#39;\nsay(&#39;Hello&#39;, false);       // &#39;Hello false!&#39;\n\n// 只有参数未传值或者所传参数值严格等于undefined时，默认参数才生效\nsay(&#39;Hello&#39;, undefined);       // &#39;Hello World!&#39;\n\n// 构造函数也可以定义参数默认值\nfunction Point(x = 0, y = 0) {\n  this.x = x;\n  this.y = y;\n}\nconst p = new Point(1);\nconsole.log(p);     // { x: 1, y: 0 }\n</code></pre><p>显然，ES6这种定义函数参数默认值的方法要简单、清晰得多。<strong>最重要的是，这种方法定义的参数默认值只有当参数未传值或者传值严格等于<code>undefined</code>的时候，默认值才会生效</strong>。</p>\n<p>这里，还有一些需要格外注意的地方！！</p>\n<p><strong>① 函数参数（不论是否设置了默认值）都是JS内部默认声明过的，所以不能在函数体内再使用let/const重复声明。</strong>否则，会报错！</p>\n<pre><code>function createArr(x, y = 0) {\n    let x = 0;      // 报错\n    let y = 0;      // 也会报错\n    return [x, y];\n}\n</code></pre><p><strong>② 如果一个函数设置了参数默认值，则该函数任何一个参数（包括设置了默认值的参数）都不能重名！</strong></p>\n<pre><code>// 没有参数设置默认值，这不会报错\nfunction fn1(x, x, y) {\n  console.log(x, y);\n}\n// 注意，最终x输出为2。因为第二个参数覆盖了第一个\nfn1(1, 2, 3);   // 2 3\n\n// 参数设置了默认值，x又重名，所以会报错\nfunction fn2(x, x, y = 1) {\n  // ...\n}\n</code></pre><p><strong>③ 函数参数的默认值可以是任何JS表达式，但每调用一次函数，该表达式都会重新计算求值！</strong></p>\n<pre><code>let x = 99;\nfunction cal(p = x + 1) {\n  console.log(p);\n}\n\ncal();  // 100\n\nx = 100;\ncal();  // 101\n</code></pre><p>上面的例子，每调用一次<code>cal</code>函数，参数<code>p</code>都会重新计算默认值<code>x + 1</code>，并不会记住上次调用所求得的<code>p</code>的默认值！</p>\n<h3 id=\"2、参数默认值可以和解构赋值结合使用\"><a href=\"#2、参数默认值可以和解构赋值结合使用\" class=\"headerlink\" title=\"2、参数默认值可以和解构赋值结合使用\"></a>2、参数默认值可以和解构赋值结合使用</h3><p>函数参数的默认值可以和解构赋值、解构赋值的默认值，结合起来使用。</p>\n<h4 id=\"2-1-只使用解构赋值默认值\"><a href=\"#2-1-只使用解构赋值默认值\" class=\"headerlink\" title=\"2.1 只使用解构赋值默认值\"></a>2.1 只使用解构赋值默认值</h4><pre><code>// 这里只使用了解构赋值的默认值，未使用参数默认值\nfunction foo({x, y = 5}) {\n  console.log([x, y]);\n}\n\n/**\n * 下面调用时传的参数，\n * 会与{x, y = 5}进行模式匹配，进行解构赋值\n */\nfoo({});        // [undefined, 5]\nfoo({x: 1});    // [1, 5]\nfoo({x: 1, y: 2});      // [1, 2]\nfoo();      // TypeError: Cannot read property &#39;x&#39; of undefined\n</code></pre><p>上面的例子，只使用了解构赋值的默认值，未使用参数默认值。如果将一个对象传给<code>foo</code>函数，那么这个对象就会和{x, y = 5}进行模式匹配，最终为参数解构赋值。但如果不给函数传参（例如最后一行——<code>foo()</code>），或者传参为<code>null</code>，那么就会报错。因为，<code>undefined</code>、<code>null</code>无法进行解构赋值。</p>\n<p>上面的例子的报错问题，其实可以通过结合使用函数参数默认值的方法来避免。</p>\n<h4 id=\"2-2-同时使用解构赋值默认值和参数默认值\"><a href=\"#2-2-同时使用解构赋值默认值和参数默认值\" class=\"headerlink\" title=\"2.2 同时使用解构赋值默认值和参数默认值\"></a>2.2 同时使用解构赋值默认值和参数默认值</h4><pre><code>// 这里不仅使用了解构赋值默认值，同时使用了函数参数默认值\nfunction foo({x, y = 5} = {}) {\n  console.log(x, y);\n}\n\n// 这样调用不会报错\nfoo();  // undefined 5\n</code></pre><p>上面的例子，调用<code>foo</code>函数未传入参数。此时，首先会使函数参数的默认值（也就是声明函数时的<code>= {}</code>）生效。接下来，参数默认值<code>{ }</code>会与<code>{x, y = 5}</code>再进行解构赋值。其中解构赋值中，参数<code>y</code>具有默认值为<code>5</code>。</p>\n<p>作为练习，请思考下面两种写法有什么区别？</p>\n<pre><code>// 写法一\nfunction f1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction f2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n</code></pre><h3 id=\"3、需要设置默认值的参数最好放在其余参数最后面\"><a href=\"#3、需要设置默认值的参数最好放在其余参数最后面\" class=\"headerlink\" title=\"3、需要设置默认值的参数最好放在其余参数最后面\"></a>3、需要设置默认值的参数最好放在其余参数最后面</h3><p>一般情况下，建议将需要设置默认值的参数放在其余参数最后面。原因主要有以下两点：</p>\n<ul>\n<li>因为这样比较容易看出来，到底省略了哪些参数。</li>\n<li>如果非尾部的参数设置默认值，实际上这个参数是没法省略的,必须显式传入<code>undefined</code>才能使默认值生效。</li>\n</ul>\n<pre><code>function f(x, y = 5, z) {\n  return [x, y, z];\n}\n\nf();    // [undefined, 5, undefined]\nf(1);   // [1, 5, undefined]\nf(1, ,2);   // 省略第二个参数，会报错\n\n// 需要显式传入undefined作为第二个参数值\nf(1, undefined, 2);     // [1, 5, 2]\n</code></pre><h3 id=\"4、函数的rest参数\"><a href=\"#4、函数的rest参数\" class=\"headerlink\" title=\"4、函数的rest参数\"></a>4、函数的rest参数</h3><p>ES6引入了<code>rest</code>参数（形为<code>...变量名</code>）。这个变量名对应的值是一个数组，里面按参数传入的顺序存放着函数除了具名参数以外的剩余参数。</p>\n<p><strong>剩余参数只能/必须是函数的最后一个参数</strong>。但它有可能保存的是传入函数的所有参数值，也可能是传入函数的一部分参数值。</p>\n<pre><code>// 这个rest参数——param保存的就是所有传入参数的值\nfunction r1(...param) {\n    console.log(param);\n}\nr1(1, 2, 3, 4, 5);  // [1, 2, 3, 4, 5]\n\n// 这个rest参数——param保存的就是除具名参数以外的参数值\nfunction r2(param1, param2, ...param) {\n    console.log(param1, param2, ...param)\n}\nr2();   // 1 2 [3, 4, 5]\n</code></pre><p>我们可以使用<code>rest</code>参数来代替函数的<code>arguments</code>对象。最重要的是，<code>rest</code>参数是一个数组，可以使用所有数组的方法。但是，<code>arguments</code>只是一个类数组对象，很多数组的方法无法使用。</p>\n<h3 id=\"5、函数的length、name属性\"><a href=\"#5、函数的length、name属性\" class=\"headerlink\" title=\"5、函数的length、name属性\"></a>5、函数的length、name属性</h3><p>首先，要明确一点：所有函数都是Function类型的一个实例对象。所以每个函数都有一些自己的属性和方法。最后我们就来了解一下函数对象的<code>length</code>和<code>name</code>属性。</p>\n<h4 id=\"5-1、length属性\"><a href=\"#5-1、length属性\" class=\"headerlink\" title=\"5.1、length属性\"></a>5.1、length属性</h4><p>函数的<code>length</code>属性一般情况下表示函数期望接收到的参数的个数。但在设置了参数默认值或者rest参数时，会有一些变化。</p>\n<pre><code>(function (a) {}).length;           // 1\n\n(function (a = 0, b, c) {}).length; // 0\n(function (a, b = 1, c) {}).length; // 1\n(function (a, b, c = 5) {}).length; // 2\n\n(function(arg1, ...args) {}).length;      // 1  \n(function(...args) {}).length;      // 0\n</code></pre><p>可以看出：</p>\n<ul>\n<li>一般情况下，<code>length</code>属性返回的是函数声明时所定义的的参数的个数；</li>\n<li>当设置了参数默认值时，<code>length</code>属性返回的是<strong>第一个设置了默认值的参数之前的参数个数，之后的参数不再计入</strong>；</li>\n<li>当设置了<code>rest</code>参数，因为<code>rest</code>参数只能是函数的最后一个参数。所以<code>length</code>返回的是<code>rest</code>参数之前的参数个数。</li>\n</ul>\n<h4 id=\"5-2、name属性\"><a href=\"#5-2、name属性\" class=\"headerlink\" title=\"5.2、name属性\"></a>5.2、name属性</h4><p>函数的<code>name</code>属性，返回的是该函数的函数名。</p>\n<pre><code>// 函数声明\nfunction fun1() {}\nconsole.log(fun1.name);  // &#39;fun1&#39;（ES5/ES6）\n\n// 函数表达式\nlet fun2 = function() {};\n// ES5：&#39;&#39;(空字符串)\n// ES6：&#39;fun2&#39;\nconsole.log(fun2.name);\n\n// 将具名函数赋值给一个变量\nlet temp = function fun3() {};\nconsole.log(temp.name);\n// &#39;fun3&#39;(ES5/ES6)\n\n// Function()构造函数——返回&#39;anonymous&#39;\nconsole.log((new Function).name);   // &#39;anonymous&#39;\n\n// .bind()方法返回的函数，name属性值会加上&#39;bound &#39;（带个空格）前缀。\nfunction fun4() {};\nconsole.log(fun4.bind({}).name);     // &#39;bound fun4&#39;\n\nconsole.log((function(){}).bind({}).name);  // &#39;bound &#39;\n</code></pre>"},{"title":"ES6 - let、const、var的区别","date":"2019-03-15T14:40:21.000Z","img":"/medias/article/featureimages/ES6.jpg","_content":"> 为了使JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言，`ECMAScript 6.0`（简称`ES6`）在标准中添加了很多新的特性。我们将用几篇文章总结一下ES6标准中一些常用的新特性。本片文章主要讲解ES6中的`let`、`const`命令，并区分其与`var`命令的区别。\n\n### let 与 var 的区别\n\n#### 一、let声明的变量只在其所在的块级作用于有效\n\n所谓块级作用域是指：将多个代码语句封装在一起，通常是包含在一个大括号中，没有返回值。比如：\n```\nif (true) {  // 块级作用域  }\n\nfor (let i = 0; i < 10; i++) {  // 块级作用域  }\n\nwhile (true) {  // 块级作用域  }\n\nswitch (case) {  // 块级作用域  }\n```\n\n以上例子，大括号（{...}）中形成的都属于块级作用域。\n\n众所周知，在ES6之前，JavaScript中只有全局作用域和局部（函数）作用域，不存在块级作用域。而且也只能使用关键字`var`来声明变量。所以用`var`声明的变量要么是属于全局作用域的全局变量，要么就是属于局部（函数）作用域的局部变量。\n\n在ES6标准中，添加了使用`let`声明变量的方式。使用`let`声明的变量只在块级作用域中有效，在其外层作用域访问时就会报错。\n\n```\nif (true) {\n    // 这个用let声明的变量a，只在当前块级作用域中有效\n    let a = 123;\n    // 这个用var声明的变量b，在全局作用域中都有效\n    var b = '123';\n\n    console.log(a);     // 123\n    console.log(b);     // '123'\n}\n\nconsole.log(a);     // 报错 —— ReferenceError: a is not defined.\nconsole.log(b);     // '123'\n```\n\n上面的例子中，因为变量`a`是使用`let`声明的，它只在其所在的块级作用域——`if`后面的大括号({...})之中有效，在块级作用域外层访问时就会报错。而用`var`声明的变量`b`，不受块级作用域的约束，可以跨块级作用域访问。这个例子中，变量`b`实际是属于全局作用域的全局变量。\n\n那么，为什么ES6中需要引入块级作用域的概念呢？为什么要增加使用`let`来声明变量的方式呢？\n\n因为，如果没有块级作用域会导致一些不合理的情形出现。\n\n1、 内层变量可能会覆盖外层变量。\n```\nvar a = 'Global';\n\nfunction inner() {\n    if (true) {\n        console.log(a);     // undefined\n        var a = 'inner';\n        /**\n         * 以上两行代码相当于\n         * var a;\n         * console.log(a);\n         * a = 'inner'; \n         * 再次使用var声明同名变量a，会覆盖全局变量a\n         */\n    }\n}\n\ninner();\n```\n这个例子，当在函数`inner`内部`if`代码块内首先访问变量`a`时，却得到的是`undefined`。这是因为紧随其后`var`声明的同名变量`a`会变量提升并覆盖全局变量`a`。所以打印出`a`的值为`undefined`。\n\n2、计数的循环变量会泄露为全局变量\n```\nfor (var i = 0; i < 10; i++) {\n    // 一些循环操作\n}\n\nconsole.log(i);     // 10\n```\n\n上面的例子，`for`循环中的循环变量按道理来说应该只属于`for`循环体，循环结束就不能再访问。但实际这样用`var`声明的`i`，属于外层作用域中的变量，也就是说`i`泄露为全局变量。所以当执行到`console.log(i)`时，因为`i`经过循环已经增加到`10`，所以打印出`i`的值为`10`。\n\n#### 二、let声明的变量不存在变量提升过程\n\n用`var`声明的变量，会在其作用域中**发生`变量提升`的过程**。变量会被提升到作用域顶部，JS默认给变量一个`undefined`值。在使用`var`声明一个变量前访问它，得到的值永远是`undefined`。\n\n但是，在ES6中**使用`let`声明的变量，不存在`变量提升`过程**。也就是说，不能在使用`let`声明任何一个变量前访问它，否则都会报错。\n\n```\nconsole.log(a);     // 报错——ReferenceError: a is not defined\n\nlet a = 'Hello World!'；\n```\n\n#### 三、let声明的变量存在“暂时性死区”\n\n只要使用`let`声明了一个变量，那这个变量就“绑定”到了这个作用域（全局/局部/块级），该变量就不再受外层作用域的影响。\n\nES6明确规定，如果区块中存在`let`和`const`命令，这个区块对这些命令声明的变量从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n总之，在代码块内，使用`let`命令声明变量之前，该变量都是不可用的。这在语法上，称为`“暂时性死区”`（temporal dead zone，简称 TDZ）。\n\n```\nlet g = 'Global';\n\nif (true) {\n    g = 'Block';    // 报错——ReferenceError: g is not defined\n    let g;\n}\n```\n上面的例子中，`if`代码块最顶部一直到`let`声明变量`g`之前，都是`g`的“暂时性死区”。在该范围内访问`g`都会报错。\n\n#### 四、let声明的变量不允许再次重复声明\n\n使用`var`声明变量，可以多次重复声明一个同名变量。最终变量的值为最后一次声明赋值的结果。\n\n```\nvar a = 123;\nvar a = 'Hello World!';\n\nconsole.log(a);     // 'Hello World!'\n```\n\n但是，**在同一作用域（全局/局部/块级）中不允许使用let重复声明变量。或者说不允许存在与用`let`声明的变量同名的变量**。以下代码都会报错！\n\n```\n// 先var，后let\nvar a = 123;\n// ...一些代码\nlet a = 'Hello World!';     // 报错——Uncaught SyntaxError: Identifier 'a' has already been declared\n\n// 先let，后var\nlet b = 123;\n// ...一些代码\nvar b = 'Hello World!';     // 报错——Uncaught SyntaxError: Identifier 'a' has already been declared\n\n// 先let，再let\nlet c = 123;\n// ...一些代码\nlet c = 'Hello World!';     // 报错——Uncaught SyntaxError: Identifier 'a' has already been declared\n```\n\n#### 五、let声明的全局变量不会作为window对象的一个属性\n\n使用`var`声明的全局变量，会被JS自动添加在全局对象`window`上，作为该对象的一个属性。\n\n```\nvar myVar = 'myName';\n\nconsole.log(window.myVar);      // 'myName'\nconsole.log(window.hasOwnProperty('myVar'));    // true\n```\n\n但是，使用let声明的全局变量不会作为window对象的一个属性。\n\n```\nlet yourVar = 'yourName';\n\nconsole.log(window.yourVar);      // undefined\nconsole.log(window.hasOwnProperty('yourVar'));    // false\n```\n\n这个例子可以看出，`let`声明的全局变量`yourVar`，并没有被添加到`window`对象上，没有作为`window`的一个属性。\n\n### let 与const 的区别\n\n在ES6中，上述所有`let`所具有的特性，对于`const`来说同样存在。但`const`与`let`、`var`的区别在于`const`是用来声明**常量**的。\n\n常量具有以下特点：\n\n#### 一、常量值不可修改\n\n一个常量，一旦声明，任何时间、任何地点都不能修改它的值。\n\n```\nconst PI = 3.1415926;\n\nconsole.log(PI);    // 3.1415926\n\nPI = 3; // 报错——Uncaught TypeError: Assignment to constant variable.\n```\n\n#### 二、常量在声明时必须必须立即初始化（赋初始值）\n\n不能只声明一个常量名，但不对其进行初始化赋值。否则在声明常量时就会报错。\n\n```\nconst PI;   // 报错——Uncaught SyntaxError: Missing initializer in const declaration\n\nPI = 3.1415926;\n```\n\n#### 三、常量的值不可修改的实质（重要！！）\n\n实际上，常量的值不变，是指常量指向的那个内存地址中所保存的数据不可更改。对于简单的数据类型（数值，字符串、布尔值），他们本身具体的值就保存在常量所指向的那个内存地址中，所以不能修改改简单类型的数据值。\n\n但是，如果一个常量的值是一个引用类型值，那么常量所指向的内存地址中实际保存的是指向该引用类型值的一个指针（也就是引用类型值在内存中的地址）。所以const只能保证该引用类型地址不变，但该地址中的具体数据是可以变化的。\n\n下面的例子，代码不会报错，可以正常运行！\n\n```\n// !!!常量OBJ中实际保存的是后面的对象在内存中的地址!!!\nconst OBJ = {};\n\n/**\n * !!!!!!!!!!\n * 修改OBJ.prop1，实际只是修改了对象的属性，\n * 但并没有改变该对象在内存中的地址，\n * 所以常量OBJ并没有发生变化\n * !!!!!!!!!!\n */\nOBJ.prop1 = 123;\nOBJ.prop2 = 'Hello World!'\n\n/**\n * !!!!!!!!!!\n * 下面这一行就会报错,\n * 因为此时OBJ指向了另一个对象，OBJ中保存的地址发生了变化\n * !!!!!!!!!!\n */\nOBJ = {};   // 报错——Uncaught TypeError: Assignment to constant variable.\n```\n\n下面的例子和上面同理。\n\n```\nconst ARR = [];\nARR.push('Hello');  // 可执行\nARR.length = 0;     // 可执行\nARR = ['Dave'];     // 报错，因为ARR重新指向了数组['Dave']所在的内存地址\n```","source":"_posts/ES6-let-const.md","raw":"---\ntitle: ES6 - let、const、var的区别\ndate: 2019-03-15 22:40:21\ncategories: 编程\ntags: ES6\nimg: /medias/article/featureimages/ES6.jpg\n---\n> 为了使JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言，`ECMAScript 6.0`（简称`ES6`）在标准中添加了很多新的特性。我们将用几篇文章总结一下ES6标准中一些常用的新特性。本片文章主要讲解ES6中的`let`、`const`命令，并区分其与`var`命令的区别。\n\n### let 与 var 的区别\n\n#### 一、let声明的变量只在其所在的块级作用于有效\n\n所谓块级作用域是指：将多个代码语句封装在一起，通常是包含在一个大括号中，没有返回值。比如：\n```\nif (true) {  // 块级作用域  }\n\nfor (let i = 0; i < 10; i++) {  // 块级作用域  }\n\nwhile (true) {  // 块级作用域  }\n\nswitch (case) {  // 块级作用域  }\n```\n\n以上例子，大括号（{...}）中形成的都属于块级作用域。\n\n众所周知，在ES6之前，JavaScript中只有全局作用域和局部（函数）作用域，不存在块级作用域。而且也只能使用关键字`var`来声明变量。所以用`var`声明的变量要么是属于全局作用域的全局变量，要么就是属于局部（函数）作用域的局部变量。\n\n在ES6标准中，添加了使用`let`声明变量的方式。使用`let`声明的变量只在块级作用域中有效，在其外层作用域访问时就会报错。\n\n```\nif (true) {\n    // 这个用let声明的变量a，只在当前块级作用域中有效\n    let a = 123;\n    // 这个用var声明的变量b，在全局作用域中都有效\n    var b = '123';\n\n    console.log(a);     // 123\n    console.log(b);     // '123'\n}\n\nconsole.log(a);     // 报错 —— ReferenceError: a is not defined.\nconsole.log(b);     // '123'\n```\n\n上面的例子中，因为变量`a`是使用`let`声明的，它只在其所在的块级作用域——`if`后面的大括号({...})之中有效，在块级作用域外层访问时就会报错。而用`var`声明的变量`b`，不受块级作用域的约束，可以跨块级作用域访问。这个例子中，变量`b`实际是属于全局作用域的全局变量。\n\n那么，为什么ES6中需要引入块级作用域的概念呢？为什么要增加使用`let`来声明变量的方式呢？\n\n因为，如果没有块级作用域会导致一些不合理的情形出现。\n\n1、 内层变量可能会覆盖外层变量。\n```\nvar a = 'Global';\n\nfunction inner() {\n    if (true) {\n        console.log(a);     // undefined\n        var a = 'inner';\n        /**\n         * 以上两行代码相当于\n         * var a;\n         * console.log(a);\n         * a = 'inner'; \n         * 再次使用var声明同名变量a，会覆盖全局变量a\n         */\n    }\n}\n\ninner();\n```\n这个例子，当在函数`inner`内部`if`代码块内首先访问变量`a`时，却得到的是`undefined`。这是因为紧随其后`var`声明的同名变量`a`会变量提升并覆盖全局变量`a`。所以打印出`a`的值为`undefined`。\n\n2、计数的循环变量会泄露为全局变量\n```\nfor (var i = 0; i < 10; i++) {\n    // 一些循环操作\n}\n\nconsole.log(i);     // 10\n```\n\n上面的例子，`for`循环中的循环变量按道理来说应该只属于`for`循环体，循环结束就不能再访问。但实际这样用`var`声明的`i`，属于外层作用域中的变量，也就是说`i`泄露为全局变量。所以当执行到`console.log(i)`时，因为`i`经过循环已经增加到`10`，所以打印出`i`的值为`10`。\n\n#### 二、let声明的变量不存在变量提升过程\n\n用`var`声明的变量，会在其作用域中**发生`变量提升`的过程**。变量会被提升到作用域顶部，JS默认给变量一个`undefined`值。在使用`var`声明一个变量前访问它，得到的值永远是`undefined`。\n\n但是，在ES6中**使用`let`声明的变量，不存在`变量提升`过程**。也就是说，不能在使用`let`声明任何一个变量前访问它，否则都会报错。\n\n```\nconsole.log(a);     // 报错——ReferenceError: a is not defined\n\nlet a = 'Hello World!'；\n```\n\n#### 三、let声明的变量存在“暂时性死区”\n\n只要使用`let`声明了一个变量，那这个变量就“绑定”到了这个作用域（全局/局部/块级），该变量就不再受外层作用域的影响。\n\nES6明确规定，如果区块中存在`let`和`const`命令，这个区块对这些命令声明的变量从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n总之，在代码块内，使用`let`命令声明变量之前，该变量都是不可用的。这在语法上，称为`“暂时性死区”`（temporal dead zone，简称 TDZ）。\n\n```\nlet g = 'Global';\n\nif (true) {\n    g = 'Block';    // 报错——ReferenceError: g is not defined\n    let g;\n}\n```\n上面的例子中，`if`代码块最顶部一直到`let`声明变量`g`之前，都是`g`的“暂时性死区”。在该范围内访问`g`都会报错。\n\n#### 四、let声明的变量不允许再次重复声明\n\n使用`var`声明变量，可以多次重复声明一个同名变量。最终变量的值为最后一次声明赋值的结果。\n\n```\nvar a = 123;\nvar a = 'Hello World!';\n\nconsole.log(a);     // 'Hello World!'\n```\n\n但是，**在同一作用域（全局/局部/块级）中不允许使用let重复声明变量。或者说不允许存在与用`let`声明的变量同名的变量**。以下代码都会报错！\n\n```\n// 先var，后let\nvar a = 123;\n// ...一些代码\nlet a = 'Hello World!';     // 报错——Uncaught SyntaxError: Identifier 'a' has already been declared\n\n// 先let，后var\nlet b = 123;\n// ...一些代码\nvar b = 'Hello World!';     // 报错——Uncaught SyntaxError: Identifier 'a' has already been declared\n\n// 先let，再let\nlet c = 123;\n// ...一些代码\nlet c = 'Hello World!';     // 报错——Uncaught SyntaxError: Identifier 'a' has already been declared\n```\n\n#### 五、let声明的全局变量不会作为window对象的一个属性\n\n使用`var`声明的全局变量，会被JS自动添加在全局对象`window`上，作为该对象的一个属性。\n\n```\nvar myVar = 'myName';\n\nconsole.log(window.myVar);      // 'myName'\nconsole.log(window.hasOwnProperty('myVar'));    // true\n```\n\n但是，使用let声明的全局变量不会作为window对象的一个属性。\n\n```\nlet yourVar = 'yourName';\n\nconsole.log(window.yourVar);      // undefined\nconsole.log(window.hasOwnProperty('yourVar'));    // false\n```\n\n这个例子可以看出，`let`声明的全局变量`yourVar`，并没有被添加到`window`对象上，没有作为`window`的一个属性。\n\n### let 与const 的区别\n\n在ES6中，上述所有`let`所具有的特性，对于`const`来说同样存在。但`const`与`let`、`var`的区别在于`const`是用来声明**常量**的。\n\n常量具有以下特点：\n\n#### 一、常量值不可修改\n\n一个常量，一旦声明，任何时间、任何地点都不能修改它的值。\n\n```\nconst PI = 3.1415926;\n\nconsole.log(PI);    // 3.1415926\n\nPI = 3; // 报错——Uncaught TypeError: Assignment to constant variable.\n```\n\n#### 二、常量在声明时必须必须立即初始化（赋初始值）\n\n不能只声明一个常量名，但不对其进行初始化赋值。否则在声明常量时就会报错。\n\n```\nconst PI;   // 报错——Uncaught SyntaxError: Missing initializer in const declaration\n\nPI = 3.1415926;\n```\n\n#### 三、常量的值不可修改的实质（重要！！）\n\n实际上，常量的值不变，是指常量指向的那个内存地址中所保存的数据不可更改。对于简单的数据类型（数值，字符串、布尔值），他们本身具体的值就保存在常量所指向的那个内存地址中，所以不能修改改简单类型的数据值。\n\n但是，如果一个常量的值是一个引用类型值，那么常量所指向的内存地址中实际保存的是指向该引用类型值的一个指针（也就是引用类型值在内存中的地址）。所以const只能保证该引用类型地址不变，但该地址中的具体数据是可以变化的。\n\n下面的例子，代码不会报错，可以正常运行！\n\n```\n// !!!常量OBJ中实际保存的是后面的对象在内存中的地址!!!\nconst OBJ = {};\n\n/**\n * !!!!!!!!!!\n * 修改OBJ.prop1，实际只是修改了对象的属性，\n * 但并没有改变该对象在内存中的地址，\n * 所以常量OBJ并没有发生变化\n * !!!!!!!!!!\n */\nOBJ.prop1 = 123;\nOBJ.prop2 = 'Hello World!'\n\n/**\n * !!!!!!!!!!\n * 下面这一行就会报错,\n * 因为此时OBJ指向了另一个对象，OBJ中保存的地址发生了变化\n * !!!!!!!!!!\n */\nOBJ = {};   // 报错——Uncaught TypeError: Assignment to constant variable.\n```\n\n下面的例子和上面同理。\n\n```\nconst ARR = [];\nARR.push('Hello');  // 可执行\nARR.length = 0;     // 可执行\nARR = ['Dave'];     // 报错，因为ARR重新指向了数组['Dave']所在的内存地址\n```","slug":"ES6-let-const","published":1,"updated":"2019-05-19T11:30:25.793Z","_id":"cjvuu4mr6000c9kvbsr78qbvt","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>为了使JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言，<code>ECMAScript 6.0</code>（简称<code>ES6</code>）在标准中添加了很多新的特性。我们将用几篇文章总结一下ES6标准中一些常用的新特性。本片文章主要讲解ES6中的<code>let</code>、<code>const</code>命令，并区分其与<code>var</code>命令的区别。</p>\n</blockquote>\n<h3 id=\"let-与-var-的区别\"><a href=\"#let-与-var-的区别\" class=\"headerlink\" title=\"let 与 var 的区别\"></a>let 与 var 的区别</h3><h4 id=\"一、let声明的变量只在其所在的块级作用于有效\"><a href=\"#一、let声明的变量只在其所在的块级作用于有效\" class=\"headerlink\" title=\"一、let声明的变量只在其所在的块级作用于有效\"></a>一、let声明的变量只在其所在的块级作用于有效</h4><p>所谓块级作用域是指：将多个代码语句封装在一起，通常是包含在一个大括号中，没有返回值。比如：</p>\n<pre><code>if (true) {  // 块级作用域  }\n\nfor (let i = 0; i &lt; 10; i++) {  // 块级作用域  }\n\nwhile (true) {  // 块级作用域  }\n\nswitch (case) {  // 块级作用域  }\n</code></pre><p>以上例子，大括号（{…}）中形成的都属于块级作用域。</p>\n<p>众所周知，在ES6之前，JavaScript中只有全局作用域和局部（函数）作用域，不存在块级作用域。而且也只能使用关键字<code>var</code>来声明变量。所以用<code>var</code>声明的变量要么是属于全局作用域的全局变量，要么就是属于局部（函数）作用域的局部变量。</p>\n<p>在ES6标准中，添加了使用<code>let</code>声明变量的方式。使用<code>let</code>声明的变量只在块级作用域中有效，在其外层作用域访问时就会报错。</p>\n<pre><code>if (true) {\n    // 这个用let声明的变量a，只在当前块级作用域中有效\n    let a = 123;\n    // 这个用var声明的变量b，在全局作用域中都有效\n    var b = &#39;123&#39;;\n\n    console.log(a);     // 123\n    console.log(b);     // &#39;123&#39;\n}\n\nconsole.log(a);     // 报错 —— ReferenceError: a is not defined.\nconsole.log(b);     // &#39;123&#39;\n</code></pre><p>上面的例子中，因为变量<code>a</code>是使用<code>let</code>声明的，它只在其所在的块级作用域——<code>if</code>后面的大括号({…})之中有效，在块级作用域外层访问时就会报错。而用<code>var</code>声明的变量<code>b</code>，不受块级作用域的约束，可以跨块级作用域访问。这个例子中，变量<code>b</code>实际是属于全局作用域的全局变量。</p>\n<p>那么，为什么ES6中需要引入块级作用域的概念呢？为什么要增加使用<code>let</code>来声明变量的方式呢？</p>\n<p>因为，如果没有块级作用域会导致一些不合理的情形出现。</p>\n<p>1、 内层变量可能会覆盖外层变量。</p>\n<pre><code>var a = &#39;Global&#39;;\n\nfunction inner() {\n    if (true) {\n        console.log(a);     // undefined\n        var a = &#39;inner&#39;;\n        /**\n         * 以上两行代码相当于\n         * var a;\n         * console.log(a);\n         * a = &#39;inner&#39;; \n         * 再次使用var声明同名变量a，会覆盖全局变量a\n         */\n    }\n}\n\ninner();\n</code></pre><p>这个例子，当在函数<code>inner</code>内部<code>if</code>代码块内首先访问变量<code>a</code>时，却得到的是<code>undefined</code>。这是因为紧随其后<code>var</code>声明的同名变量<code>a</code>会变量提升并覆盖全局变量<code>a</code>。所以打印出<code>a</code>的值为<code>undefined</code>。</p>\n<p>2、计数的循环变量会泄露为全局变量</p>\n<pre><code>for (var i = 0; i &lt; 10; i++) {\n    // 一些循环操作\n}\n\nconsole.log(i);     // 10\n</code></pre><p>上面的例子，<code>for</code>循环中的循环变量按道理来说应该只属于<code>for</code>循环体，循环结束就不能再访问。但实际这样用<code>var</code>声明的<code>i</code>，属于外层作用域中的变量，也就是说<code>i</code>泄露为全局变量。所以当执行到<code>console.log(i)</code>时，因为<code>i</code>经过循环已经增加到<code>10</code>，所以打印出<code>i</code>的值为<code>10</code>。</p>\n<h4 id=\"二、let声明的变量不存在变量提升过程\"><a href=\"#二、let声明的变量不存在变量提升过程\" class=\"headerlink\" title=\"二、let声明的变量不存在变量提升过程\"></a>二、let声明的变量不存在变量提升过程</h4><p>用<code>var</code>声明的变量，会在其作用域中<strong>发生<code>变量提升</code>的过程</strong>。变量会被提升到作用域顶部，JS默认给变量一个<code>undefined</code>值。在使用<code>var</code>声明一个变量前访问它，得到的值永远是<code>undefined</code>。</p>\n<p>但是，在ES6中<strong>使用<code>let</code>声明的变量，不存在<code>变量提升</code>过程</strong>。也就是说，不能在使用<code>let</code>声明任何一个变量前访问它，否则都会报错。</p>\n<pre><code>console.log(a);     // 报错——ReferenceError: a is not defined\n\nlet a = &#39;Hello World!&#39;；\n</code></pre><h4 id=\"三、let声明的变量存在“暂时性死区”\"><a href=\"#三、let声明的变量存在“暂时性死区”\" class=\"headerlink\" title=\"三、let声明的变量存在“暂时性死区”\"></a>三、let声明的变量存在“暂时性死区”</h4><p>只要使用<code>let</code>声明了一个变量，那这个变量就“绑定”到了这个作用域（全局/局部/块级），该变量就不再受外层作用域的影响。</p>\n<p>ES6明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为<code>“暂时性死区”</code>（temporal dead zone，简称 TDZ）。</p>\n<pre><code>let g = &#39;Global&#39;;\n\nif (true) {\n    g = &#39;Block&#39;;    // 报错——ReferenceError: g is not defined\n    let g;\n}\n</code></pre><p>上面的例子中，<code>if</code>代码块最顶部一直到<code>let</code>声明变量<code>g</code>之前，都是<code>g</code>的“暂时性死区”。在该范围内访问<code>g</code>都会报错。</p>\n<h4 id=\"四、let声明的变量不允许再次重复声明\"><a href=\"#四、let声明的变量不允许再次重复声明\" class=\"headerlink\" title=\"四、let声明的变量不允许再次重复声明\"></a>四、let声明的变量不允许再次重复声明</h4><p>使用<code>var</code>声明变量，可以多次重复声明一个同名变量。最终变量的值为最后一次声明赋值的结果。</p>\n<pre><code>var a = 123;\nvar a = &#39;Hello World!&#39;;\n\nconsole.log(a);     // &#39;Hello World!&#39;\n</code></pre><p>但是，<strong>在同一作用域（全局/局部/块级）中不允许使用let重复声明变量。或者说不允许存在与用<code>let</code>声明的变量同名的变量</strong>。以下代码都会报错！</p>\n<pre><code>// 先var，后let\nvar a = 123;\n// ...一些代码\nlet a = &#39;Hello World!&#39;;     // 报错——Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared\n\n// 先let，后var\nlet b = 123;\n// ...一些代码\nvar b = &#39;Hello World!&#39;;     // 报错——Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared\n\n// 先let，再let\nlet c = 123;\n// ...一些代码\nlet c = &#39;Hello World!&#39;;     // 报错——Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared\n</code></pre><h4 id=\"五、let声明的全局变量不会作为window对象的一个属性\"><a href=\"#五、let声明的全局变量不会作为window对象的一个属性\" class=\"headerlink\" title=\"五、let声明的全局变量不会作为window对象的一个属性\"></a>五、let声明的全局变量不会作为window对象的一个属性</h4><p>使用<code>var</code>声明的全局变量，会被JS自动添加在全局对象<code>window</code>上，作为该对象的一个属性。</p>\n<pre><code>var myVar = &#39;myName&#39;;\n\nconsole.log(window.myVar);      // &#39;myName&#39;\nconsole.log(window.hasOwnProperty(&#39;myVar&#39;));    // true\n</code></pre><p>但是，使用let声明的全局变量不会作为window对象的一个属性。</p>\n<pre><code>let yourVar = &#39;yourName&#39;;\n\nconsole.log(window.yourVar);      // undefined\nconsole.log(window.hasOwnProperty(&#39;yourVar&#39;));    // false\n</code></pre><p>这个例子可以看出，<code>let</code>声明的全局变量<code>yourVar</code>，并没有被添加到<code>window</code>对象上，没有作为<code>window</code>的一个属性。</p>\n<h3 id=\"let-与const-的区别\"><a href=\"#let-与const-的区别\" class=\"headerlink\" title=\"let 与const 的区别\"></a>let 与const 的区别</h3><p>在ES6中，上述所有<code>let</code>所具有的特性，对于<code>const</code>来说同样存在。但<code>const</code>与<code>let</code>、<code>var</code>的区别在于<code>const</code>是用来声明<strong>常量</strong>的。</p>\n<p>常量具有以下特点：</p>\n<h4 id=\"一、常量值不可修改\"><a href=\"#一、常量值不可修改\" class=\"headerlink\" title=\"一、常量值不可修改\"></a>一、常量值不可修改</h4><p>一个常量，一旦声明，任何时间、任何地点都不能修改它的值。</p>\n<pre><code>const PI = 3.1415926;\n\nconsole.log(PI);    // 3.1415926\n\nPI = 3; // 报错——Uncaught TypeError: Assignment to constant variable.\n</code></pre><h4 id=\"二、常量在声明时必须必须立即初始化（赋初始值）\"><a href=\"#二、常量在声明时必须必须立即初始化（赋初始值）\" class=\"headerlink\" title=\"二、常量在声明时必须必须立即初始化（赋初始值）\"></a>二、常量在声明时必须必须立即初始化（赋初始值）</h4><p>不能只声明一个常量名，但不对其进行初始化赋值。否则在声明常量时就会报错。</p>\n<pre><code>const PI;   // 报错——Uncaught SyntaxError: Missing initializer in const declaration\n\nPI = 3.1415926;\n</code></pre><h4 id=\"三、常量的值不可修改的实质（重要！！）\"><a href=\"#三、常量的值不可修改的实质（重要！！）\" class=\"headerlink\" title=\"三、常量的值不可修改的实质（重要！！）\"></a>三、常量的值不可修改的实质（重要！！）</h4><p>实际上，常量的值不变，是指常量指向的那个内存地址中所保存的数据不可更改。对于简单的数据类型（数值，字符串、布尔值），他们本身具体的值就保存在常量所指向的那个内存地址中，所以不能修改改简单类型的数据值。</p>\n<p>但是，如果一个常量的值是一个引用类型值，那么常量所指向的内存地址中实际保存的是指向该引用类型值的一个指针（也就是引用类型值在内存中的地址）。所以const只能保证该引用类型地址不变，但该地址中的具体数据是可以变化的。</p>\n<p>下面的例子，代码不会报错，可以正常运行！</p>\n<pre><code>// !!!常量OBJ中实际保存的是后面的对象在内存中的地址!!!\nconst OBJ = {};\n\n/**\n * !!!!!!!!!!\n * 修改OBJ.prop1，实际只是修改了对象的属性，\n * 但并没有改变该对象在内存中的地址，\n * 所以常量OBJ并没有发生变化\n * !!!!!!!!!!\n */\nOBJ.prop1 = 123;\nOBJ.prop2 = &#39;Hello World!&#39;\n\n/**\n * !!!!!!!!!!\n * 下面这一行就会报错,\n * 因为此时OBJ指向了另一个对象，OBJ中保存的地址发生了变化\n * !!!!!!!!!!\n */\nOBJ = {};   // 报错——Uncaught TypeError: Assignment to constant variable.\n</code></pre><p>下面的例子和上面同理。</p>\n<pre><code>const ARR = [];\nARR.push(&#39;Hello&#39;);  // 可执行\nARR.length = 0;     // 可执行\nARR = [&#39;Dave&#39;];     // 报错，因为ARR重新指向了数组[&#39;Dave&#39;]所在的内存地址\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>为了使JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言，<code>ECMAScript 6.0</code>（简称<code>ES6</code>）在标准中添加了很多新的特性。我们将用几篇文章总结一下ES6标准中一些常用的新特性。本片文章主要讲解ES6中的<code>let</code>、<code>const</code>命令，并区分其与<code>var</code>命令的区别。</p>\n</blockquote>\n<h3 id=\"let-与-var-的区别\"><a href=\"#let-与-var-的区别\" class=\"headerlink\" title=\"let 与 var 的区别\"></a>let 与 var 的区别</h3><h4 id=\"一、let声明的变量只在其所在的块级作用于有效\"><a href=\"#一、let声明的变量只在其所在的块级作用于有效\" class=\"headerlink\" title=\"一、let声明的变量只在其所在的块级作用于有效\"></a>一、let声明的变量只在其所在的块级作用于有效</h4><p>所谓块级作用域是指：将多个代码语句封装在一起，通常是包含在一个大括号中，没有返回值。比如：</p>\n<pre><code>if (true) {  // 块级作用域  }\n\nfor (let i = 0; i &lt; 10; i++) {  // 块级作用域  }\n\nwhile (true) {  // 块级作用域  }\n\nswitch (case) {  // 块级作用域  }\n</code></pre><p>以上例子，大括号（{…}）中形成的都属于块级作用域。</p>\n<p>众所周知，在ES6之前，JavaScript中只有全局作用域和局部（函数）作用域，不存在块级作用域。而且也只能使用关键字<code>var</code>来声明变量。所以用<code>var</code>声明的变量要么是属于全局作用域的全局变量，要么就是属于局部（函数）作用域的局部变量。</p>\n<p>在ES6标准中，添加了使用<code>let</code>声明变量的方式。使用<code>let</code>声明的变量只在块级作用域中有效，在其外层作用域访问时就会报错。</p>\n<pre><code>if (true) {\n    // 这个用let声明的变量a，只在当前块级作用域中有效\n    let a = 123;\n    // 这个用var声明的变量b，在全局作用域中都有效\n    var b = &#39;123&#39;;\n\n    console.log(a);     // 123\n    console.log(b);     // &#39;123&#39;\n}\n\nconsole.log(a);     // 报错 —— ReferenceError: a is not defined.\nconsole.log(b);     // &#39;123&#39;\n</code></pre><p>上面的例子中，因为变量<code>a</code>是使用<code>let</code>声明的，它只在其所在的块级作用域——<code>if</code>后面的大括号({…})之中有效，在块级作用域外层访问时就会报错。而用<code>var</code>声明的变量<code>b</code>，不受块级作用域的约束，可以跨块级作用域访问。这个例子中，变量<code>b</code>实际是属于全局作用域的全局变量。</p>\n<p>那么，为什么ES6中需要引入块级作用域的概念呢？为什么要增加使用<code>let</code>来声明变量的方式呢？</p>\n<p>因为，如果没有块级作用域会导致一些不合理的情形出现。</p>\n<p>1、 内层变量可能会覆盖外层变量。</p>\n<pre><code>var a = &#39;Global&#39;;\n\nfunction inner() {\n    if (true) {\n        console.log(a);     // undefined\n        var a = &#39;inner&#39;;\n        /**\n         * 以上两行代码相当于\n         * var a;\n         * console.log(a);\n         * a = &#39;inner&#39;; \n         * 再次使用var声明同名变量a，会覆盖全局变量a\n         */\n    }\n}\n\ninner();\n</code></pre><p>这个例子，当在函数<code>inner</code>内部<code>if</code>代码块内首先访问变量<code>a</code>时，却得到的是<code>undefined</code>。这是因为紧随其后<code>var</code>声明的同名变量<code>a</code>会变量提升并覆盖全局变量<code>a</code>。所以打印出<code>a</code>的值为<code>undefined</code>。</p>\n<p>2、计数的循环变量会泄露为全局变量</p>\n<pre><code>for (var i = 0; i &lt; 10; i++) {\n    // 一些循环操作\n}\n\nconsole.log(i);     // 10\n</code></pre><p>上面的例子，<code>for</code>循环中的循环变量按道理来说应该只属于<code>for</code>循环体，循环结束就不能再访问。但实际这样用<code>var</code>声明的<code>i</code>，属于外层作用域中的变量，也就是说<code>i</code>泄露为全局变量。所以当执行到<code>console.log(i)</code>时，因为<code>i</code>经过循环已经增加到<code>10</code>，所以打印出<code>i</code>的值为<code>10</code>。</p>\n<h4 id=\"二、let声明的变量不存在变量提升过程\"><a href=\"#二、let声明的变量不存在变量提升过程\" class=\"headerlink\" title=\"二、let声明的变量不存在变量提升过程\"></a>二、let声明的变量不存在变量提升过程</h4><p>用<code>var</code>声明的变量，会在其作用域中<strong>发生<code>变量提升</code>的过程</strong>。变量会被提升到作用域顶部，JS默认给变量一个<code>undefined</code>值。在使用<code>var</code>声明一个变量前访问它，得到的值永远是<code>undefined</code>。</p>\n<p>但是，在ES6中<strong>使用<code>let</code>声明的变量，不存在<code>变量提升</code>过程</strong>。也就是说，不能在使用<code>let</code>声明任何一个变量前访问它，否则都会报错。</p>\n<pre><code>console.log(a);     // 报错——ReferenceError: a is not defined\n\nlet a = &#39;Hello World!&#39;；\n</code></pre><h4 id=\"三、let声明的变量存在“暂时性死区”\"><a href=\"#三、let声明的变量存在“暂时性死区”\" class=\"headerlink\" title=\"三、let声明的变量存在“暂时性死区”\"></a>三、let声明的变量存在“暂时性死区”</h4><p>只要使用<code>let</code>声明了一个变量，那这个变量就“绑定”到了这个作用域（全局/局部/块级），该变量就不再受外层作用域的影响。</p>\n<p>ES6明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为<code>“暂时性死区”</code>（temporal dead zone，简称 TDZ）。</p>\n<pre><code>let g = &#39;Global&#39;;\n\nif (true) {\n    g = &#39;Block&#39;;    // 报错——ReferenceError: g is not defined\n    let g;\n}\n</code></pre><p>上面的例子中，<code>if</code>代码块最顶部一直到<code>let</code>声明变量<code>g</code>之前，都是<code>g</code>的“暂时性死区”。在该范围内访问<code>g</code>都会报错。</p>\n<h4 id=\"四、let声明的变量不允许再次重复声明\"><a href=\"#四、let声明的变量不允许再次重复声明\" class=\"headerlink\" title=\"四、let声明的变量不允许再次重复声明\"></a>四、let声明的变量不允许再次重复声明</h4><p>使用<code>var</code>声明变量，可以多次重复声明一个同名变量。最终变量的值为最后一次声明赋值的结果。</p>\n<pre><code>var a = 123;\nvar a = &#39;Hello World!&#39;;\n\nconsole.log(a);     // &#39;Hello World!&#39;\n</code></pre><p>但是，<strong>在同一作用域（全局/局部/块级）中不允许使用let重复声明变量。或者说不允许存在与用<code>let</code>声明的变量同名的变量</strong>。以下代码都会报错！</p>\n<pre><code>// 先var，后let\nvar a = 123;\n// ...一些代码\nlet a = &#39;Hello World!&#39;;     // 报错——Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared\n\n// 先let，后var\nlet b = 123;\n// ...一些代码\nvar b = &#39;Hello World!&#39;;     // 报错——Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared\n\n// 先let，再let\nlet c = 123;\n// ...一些代码\nlet c = &#39;Hello World!&#39;;     // 报错——Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared\n</code></pre><h4 id=\"五、let声明的全局变量不会作为window对象的一个属性\"><a href=\"#五、let声明的全局变量不会作为window对象的一个属性\" class=\"headerlink\" title=\"五、let声明的全局变量不会作为window对象的一个属性\"></a>五、let声明的全局变量不会作为window对象的一个属性</h4><p>使用<code>var</code>声明的全局变量，会被JS自动添加在全局对象<code>window</code>上，作为该对象的一个属性。</p>\n<pre><code>var myVar = &#39;myName&#39;;\n\nconsole.log(window.myVar);      // &#39;myName&#39;\nconsole.log(window.hasOwnProperty(&#39;myVar&#39;));    // true\n</code></pre><p>但是，使用let声明的全局变量不会作为window对象的一个属性。</p>\n<pre><code>let yourVar = &#39;yourName&#39;;\n\nconsole.log(window.yourVar);      // undefined\nconsole.log(window.hasOwnProperty(&#39;yourVar&#39;));    // false\n</code></pre><p>这个例子可以看出，<code>let</code>声明的全局变量<code>yourVar</code>，并没有被添加到<code>window</code>对象上，没有作为<code>window</code>的一个属性。</p>\n<h3 id=\"let-与const-的区别\"><a href=\"#let-与const-的区别\" class=\"headerlink\" title=\"let 与const 的区别\"></a>let 与const 的区别</h3><p>在ES6中，上述所有<code>let</code>所具有的特性，对于<code>const</code>来说同样存在。但<code>const</code>与<code>let</code>、<code>var</code>的区别在于<code>const</code>是用来声明<strong>常量</strong>的。</p>\n<p>常量具有以下特点：</p>\n<h4 id=\"一、常量值不可修改\"><a href=\"#一、常量值不可修改\" class=\"headerlink\" title=\"一、常量值不可修改\"></a>一、常量值不可修改</h4><p>一个常量，一旦声明，任何时间、任何地点都不能修改它的值。</p>\n<pre><code>const PI = 3.1415926;\n\nconsole.log(PI);    // 3.1415926\n\nPI = 3; // 报错——Uncaught TypeError: Assignment to constant variable.\n</code></pre><h4 id=\"二、常量在声明时必须必须立即初始化（赋初始值）\"><a href=\"#二、常量在声明时必须必须立即初始化（赋初始值）\" class=\"headerlink\" title=\"二、常量在声明时必须必须立即初始化（赋初始值）\"></a>二、常量在声明时必须必须立即初始化（赋初始值）</h4><p>不能只声明一个常量名，但不对其进行初始化赋值。否则在声明常量时就会报错。</p>\n<pre><code>const PI;   // 报错——Uncaught SyntaxError: Missing initializer in const declaration\n\nPI = 3.1415926;\n</code></pre><h4 id=\"三、常量的值不可修改的实质（重要！！）\"><a href=\"#三、常量的值不可修改的实质（重要！！）\" class=\"headerlink\" title=\"三、常量的值不可修改的实质（重要！！）\"></a>三、常量的值不可修改的实质（重要！！）</h4><p>实际上，常量的值不变，是指常量指向的那个内存地址中所保存的数据不可更改。对于简单的数据类型（数值，字符串、布尔值），他们本身具体的值就保存在常量所指向的那个内存地址中，所以不能修改改简单类型的数据值。</p>\n<p>但是，如果一个常量的值是一个引用类型值，那么常量所指向的内存地址中实际保存的是指向该引用类型值的一个指针（也就是引用类型值在内存中的地址）。所以const只能保证该引用类型地址不变，但该地址中的具体数据是可以变化的。</p>\n<p>下面的例子，代码不会报错，可以正常运行！</p>\n<pre><code>// !!!常量OBJ中实际保存的是后面的对象在内存中的地址!!!\nconst OBJ = {};\n\n/**\n * !!!!!!!!!!\n * 修改OBJ.prop1，实际只是修改了对象的属性，\n * 但并没有改变该对象在内存中的地址，\n * 所以常量OBJ并没有发生变化\n * !!!!!!!!!!\n */\nOBJ.prop1 = 123;\nOBJ.prop2 = &#39;Hello World!&#39;\n\n/**\n * !!!!!!!!!!\n * 下面这一行就会报错,\n * 因为此时OBJ指向了另一个对象，OBJ中保存的地址发生了变化\n * !!!!!!!!!!\n */\nOBJ = {};   // 报错——Uncaught TypeError: Assignment to constant variable.\n</code></pre><p>下面的例子和上面同理。</p>\n<pre><code>const ARR = [];\nARR.push(&#39;Hello&#39;);  // 可执行\nARR.length = 0;     // 可执行\nARR = [&#39;Dave&#39;];     // 报错，因为ARR重新指向了数组[&#39;Dave&#39;]所在的内存地址\n</code></pre>"},{"title":"ES6 - 字符串的扩展","date":"2019-03-21T12:03:51.000Z","img":"/medias/article/featureimages/ES6.jpg","_content":"### 一、模板字符串\n\n> 模板字符串是增强版的字符串，用两个反引号（\\` \\`）包含来表示。\n\n#### 1、当做普通字符串使用\n\n在\\` \\`中如果只包含简单的字符串字面量，那么它和用引号（单/双引号）定义的字符串没有什么区别。\n\n```\nlet s = `Hello World !`;\nconsole.log(s);     // 'Hello World !'\n\n// 注意！！如果在模板字符串中本身就要输出反引号 ` ,请使用反斜杠（\\）转义。\nlet greeting = `\\`Hello\\` World!`;\nconsole.log(greeting);      // '`Hello` World!'\n```\n\n#### 2、模板字符串可以保留字符串的格式\n\n使用模板字符串来定义多行字符串，包括换行、缩进、多个空格等都会保留其中的格式。\n最常见的就是用来定义一个HTML模板字符串，在编码时可以很好地保留HTML字符串的换行、缩进等...，也便于阅读维护。\n\n```\nlet htmlStr = `\n    <ul>\n        <li>first</li>\n        <li>second</li>\n    </ul>\n`;\nconsole.log(htmlStr);\n\nlet s = `\n    He   l  l o,\n        W or    l d!\n`\nconsole.log(s);\n```\n以上两个例子，定义了带有格式（换行、缩进、多个空格）的模板字符串，模板字符串会保留所有的格式。在控制台输出的结果如下：\n![模板字符串输出结果][1]\n\n#### 3、模板字符串可以嵌入变量\n在以前，如果我们需要用一些固定的字符串与一些动态的变量值来拼接形成一个最终字符串，最常用的做法是像下面这样：\n\n```\nlet name = 'cao';\nlet age = 24;\nlet result = 'Hello ' + name + ',' + ' You are ' + age + ' years old !'；\n\n// 拼接一个HTML字符串\nlet basket = {\n    count: 10,\n    onSale: 3\n};\nlet resultHTML = \n    'There are <b>' + basket.count + '</b> ' +\n    'items in your basket, ' +\n    '<em>' + basket.onSale +\n    '</em> are on sale!'\n```\n\n像上面这样拼接字符串显然很麻烦。例子中还是较为简单的字符串，如果字符串内容过于复杂，甚至像HTML文本字符串带有缩进和结构，上面这样显然很容易出错——因为不仅要保证引号配对无误，还要保证拼接符（+）没有遗漏，这样显然不已阅读和维护。然而，使用模板字符串会方便而且清晰得多。\n\n上面的例子使用模板字符串也可以达到相同的效果，且方便、清晰。**模板字符串中嵌入的变量必须写在 `${ }` 的大括号中，大括号之外的字符都会被当做一般的字符串。**\n\n```\nlet name = 'cao';\nlet age = 24;\nlet result = `Hello ${name}, You are ${age} years old !`；\n\n// 拼接一个HTML字符串\nlet basket = {\n    count: 10,\n    onSale: 3\n};\nlet resultHTML = \n    `There are <b> ${basket.count} </b>\n    items in your basket,\n    <em> ${basket.onSale}\n    </em> are on sale!`;\n```\n\n`${ }`大括号内部可以放入任意的JS表达式，可以进行运算、引用对象属性或者调用函数。**如果表达式计算结果不是一个字符串，那就会自动将其转换为字符串**。比如，大括号中是一个对象，将默认调用对象的toString方法。\n\n```\nlet x = 1;\nlet y = 2;\nconsole.log(`${x} + ${y} = ${x + y}`);      // \"1 + 2 = 3\"\nconsole.log(`${x} + ${y * 2} = ${x + y * 2}`);      // \"1 + 4 = 5\"\n\nlet obj = {x: 1, y: 2};\nconsole.log(`${obj.x + obj.y}`);        // \"3\"\n\nfunction fn() {\n  return \"Hello World\";\n}\nconsole.log(`foo ${fn()} bar`);      // \"foo Hello World bar\"\n```\n\n### 二、标签模板\n\n> 模板字符串可跟在函数后面，表示将模板字符串作为参数来调用该函数。这杯称作`“标签模板”`功能。\n\n```\nalert`Hello World !`;\n// 相当于alert('Hello World !');\n```\n\n**标签模板其实不是模板，而是函数调用的一种特殊形式。** “ 标签 ” 指的就是函数，紧跟在后面的模板字符串就是它的参数。\n\n使用标签模板调用函数大致分为两种情况：\n 1. 模板字符串中只有一般字符串；\n 2. 模板字符串中有嵌入的变量\n\n#### 1、模板字符串中只有一般字符串\n标签模板调用函数时，如果模板字符串中只有一般字符串，那么这个字符串就直接被当做参数传给调用的函数。\n\n```\nfunction sayHello(name) {\n    return `Hello ${name} !`;\n}\n\nsayHello`world`;        // 'Hello world !'\n// 等同于 sayHello（'world');\n```\n\n#### 2、模板字符串中有嵌入的变量\n如果模板字符里面有嵌入的变量，就不是简单的调用了。JS会自动将模板字符串先处理转换成多个参数，再调用函数。具体转换方式如下：\n\n```\nlet a = 5;\nlet b = 10;\n\nfunction tag(strArr, val1, val2) {\n    let s = `${strArr[0]}-${val1}-${strArr[1]}-${val2}-${strArr[2]}`;\n    console.log(s);\n}\n\n// 标签模板调用\ntag`Hello ${ a + b } world ${ a * b }`;\n\n// 等同于下面\n// ！！注意：字符串中的空格是会被保留下来的\ntag(['Hello ', ' world ', ''], 15, 50);\n\n// 以上两个调用输出结果都是：'Hello -15- world -50-'\n```\n也就是说，用标签模板调用函数的时候，如果模板字符里面嵌有变量，JS会将嵌入变量${...}以外的字符串（包括空格）按顺序组合成一个字符串数组，作为函数的第一个参数；再将嵌入的变量值依次作为第二个参数、第三个参数......。\n\n\n[1]: /medias/article/coding/template-string/console-templateStr.png","source":"_posts/ES6-templateString.md","raw":"---\ntitle: ES6 - 字符串的扩展\ndate: 2019-03-21 20:03:51\ncategories: 编程\ntags: ES6\nimg: /medias/article/featureimages/ES6.jpg\n---\n### 一、模板字符串\n\n> 模板字符串是增强版的字符串，用两个反引号（\\` \\`）包含来表示。\n\n#### 1、当做普通字符串使用\n\n在\\` \\`中如果只包含简单的字符串字面量，那么它和用引号（单/双引号）定义的字符串没有什么区别。\n\n```\nlet s = `Hello World !`;\nconsole.log(s);     // 'Hello World !'\n\n// 注意！！如果在模板字符串中本身就要输出反引号 ` ,请使用反斜杠（\\）转义。\nlet greeting = `\\`Hello\\` World!`;\nconsole.log(greeting);      // '`Hello` World!'\n```\n\n#### 2、模板字符串可以保留字符串的格式\n\n使用模板字符串来定义多行字符串，包括换行、缩进、多个空格等都会保留其中的格式。\n最常见的就是用来定义一个HTML模板字符串，在编码时可以很好地保留HTML字符串的换行、缩进等...，也便于阅读维护。\n\n```\nlet htmlStr = `\n    <ul>\n        <li>first</li>\n        <li>second</li>\n    </ul>\n`;\nconsole.log(htmlStr);\n\nlet s = `\n    He   l  l o,\n        W or    l d!\n`\nconsole.log(s);\n```\n以上两个例子，定义了带有格式（换行、缩进、多个空格）的模板字符串，模板字符串会保留所有的格式。在控制台输出的结果如下：\n![模板字符串输出结果][1]\n\n#### 3、模板字符串可以嵌入变量\n在以前，如果我们需要用一些固定的字符串与一些动态的变量值来拼接形成一个最终字符串，最常用的做法是像下面这样：\n\n```\nlet name = 'cao';\nlet age = 24;\nlet result = 'Hello ' + name + ',' + ' You are ' + age + ' years old !'；\n\n// 拼接一个HTML字符串\nlet basket = {\n    count: 10,\n    onSale: 3\n};\nlet resultHTML = \n    'There are <b>' + basket.count + '</b> ' +\n    'items in your basket, ' +\n    '<em>' + basket.onSale +\n    '</em> are on sale!'\n```\n\n像上面这样拼接字符串显然很麻烦。例子中还是较为简单的字符串，如果字符串内容过于复杂，甚至像HTML文本字符串带有缩进和结构，上面这样显然很容易出错——因为不仅要保证引号配对无误，还要保证拼接符（+）没有遗漏，这样显然不已阅读和维护。然而，使用模板字符串会方便而且清晰得多。\n\n上面的例子使用模板字符串也可以达到相同的效果，且方便、清晰。**模板字符串中嵌入的变量必须写在 `${ }` 的大括号中，大括号之外的字符都会被当做一般的字符串。**\n\n```\nlet name = 'cao';\nlet age = 24;\nlet result = `Hello ${name}, You are ${age} years old !`；\n\n// 拼接一个HTML字符串\nlet basket = {\n    count: 10,\n    onSale: 3\n};\nlet resultHTML = \n    `There are <b> ${basket.count} </b>\n    items in your basket,\n    <em> ${basket.onSale}\n    </em> are on sale!`;\n```\n\n`${ }`大括号内部可以放入任意的JS表达式，可以进行运算、引用对象属性或者调用函数。**如果表达式计算结果不是一个字符串，那就会自动将其转换为字符串**。比如，大括号中是一个对象，将默认调用对象的toString方法。\n\n```\nlet x = 1;\nlet y = 2;\nconsole.log(`${x} + ${y} = ${x + y}`);      // \"1 + 2 = 3\"\nconsole.log(`${x} + ${y * 2} = ${x + y * 2}`);      // \"1 + 4 = 5\"\n\nlet obj = {x: 1, y: 2};\nconsole.log(`${obj.x + obj.y}`);        // \"3\"\n\nfunction fn() {\n  return \"Hello World\";\n}\nconsole.log(`foo ${fn()} bar`);      // \"foo Hello World bar\"\n```\n\n### 二、标签模板\n\n> 模板字符串可跟在函数后面，表示将模板字符串作为参数来调用该函数。这杯称作`“标签模板”`功能。\n\n```\nalert`Hello World !`;\n// 相当于alert('Hello World !');\n```\n\n**标签模板其实不是模板，而是函数调用的一种特殊形式。** “ 标签 ” 指的就是函数，紧跟在后面的模板字符串就是它的参数。\n\n使用标签模板调用函数大致分为两种情况：\n 1. 模板字符串中只有一般字符串；\n 2. 模板字符串中有嵌入的变量\n\n#### 1、模板字符串中只有一般字符串\n标签模板调用函数时，如果模板字符串中只有一般字符串，那么这个字符串就直接被当做参数传给调用的函数。\n\n```\nfunction sayHello(name) {\n    return `Hello ${name} !`;\n}\n\nsayHello`world`;        // 'Hello world !'\n// 等同于 sayHello（'world');\n```\n\n#### 2、模板字符串中有嵌入的变量\n如果模板字符里面有嵌入的变量，就不是简单的调用了。JS会自动将模板字符串先处理转换成多个参数，再调用函数。具体转换方式如下：\n\n```\nlet a = 5;\nlet b = 10;\n\nfunction tag(strArr, val1, val2) {\n    let s = `${strArr[0]}-${val1}-${strArr[1]}-${val2}-${strArr[2]}`;\n    console.log(s);\n}\n\n// 标签模板调用\ntag`Hello ${ a + b } world ${ a * b }`;\n\n// 等同于下面\n// ！！注意：字符串中的空格是会被保留下来的\ntag(['Hello ', ' world ', ''], 15, 50);\n\n// 以上两个调用输出结果都是：'Hello -15- world -50-'\n```\n也就是说，用标签模板调用函数的时候，如果模板字符里面嵌有变量，JS会将嵌入变量${...}以外的字符串（包括空格）按顺序组合成一个字符串数组，作为函数的第一个参数；再将嵌入的变量值依次作为第二个参数、第三个参数......。\n\n\n[1]: /medias/article/coding/template-string/console-templateStr.png","slug":"ES6-templateString","published":1,"updated":"2019-05-19T11:30:37.370Z","_id":"cjvuu4mtw00129kvbp7vjycgk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、模板字符串\"><a href=\"#一、模板字符串\" class=\"headerlink\" title=\"一、模板字符串\"></a>一、模板字符串</h3><blockquote>\n<p>模板字符串是增强版的字符串，用两个反引号（` `）包含来表示。</p>\n</blockquote>\n<h4 id=\"1、当做普通字符串使用\"><a href=\"#1、当做普通字符串使用\" class=\"headerlink\" title=\"1、当做普通字符串使用\"></a>1、当做普通字符串使用</h4><p>在` `中如果只包含简单的字符串字面量，那么它和用引号（单/双引号）定义的字符串没有什么区别。</p>\n<pre><code>let s = `Hello World !`;\nconsole.log(s);     // &#39;Hello World !&#39;\n\n// 注意！！如果在模板字符串中本身就要输出反引号 ` ,请使用反斜杠（\\）转义。\nlet greeting = `\\`Hello\\` World!`;\nconsole.log(greeting);      // &#39;`Hello` World!&#39;\n</code></pre><h4 id=\"2、模板字符串可以保留字符串的格式\"><a href=\"#2、模板字符串可以保留字符串的格式\" class=\"headerlink\" title=\"2、模板字符串可以保留字符串的格式\"></a>2、模板字符串可以保留字符串的格式</h4><p>使用模板字符串来定义多行字符串，包括换行、缩进、多个空格等都会保留其中的格式。<br>最常见的就是用来定义一个HTML模板字符串，在编码时可以很好地保留HTML字符串的换行、缩进等…，也便于阅读维护。</p>\n<pre><code>let htmlStr = `\n    &lt;ul&gt;\n        &lt;li&gt;first&lt;/li&gt;\n        &lt;li&gt;second&lt;/li&gt;\n    &lt;/ul&gt;\n`;\nconsole.log(htmlStr);\n\nlet s = `\n    He   l  l o,\n        W or    l d!\n`\nconsole.log(s);\n</code></pre><p>以上两个例子，定义了带有格式（换行、缩进、多个空格）的模板字符串，模板字符串会保留所有的格式。在控制台输出的结果如下：<br><img src=\"/medias/article/coding/template-string/console-templateStr.png\" alt=\"模板字符串输出结果\"></p>\n<h4 id=\"3、模板字符串可以嵌入变量\"><a href=\"#3、模板字符串可以嵌入变量\" class=\"headerlink\" title=\"3、模板字符串可以嵌入变量\"></a>3、模板字符串可以嵌入变量</h4><p>在以前，如果我们需要用一些固定的字符串与一些动态的变量值来拼接形成一个最终字符串，最常用的做法是像下面这样：</p>\n<pre><code>let name = &#39;cao&#39;;\nlet age = 24;\nlet result = &#39;Hello &#39; + name + &#39;,&#39; + &#39; You are &#39; + age + &#39; years old !&#39;；\n\n// 拼接一个HTML字符串\nlet basket = {\n    count: 10,\n    onSale: 3\n};\nlet resultHTML = \n    &#39;There are &lt;b&gt;&#39; + basket.count + &#39;&lt;/b&gt; &#39; +\n    &#39;items in your basket, &#39; +\n    &#39;&lt;em&gt;&#39; + basket.onSale +\n    &#39;&lt;/em&gt; are on sale!&#39;\n</code></pre><p>像上面这样拼接字符串显然很麻烦。例子中还是较为简单的字符串，如果字符串内容过于复杂，甚至像HTML文本字符串带有缩进和结构，上面这样显然很容易出错——因为不仅要保证引号配对无误，还要保证拼接符（+）没有遗漏，这样显然不已阅读和维护。然而，使用模板字符串会方便而且清晰得多。</p>\n<p>上面的例子使用模板字符串也可以达到相同的效果，且方便、清晰。<strong>模板字符串中嵌入的变量必须写在 <code>${ }</code> 的大括号中，大括号之外的字符都会被当做一般的字符串。</strong></p>\n<pre><code>let name = &#39;cao&#39;;\nlet age = 24;\nlet result = `Hello ${name}, You are ${age} years old !`；\n\n// 拼接一个HTML字符串\nlet basket = {\n    count: 10,\n    onSale: 3\n};\nlet resultHTML = \n    `There are &lt;b&gt; ${basket.count} &lt;/b&gt;\n    items in your basket,\n    &lt;em&gt; ${basket.onSale}\n    &lt;/em&gt; are on sale!`;\n</code></pre><p><code>${ }</code>大括号内部可以放入任意的JS表达式，可以进行运算、引用对象属性或者调用函数。<strong>如果表达式计算结果不是一个字符串，那就会自动将其转换为字符串</strong>。比如，大括号中是一个对象，将默认调用对象的toString方法。</p>\n<pre><code>let x = 1;\nlet y = 2;\nconsole.log(`${x} + ${y} = ${x + y}`);      // &quot;1 + 2 = 3&quot;\nconsole.log(`${x} + ${y * 2} = ${x + y * 2}`);      // &quot;1 + 4 = 5&quot;\n\nlet obj = {x: 1, y: 2};\nconsole.log(`${obj.x + obj.y}`);        // &quot;3&quot;\n\nfunction fn() {\n  return &quot;Hello World&quot;;\n}\nconsole.log(`foo ${fn()} bar`);      // &quot;foo Hello World bar&quot;\n</code></pre><h3 id=\"二、标签模板\"><a href=\"#二、标签模板\" class=\"headerlink\" title=\"二、标签模板\"></a>二、标签模板</h3><blockquote>\n<p>模板字符串可跟在函数后面，表示将模板字符串作为参数来调用该函数。这杯称作<code>“标签模板”</code>功能。</p>\n</blockquote>\n<pre><code>alert`Hello World !`;\n// 相当于alert(&#39;Hello World !&#39;);\n</code></pre><p><strong>标签模板其实不是模板，而是函数调用的一种特殊形式。</strong> “ 标签 ” 指的就是函数，紧跟在后面的模板字符串就是它的参数。</p>\n<p>使用标签模板调用函数大致分为两种情况：</p>\n<ol>\n<li>模板字符串中只有一般字符串；</li>\n<li>模板字符串中有嵌入的变量</li>\n</ol>\n<h4 id=\"1、模板字符串中只有一般字符串\"><a href=\"#1、模板字符串中只有一般字符串\" class=\"headerlink\" title=\"1、模板字符串中只有一般字符串\"></a>1、模板字符串中只有一般字符串</h4><p>标签模板调用函数时，如果模板字符串中只有一般字符串，那么这个字符串就直接被当做参数传给调用的函数。</p>\n<pre><code>function sayHello(name) {\n    return `Hello ${name} !`;\n}\n\nsayHello`world`;        // &#39;Hello world !&#39;\n// 等同于 sayHello（&#39;world&#39;);\n</code></pre><h4 id=\"2、模板字符串中有嵌入的变量\"><a href=\"#2、模板字符串中有嵌入的变量\" class=\"headerlink\" title=\"2、模板字符串中有嵌入的变量\"></a>2、模板字符串中有嵌入的变量</h4><p>如果模板字符里面有嵌入的变量，就不是简单的调用了。JS会自动将模板字符串先处理转换成多个参数，再调用函数。具体转换方式如下：</p>\n<pre><code>let a = 5;\nlet b = 10;\n\nfunction tag(strArr, val1, val2) {\n    let s = `${strArr[0]}-${val1}-${strArr[1]}-${val2}-${strArr[2]}`;\n    console.log(s);\n}\n\n// 标签模板调用\ntag`Hello ${ a + b } world ${ a * b }`;\n\n// 等同于下面\n// ！！注意：字符串中的空格是会被保留下来的\ntag([&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;], 15, 50);\n\n// 以上两个调用输出结果都是：&#39;Hello -15- world -50-&#39;\n</code></pre><p>也就是说，用标签模板调用函数的时候，如果模板字符里面嵌有变量，JS会将嵌入变量${…}以外的字符串（包括空格）按顺序组合成一个字符串数组，作为函数的第一个参数；再将嵌入的变量值依次作为第二个参数、第三个参数……。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、模板字符串\"><a href=\"#一、模板字符串\" class=\"headerlink\" title=\"一、模板字符串\"></a>一、模板字符串</h3><blockquote>\n<p>模板字符串是增强版的字符串，用两个反引号（` `）包含来表示。</p>\n</blockquote>\n<h4 id=\"1、当做普通字符串使用\"><a href=\"#1、当做普通字符串使用\" class=\"headerlink\" title=\"1、当做普通字符串使用\"></a>1、当做普通字符串使用</h4><p>在` `中如果只包含简单的字符串字面量，那么它和用引号（单/双引号）定义的字符串没有什么区别。</p>\n<pre><code>let s = `Hello World !`;\nconsole.log(s);     // &#39;Hello World !&#39;\n\n// 注意！！如果在模板字符串中本身就要输出反引号 ` ,请使用反斜杠（\\）转义。\nlet greeting = `\\`Hello\\` World!`;\nconsole.log(greeting);      // &#39;`Hello` World!&#39;\n</code></pre><h4 id=\"2、模板字符串可以保留字符串的格式\"><a href=\"#2、模板字符串可以保留字符串的格式\" class=\"headerlink\" title=\"2、模板字符串可以保留字符串的格式\"></a>2、模板字符串可以保留字符串的格式</h4><p>使用模板字符串来定义多行字符串，包括换行、缩进、多个空格等都会保留其中的格式。<br>最常见的就是用来定义一个HTML模板字符串，在编码时可以很好地保留HTML字符串的换行、缩进等…，也便于阅读维护。</p>\n<pre><code>let htmlStr = `\n    &lt;ul&gt;\n        &lt;li&gt;first&lt;/li&gt;\n        &lt;li&gt;second&lt;/li&gt;\n    &lt;/ul&gt;\n`;\nconsole.log(htmlStr);\n\nlet s = `\n    He   l  l o,\n        W or    l d!\n`\nconsole.log(s);\n</code></pre><p>以上两个例子，定义了带有格式（换行、缩进、多个空格）的模板字符串，模板字符串会保留所有的格式。在控制台输出的结果如下：<br><img src=\"/medias/article/coding/template-string/console-templateStr.png\" alt=\"模板字符串输出结果\"></p>\n<h4 id=\"3、模板字符串可以嵌入变量\"><a href=\"#3、模板字符串可以嵌入变量\" class=\"headerlink\" title=\"3、模板字符串可以嵌入变量\"></a>3、模板字符串可以嵌入变量</h4><p>在以前，如果我们需要用一些固定的字符串与一些动态的变量值来拼接形成一个最终字符串，最常用的做法是像下面这样：</p>\n<pre><code>let name = &#39;cao&#39;;\nlet age = 24;\nlet result = &#39;Hello &#39; + name + &#39;,&#39; + &#39; You are &#39; + age + &#39; years old !&#39;；\n\n// 拼接一个HTML字符串\nlet basket = {\n    count: 10,\n    onSale: 3\n};\nlet resultHTML = \n    &#39;There are &lt;b&gt;&#39; + basket.count + &#39;&lt;/b&gt; &#39; +\n    &#39;items in your basket, &#39; +\n    &#39;&lt;em&gt;&#39; + basket.onSale +\n    &#39;&lt;/em&gt; are on sale!&#39;\n</code></pre><p>像上面这样拼接字符串显然很麻烦。例子中还是较为简单的字符串，如果字符串内容过于复杂，甚至像HTML文本字符串带有缩进和结构，上面这样显然很容易出错——因为不仅要保证引号配对无误，还要保证拼接符（+）没有遗漏，这样显然不已阅读和维护。然而，使用模板字符串会方便而且清晰得多。</p>\n<p>上面的例子使用模板字符串也可以达到相同的效果，且方便、清晰。<strong>模板字符串中嵌入的变量必须写在 <code>${ }</code> 的大括号中，大括号之外的字符都会被当做一般的字符串。</strong></p>\n<pre><code>let name = &#39;cao&#39;;\nlet age = 24;\nlet result = `Hello ${name}, You are ${age} years old !`；\n\n// 拼接一个HTML字符串\nlet basket = {\n    count: 10,\n    onSale: 3\n};\nlet resultHTML = \n    `There are &lt;b&gt; ${basket.count} &lt;/b&gt;\n    items in your basket,\n    &lt;em&gt; ${basket.onSale}\n    &lt;/em&gt; are on sale!`;\n</code></pre><p><code>${ }</code>大括号内部可以放入任意的JS表达式，可以进行运算、引用对象属性或者调用函数。<strong>如果表达式计算结果不是一个字符串，那就会自动将其转换为字符串</strong>。比如，大括号中是一个对象，将默认调用对象的toString方法。</p>\n<pre><code>let x = 1;\nlet y = 2;\nconsole.log(`${x} + ${y} = ${x + y}`);      // &quot;1 + 2 = 3&quot;\nconsole.log(`${x} + ${y * 2} = ${x + y * 2}`);      // &quot;1 + 4 = 5&quot;\n\nlet obj = {x: 1, y: 2};\nconsole.log(`${obj.x + obj.y}`);        // &quot;3&quot;\n\nfunction fn() {\n  return &quot;Hello World&quot;;\n}\nconsole.log(`foo ${fn()} bar`);      // &quot;foo Hello World bar&quot;\n</code></pre><h3 id=\"二、标签模板\"><a href=\"#二、标签模板\" class=\"headerlink\" title=\"二、标签模板\"></a>二、标签模板</h3><blockquote>\n<p>模板字符串可跟在函数后面，表示将模板字符串作为参数来调用该函数。这杯称作<code>“标签模板”</code>功能。</p>\n</blockquote>\n<pre><code>alert`Hello World !`;\n// 相当于alert(&#39;Hello World !&#39;);\n</code></pre><p><strong>标签模板其实不是模板，而是函数调用的一种特殊形式。</strong> “ 标签 ” 指的就是函数，紧跟在后面的模板字符串就是它的参数。</p>\n<p>使用标签模板调用函数大致分为两种情况：</p>\n<ol>\n<li>模板字符串中只有一般字符串；</li>\n<li>模板字符串中有嵌入的变量</li>\n</ol>\n<h4 id=\"1、模板字符串中只有一般字符串\"><a href=\"#1、模板字符串中只有一般字符串\" class=\"headerlink\" title=\"1、模板字符串中只有一般字符串\"></a>1、模板字符串中只有一般字符串</h4><p>标签模板调用函数时，如果模板字符串中只有一般字符串，那么这个字符串就直接被当做参数传给调用的函数。</p>\n<pre><code>function sayHello(name) {\n    return `Hello ${name} !`;\n}\n\nsayHello`world`;        // &#39;Hello world !&#39;\n// 等同于 sayHello（&#39;world&#39;);\n</code></pre><h4 id=\"2、模板字符串中有嵌入的变量\"><a href=\"#2、模板字符串中有嵌入的变量\" class=\"headerlink\" title=\"2、模板字符串中有嵌入的变量\"></a>2、模板字符串中有嵌入的变量</h4><p>如果模板字符里面有嵌入的变量，就不是简单的调用了。JS会自动将模板字符串先处理转换成多个参数，再调用函数。具体转换方式如下：</p>\n<pre><code>let a = 5;\nlet b = 10;\n\nfunction tag(strArr, val1, val2) {\n    let s = `${strArr[0]}-${val1}-${strArr[1]}-${val2}-${strArr[2]}`;\n    console.log(s);\n}\n\n// 标签模板调用\ntag`Hello ${ a + b } world ${ a * b }`;\n\n// 等同于下面\n// ！！注意：字符串中的空格是会被保留下来的\ntag([&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;], 15, 50);\n\n// 以上两个调用输出结果都是：&#39;Hello -15- world -50-&#39;\n</code></pre><p>也就是说，用标签模板调用函数的时候，如果模板字符里面嵌有变量，JS会将嵌入变量${…}以外的字符串（包括空格）按顺序组合成一个字符串数组，作为函数的第一个参数；再将嵌入的变量值依次作为第二个参数、第三个参数……。</p>\n"},{"title":"JavaScript - 事件（基础篇）","date":"2019-03-04T02:17:13.000Z","img":"/medias/article/featureimages/JavaScript.jpg","_content":"### 什么是事件\n\n> 事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。——《JavaScript高级程序设计》\n> 事件就是用户或者浏览器自身执行的某种动作。——《JavaScript高级程序设计》\n\n通俗地讲，事件就是用户与文档页面、浏览器交互时做的事情，或者浏览器自身做的某些事情。比如：当用户点击页面中某个元素触发的click事件，在文本框输入文字时的input事件，关闭当前页面的unload事件，调整浏览器窗口大小的resize事件等等...\n\n\n### 事件的作用\n\n> 事件最早是在 IE3 和 Netscape Navigator 2 中出现的，当时是作为分担服务器运算负载的一种手段。——《JavaScript高级程序设计》\n> JS与HTML之间的交互就是通过事件来实现的。——《JavaScript高级程序设计》\n\n所以很明显，总结起来，事件的核心作用有两点：\n1. 把一些允许的业务逻辑处理，数据计算在前端完成，分担服务器的运算负载。（在事件处理程序中完成）\n2. 完成JS代码和页面HTML的一些交互。\n\n我们都知道，一个HTML文档是一个树状的DOM结构。那么，试想这样一个DOM情况：\n\n```\n<div id=\"grand\">\n  <div id=\"parent\">\n    <div id=\"child\"></div>\n  </div>\n</div>\n```\n\n上面这三个依次嵌套的div元素，当点击最内层的div#child元素时，是否也算点击了嵌套在它外面的#parent、#grand元素呢？如果是，那么是先点击了哪个元素呢？到底应该是哪个元素的click事件会先触发呢？这就涉及到接下来要说的事件流的概念。\n\n### 事件流\n\n> 事件流是用来描述从页面中接收事件的顺序。——《JavaScript高级程序设计》\n\n针对上面提出的问题，事件流就是来描述：当点击了#child时，到底是#child、#parent、#grand中哪个元素先触发click事件。\n\n**事件流分为`捕获流（事件捕获）`、`冒泡流（事件冒泡）`两种。**\n\n#### 事件冒泡\n\n> 事件由最具体（嵌套层次最深）的元素最先接收，逐级向上传播，直到传播到`document`对象为止（大部分浏览器会将事件一直冒泡到`window`对象上）。\n\n上面的例子，事件冒泡的过程就如下图所示：\n![事件冒泡流][1]\n\n#### 事件捕获\n\n> 事件由最不具体（嵌套层次最外层）的元素最先接收，逐级向下传播，直到事件的目标元素为止。\n\n事件捕获的用意在于：在事件到达目标元素前捕获（拦截）它。上面的例子，事件捕获的过程就如下图所示：\n\n![事件捕获流][2]\n\n**“DOM2级事件”规范要求：事件捕获的起始对象和事件冒泡的终止对象为`document`对象，但大部分浏览器都把这一对象设置为`window`。**\n\n#### DOM事件流\n\n> “DOM2级事件”规定的事件流包括三个阶段：`事件捕获阶段、处于目标阶段、事件冒泡阶段`。\n\n所以上面的例子在“DOM2级事件流”规范中，事件触发的事件流就变成了这样：\n\n![DOM事件流][3]\n\n**这里有一些值得注意的地方：**\n1. “事件捕获阶段”到事件的目标元素紧邻的父级元素（上面的例子中就是到第**⑤**步div#parent元素）就结束了，之后事件流进入“处于目标元素阶段”，目标元素的事件被触发。\n2. 目标元素的事件处理（也就是执行事件处理程序）又被看成是“冒泡阶段”的一部分。这也就是为什么上面的图中阶段**⑥**会显示在事件冒泡阶段这一侧的原因。\n3. 之后，事件流进入事件“冒泡阶段”。\n\n尽管“DOM2级事件”规范要求：捕获阶段不会触发目标元素的事件，但大部分浏览器都会在捕获阶段也触发目标元素的事件。这样，主流浏览器的DOM事件流就变成了这样：\n\n![主流浏览器中的DOM事件流][4]\n\n这样的事件流，就导致一个结果：**在“事件捕获阶段”和“事件冒泡阶段”都可以对目标元素的事件进行处理。**\n\n我们不仅需要了解元素的事件以什么顺序触发，何时出发，更重要的是，当元素的事件被触发时，我们经常需要做点什么，这就是我们下来要讲的事件处理程序。\n\n### 事件处理程序\n\n> 当某事件发生时，响应事件的函数就叫做事件处理程序（或事件侦听器）。——《JavaScript高级程序设计》\n\n通俗地说，事件处理程序就是事件发生时我们响应事件对应要执行的JS代码。\n\n事件处理程序名由 \"on\"+事件名组成。如：onclick，onload...\n\n那如何为一个元素指定（定义/注册）事件处理程序呢？有三种方式：\n1. HTML事件处理程序（行内式）\n2. DOM0级事件处理程序\n3. DOM2级事件处理程序\n\n下面，我们对这三种方式的核心与值得注意的地方做以说明。\n\n#### HTML事件处理程序（行内式）\n\n> 所有元素支持的事件都可以用与事件处理程序名相同的HTML属性来指定，属性值就是需要执行的JS代码。\n\n如：\n```\n<button onclick=\"alert('你好！')\"></button>\n```\n\n当事件处理程序的逻辑比较复杂，代码较多时，可以将代码定义成一个函数，将属性值赋值为`函数的调用`。\n\n如：\n```\n<button onclick=\"sayHello()\"></button>\n\n<script>\n  function sayHello() {\n    alert('你好！');\n  }\n</script>\n```\n\n**以这种方式指定事件处理程序值得注意的是：**\n1. 函数是运行在元素的作用域中的，所以函数中的this指向绑定该事件的元素本身。\n2. 事件处理程序中的代码执行时，有权访问全局作用域中的任何代码。\n\n**这种方法也存在问题和局限性：**\n1. 时差问题。当绑定事件的元素渲染到页面上时，其对应的事件处理程序脚本可能还未加载，此时触发事件，可能会导致出错。\n2. HTML和JS脚本紧密耦合，不方便维护。\n\n正是存在以上原因，许多开发人员摒弃了这一方法，转而使用JavaScript的方式来定义事件处理程序。\n\n#### DOM0级事件处理程序\n\n> 将一个函数赋值给目标元素对象的事件处理程序属性。——《JavaScript高级程序设计》\n\n通俗地讲，我们获取一个DOM元素的引用（DOM对象），该对象具有一个和事件处理程序名相同的属性（或者叫方法）。将要执行的事件处理程序定义成函数，并将函数赋值给这一属性。\n如：\n```\nlet btn = document.getElementById(\"btn\"); \nbtn.onclick = function(){ \n  alert(\"你好！\"); \n}; \n```\n\n**以这种方式指定事件处理程序值得注意的是：**\n1. 函数运行在元素的作用域中，所以函数中的this指向绑定该事件的元素。（上面的例子中，this指向#btn元素）\n2. 该方法指定的事件处理程序是在`事件冒泡阶段`被调用执行的。\n3. DOM0级方式不能为同一元素指定多个事件处理程序，如果为同一元素指定了多个事件处理程序，触发事件只会执行最后一次指定的事件处理程序，因为后指定的事件处理程序会覆盖前面指定的。\n\n如果要移除以DOM0级事件处理程序方式指定的事件，将元素对象的事件属性值置为`null`即可。如：\n```\nbtn.onclick = null;\n```\n\n#### DOM2级事件处理程序\n> “DOM2级事件”中，用addEventListener()方法和 removeEventListener()方法来为DOM元素注册和移除事件处理程序。\n\n这两个方法都接受三个参数，依次是：\n1. 事件名。（String，如：'click'...）\n2. 事件处理函数。（Funtion）\n3. 是否在事件捕获阶段触发调用。（Boolean，true——捕获阶段执行，false——（默认值）冒泡阶段执行）\n\n下面是一个简单的例子：\n```\nlet btn = document.getElementById(\"myBtn\");\n// 注意，第二个参数为事件名\"click\"，没有\"on\"\nbtn.addEventListener(\"click\", function(){\n  alert('你好！');\n}, false);\n// false表示事件在冒泡阶段被触发。\n```\n\n**以这种方式指定事件处理程序值得注意的是：**\n1. 函数运行在元素的作用域中，所以函数中的this指向绑定该事件的元素。（上面的例子中，this指向#btn元素）\n2. 用addEventListener()添加的事件处理程序`必须且只能`用removeEventListener()来移除。\n3. 用removeEventListener()移除事件处理程序时，第二个参数事件处理函数，必须是添加时那个事件处理函数的引用。\n\n对于上述第3点，下面是一个错误的例子：\n```\nlet btn = document.getElementById(\"myBtn\");\nbtn.addEventListener(\"click\", function(){\n  alert('你好！');\n}, false);\n\n...\n\n/**\n * 错误！！！\n * 像下面这样移除前面为#btn元素注册的click事件是无效的，\n * 因为虽然这里的第二个参数与上面添加事件时定义的函数内容相同，\n * 但是这是两个相互独立的匿名函数，并不是同一个函数的引用。\n **/\nbtn.removeEventListener(\"click\", function(){\n  alert('你好！');\n}, false); \n```\n\n正确的移除方法，应该是这样：\n\n```\nlet btn = document.getElementById(\"myBtn\");\nlet handler = function(){\n  alert('你好！');\n};\nbtn.addEventListener(\"click\", handler, false);\n\n...\n\n// 第二个参数handler是对同一事件处理函数的引用，有效！\nbtn.removeEventListener(\"click\", handler, false);\n```\n\n**讲到这里，想来说说DOM0级和DOM2级事件处理程序之间存在的一些差别：**\n1. DOM0级方式，不能为同一元素指定多个事件处理程序，DOM2级可以指定多个。\n2. 如果采用DOM0级方式为同一元素指定了多个事件处理程序，触发事件只会执行最后一次指定的事件处理程序，因为后面指定的事件处理程序会覆盖前面指定的。\n3. DOM2级方式指定的多个事件处理程序，事件触发时会按照其添加的顺序依次执行。\n\n最后，我们来讲讲让很多前端开发者都头疼的IE浏览器 —— IE浏览器中的事件处理程序\n\n#### IE事件处理程序\n\n> IE 实现了与 DOM 中类似的两个方法：attachEvent()和 detachEvent()来为元素添加和移除事件处理程序。\n\n这两个方法都接受两个参数，依次是：\n1. 事件处理程序名。（String，如：'onclick'...，这和DOM2级不同！！！）\n2. 事件处理函数。（Funtion）\n\n上面的例子，在IE中代码如下：\n```\nlet btn = document.getElementById(\"btn\"); \n// 注意！！！这里第一个参数和DOM2级不同！！！为\"onclick\",DOM2为\"clcik\"\nbtn.attachEvent(\"onclick\", function(){ \n  alert(\"你好！\"); \n}); \n```\n\n**IE事件处理程序中值得注意的是：**\n1. 由于 IE8 及更早版本只支持事件冒泡，所以通过attachEvent()添加的事件处理程序都会被添加到`事件冒泡阶段`。\n2. 通过attachEvent()添加的事件处理程序`运行在全局作用域`（而不像DOM0级和DOM2级那样运行在元素作用域）。所以，函数中this指向`window`对象。\n3. 与 addEventListener()类似，attachEvent()方法也可以为同一个元素添加多个事件处理程序。\n4. 但是，attachEvent()方法添加的多个事件处理程序，事件触发时会按照与添加顺序相反的顺序来执行。\n5. 与removeEventListener()类似，用detachEvent()移除事件处理程序，第二个参数——事件处理函数，必须是添加时那个事件处理函数的引用。\n\n[1]: /medias/article/coding/event/event-bubbling.jpg\n[2]: /medias/article/coding/event/event-capturing.jpg\n[3]: /medias/article/coding/event/dom-event-flow.jpg\n[4]: /medias/article/coding/event/dom-event-flow-browser.jpg","source":"_posts/JavaScript-Event.md","raw":"---\ntitle: JavaScript - 事件（基础篇）\ndate: 2019-03-04 10:17:13\ncategories: 编程\ntags: JavaScript\nimg: /medias/article/featureimages/JavaScript.jpg\n---\n### 什么是事件\n\n> 事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。——《JavaScript高级程序设计》\n> 事件就是用户或者浏览器自身执行的某种动作。——《JavaScript高级程序设计》\n\n通俗地讲，事件就是用户与文档页面、浏览器交互时做的事情，或者浏览器自身做的某些事情。比如：当用户点击页面中某个元素触发的click事件，在文本框输入文字时的input事件，关闭当前页面的unload事件，调整浏览器窗口大小的resize事件等等...\n\n\n### 事件的作用\n\n> 事件最早是在 IE3 和 Netscape Navigator 2 中出现的，当时是作为分担服务器运算负载的一种手段。——《JavaScript高级程序设计》\n> JS与HTML之间的交互就是通过事件来实现的。——《JavaScript高级程序设计》\n\n所以很明显，总结起来，事件的核心作用有两点：\n1. 把一些允许的业务逻辑处理，数据计算在前端完成，分担服务器的运算负载。（在事件处理程序中完成）\n2. 完成JS代码和页面HTML的一些交互。\n\n我们都知道，一个HTML文档是一个树状的DOM结构。那么，试想这样一个DOM情况：\n\n```\n<div id=\"grand\">\n  <div id=\"parent\">\n    <div id=\"child\"></div>\n  </div>\n</div>\n```\n\n上面这三个依次嵌套的div元素，当点击最内层的div#child元素时，是否也算点击了嵌套在它外面的#parent、#grand元素呢？如果是，那么是先点击了哪个元素呢？到底应该是哪个元素的click事件会先触发呢？这就涉及到接下来要说的事件流的概念。\n\n### 事件流\n\n> 事件流是用来描述从页面中接收事件的顺序。——《JavaScript高级程序设计》\n\n针对上面提出的问题，事件流就是来描述：当点击了#child时，到底是#child、#parent、#grand中哪个元素先触发click事件。\n\n**事件流分为`捕获流（事件捕获）`、`冒泡流（事件冒泡）`两种。**\n\n#### 事件冒泡\n\n> 事件由最具体（嵌套层次最深）的元素最先接收，逐级向上传播，直到传播到`document`对象为止（大部分浏览器会将事件一直冒泡到`window`对象上）。\n\n上面的例子，事件冒泡的过程就如下图所示：\n![事件冒泡流][1]\n\n#### 事件捕获\n\n> 事件由最不具体（嵌套层次最外层）的元素最先接收，逐级向下传播，直到事件的目标元素为止。\n\n事件捕获的用意在于：在事件到达目标元素前捕获（拦截）它。上面的例子，事件捕获的过程就如下图所示：\n\n![事件捕获流][2]\n\n**“DOM2级事件”规范要求：事件捕获的起始对象和事件冒泡的终止对象为`document`对象，但大部分浏览器都把这一对象设置为`window`。**\n\n#### DOM事件流\n\n> “DOM2级事件”规定的事件流包括三个阶段：`事件捕获阶段、处于目标阶段、事件冒泡阶段`。\n\n所以上面的例子在“DOM2级事件流”规范中，事件触发的事件流就变成了这样：\n\n![DOM事件流][3]\n\n**这里有一些值得注意的地方：**\n1. “事件捕获阶段”到事件的目标元素紧邻的父级元素（上面的例子中就是到第**⑤**步div#parent元素）就结束了，之后事件流进入“处于目标元素阶段”，目标元素的事件被触发。\n2. 目标元素的事件处理（也就是执行事件处理程序）又被看成是“冒泡阶段”的一部分。这也就是为什么上面的图中阶段**⑥**会显示在事件冒泡阶段这一侧的原因。\n3. 之后，事件流进入事件“冒泡阶段”。\n\n尽管“DOM2级事件”规范要求：捕获阶段不会触发目标元素的事件，但大部分浏览器都会在捕获阶段也触发目标元素的事件。这样，主流浏览器的DOM事件流就变成了这样：\n\n![主流浏览器中的DOM事件流][4]\n\n这样的事件流，就导致一个结果：**在“事件捕获阶段”和“事件冒泡阶段”都可以对目标元素的事件进行处理。**\n\n我们不仅需要了解元素的事件以什么顺序触发，何时出发，更重要的是，当元素的事件被触发时，我们经常需要做点什么，这就是我们下来要讲的事件处理程序。\n\n### 事件处理程序\n\n> 当某事件发生时，响应事件的函数就叫做事件处理程序（或事件侦听器）。——《JavaScript高级程序设计》\n\n通俗地说，事件处理程序就是事件发生时我们响应事件对应要执行的JS代码。\n\n事件处理程序名由 \"on\"+事件名组成。如：onclick，onload...\n\n那如何为一个元素指定（定义/注册）事件处理程序呢？有三种方式：\n1. HTML事件处理程序（行内式）\n2. DOM0级事件处理程序\n3. DOM2级事件处理程序\n\n下面，我们对这三种方式的核心与值得注意的地方做以说明。\n\n#### HTML事件处理程序（行内式）\n\n> 所有元素支持的事件都可以用与事件处理程序名相同的HTML属性来指定，属性值就是需要执行的JS代码。\n\n如：\n```\n<button onclick=\"alert('你好！')\"></button>\n```\n\n当事件处理程序的逻辑比较复杂，代码较多时，可以将代码定义成一个函数，将属性值赋值为`函数的调用`。\n\n如：\n```\n<button onclick=\"sayHello()\"></button>\n\n<script>\n  function sayHello() {\n    alert('你好！');\n  }\n</script>\n```\n\n**以这种方式指定事件处理程序值得注意的是：**\n1. 函数是运行在元素的作用域中的，所以函数中的this指向绑定该事件的元素本身。\n2. 事件处理程序中的代码执行时，有权访问全局作用域中的任何代码。\n\n**这种方法也存在问题和局限性：**\n1. 时差问题。当绑定事件的元素渲染到页面上时，其对应的事件处理程序脚本可能还未加载，此时触发事件，可能会导致出错。\n2. HTML和JS脚本紧密耦合，不方便维护。\n\n正是存在以上原因，许多开发人员摒弃了这一方法，转而使用JavaScript的方式来定义事件处理程序。\n\n#### DOM0级事件处理程序\n\n> 将一个函数赋值给目标元素对象的事件处理程序属性。——《JavaScript高级程序设计》\n\n通俗地讲，我们获取一个DOM元素的引用（DOM对象），该对象具有一个和事件处理程序名相同的属性（或者叫方法）。将要执行的事件处理程序定义成函数，并将函数赋值给这一属性。\n如：\n```\nlet btn = document.getElementById(\"btn\"); \nbtn.onclick = function(){ \n  alert(\"你好！\"); \n}; \n```\n\n**以这种方式指定事件处理程序值得注意的是：**\n1. 函数运行在元素的作用域中，所以函数中的this指向绑定该事件的元素。（上面的例子中，this指向#btn元素）\n2. 该方法指定的事件处理程序是在`事件冒泡阶段`被调用执行的。\n3. DOM0级方式不能为同一元素指定多个事件处理程序，如果为同一元素指定了多个事件处理程序，触发事件只会执行最后一次指定的事件处理程序，因为后指定的事件处理程序会覆盖前面指定的。\n\n如果要移除以DOM0级事件处理程序方式指定的事件，将元素对象的事件属性值置为`null`即可。如：\n```\nbtn.onclick = null;\n```\n\n#### DOM2级事件处理程序\n> “DOM2级事件”中，用addEventListener()方法和 removeEventListener()方法来为DOM元素注册和移除事件处理程序。\n\n这两个方法都接受三个参数，依次是：\n1. 事件名。（String，如：'click'...）\n2. 事件处理函数。（Funtion）\n3. 是否在事件捕获阶段触发调用。（Boolean，true——捕获阶段执行，false——（默认值）冒泡阶段执行）\n\n下面是一个简单的例子：\n```\nlet btn = document.getElementById(\"myBtn\");\n// 注意，第二个参数为事件名\"click\"，没有\"on\"\nbtn.addEventListener(\"click\", function(){\n  alert('你好！');\n}, false);\n// false表示事件在冒泡阶段被触发。\n```\n\n**以这种方式指定事件处理程序值得注意的是：**\n1. 函数运行在元素的作用域中，所以函数中的this指向绑定该事件的元素。（上面的例子中，this指向#btn元素）\n2. 用addEventListener()添加的事件处理程序`必须且只能`用removeEventListener()来移除。\n3. 用removeEventListener()移除事件处理程序时，第二个参数事件处理函数，必须是添加时那个事件处理函数的引用。\n\n对于上述第3点，下面是一个错误的例子：\n```\nlet btn = document.getElementById(\"myBtn\");\nbtn.addEventListener(\"click\", function(){\n  alert('你好！');\n}, false);\n\n...\n\n/**\n * 错误！！！\n * 像下面这样移除前面为#btn元素注册的click事件是无效的，\n * 因为虽然这里的第二个参数与上面添加事件时定义的函数内容相同，\n * 但是这是两个相互独立的匿名函数，并不是同一个函数的引用。\n **/\nbtn.removeEventListener(\"click\", function(){\n  alert('你好！');\n}, false); \n```\n\n正确的移除方法，应该是这样：\n\n```\nlet btn = document.getElementById(\"myBtn\");\nlet handler = function(){\n  alert('你好！');\n};\nbtn.addEventListener(\"click\", handler, false);\n\n...\n\n// 第二个参数handler是对同一事件处理函数的引用，有效！\nbtn.removeEventListener(\"click\", handler, false);\n```\n\n**讲到这里，想来说说DOM0级和DOM2级事件处理程序之间存在的一些差别：**\n1. DOM0级方式，不能为同一元素指定多个事件处理程序，DOM2级可以指定多个。\n2. 如果采用DOM0级方式为同一元素指定了多个事件处理程序，触发事件只会执行最后一次指定的事件处理程序，因为后面指定的事件处理程序会覆盖前面指定的。\n3. DOM2级方式指定的多个事件处理程序，事件触发时会按照其添加的顺序依次执行。\n\n最后，我们来讲讲让很多前端开发者都头疼的IE浏览器 —— IE浏览器中的事件处理程序\n\n#### IE事件处理程序\n\n> IE 实现了与 DOM 中类似的两个方法：attachEvent()和 detachEvent()来为元素添加和移除事件处理程序。\n\n这两个方法都接受两个参数，依次是：\n1. 事件处理程序名。（String，如：'onclick'...，这和DOM2级不同！！！）\n2. 事件处理函数。（Funtion）\n\n上面的例子，在IE中代码如下：\n```\nlet btn = document.getElementById(\"btn\"); \n// 注意！！！这里第一个参数和DOM2级不同！！！为\"onclick\",DOM2为\"clcik\"\nbtn.attachEvent(\"onclick\", function(){ \n  alert(\"你好！\"); \n}); \n```\n\n**IE事件处理程序中值得注意的是：**\n1. 由于 IE8 及更早版本只支持事件冒泡，所以通过attachEvent()添加的事件处理程序都会被添加到`事件冒泡阶段`。\n2. 通过attachEvent()添加的事件处理程序`运行在全局作用域`（而不像DOM0级和DOM2级那样运行在元素作用域）。所以，函数中this指向`window`对象。\n3. 与 addEventListener()类似，attachEvent()方法也可以为同一个元素添加多个事件处理程序。\n4. 但是，attachEvent()方法添加的多个事件处理程序，事件触发时会按照与添加顺序相反的顺序来执行。\n5. 与removeEventListener()类似，用detachEvent()移除事件处理程序，第二个参数——事件处理函数，必须是添加时那个事件处理函数的引用。\n\n[1]: /medias/article/coding/event/event-bubbling.jpg\n[2]: /medias/article/coding/event/event-capturing.jpg\n[3]: /medias/article/coding/event/dom-event-flow.jpg\n[4]: /medias/article/coding/event/dom-event-flow-browser.jpg","slug":"JavaScript-Event","published":1,"updated":"2019-05-19T11:30:48.736Z","_id":"cjvuu4mud00149kvb44umslfx","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是事件\"><a href=\"#什么是事件\" class=\"headerlink\" title=\"什么是事件\"></a>什么是事件</h3><blockquote>\n<p>事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。——《JavaScript高级程序设计》<br>事件就是用户或者浏览器自身执行的某种动作。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>通俗地讲，事件就是用户与文档页面、浏览器交互时做的事情，或者浏览器自身做的某些事情。比如：当用户点击页面中某个元素触发的click事件，在文本框输入文字时的input事件，关闭当前页面的unload事件，调整浏览器窗口大小的resize事件等等…</p>\n<h3 id=\"事件的作用\"><a href=\"#事件的作用\" class=\"headerlink\" title=\"事件的作用\"></a>事件的作用</h3><blockquote>\n<p>事件最早是在 IE3 和 Netscape Navigator 2 中出现的，当时是作为分担服务器运算负载的一种手段。——《JavaScript高级程序设计》<br>JS与HTML之间的交互就是通过事件来实现的。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>所以很明显，总结起来，事件的核心作用有两点：</p>\n<ol>\n<li>把一些允许的业务逻辑处理，数据计算在前端完成，分担服务器的运算负载。（在事件处理程序中完成）</li>\n<li>完成JS代码和页面HTML的一些交互。</li>\n</ol>\n<p>我们都知道，一个HTML文档是一个树状的DOM结构。那么，试想这样一个DOM情况：</p>\n<pre><code>&lt;div id=&quot;grand&quot;&gt;\n  &lt;div id=&quot;parent&quot;&gt;\n    &lt;div id=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>上面这三个依次嵌套的div元素，当点击最内层的div#child元素时，是否也算点击了嵌套在它外面的#parent、#grand元素呢？如果是，那么是先点击了哪个元素呢？到底应该是哪个元素的click事件会先触发呢？这就涉及到接下来要说的事件流的概念。</p>\n<h3 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><blockquote>\n<p>事件流是用来描述从页面中接收事件的顺序。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>针对上面提出的问题，事件流就是来描述：当点击了#child时，到底是#child、#parent、#grand中哪个元素先触发click事件。</p>\n<p><strong>事件流分为<code>捕获流（事件捕获）</code>、<code>冒泡流（事件冒泡）</code>两种。</strong></p>\n<h4 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h4><blockquote>\n<p>事件由最具体（嵌套层次最深）的元素最先接收，逐级向上传播，直到传播到<code>document</code>对象为止（大部分浏览器会将事件一直冒泡到<code>window</code>对象上）。</p>\n</blockquote>\n<p>上面的例子，事件冒泡的过程就如下图所示：<br><img src=\"/medias/article/coding/event/event-bubbling.jpg\" alt=\"事件冒泡流\"></p>\n<h4 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h4><blockquote>\n<p>事件由最不具体（嵌套层次最外层）的元素最先接收，逐级向下传播，直到事件的目标元素为止。</p>\n</blockquote>\n<p>事件捕获的用意在于：在事件到达目标元素前捕获（拦截）它。上面的例子，事件捕获的过程就如下图所示：</p>\n<p><img src=\"/medias/article/coding/event/event-capturing.jpg\" alt=\"事件捕获流\"></p>\n<p><strong>“DOM2级事件”规范要求：事件捕获的起始对象和事件冒泡的终止对象为<code>document</code>对象，但大部分浏览器都把这一对象设置为<code>window</code>。</strong></p>\n<h4 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h4><blockquote>\n<p>“DOM2级事件”规定的事件流包括三个阶段：<code>事件捕获阶段、处于目标阶段、事件冒泡阶段</code>。</p>\n</blockquote>\n<p>所以上面的例子在“DOM2级事件流”规范中，事件触发的事件流就变成了这样：</p>\n<p><img src=\"/medias/article/coding/event/dom-event-flow.jpg\" alt=\"DOM事件流\"></p>\n<p><strong>这里有一些值得注意的地方：</strong></p>\n<ol>\n<li>“事件捕获阶段”到事件的目标元素紧邻的父级元素（上面的例子中就是到第<strong>⑤</strong>步div#parent元素）就结束了，之后事件流进入“处于目标元素阶段”，目标元素的事件被触发。</li>\n<li>目标元素的事件处理（也就是执行事件处理程序）又被看成是“冒泡阶段”的一部分。这也就是为什么上面的图中阶段<strong>⑥</strong>会显示在事件冒泡阶段这一侧的原因。</li>\n<li>之后，事件流进入事件“冒泡阶段”。</li>\n</ol>\n<p>尽管“DOM2级事件”规范要求：捕获阶段不会触发目标元素的事件，但大部分浏览器都会在捕获阶段也触发目标元素的事件。这样，主流浏览器的DOM事件流就变成了这样：</p>\n<p><img src=\"/medias/article/coding/event/dom-event-flow-browser.jpg\" alt=\"主流浏览器中的DOM事件流\"></p>\n<p>这样的事件流，就导致一个结果：<strong>在“事件捕获阶段”和“事件冒泡阶段”都可以对目标元素的事件进行处理。</strong></p>\n<p>我们不仅需要了解元素的事件以什么顺序触发，何时出发，更重要的是，当元素的事件被触发时，我们经常需要做点什么，这就是我们下来要讲的事件处理程序。</p>\n<h3 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h3><blockquote>\n<p>当某事件发生时，响应事件的函数就叫做事件处理程序（或事件侦听器）。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>通俗地说，事件处理程序就是事件发生时我们响应事件对应要执行的JS代码。</p>\n<p>事件处理程序名由 “on”+事件名组成。如：onclick，onload…</p>\n<p>那如何为一个元素指定（定义/注册）事件处理程序呢？有三种方式：</p>\n<ol>\n<li>HTML事件处理程序（行内式）</li>\n<li>DOM0级事件处理程序</li>\n<li>DOM2级事件处理程序</li>\n</ol>\n<p>下面，我们对这三种方式的核心与值得注意的地方做以说明。</p>\n<h4 id=\"HTML事件处理程序（行内式）\"><a href=\"#HTML事件处理程序（行内式）\" class=\"headerlink\" title=\"HTML事件处理程序（行内式）\"></a>HTML事件处理程序（行内式）</h4><blockquote>\n<p>所有元素支持的事件都可以用与事件处理程序名相同的HTML属性来指定，属性值就是需要执行的JS代码。</p>\n</blockquote>\n<p>如：</p>\n<pre><code>&lt;button onclick=&quot;alert(&#39;你好！&#39;)&quot;&gt;&lt;/button&gt;\n</code></pre><p>当事件处理程序的逻辑比较复杂，代码较多时，可以将代码定义成一个函数，将属性值赋值为<code>函数的调用</code>。</p>\n<p>如：</p>\n<pre><code>&lt;button onclick=&quot;sayHello()&quot;&gt;&lt;/button&gt;\n\n&lt;script&gt;\n  function sayHello() {\n    alert(&#39;你好！&#39;);\n  }\n&lt;/script&gt;\n</code></pre><p><strong>以这种方式指定事件处理程序值得注意的是：</strong></p>\n<ol>\n<li>函数是运行在元素的作用域中的，所以函数中的this指向绑定该事件的元素本身。</li>\n<li>事件处理程序中的代码执行时，有权访问全局作用域中的任何代码。</li>\n</ol>\n<p><strong>这种方法也存在问题和局限性：</strong></p>\n<ol>\n<li>时差问题。当绑定事件的元素渲染到页面上时，其对应的事件处理程序脚本可能还未加载，此时触发事件，可能会导致出错。</li>\n<li>HTML和JS脚本紧密耦合，不方便维护。</li>\n</ol>\n<p>正是存在以上原因，许多开发人员摒弃了这一方法，转而使用JavaScript的方式来定义事件处理程序。</p>\n<h4 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a>DOM0级事件处理程序</h4><blockquote>\n<p>将一个函数赋值给目标元素对象的事件处理程序属性。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>通俗地讲，我们获取一个DOM元素的引用（DOM对象），该对象具有一个和事件处理程序名相同的属性（或者叫方法）。将要执行的事件处理程序定义成函数，并将函数赋值给这一属性。<br>如：</p>\n<pre><code>let btn = document.getElementById(&quot;btn&quot;); \nbtn.onclick = function(){ \n  alert(&quot;你好！&quot;); \n}; \n</code></pre><p><strong>以这种方式指定事件处理程序值得注意的是：</strong></p>\n<ol>\n<li>函数运行在元素的作用域中，所以函数中的this指向绑定该事件的元素。（上面的例子中，this指向#btn元素）</li>\n<li>该方法指定的事件处理程序是在<code>事件冒泡阶段</code>被调用执行的。</li>\n<li>DOM0级方式不能为同一元素指定多个事件处理程序，如果为同一元素指定了多个事件处理程序，触发事件只会执行最后一次指定的事件处理程序，因为后指定的事件处理程序会覆盖前面指定的。</li>\n</ol>\n<p>如果要移除以DOM0级事件处理程序方式指定的事件，将元素对象的事件属性值置为<code>null</code>即可。如：</p>\n<pre><code>btn.onclick = null;\n</code></pre><h4 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h4><blockquote>\n<p>“DOM2级事件”中，用addEventListener()方法和 removeEventListener()方法来为DOM元素注册和移除事件处理程序。</p>\n</blockquote>\n<p>这两个方法都接受三个参数，依次是：</p>\n<ol>\n<li>事件名。（String，如：’click’…）</li>\n<li>事件处理函数。（Funtion）</li>\n<li>是否在事件捕获阶段触发调用。（Boolean，true——捕获阶段执行，false——（默认值）冒泡阶段执行）</li>\n</ol>\n<p>下面是一个简单的例子：</p>\n<pre><code>let btn = document.getElementById(&quot;myBtn&quot;);\n// 注意，第二个参数为事件名&quot;click&quot;，没有&quot;on&quot;\nbtn.addEventListener(&quot;click&quot;, function(){\n  alert(&#39;你好！&#39;);\n}, false);\n// false表示事件在冒泡阶段被触发。\n</code></pre><p><strong>以这种方式指定事件处理程序值得注意的是：</strong></p>\n<ol>\n<li>函数运行在元素的作用域中，所以函数中的this指向绑定该事件的元素。（上面的例子中，this指向#btn元素）</li>\n<li>用addEventListener()添加的事件处理程序<code>必须且只能</code>用removeEventListener()来移除。</li>\n<li>用removeEventListener()移除事件处理程序时，第二个参数事件处理函数，必须是添加时那个事件处理函数的引用。</li>\n</ol>\n<p>对于上述第3点，下面是一个错误的例子：</p>\n<pre><code>let btn = document.getElementById(&quot;myBtn&quot;);\nbtn.addEventListener(&quot;click&quot;, function(){\n  alert(&#39;你好！&#39;);\n}, false);\n\n...\n\n/**\n * 错误！！！\n * 像下面这样移除前面为#btn元素注册的click事件是无效的，\n * 因为虽然这里的第二个参数与上面添加事件时定义的函数内容相同，\n * 但是这是两个相互独立的匿名函数，并不是同一个函数的引用。\n **/\nbtn.removeEventListener(&quot;click&quot;, function(){\n  alert(&#39;你好！&#39;);\n}, false); \n</code></pre><p>正确的移除方法，应该是这样：</p>\n<pre><code>let btn = document.getElementById(&quot;myBtn&quot;);\nlet handler = function(){\n  alert(&#39;你好！&#39;);\n};\nbtn.addEventListener(&quot;click&quot;, handler, false);\n\n...\n\n// 第二个参数handler是对同一事件处理函数的引用，有效！\nbtn.removeEventListener(&quot;click&quot;, handler, false);\n</code></pre><p><strong>讲到这里，想来说说DOM0级和DOM2级事件处理程序之间存在的一些差别：</strong></p>\n<ol>\n<li>DOM0级方式，不能为同一元素指定多个事件处理程序，DOM2级可以指定多个。</li>\n<li>如果采用DOM0级方式为同一元素指定了多个事件处理程序，触发事件只会执行最后一次指定的事件处理程序，因为后面指定的事件处理程序会覆盖前面指定的。</li>\n<li>DOM2级方式指定的多个事件处理程序，事件触发时会按照其添加的顺序依次执行。</li>\n</ol>\n<p>最后，我们来讲讲让很多前端开发者都头疼的IE浏览器 —— IE浏览器中的事件处理程序</p>\n<h4 id=\"IE事件处理程序\"><a href=\"#IE事件处理程序\" class=\"headerlink\" title=\"IE事件处理程序\"></a>IE事件处理程序</h4><blockquote>\n<p>IE 实现了与 DOM 中类似的两个方法：attachEvent()和 detachEvent()来为元素添加和移除事件处理程序。</p>\n</blockquote>\n<p>这两个方法都接受两个参数，依次是：</p>\n<ol>\n<li>事件处理程序名。（String，如：’onclick’…，这和DOM2级不同！！！）</li>\n<li>事件处理函数。（Funtion）</li>\n</ol>\n<p>上面的例子，在IE中代码如下：</p>\n<pre><code>let btn = document.getElementById(&quot;btn&quot;); \n// 注意！！！这里第一个参数和DOM2级不同！！！为&quot;onclick&quot;,DOM2为&quot;clcik&quot;\nbtn.attachEvent(&quot;onclick&quot;, function(){ \n  alert(&quot;你好！&quot;); \n}); \n</code></pre><p><strong>IE事件处理程序中值得注意的是：</strong></p>\n<ol>\n<li>由于 IE8 及更早版本只支持事件冒泡，所以通过attachEvent()添加的事件处理程序都会被添加到<code>事件冒泡阶段</code>。</li>\n<li>通过attachEvent()添加的事件处理程序<code>运行在全局作用域</code>（而不像DOM0级和DOM2级那样运行在元素作用域）。所以，函数中this指向<code>window</code>对象。</li>\n<li>与 addEventListener()类似，attachEvent()方法也可以为同一个元素添加多个事件处理程序。</li>\n<li>但是，attachEvent()方法添加的多个事件处理程序，事件触发时会按照与添加顺序相反的顺序来执行。</li>\n<li>与removeEventListener()类似，用detachEvent()移除事件处理程序，第二个参数——事件处理函数，必须是添加时那个事件处理函数的引用。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是事件\"><a href=\"#什么是事件\" class=\"headerlink\" title=\"什么是事件\"></a>什么是事件</h3><blockquote>\n<p>事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。——《JavaScript高级程序设计》<br>事件就是用户或者浏览器自身执行的某种动作。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>通俗地讲，事件就是用户与文档页面、浏览器交互时做的事情，或者浏览器自身做的某些事情。比如：当用户点击页面中某个元素触发的click事件，在文本框输入文字时的input事件，关闭当前页面的unload事件，调整浏览器窗口大小的resize事件等等…</p>\n<h3 id=\"事件的作用\"><a href=\"#事件的作用\" class=\"headerlink\" title=\"事件的作用\"></a>事件的作用</h3><blockquote>\n<p>事件最早是在 IE3 和 Netscape Navigator 2 中出现的，当时是作为分担服务器运算负载的一种手段。——《JavaScript高级程序设计》<br>JS与HTML之间的交互就是通过事件来实现的。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>所以很明显，总结起来，事件的核心作用有两点：</p>\n<ol>\n<li>把一些允许的业务逻辑处理，数据计算在前端完成，分担服务器的运算负载。（在事件处理程序中完成）</li>\n<li>完成JS代码和页面HTML的一些交互。</li>\n</ol>\n<p>我们都知道，一个HTML文档是一个树状的DOM结构。那么，试想这样一个DOM情况：</p>\n<pre><code>&lt;div id=&quot;grand&quot;&gt;\n  &lt;div id=&quot;parent&quot;&gt;\n    &lt;div id=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>上面这三个依次嵌套的div元素，当点击最内层的div#child元素时，是否也算点击了嵌套在它外面的#parent、#grand元素呢？如果是，那么是先点击了哪个元素呢？到底应该是哪个元素的click事件会先触发呢？这就涉及到接下来要说的事件流的概念。</p>\n<h3 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><blockquote>\n<p>事件流是用来描述从页面中接收事件的顺序。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>针对上面提出的问题，事件流就是来描述：当点击了#child时，到底是#child、#parent、#grand中哪个元素先触发click事件。</p>\n<p><strong>事件流分为<code>捕获流（事件捕获）</code>、<code>冒泡流（事件冒泡）</code>两种。</strong></p>\n<h4 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h4><blockquote>\n<p>事件由最具体（嵌套层次最深）的元素最先接收，逐级向上传播，直到传播到<code>document</code>对象为止（大部分浏览器会将事件一直冒泡到<code>window</code>对象上）。</p>\n</blockquote>\n<p>上面的例子，事件冒泡的过程就如下图所示：<br><img src=\"/medias/article/coding/event/event-bubbling.jpg\" alt=\"事件冒泡流\"></p>\n<h4 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h4><blockquote>\n<p>事件由最不具体（嵌套层次最外层）的元素最先接收，逐级向下传播，直到事件的目标元素为止。</p>\n</blockquote>\n<p>事件捕获的用意在于：在事件到达目标元素前捕获（拦截）它。上面的例子，事件捕获的过程就如下图所示：</p>\n<p><img src=\"/medias/article/coding/event/event-capturing.jpg\" alt=\"事件捕获流\"></p>\n<p><strong>“DOM2级事件”规范要求：事件捕获的起始对象和事件冒泡的终止对象为<code>document</code>对象，但大部分浏览器都把这一对象设置为<code>window</code>。</strong></p>\n<h4 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h4><blockquote>\n<p>“DOM2级事件”规定的事件流包括三个阶段：<code>事件捕获阶段、处于目标阶段、事件冒泡阶段</code>。</p>\n</blockquote>\n<p>所以上面的例子在“DOM2级事件流”规范中，事件触发的事件流就变成了这样：</p>\n<p><img src=\"/medias/article/coding/event/dom-event-flow.jpg\" alt=\"DOM事件流\"></p>\n<p><strong>这里有一些值得注意的地方：</strong></p>\n<ol>\n<li>“事件捕获阶段”到事件的目标元素紧邻的父级元素（上面的例子中就是到第<strong>⑤</strong>步div#parent元素）就结束了，之后事件流进入“处于目标元素阶段”，目标元素的事件被触发。</li>\n<li>目标元素的事件处理（也就是执行事件处理程序）又被看成是“冒泡阶段”的一部分。这也就是为什么上面的图中阶段<strong>⑥</strong>会显示在事件冒泡阶段这一侧的原因。</li>\n<li>之后，事件流进入事件“冒泡阶段”。</li>\n</ol>\n<p>尽管“DOM2级事件”规范要求：捕获阶段不会触发目标元素的事件，但大部分浏览器都会在捕获阶段也触发目标元素的事件。这样，主流浏览器的DOM事件流就变成了这样：</p>\n<p><img src=\"/medias/article/coding/event/dom-event-flow-browser.jpg\" alt=\"主流浏览器中的DOM事件流\"></p>\n<p>这样的事件流，就导致一个结果：<strong>在“事件捕获阶段”和“事件冒泡阶段”都可以对目标元素的事件进行处理。</strong></p>\n<p>我们不仅需要了解元素的事件以什么顺序触发，何时出发，更重要的是，当元素的事件被触发时，我们经常需要做点什么，这就是我们下来要讲的事件处理程序。</p>\n<h3 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h3><blockquote>\n<p>当某事件发生时，响应事件的函数就叫做事件处理程序（或事件侦听器）。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>通俗地说，事件处理程序就是事件发生时我们响应事件对应要执行的JS代码。</p>\n<p>事件处理程序名由 “on”+事件名组成。如：onclick，onload…</p>\n<p>那如何为一个元素指定（定义/注册）事件处理程序呢？有三种方式：</p>\n<ol>\n<li>HTML事件处理程序（行内式）</li>\n<li>DOM0级事件处理程序</li>\n<li>DOM2级事件处理程序</li>\n</ol>\n<p>下面，我们对这三种方式的核心与值得注意的地方做以说明。</p>\n<h4 id=\"HTML事件处理程序（行内式）\"><a href=\"#HTML事件处理程序（行内式）\" class=\"headerlink\" title=\"HTML事件处理程序（行内式）\"></a>HTML事件处理程序（行内式）</h4><blockquote>\n<p>所有元素支持的事件都可以用与事件处理程序名相同的HTML属性来指定，属性值就是需要执行的JS代码。</p>\n</blockquote>\n<p>如：</p>\n<pre><code>&lt;button onclick=&quot;alert(&#39;你好！&#39;)&quot;&gt;&lt;/button&gt;\n</code></pre><p>当事件处理程序的逻辑比较复杂，代码较多时，可以将代码定义成一个函数，将属性值赋值为<code>函数的调用</code>。</p>\n<p>如：</p>\n<pre><code>&lt;button onclick=&quot;sayHello()&quot;&gt;&lt;/button&gt;\n\n&lt;script&gt;\n  function sayHello() {\n    alert(&#39;你好！&#39;);\n  }\n&lt;/script&gt;\n</code></pre><p><strong>以这种方式指定事件处理程序值得注意的是：</strong></p>\n<ol>\n<li>函数是运行在元素的作用域中的，所以函数中的this指向绑定该事件的元素本身。</li>\n<li>事件处理程序中的代码执行时，有权访问全局作用域中的任何代码。</li>\n</ol>\n<p><strong>这种方法也存在问题和局限性：</strong></p>\n<ol>\n<li>时差问题。当绑定事件的元素渲染到页面上时，其对应的事件处理程序脚本可能还未加载，此时触发事件，可能会导致出错。</li>\n<li>HTML和JS脚本紧密耦合，不方便维护。</li>\n</ol>\n<p>正是存在以上原因，许多开发人员摒弃了这一方法，转而使用JavaScript的方式来定义事件处理程序。</p>\n<h4 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a>DOM0级事件处理程序</h4><blockquote>\n<p>将一个函数赋值给目标元素对象的事件处理程序属性。——《JavaScript高级程序设计》</p>\n</blockquote>\n<p>通俗地讲，我们获取一个DOM元素的引用（DOM对象），该对象具有一个和事件处理程序名相同的属性（或者叫方法）。将要执行的事件处理程序定义成函数，并将函数赋值给这一属性。<br>如：</p>\n<pre><code>let btn = document.getElementById(&quot;btn&quot;); \nbtn.onclick = function(){ \n  alert(&quot;你好！&quot;); \n}; \n</code></pre><p><strong>以这种方式指定事件处理程序值得注意的是：</strong></p>\n<ol>\n<li>函数运行在元素的作用域中，所以函数中的this指向绑定该事件的元素。（上面的例子中，this指向#btn元素）</li>\n<li>该方法指定的事件处理程序是在<code>事件冒泡阶段</code>被调用执行的。</li>\n<li>DOM0级方式不能为同一元素指定多个事件处理程序，如果为同一元素指定了多个事件处理程序，触发事件只会执行最后一次指定的事件处理程序，因为后指定的事件处理程序会覆盖前面指定的。</li>\n</ol>\n<p>如果要移除以DOM0级事件处理程序方式指定的事件，将元素对象的事件属性值置为<code>null</code>即可。如：</p>\n<pre><code>btn.onclick = null;\n</code></pre><h4 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h4><blockquote>\n<p>“DOM2级事件”中，用addEventListener()方法和 removeEventListener()方法来为DOM元素注册和移除事件处理程序。</p>\n</blockquote>\n<p>这两个方法都接受三个参数，依次是：</p>\n<ol>\n<li>事件名。（String，如：’click’…）</li>\n<li>事件处理函数。（Funtion）</li>\n<li>是否在事件捕获阶段触发调用。（Boolean，true——捕获阶段执行，false——（默认值）冒泡阶段执行）</li>\n</ol>\n<p>下面是一个简单的例子：</p>\n<pre><code>let btn = document.getElementById(&quot;myBtn&quot;);\n// 注意，第二个参数为事件名&quot;click&quot;，没有&quot;on&quot;\nbtn.addEventListener(&quot;click&quot;, function(){\n  alert(&#39;你好！&#39;);\n}, false);\n// false表示事件在冒泡阶段被触发。\n</code></pre><p><strong>以这种方式指定事件处理程序值得注意的是：</strong></p>\n<ol>\n<li>函数运行在元素的作用域中，所以函数中的this指向绑定该事件的元素。（上面的例子中，this指向#btn元素）</li>\n<li>用addEventListener()添加的事件处理程序<code>必须且只能</code>用removeEventListener()来移除。</li>\n<li>用removeEventListener()移除事件处理程序时，第二个参数事件处理函数，必须是添加时那个事件处理函数的引用。</li>\n</ol>\n<p>对于上述第3点，下面是一个错误的例子：</p>\n<pre><code>let btn = document.getElementById(&quot;myBtn&quot;);\nbtn.addEventListener(&quot;click&quot;, function(){\n  alert(&#39;你好！&#39;);\n}, false);\n\n...\n\n/**\n * 错误！！！\n * 像下面这样移除前面为#btn元素注册的click事件是无效的，\n * 因为虽然这里的第二个参数与上面添加事件时定义的函数内容相同，\n * 但是这是两个相互独立的匿名函数，并不是同一个函数的引用。\n **/\nbtn.removeEventListener(&quot;click&quot;, function(){\n  alert(&#39;你好！&#39;);\n}, false); \n</code></pre><p>正确的移除方法，应该是这样：</p>\n<pre><code>let btn = document.getElementById(&quot;myBtn&quot;);\nlet handler = function(){\n  alert(&#39;你好！&#39;);\n};\nbtn.addEventListener(&quot;click&quot;, handler, false);\n\n...\n\n// 第二个参数handler是对同一事件处理函数的引用，有效！\nbtn.removeEventListener(&quot;click&quot;, handler, false);\n</code></pre><p><strong>讲到这里，想来说说DOM0级和DOM2级事件处理程序之间存在的一些差别：</strong></p>\n<ol>\n<li>DOM0级方式，不能为同一元素指定多个事件处理程序，DOM2级可以指定多个。</li>\n<li>如果采用DOM0级方式为同一元素指定了多个事件处理程序，触发事件只会执行最后一次指定的事件处理程序，因为后面指定的事件处理程序会覆盖前面指定的。</li>\n<li>DOM2级方式指定的多个事件处理程序，事件触发时会按照其添加的顺序依次执行。</li>\n</ol>\n<p>最后，我们来讲讲让很多前端开发者都头疼的IE浏览器 —— IE浏览器中的事件处理程序</p>\n<h4 id=\"IE事件处理程序\"><a href=\"#IE事件处理程序\" class=\"headerlink\" title=\"IE事件处理程序\"></a>IE事件处理程序</h4><blockquote>\n<p>IE 实现了与 DOM 中类似的两个方法：attachEvent()和 detachEvent()来为元素添加和移除事件处理程序。</p>\n</blockquote>\n<p>这两个方法都接受两个参数，依次是：</p>\n<ol>\n<li>事件处理程序名。（String，如：’onclick’…，这和DOM2级不同！！！）</li>\n<li>事件处理函数。（Funtion）</li>\n</ol>\n<p>上面的例子，在IE中代码如下：</p>\n<pre><code>let btn = document.getElementById(&quot;btn&quot;); \n// 注意！！！这里第一个参数和DOM2级不同！！！为&quot;onclick&quot;,DOM2为&quot;clcik&quot;\nbtn.attachEvent(&quot;onclick&quot;, function(){ \n  alert(&quot;你好！&quot;); \n}); \n</code></pre><p><strong>IE事件处理程序中值得注意的是：</strong></p>\n<ol>\n<li>由于 IE8 及更早版本只支持事件冒泡，所以通过attachEvent()添加的事件处理程序都会被添加到<code>事件冒泡阶段</code>。</li>\n<li>通过attachEvent()添加的事件处理程序<code>运行在全局作用域</code>（而不像DOM0级和DOM2级那样运行在元素作用域）。所以，函数中this指向<code>window</code>对象。</li>\n<li>与 addEventListener()类似，attachEvent()方法也可以为同一个元素添加多个事件处理程序。</li>\n<li>但是，attachEvent()方法添加的多个事件处理程序，事件触发时会按照与添加顺序相反的顺序来执行。</li>\n<li>与removeEventListener()类似，用detachEvent()移除事件处理程序，第二个参数——事件处理函数，必须是添加时那个事件处理函数的引用。</li>\n</ol>\n"},{"title":"JavaScript - Function","date":"2019-03-12T02:46:11.000Z","img":"/medias/article/featureimages/JavaScript.jpg","_content":"> JavaScript中的函数一直是一个很有讨论性的话题点。函数本身不仅仅是一个引用类型——所有函数都是Function类型的实例，更重要的是因为函数还会涉及到执行环境、作用域、闭包以及让人头疼的this等等...这篇文章我们来回顾一下与函数有关的一些值得注意的地方。\n\n### 函数的定义\n\n定义函数有三种方法：\n1、函数声明 2、函数表达式 3、使用Function构造函数\n\n#### 函数声明\n\n```\nfunction sum (num1, num2) {\n  return num1 + num2;\n}\n```\n\n#### 函数表达式\n\n用函数表达式的方式定义函数，就是将一个匿名函数赋值给一个变量。\n文章开头说道，所有函数都是Function类型的一个实例，所以，这个变量（引用类型）最终就是一个指向该匿名函数实例的指针。\n\n```\nvar sum = function (num1, num2) {\n  return num1 + num2;\n}\n```\n\n以上两种函数定义方式，从效果上看是相同的，几乎相差无几，但它们之间还是存在一些细微的差别，我们稍后再讲。\n\n#### 使用Function构造函数\n\n因为所有函数都是Function类型的实例，所以调用`new Function()`构造函数，也可以定义函数。\n\n```\n// 构造函数中最后一个参数始终都被看成是函数体，而前面的所有参数则是枚举出的函数的形参。\nvar sum = new Function(\"num1\", \"num2\", \"return num1 +num2\")\n```\n\n实际开发中，很少使用这种方法定义函数。原因主要有两点：\n1. 定义不方便。如果函数体代码过长，使用这种方法，因为最后一个参数是字符串格式，不易换行高亮等。\n2. 这种方式会导致解析两次代码，影响性能。第一次是解析常规JS代码，第二次是解析传入构造函数中的字符串。\n\n#### 函数声明和函数表达式的区别（重要）\n\n虽然函数声明和函数表达式都可以定义函数，但是解析器在处理他们的时候还是存在着一些差别。\n\n当解析器进入一个执行环境并向环境中加载数据的时候，对于用函数声明定义的函数，解析器会率先读取他们，保证在执行任何代码之前，就可以访问调用这些函数。\n\n```\nconsole.log(sum(10, 20));   // 30\n\n// ...省略很多代代码\n\n// 函数声明定义函数\nfunction sum (num1, num2) {\n  return sum1 + sum2;\n}\n```\n\n上面的例子，先调用函数`sum`，在之后的代码中再声明该函数，完全没有问题。因为，**在执行`sum(10, 20)`以及其他任何代码之前，JS解析器会先将`sum`函数的声明定义提升到当前执行环境的代码树的最顶端，保证之后随时可以访问调用该函数。这个过程叫做——`函数声明提升`。**\n\n而用函数表达式定义函数的方式，不会存在函数声明提升的过程。也就是说，必须等到解析器执行到函数表达式定义所在的代码行之后，函数才算被定义成功，之后才可以访问调用该函数。\n\n像下面这样调用`sum`函数式，代码运行后会报错，因为**用函数表达式定义函数不会存在函数声明提升的过程**，必须在函数表达式定义函数代码之后才能调用。\n\n```\nconsole.log(sum(10,10));    // 这里会报错\n\n// ...省略很多代代码\n\n// 函数表达式定义函数\nvar sum = function(num1, num2){ \n  return num1 + num2; \n};\n```\n\n**对于函数声明和函数表达式定义函数的区别，还有一点一定要更加注意：**\n\n**首先，JavaScript是支持动态创建函数的。**也就是根据不同的需求或条件来动态定义函数。但是，动态创建须采用函数表达式的方式定义，使用函数声明方式会导致意想不到的错误。\n\n来看下面的例子：\n\n```\nfunction createFunction () {\n  // 像下面这样根据某个条件来动态声明一个函数很容易导致问题或出错！！！\n\n  // arguments是函数中内置的类数组对象，本文后面会讲到\n  if (arguments.length > 1) {\n    function sum() {\n      // ...一种定义\n    }\n  } else {\n    function() {\n      // ...另一种定义\n    }\n  }\n}\n```\n\n实际上，上面的动态定义函数的方式，在ECMAScript中属于无效语法，JavaScript引擎会尝试修正错误，将其转换为合理的状态。但问题是浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第二个声明，忽略`arguments.length`条件；Firefox会在`arguments.length > 1`时返回第一个函数声明，因此这种使用方式很危险！！！\n\n但是利用函数表达式的方式来动态定义函数，是可以达到预想的目的的！！\n\n上面的例子改写成下这样，就不会出现问题。\n\n```\nvar sum = null;   // 也可以不赋初始值\nfunction createFunction () {\n  // arguments是函数中内置的类数组对象，本文后面会讲到\n  if (arguments.length > 1) {\n    sum = function() {\n      // ...一种定义\n    }\n  } else {\n    sum = function() {\n      // ...另一种定义\n    }\n  }\n}\n```\n\n仔细想想，这样能够完美达到目的也很好理解。我们先定义了一个`sum`变量，最后根据`arguments.length`是否大于0定义两个不同的匿名函数并赋值给`sum`变量，这和根据不同条件来为一个变量赋不同的值本质是完全一样的，当然不会有任何问题。\n\n### JS中函数没有重载（重要）\n\n不论是以哪种方式定义的函数，**函数名实际就是一个指向函数实例的指针，本质上函数名和普通变量没什么区别。**这也就好理解为什么JS中没有函数重载的概念。\n看下面的例子：\n```\nfunction sum(num){ \n  return num + 100; \n} \nfunction sum(num) { \n  return num + 200; \n} \nconsole.log(addSomeNumber(100));    // 300 \n```\n\n上面这个例子中声明了两个同名`sum`函数，而结果则是后面的函数定义覆盖了前面的函数，更准确的说`sum`现在指向后面定义的函数。\n\n为什么会这样？就是因为JS中函数不存在重载，其实上面的代码实际上与下面的代码没有什么区别。\n```\nvar sum = function (num){ \n  return num + 100; \n}; \nsum = function (num) { \n  return num + 200; \n}; \nconsole.log(sum(100));    // 300 \n```\n\n原来，当第一次定义`sum`之后，`sum`指向第一个函数实例，当再次定义第二个函数时，`sum`会重新指向第二个函数实例。\n\n### 函数可以作为值传递\n\n我们多次强调函数名实际就是一个指向函数实例的指针，本质上函数名和普通变量没什么区别。既然是变量，那么函数也就可以作为另一些函数的参数和返回值来传递。\n\n#### 函数作为参数\n```\nfunction add (num) {\n  return num + 100;\n}\n\nfunction cal(calFun, num) {\n  return calFun(num);\n}\n\ncal(add, 100);    // 200\n```\n上面的例子中，函数`cal`接收一个函数和一个数值作为参数，最终返回值是第二个参数（数值）在第一个参数（函数）中的执行结果。而第一个参数——函数中具体做的事情，就是将传入的数值参数与100求和。\n\n#### 函数作为返回值\n\n此外，函数也可以作为另一个函数的返回值。对上面例子进行稍微的改造，也可达到相同的目的。\n\n```\nfunction cal() {\n  function add (num) {\n    return num + 100;\n  }\n  // 这里返回的是add函数名，而不是函数的调用\n  return add;\n}\n\nlet res = cal();\n\nres(100);     // 200\n```\n\n上面的例子，当执行`cal()`时，该函数返回了内部声明的`add`函数，我们将返回值再赋值给`res`变量，此时，`res`也就指向了`add`所指向的函数实例。之后我们再调用`res`函数，并传入参数，得到的结果也是`200`。\n\n### 函数的内部属性\n\n#### arguments\n\n函数中包含一个内置的`arguments`对象，它是一个类数组对象，包含着所有传入函数中的参数，你可以用数组下标的方式访问其中的元素。\n\n```\nfunction show (a, b, c, d, e, f) {\n  console.log(arguments[4]);    // 输出[333, 444]\n}\n\nshow(1, '222', true, null, [333, 444], {aa: 'aaa', b: function() {}});\n```\n\n`arguments`对象自己还有一个`callee`属性，该属性是一个指针，指向拥有这个`arguments`对象的函数，也就是这个`arguments`所属的函数。\n\n#### arguments.callee\n\n在递归函数中，我们可能会经常使用到`arguments.callee`这一属性。以一个经典的阶乘函数为例:\n\n```\n// 递归阶乘的经典例子\nfunction factorial(num) {\n  if (num <=1) {\n    return 1;\n  } else {\n    return num * factorial(num-1);\n  }\n}\n\n// 递归阶乘的优化例子\nfunction factorial(num) {\n  if (num <=1) {\n    return 1;\n  } else {\n    // 这里的arguments.callee又指向factorial函数\n    return num * arguments.callee(num-1);\n  }\n}\n```\n\n这样写的好处是，当指向该递归函数的函数名发生变化时，递归函数也能顺利执行完成。如果采用上面经典例子的写法，当出现如下代码逻辑时，就会出错。\n```\n// 将另一变量指向递归阶乘函数\nvar trueFactorial = factorial;\n\n// 改写原递归阶乘函数\nfactorial = function() {\n  return 0;\n};\n\nconsole.log(trueFactorial(5));\nconsole.log(factorial(5));\n```\n\n如果以递归阶乘的经典例子定义`factorial`函数，那么`trueFactorial(5)`这一行就会出错。因为执行到`trueFactorial`函数内部`return num * factorial(num-1);`代码时，`factorial`实际已经指向了`function() {return 0;}`，计算结果就会出错。但用递归阶乘的优化例子就不会出现这个问题，因为执行`trueFactorial(5)`语句时，`arguments.callee`指向`trueFactorial`函数。\n\n#### arguments.callee.caller\n\n`arguments.callee.caller`这个属性中保存着调用当前函数的函数的引用。也就是说我们可以通过该属性来获得`arguments`所属于的那个函数（`arguments.callee`）是在哪个函数（`arguments.callee.caller`）中被调用的。\n\n需要注意的是：如果是在全局作用域中调用的当前函数，`arguments.callee.caller`的获取到的值为**`null`**。\n\nES5后，我们也可以直接通过函数实例对象的caller属性来直接访问这一属性。\n```\nfunction outer(){\n  inner();\n}\n\nfunction inner(){\n  console.log(inner.caller);    // 打印出outer函数的源码。因为inner是在outer中被调用的\n}\n\nouter();\n```\n\n也可以这么写：\n\n```\nfunction outer(){\n  inner();\n}\n\nfunction inner(){\n  alert(arguments.callee.caller);   // 打印出outer函数的源码。\n}\n\nouter();\n```\n\n\n#### this\n函数中另一个有意思又令人头疼的属性——this，由于this指向涉及的内容较多，情况稍微复杂一些，我们将会专门用一篇文章来探讨this相关问题。\n但概括来说，**this引用的是函数据以执行的环境对象**。当this所在的函数在全局作用域中调用时，它指向window对象；当作为对象的方法调用时，它指向该对象。","source":"_posts/JavaScript-Function.md","raw":"---\ntitle: JavaScript - Function\ndate: 2019-03-12 10:46:11\ncategories: 编程\ntags:\n- JavaScript\n- Function\nimg: /medias/article/featureimages/JavaScript.jpg\n---\n> JavaScript中的函数一直是一个很有讨论性的话题点。函数本身不仅仅是一个引用类型——所有函数都是Function类型的实例，更重要的是因为函数还会涉及到执行环境、作用域、闭包以及让人头疼的this等等...这篇文章我们来回顾一下与函数有关的一些值得注意的地方。\n\n### 函数的定义\n\n定义函数有三种方法：\n1、函数声明 2、函数表达式 3、使用Function构造函数\n\n#### 函数声明\n\n```\nfunction sum (num1, num2) {\n  return num1 + num2;\n}\n```\n\n#### 函数表达式\n\n用函数表达式的方式定义函数，就是将一个匿名函数赋值给一个变量。\n文章开头说道，所有函数都是Function类型的一个实例，所以，这个变量（引用类型）最终就是一个指向该匿名函数实例的指针。\n\n```\nvar sum = function (num1, num2) {\n  return num1 + num2;\n}\n```\n\n以上两种函数定义方式，从效果上看是相同的，几乎相差无几，但它们之间还是存在一些细微的差别，我们稍后再讲。\n\n#### 使用Function构造函数\n\n因为所有函数都是Function类型的实例，所以调用`new Function()`构造函数，也可以定义函数。\n\n```\n// 构造函数中最后一个参数始终都被看成是函数体，而前面的所有参数则是枚举出的函数的形参。\nvar sum = new Function(\"num1\", \"num2\", \"return num1 +num2\")\n```\n\n实际开发中，很少使用这种方法定义函数。原因主要有两点：\n1. 定义不方便。如果函数体代码过长，使用这种方法，因为最后一个参数是字符串格式，不易换行高亮等。\n2. 这种方式会导致解析两次代码，影响性能。第一次是解析常规JS代码，第二次是解析传入构造函数中的字符串。\n\n#### 函数声明和函数表达式的区别（重要）\n\n虽然函数声明和函数表达式都可以定义函数，但是解析器在处理他们的时候还是存在着一些差别。\n\n当解析器进入一个执行环境并向环境中加载数据的时候，对于用函数声明定义的函数，解析器会率先读取他们，保证在执行任何代码之前，就可以访问调用这些函数。\n\n```\nconsole.log(sum(10, 20));   // 30\n\n// ...省略很多代代码\n\n// 函数声明定义函数\nfunction sum (num1, num2) {\n  return sum1 + sum2;\n}\n```\n\n上面的例子，先调用函数`sum`，在之后的代码中再声明该函数，完全没有问题。因为，**在执行`sum(10, 20)`以及其他任何代码之前，JS解析器会先将`sum`函数的声明定义提升到当前执行环境的代码树的最顶端，保证之后随时可以访问调用该函数。这个过程叫做——`函数声明提升`。**\n\n而用函数表达式定义函数的方式，不会存在函数声明提升的过程。也就是说，必须等到解析器执行到函数表达式定义所在的代码行之后，函数才算被定义成功，之后才可以访问调用该函数。\n\n像下面这样调用`sum`函数式，代码运行后会报错，因为**用函数表达式定义函数不会存在函数声明提升的过程**，必须在函数表达式定义函数代码之后才能调用。\n\n```\nconsole.log(sum(10,10));    // 这里会报错\n\n// ...省略很多代代码\n\n// 函数表达式定义函数\nvar sum = function(num1, num2){ \n  return num1 + num2; \n};\n```\n\n**对于函数声明和函数表达式定义函数的区别，还有一点一定要更加注意：**\n\n**首先，JavaScript是支持动态创建函数的。**也就是根据不同的需求或条件来动态定义函数。但是，动态创建须采用函数表达式的方式定义，使用函数声明方式会导致意想不到的错误。\n\n来看下面的例子：\n\n```\nfunction createFunction () {\n  // 像下面这样根据某个条件来动态声明一个函数很容易导致问题或出错！！！\n\n  // arguments是函数中内置的类数组对象，本文后面会讲到\n  if (arguments.length > 1) {\n    function sum() {\n      // ...一种定义\n    }\n  } else {\n    function() {\n      // ...另一种定义\n    }\n  }\n}\n```\n\n实际上，上面的动态定义函数的方式，在ECMAScript中属于无效语法，JavaScript引擎会尝试修正错误，将其转换为合理的状态。但问题是浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第二个声明，忽略`arguments.length`条件；Firefox会在`arguments.length > 1`时返回第一个函数声明，因此这种使用方式很危险！！！\n\n但是利用函数表达式的方式来动态定义函数，是可以达到预想的目的的！！\n\n上面的例子改写成下这样，就不会出现问题。\n\n```\nvar sum = null;   // 也可以不赋初始值\nfunction createFunction () {\n  // arguments是函数中内置的类数组对象，本文后面会讲到\n  if (arguments.length > 1) {\n    sum = function() {\n      // ...一种定义\n    }\n  } else {\n    sum = function() {\n      // ...另一种定义\n    }\n  }\n}\n```\n\n仔细想想，这样能够完美达到目的也很好理解。我们先定义了一个`sum`变量，最后根据`arguments.length`是否大于0定义两个不同的匿名函数并赋值给`sum`变量，这和根据不同条件来为一个变量赋不同的值本质是完全一样的，当然不会有任何问题。\n\n### JS中函数没有重载（重要）\n\n不论是以哪种方式定义的函数，**函数名实际就是一个指向函数实例的指针，本质上函数名和普通变量没什么区别。**这也就好理解为什么JS中没有函数重载的概念。\n看下面的例子：\n```\nfunction sum(num){ \n  return num + 100; \n} \nfunction sum(num) { \n  return num + 200; \n} \nconsole.log(addSomeNumber(100));    // 300 \n```\n\n上面这个例子中声明了两个同名`sum`函数，而结果则是后面的函数定义覆盖了前面的函数，更准确的说`sum`现在指向后面定义的函数。\n\n为什么会这样？就是因为JS中函数不存在重载，其实上面的代码实际上与下面的代码没有什么区别。\n```\nvar sum = function (num){ \n  return num + 100; \n}; \nsum = function (num) { \n  return num + 200; \n}; \nconsole.log(sum(100));    // 300 \n```\n\n原来，当第一次定义`sum`之后，`sum`指向第一个函数实例，当再次定义第二个函数时，`sum`会重新指向第二个函数实例。\n\n### 函数可以作为值传递\n\n我们多次强调函数名实际就是一个指向函数实例的指针，本质上函数名和普通变量没什么区别。既然是变量，那么函数也就可以作为另一些函数的参数和返回值来传递。\n\n#### 函数作为参数\n```\nfunction add (num) {\n  return num + 100;\n}\n\nfunction cal(calFun, num) {\n  return calFun(num);\n}\n\ncal(add, 100);    // 200\n```\n上面的例子中，函数`cal`接收一个函数和一个数值作为参数，最终返回值是第二个参数（数值）在第一个参数（函数）中的执行结果。而第一个参数——函数中具体做的事情，就是将传入的数值参数与100求和。\n\n#### 函数作为返回值\n\n此外，函数也可以作为另一个函数的返回值。对上面例子进行稍微的改造，也可达到相同的目的。\n\n```\nfunction cal() {\n  function add (num) {\n    return num + 100;\n  }\n  // 这里返回的是add函数名，而不是函数的调用\n  return add;\n}\n\nlet res = cal();\n\nres(100);     // 200\n```\n\n上面的例子，当执行`cal()`时，该函数返回了内部声明的`add`函数，我们将返回值再赋值给`res`变量，此时，`res`也就指向了`add`所指向的函数实例。之后我们再调用`res`函数，并传入参数，得到的结果也是`200`。\n\n### 函数的内部属性\n\n#### arguments\n\n函数中包含一个内置的`arguments`对象，它是一个类数组对象，包含着所有传入函数中的参数，你可以用数组下标的方式访问其中的元素。\n\n```\nfunction show (a, b, c, d, e, f) {\n  console.log(arguments[4]);    // 输出[333, 444]\n}\n\nshow(1, '222', true, null, [333, 444], {aa: 'aaa', b: function() {}});\n```\n\n`arguments`对象自己还有一个`callee`属性，该属性是一个指针，指向拥有这个`arguments`对象的函数，也就是这个`arguments`所属的函数。\n\n#### arguments.callee\n\n在递归函数中，我们可能会经常使用到`arguments.callee`这一属性。以一个经典的阶乘函数为例:\n\n```\n// 递归阶乘的经典例子\nfunction factorial(num) {\n  if (num <=1) {\n    return 1;\n  } else {\n    return num * factorial(num-1);\n  }\n}\n\n// 递归阶乘的优化例子\nfunction factorial(num) {\n  if (num <=1) {\n    return 1;\n  } else {\n    // 这里的arguments.callee又指向factorial函数\n    return num * arguments.callee(num-1);\n  }\n}\n```\n\n这样写的好处是，当指向该递归函数的函数名发生变化时，递归函数也能顺利执行完成。如果采用上面经典例子的写法，当出现如下代码逻辑时，就会出错。\n```\n// 将另一变量指向递归阶乘函数\nvar trueFactorial = factorial;\n\n// 改写原递归阶乘函数\nfactorial = function() {\n  return 0;\n};\n\nconsole.log(trueFactorial(5));\nconsole.log(factorial(5));\n```\n\n如果以递归阶乘的经典例子定义`factorial`函数，那么`trueFactorial(5)`这一行就会出错。因为执行到`trueFactorial`函数内部`return num * factorial(num-1);`代码时，`factorial`实际已经指向了`function() {return 0;}`，计算结果就会出错。但用递归阶乘的优化例子就不会出现这个问题，因为执行`trueFactorial(5)`语句时，`arguments.callee`指向`trueFactorial`函数。\n\n#### arguments.callee.caller\n\n`arguments.callee.caller`这个属性中保存着调用当前函数的函数的引用。也就是说我们可以通过该属性来获得`arguments`所属于的那个函数（`arguments.callee`）是在哪个函数（`arguments.callee.caller`）中被调用的。\n\n需要注意的是：如果是在全局作用域中调用的当前函数，`arguments.callee.caller`的获取到的值为**`null`**。\n\nES5后，我们也可以直接通过函数实例对象的caller属性来直接访问这一属性。\n```\nfunction outer(){\n  inner();\n}\n\nfunction inner(){\n  console.log(inner.caller);    // 打印出outer函数的源码。因为inner是在outer中被调用的\n}\n\nouter();\n```\n\n也可以这么写：\n\n```\nfunction outer(){\n  inner();\n}\n\nfunction inner(){\n  alert(arguments.callee.caller);   // 打印出outer函数的源码。\n}\n\nouter();\n```\n\n\n#### this\n函数中另一个有意思又令人头疼的属性——this，由于this指向涉及的内容较多，情况稍微复杂一些，我们将会专门用一篇文章来探讨this相关问题。\n但概括来说，**this引用的是函数据以执行的环境对象**。当this所在的函数在全局作用域中调用时，它指向window对象；当作为对象的方法调用时，它指向该对象。","slug":"JavaScript-Function","published":1,"updated":"2019-05-19T11:30:53.192Z","_id":"cjvuu4muj00179kvbobh9w1zo","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>JavaScript中的函数一直是一个很有讨论性的话题点。函数本身不仅仅是一个引用类型——所有函数都是Function类型的实例，更重要的是因为函数还会涉及到执行环境、作用域、闭包以及让人头疼的this等等…这篇文章我们来回顾一下与函数有关的一些值得注意的地方。</p>\n</blockquote>\n<h3 id=\"函数的定义\"><a href=\"#函数的定义\" class=\"headerlink\" title=\"函数的定义\"></a>函数的定义</h3><p>定义函数有三种方法：<br>1、函数声明 2、函数表达式 3、使用Function构造函数</p>\n<h4 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h4><pre><code>function sum (num1, num2) {\n  return num1 + num2;\n}\n</code></pre><h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><p>用函数表达式的方式定义函数，就是将一个匿名函数赋值给一个变量。<br>文章开头说道，所有函数都是Function类型的一个实例，所以，这个变量（引用类型）最终就是一个指向该匿名函数实例的指针。</p>\n<pre><code>var sum = function (num1, num2) {\n  return num1 + num2;\n}\n</code></pre><p>以上两种函数定义方式，从效果上看是相同的，几乎相差无几，但它们之间还是存在一些细微的差别，我们稍后再讲。</p>\n<h4 id=\"使用Function构造函数\"><a href=\"#使用Function构造函数\" class=\"headerlink\" title=\"使用Function构造函数\"></a>使用Function构造函数</h4><p>因为所有函数都是Function类型的实例，所以调用<code>new Function()</code>构造函数，也可以定义函数。</p>\n<pre><code>// 构造函数中最后一个参数始终都被看成是函数体，而前面的所有参数则是枚举出的函数的形参。\nvar sum = new Function(&quot;num1&quot;, &quot;num2&quot;, &quot;return num1 +num2&quot;)\n</code></pre><p>实际开发中，很少使用这种方法定义函数。原因主要有两点：</p>\n<ol>\n<li>定义不方便。如果函数体代码过长，使用这种方法，因为最后一个参数是字符串格式，不易换行高亮等。</li>\n<li>这种方式会导致解析两次代码，影响性能。第一次是解析常规JS代码，第二次是解析传入构造函数中的字符串。</li>\n</ol>\n<h4 id=\"函数声明和函数表达式的区别（重要）\"><a href=\"#函数声明和函数表达式的区别（重要）\" class=\"headerlink\" title=\"函数声明和函数表达式的区别（重要）\"></a>函数声明和函数表达式的区别（重要）</h4><p>虽然函数声明和函数表达式都可以定义函数，但是解析器在处理他们的时候还是存在着一些差别。</p>\n<p>当解析器进入一个执行环境并向环境中加载数据的时候，对于用函数声明定义的函数，解析器会率先读取他们，保证在执行任何代码之前，就可以访问调用这些函数。</p>\n<pre><code>console.log(sum(10, 20));   // 30\n\n// ...省略很多代代码\n\n// 函数声明定义函数\nfunction sum (num1, num2) {\n  return sum1 + sum2;\n}\n</code></pre><p>上面的例子，先调用函数<code>sum</code>，在之后的代码中再声明该函数，完全没有问题。因为，<strong>在执行<code>sum(10, 20)</code>以及其他任何代码之前，JS解析器会先将<code>sum</code>函数的声明定义提升到当前执行环境的代码树的最顶端，保证之后随时可以访问调用该函数。这个过程叫做——<code>函数声明提升</code>。</strong></p>\n<p>而用函数表达式定义函数的方式，不会存在函数声明提升的过程。也就是说，必须等到解析器执行到函数表达式定义所在的代码行之后，函数才算被定义成功，之后才可以访问调用该函数。</p>\n<p>像下面这样调用<code>sum</code>函数式，代码运行后会报错，因为<strong>用函数表达式定义函数不会存在函数声明提升的过程</strong>，必须在函数表达式定义函数代码之后才能调用。</p>\n<pre><code>console.log(sum(10,10));    // 这里会报错\n\n// ...省略很多代代码\n\n// 函数表达式定义函数\nvar sum = function(num1, num2){ \n  return num1 + num2; \n};\n</code></pre><p><strong>对于函数声明和函数表达式定义函数的区别，还有一点一定要更加注意：</strong></p>\n<p><strong>首先，JavaScript是支持动态创建函数的。</strong>也就是根据不同的需求或条件来动态定义函数。但是，动态创建须采用函数表达式的方式定义，使用函数声明方式会导致意想不到的错误。</p>\n<p>来看下面的例子：</p>\n<pre><code>function createFunction () {\n  // 像下面这样根据某个条件来动态声明一个函数很容易导致问题或出错！！！\n\n  // arguments是函数中内置的类数组对象，本文后面会讲到\n  if (arguments.length &gt; 1) {\n    function sum() {\n      // ...一种定义\n    }\n  } else {\n    function() {\n      // ...另一种定义\n    }\n  }\n}\n</code></pre><p>实际上，上面的动态定义函数的方式，在ECMAScript中属于无效语法，JavaScript引擎会尝试修正错误，将其转换为合理的状态。但问题是浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第二个声明，忽略<code>arguments.length</code>条件；Firefox会在<code>arguments.length &gt; 1</code>时返回第一个函数声明，因此这种使用方式很危险！！！</p>\n<p>但是利用函数表达式的方式来动态定义函数，是可以达到预想的目的的！！</p>\n<p>上面的例子改写成下这样，就不会出现问题。</p>\n<pre><code>var sum = null;   // 也可以不赋初始值\nfunction createFunction () {\n  // arguments是函数中内置的类数组对象，本文后面会讲到\n  if (arguments.length &gt; 1) {\n    sum = function() {\n      // ...一种定义\n    }\n  } else {\n    sum = function() {\n      // ...另一种定义\n    }\n  }\n}\n</code></pre><p>仔细想想，这样能够完美达到目的也很好理解。我们先定义了一个<code>sum</code>变量，最后根据<code>arguments.length</code>是否大于0定义两个不同的匿名函数并赋值给<code>sum</code>变量，这和根据不同条件来为一个变量赋不同的值本质是完全一样的，当然不会有任何问题。</p>\n<h3 id=\"JS中函数没有重载（重要）\"><a href=\"#JS中函数没有重载（重要）\" class=\"headerlink\" title=\"JS中函数没有重载（重要）\"></a>JS中函数没有重载（重要）</h3><p>不论是以哪种方式定义的函数，<strong>函数名实际就是一个指向函数实例的指针，本质上函数名和普通变量没什么区别。</strong>这也就好理解为什么JS中没有函数重载的概念。<br>看下面的例子：</p>\n<pre><code>function sum(num){ \n  return num + 100; \n} \nfunction sum(num) { \n  return num + 200; \n} \nconsole.log(addSomeNumber(100));    // 300 \n</code></pre><p>上面这个例子中声明了两个同名<code>sum</code>函数，而结果则是后面的函数定义覆盖了前面的函数，更准确的说<code>sum</code>现在指向后面定义的函数。</p>\n<p>为什么会这样？就是因为JS中函数不存在重载，其实上面的代码实际上与下面的代码没有什么区别。</p>\n<pre><code>var sum = function (num){ \n  return num + 100; \n}; \nsum = function (num) { \n  return num + 200; \n}; \nconsole.log(sum(100));    // 300 \n</code></pre><p>原来，当第一次定义<code>sum</code>之后，<code>sum</code>指向第一个函数实例，当再次定义第二个函数时，<code>sum</code>会重新指向第二个函数实例。</p>\n<h3 id=\"函数可以作为值传递\"><a href=\"#函数可以作为值传递\" class=\"headerlink\" title=\"函数可以作为值传递\"></a>函数可以作为值传递</h3><p>我们多次强调函数名实际就是一个指向函数实例的指针，本质上函数名和普通变量没什么区别。既然是变量，那么函数也就可以作为另一些函数的参数和返回值来传递。</p>\n<h4 id=\"函数作为参数\"><a href=\"#函数作为参数\" class=\"headerlink\" title=\"函数作为参数\"></a>函数作为参数</h4><pre><code>function add (num) {\n  return num + 100;\n}\n\nfunction cal(calFun, num) {\n  return calFun(num);\n}\n\ncal(add, 100);    // 200\n</code></pre><p>上面的例子中，函数<code>cal</code>接收一个函数和一个数值作为参数，最终返回值是第二个参数（数值）在第一个参数（函数）中的执行结果。而第一个参数——函数中具体做的事情，就是将传入的数值参数与100求和。</p>\n<h4 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h4><p>此外，函数也可以作为另一个函数的返回值。对上面例子进行稍微的改造，也可达到相同的目的。</p>\n<pre><code>function cal() {\n  function add (num) {\n    return num + 100;\n  }\n  // 这里返回的是add函数名，而不是函数的调用\n  return add;\n}\n\nlet res = cal();\n\nres(100);     // 200\n</code></pre><p>上面的例子，当执行<code>cal()</code>时，该函数返回了内部声明的<code>add</code>函数，我们将返回值再赋值给<code>res</code>变量，此时，<code>res</code>也就指向了<code>add</code>所指向的函数实例。之后我们再调用<code>res</code>函数，并传入参数，得到的结果也是<code>200</code>。</p>\n<h3 id=\"函数的内部属性\"><a href=\"#函数的内部属性\" class=\"headerlink\" title=\"函数的内部属性\"></a>函数的内部属性</h3><h4 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h4><p>函数中包含一个内置的<code>arguments</code>对象，它是一个类数组对象，包含着所有传入函数中的参数，你可以用数组下标的方式访问其中的元素。</p>\n<pre><code>function show (a, b, c, d, e, f) {\n  console.log(arguments[4]);    // 输出[333, 444]\n}\n\nshow(1, &#39;222&#39;, true, null, [333, 444], {aa: &#39;aaa&#39;, b: function() {}});\n</code></pre><p><code>arguments</code>对象自己还有一个<code>callee</code>属性，该属性是一个指针，指向拥有这个<code>arguments</code>对象的函数，也就是这个<code>arguments</code>所属的函数。</p>\n<h4 id=\"arguments-callee\"><a href=\"#arguments-callee\" class=\"headerlink\" title=\"arguments.callee\"></a>arguments.callee</h4><p>在递归函数中，我们可能会经常使用到<code>arguments.callee</code>这一属性。以一个经典的阶乘函数为例:</p>\n<pre><code>// 递归阶乘的经典例子\nfunction factorial(num) {\n  if (num &lt;=1) {\n    return 1;\n  } else {\n    return num * factorial(num-1);\n  }\n}\n\n// 递归阶乘的优化例子\nfunction factorial(num) {\n  if (num &lt;=1) {\n    return 1;\n  } else {\n    // 这里的arguments.callee又指向factorial函数\n    return num * arguments.callee(num-1);\n  }\n}\n</code></pre><p>这样写的好处是，当指向该递归函数的函数名发生变化时，递归函数也能顺利执行完成。如果采用上面经典例子的写法，当出现如下代码逻辑时，就会出错。</p>\n<pre><code>// 将另一变量指向递归阶乘函数\nvar trueFactorial = factorial;\n\n// 改写原递归阶乘函数\nfactorial = function() {\n  return 0;\n};\n\nconsole.log(trueFactorial(5));\nconsole.log(factorial(5));\n</code></pre><p>如果以递归阶乘的经典例子定义<code>factorial</code>函数，那么<code>trueFactorial(5)</code>这一行就会出错。因为执行到<code>trueFactorial</code>函数内部<code>return num * factorial(num-1);</code>代码时，<code>factorial</code>实际已经指向了<code>function() {return 0;}</code>，计算结果就会出错。但用递归阶乘的优化例子就不会出现这个问题，因为执行<code>trueFactorial(5)</code>语句时，<code>arguments.callee</code>指向<code>trueFactorial</code>函数。</p>\n<h4 id=\"arguments-callee-caller\"><a href=\"#arguments-callee-caller\" class=\"headerlink\" title=\"arguments.callee.caller\"></a>arguments.callee.caller</h4><p><code>arguments.callee.caller</code>这个属性中保存着调用当前函数的函数的引用。也就是说我们可以通过该属性来获得<code>arguments</code>所属于的那个函数（<code>arguments.callee</code>）是在哪个函数（<code>arguments.callee.caller</code>）中被调用的。</p>\n<p>需要注意的是：如果是在全局作用域中调用的当前函数，<code>arguments.callee.caller</code>的获取到的值为<strong><code>null</code></strong>。</p>\n<p>ES5后，我们也可以直接通过函数实例对象的caller属性来直接访问这一属性。</p>\n<pre><code>function outer(){\n  inner();\n}\n\nfunction inner(){\n  console.log(inner.caller);    // 打印出outer函数的源码。因为inner是在outer中被调用的\n}\n\nouter();\n</code></pre><p>也可以这么写：</p>\n<pre><code>function outer(){\n  inner();\n}\n\nfunction inner(){\n  alert(arguments.callee.caller);   // 打印出outer函数的源码。\n}\n\nouter();\n</code></pre><h4 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h4><p>函数中另一个有意思又令人头疼的属性——this，由于this指向涉及的内容较多，情况稍微复杂一些，我们将会专门用一篇文章来探讨this相关问题。<br>但概括来说，<strong>this引用的是函数据以执行的环境对象</strong>。当this所在的函数在全局作用域中调用时，它指向window对象；当作为对象的方法调用时，它指向该对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>JavaScript中的函数一直是一个很有讨论性的话题点。函数本身不仅仅是一个引用类型——所有函数都是Function类型的实例，更重要的是因为函数还会涉及到执行环境、作用域、闭包以及让人头疼的this等等…这篇文章我们来回顾一下与函数有关的一些值得注意的地方。</p>\n</blockquote>\n<h3 id=\"函数的定义\"><a href=\"#函数的定义\" class=\"headerlink\" title=\"函数的定义\"></a>函数的定义</h3><p>定义函数有三种方法：<br>1、函数声明 2、函数表达式 3、使用Function构造函数</p>\n<h4 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h4><pre><code>function sum (num1, num2) {\n  return num1 + num2;\n}\n</code></pre><h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><p>用函数表达式的方式定义函数，就是将一个匿名函数赋值给一个变量。<br>文章开头说道，所有函数都是Function类型的一个实例，所以，这个变量（引用类型）最终就是一个指向该匿名函数实例的指针。</p>\n<pre><code>var sum = function (num1, num2) {\n  return num1 + num2;\n}\n</code></pre><p>以上两种函数定义方式，从效果上看是相同的，几乎相差无几，但它们之间还是存在一些细微的差别，我们稍后再讲。</p>\n<h4 id=\"使用Function构造函数\"><a href=\"#使用Function构造函数\" class=\"headerlink\" title=\"使用Function构造函数\"></a>使用Function构造函数</h4><p>因为所有函数都是Function类型的实例，所以调用<code>new Function()</code>构造函数，也可以定义函数。</p>\n<pre><code>// 构造函数中最后一个参数始终都被看成是函数体，而前面的所有参数则是枚举出的函数的形参。\nvar sum = new Function(&quot;num1&quot;, &quot;num2&quot;, &quot;return num1 +num2&quot;)\n</code></pre><p>实际开发中，很少使用这种方法定义函数。原因主要有两点：</p>\n<ol>\n<li>定义不方便。如果函数体代码过长，使用这种方法，因为最后一个参数是字符串格式，不易换行高亮等。</li>\n<li>这种方式会导致解析两次代码，影响性能。第一次是解析常规JS代码，第二次是解析传入构造函数中的字符串。</li>\n</ol>\n<h4 id=\"函数声明和函数表达式的区别（重要）\"><a href=\"#函数声明和函数表达式的区别（重要）\" class=\"headerlink\" title=\"函数声明和函数表达式的区别（重要）\"></a>函数声明和函数表达式的区别（重要）</h4><p>虽然函数声明和函数表达式都可以定义函数，但是解析器在处理他们的时候还是存在着一些差别。</p>\n<p>当解析器进入一个执行环境并向环境中加载数据的时候，对于用函数声明定义的函数，解析器会率先读取他们，保证在执行任何代码之前，就可以访问调用这些函数。</p>\n<pre><code>console.log(sum(10, 20));   // 30\n\n// ...省略很多代代码\n\n// 函数声明定义函数\nfunction sum (num1, num2) {\n  return sum1 + sum2;\n}\n</code></pre><p>上面的例子，先调用函数<code>sum</code>，在之后的代码中再声明该函数，完全没有问题。因为，<strong>在执行<code>sum(10, 20)</code>以及其他任何代码之前，JS解析器会先将<code>sum</code>函数的声明定义提升到当前执行环境的代码树的最顶端，保证之后随时可以访问调用该函数。这个过程叫做——<code>函数声明提升</code>。</strong></p>\n<p>而用函数表达式定义函数的方式，不会存在函数声明提升的过程。也就是说，必须等到解析器执行到函数表达式定义所在的代码行之后，函数才算被定义成功，之后才可以访问调用该函数。</p>\n<p>像下面这样调用<code>sum</code>函数式，代码运行后会报错，因为<strong>用函数表达式定义函数不会存在函数声明提升的过程</strong>，必须在函数表达式定义函数代码之后才能调用。</p>\n<pre><code>console.log(sum(10,10));    // 这里会报错\n\n// ...省略很多代代码\n\n// 函数表达式定义函数\nvar sum = function(num1, num2){ \n  return num1 + num2; \n};\n</code></pre><p><strong>对于函数声明和函数表达式定义函数的区别，还有一点一定要更加注意：</strong></p>\n<p><strong>首先，JavaScript是支持动态创建函数的。</strong>也就是根据不同的需求或条件来动态定义函数。但是，动态创建须采用函数表达式的方式定义，使用函数声明方式会导致意想不到的错误。</p>\n<p>来看下面的例子：</p>\n<pre><code>function createFunction () {\n  // 像下面这样根据某个条件来动态声明一个函数很容易导致问题或出错！！！\n\n  // arguments是函数中内置的类数组对象，本文后面会讲到\n  if (arguments.length &gt; 1) {\n    function sum() {\n      // ...一种定义\n    }\n  } else {\n    function() {\n      // ...另一种定义\n    }\n  }\n}\n</code></pre><p>实际上，上面的动态定义函数的方式，在ECMAScript中属于无效语法，JavaScript引擎会尝试修正错误，将其转换为合理的状态。但问题是浏览器尝试修正错误的做法并不一致。大多数浏览器会返回第二个声明，忽略<code>arguments.length</code>条件；Firefox会在<code>arguments.length &gt; 1</code>时返回第一个函数声明，因此这种使用方式很危险！！！</p>\n<p>但是利用函数表达式的方式来动态定义函数，是可以达到预想的目的的！！</p>\n<p>上面的例子改写成下这样，就不会出现问题。</p>\n<pre><code>var sum = null;   // 也可以不赋初始值\nfunction createFunction () {\n  // arguments是函数中内置的类数组对象，本文后面会讲到\n  if (arguments.length &gt; 1) {\n    sum = function() {\n      // ...一种定义\n    }\n  } else {\n    sum = function() {\n      // ...另一种定义\n    }\n  }\n}\n</code></pre><p>仔细想想，这样能够完美达到目的也很好理解。我们先定义了一个<code>sum</code>变量，最后根据<code>arguments.length</code>是否大于0定义两个不同的匿名函数并赋值给<code>sum</code>变量，这和根据不同条件来为一个变量赋不同的值本质是完全一样的，当然不会有任何问题。</p>\n<h3 id=\"JS中函数没有重载（重要）\"><a href=\"#JS中函数没有重载（重要）\" class=\"headerlink\" title=\"JS中函数没有重载（重要）\"></a>JS中函数没有重载（重要）</h3><p>不论是以哪种方式定义的函数，<strong>函数名实际就是一个指向函数实例的指针，本质上函数名和普通变量没什么区别。</strong>这也就好理解为什么JS中没有函数重载的概念。<br>看下面的例子：</p>\n<pre><code>function sum(num){ \n  return num + 100; \n} \nfunction sum(num) { \n  return num + 200; \n} \nconsole.log(addSomeNumber(100));    // 300 \n</code></pre><p>上面这个例子中声明了两个同名<code>sum</code>函数，而结果则是后面的函数定义覆盖了前面的函数，更准确的说<code>sum</code>现在指向后面定义的函数。</p>\n<p>为什么会这样？就是因为JS中函数不存在重载，其实上面的代码实际上与下面的代码没有什么区别。</p>\n<pre><code>var sum = function (num){ \n  return num + 100; \n}; \nsum = function (num) { \n  return num + 200; \n}; \nconsole.log(sum(100));    // 300 \n</code></pre><p>原来，当第一次定义<code>sum</code>之后，<code>sum</code>指向第一个函数实例，当再次定义第二个函数时，<code>sum</code>会重新指向第二个函数实例。</p>\n<h3 id=\"函数可以作为值传递\"><a href=\"#函数可以作为值传递\" class=\"headerlink\" title=\"函数可以作为值传递\"></a>函数可以作为值传递</h3><p>我们多次强调函数名实际就是一个指向函数实例的指针，本质上函数名和普通变量没什么区别。既然是变量，那么函数也就可以作为另一些函数的参数和返回值来传递。</p>\n<h4 id=\"函数作为参数\"><a href=\"#函数作为参数\" class=\"headerlink\" title=\"函数作为参数\"></a>函数作为参数</h4><pre><code>function add (num) {\n  return num + 100;\n}\n\nfunction cal(calFun, num) {\n  return calFun(num);\n}\n\ncal(add, 100);    // 200\n</code></pre><p>上面的例子中，函数<code>cal</code>接收一个函数和一个数值作为参数，最终返回值是第二个参数（数值）在第一个参数（函数）中的执行结果。而第一个参数——函数中具体做的事情，就是将传入的数值参数与100求和。</p>\n<h4 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h4><p>此外，函数也可以作为另一个函数的返回值。对上面例子进行稍微的改造，也可达到相同的目的。</p>\n<pre><code>function cal() {\n  function add (num) {\n    return num + 100;\n  }\n  // 这里返回的是add函数名，而不是函数的调用\n  return add;\n}\n\nlet res = cal();\n\nres(100);     // 200\n</code></pre><p>上面的例子，当执行<code>cal()</code>时，该函数返回了内部声明的<code>add</code>函数，我们将返回值再赋值给<code>res</code>变量，此时，<code>res</code>也就指向了<code>add</code>所指向的函数实例。之后我们再调用<code>res</code>函数，并传入参数，得到的结果也是<code>200</code>。</p>\n<h3 id=\"函数的内部属性\"><a href=\"#函数的内部属性\" class=\"headerlink\" title=\"函数的内部属性\"></a>函数的内部属性</h3><h4 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h4><p>函数中包含一个内置的<code>arguments</code>对象，它是一个类数组对象，包含着所有传入函数中的参数，你可以用数组下标的方式访问其中的元素。</p>\n<pre><code>function show (a, b, c, d, e, f) {\n  console.log(arguments[4]);    // 输出[333, 444]\n}\n\nshow(1, &#39;222&#39;, true, null, [333, 444], {aa: &#39;aaa&#39;, b: function() {}});\n</code></pre><p><code>arguments</code>对象自己还有一个<code>callee</code>属性，该属性是一个指针，指向拥有这个<code>arguments</code>对象的函数，也就是这个<code>arguments</code>所属的函数。</p>\n<h4 id=\"arguments-callee\"><a href=\"#arguments-callee\" class=\"headerlink\" title=\"arguments.callee\"></a>arguments.callee</h4><p>在递归函数中，我们可能会经常使用到<code>arguments.callee</code>这一属性。以一个经典的阶乘函数为例:</p>\n<pre><code>// 递归阶乘的经典例子\nfunction factorial(num) {\n  if (num &lt;=1) {\n    return 1;\n  } else {\n    return num * factorial(num-1);\n  }\n}\n\n// 递归阶乘的优化例子\nfunction factorial(num) {\n  if (num &lt;=1) {\n    return 1;\n  } else {\n    // 这里的arguments.callee又指向factorial函数\n    return num * arguments.callee(num-1);\n  }\n}\n</code></pre><p>这样写的好处是，当指向该递归函数的函数名发生变化时，递归函数也能顺利执行完成。如果采用上面经典例子的写法，当出现如下代码逻辑时，就会出错。</p>\n<pre><code>// 将另一变量指向递归阶乘函数\nvar trueFactorial = factorial;\n\n// 改写原递归阶乘函数\nfactorial = function() {\n  return 0;\n};\n\nconsole.log(trueFactorial(5));\nconsole.log(factorial(5));\n</code></pre><p>如果以递归阶乘的经典例子定义<code>factorial</code>函数，那么<code>trueFactorial(5)</code>这一行就会出错。因为执行到<code>trueFactorial</code>函数内部<code>return num * factorial(num-1);</code>代码时，<code>factorial</code>实际已经指向了<code>function() {return 0;}</code>，计算结果就会出错。但用递归阶乘的优化例子就不会出现这个问题，因为执行<code>trueFactorial(5)</code>语句时，<code>arguments.callee</code>指向<code>trueFactorial</code>函数。</p>\n<h4 id=\"arguments-callee-caller\"><a href=\"#arguments-callee-caller\" class=\"headerlink\" title=\"arguments.callee.caller\"></a>arguments.callee.caller</h4><p><code>arguments.callee.caller</code>这个属性中保存着调用当前函数的函数的引用。也就是说我们可以通过该属性来获得<code>arguments</code>所属于的那个函数（<code>arguments.callee</code>）是在哪个函数（<code>arguments.callee.caller</code>）中被调用的。</p>\n<p>需要注意的是：如果是在全局作用域中调用的当前函数，<code>arguments.callee.caller</code>的获取到的值为<strong><code>null</code></strong>。</p>\n<p>ES5后，我们也可以直接通过函数实例对象的caller属性来直接访问这一属性。</p>\n<pre><code>function outer(){\n  inner();\n}\n\nfunction inner(){\n  console.log(inner.caller);    // 打印出outer函数的源码。因为inner是在outer中被调用的\n}\n\nouter();\n</code></pre><p>也可以这么写：</p>\n<pre><code>function outer(){\n  inner();\n}\n\nfunction inner(){\n  alert(arguments.callee.caller);   // 打印出outer函数的源码。\n}\n\nouter();\n</code></pre><h4 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h4><p>函数中另一个有意思又令人头疼的属性——this，由于this指向涉及的内容较多，情况稍微复杂一些，我们将会专门用一篇文章来探讨this相关问题。<br>但概括来说，<strong>this引用的是函数据以执行的环境对象</strong>。当this所在的函数在全局作用域中调用时，它指向window对象；当作为对象的方法调用时，它指向该对象。</p>\n"},{"title":"伊 始","date":"2018-07-11T06:34:49.000Z","_content":"\n### 开始的开始\n\n最近几天的西安城，阴雨绵绵，到哪都是湿漉漉的一片，给人一种身处烟雨江南的感觉。走在人少路窄的街道上，你也许能体会到戴望舒那“独自徘徊在悠长、悠长又寂寥的雨巷”朦胧而又幽深的美感，还会期待着“逢着一个丁香一样的结着愁怨的姑娘”。说实话，这不是西安第一次让我产生这样的错觉，今年夏天的西安，似乎更受雨水的青睐，总在温度快速攀升至30多度的时候迎来一场及时雨，之后又快速回落，这便被网友玩成了“满30立减20”的梗。的确，今年夏天西安少了一些往年的燥热，多了几分夏末秋初的凉爽。\n\n<!--more-->\n\n### 善“思”\n\n我喜欢下雨天，不仅仅是因为雨天凉快，更重要的是我喜欢雨后万物如新洗的明丽和纯粹，洗去一身尘垢，显得本真色彩，这种雨后独有的清新秀丽在其他时间是看不到、体会不到的。其实，还有一个重要原因是我喜欢时不时地“胡思乱想”。一直觉得雨天最适合“天马行空”，尤其是雨后，觅一幽静之处，檐下雨水滴答，袖间凉风习习，雾气散尽之后，溢成满屋花香。这个时候，放空脑袋，忘却平日的紧张与忙碌，心随着眼睛漫无目的的在近处、远处、高处、低处肆意游荡。当有趣的事物映入眼帘，定睛多瞧几眼，之后会心一笑。仰望天空，乌云未散，依旧能感受到“黑云压城城欲摧”的气势。凝望着天空，就好似凝望着无尽的深渊，而此时，深渊也在凝望着你，看得愈久，陷得愈深，这便开始了天马行空般的“胡思乱想”。可能会从日常闲事想到人生哲理，也许会从方隅之间想到世界宇宙，会想东想西，会“思前想后”。这种思考不一定有多大意义，甚至可能有人认为毫无意义，但最重要的是这可以放松身心，在匆忙疲惫的生活中在精神上宽慰自己。心里的豁然开朗、风轻云淡，还有思维的释放，用语言很难表达出那种奇妙的感觉。据说每天给自己一定时间的冥想，能很好地平静内心，缓解压力，促进身心健康，更重要的是，也许某一时刻的灵光闪动，就会是改变你一生的“箴言”。\n\n最近一直阴雨天，加上近来工作也相对清闲，便有了较多的时间做自己想做的事情，这对于我，可以说是如获至宝。因为真正忙碌的时候，没有时间更重要是没有心思去做其他的事情，也可能是长时间的“养老”氛围让我有些安逸和懒惰了。这一段时间，一直觉得过得有些浑浑噩噩，过于单调乏味。白天上班，空余看看技术文章，找找技术盲点研究研究，时间长了就会有些许疲惫。下班之后，便起身回到住处（我不太喜欢把租的公寓称之为“家”，不论是合租还是自己一个人住，因为在我觉得那不是“家”，称之为“住处”更为合适），回去便是“咸鱼躺”，然后刷刷新闻、微博，看看综艺（《向往的生活》一直是我很喜欢的一档综艺，很慢生活，很田园，推荐可以看看），隔三差五洗洗衣服。几乎每天都是这样，这让我每天起床睁眼，总觉得被“困”在了同一天，循环这一天所有的事情，就像电影[《土拨鼠之日》](https://baike.baidu.com/item/%E5%9C%9F%E6%8B%A8%E9%BC%A0%E4%B9%8B%E6%97%A5/3687686)一样。\n\n这样的生活也有一段时了，刚开始没感到有什么不妥，也没察觉其中的可怕之处。这几天，总是觉得被这一天“困”得无法前进，觉得自己更像是一个“智能机器”，醒来之后便重复着几乎相同的事情，睡着后什么都像是忘掉了，可能连“梦”都没有。都说不做梦，是因为睡眠质量好，可一直不做梦是不是也有些可怜甚至可悲呢？这种循环最可怕的在于，你的记忆里就只有了早上起床洗漱、挤公交上班、枯燥地工作八小时甚至十几个小时、挤公交下班、洗漱睡觉这些事情，然后一天天地反复循环，没有尽头......这样的生活还会给人一种可怕的错觉 —— “时间过得真快”，对于一般的工薪上班族，这种感觉应该是格外明显。在我看来，这种生活是可怜的，也是可怕的，时间久了，如果渐渐适应或者说妥协，是一件很可怕的事情，就像[“青蛙效应”](https://baike.baidu.com/item/%E9%9D%92%E8%9B%99%E6%95%88%E5%BA%94/9627267)。毕竟从“智人”进化而来的人类，是“智”、“思考”造就了今天的我们，生而为人，如果每天扮演一个“智能机器”的角色，还真是很不甘心啊......\n\n### 善“思”，亦应善“行”\n\n与其被困在原地，每天浑浑噩噩，那不如做一些改变。如果说没有意识到，或者说习惯了循环式的生活，那就另当别论。但如果选择改变，选择不妥协，那就应该做出改变。工作学习之余，合理安排时间，看看书，练练字，写写博客，跑跑步，健健身，学学厨艺，学学摄影，随处走走停停......对了，每天给自己冥想的时间，也是一个不错的选择，在善“思”的同时，亦应该做到善“行”。\n\n每个人都应该有自己的爱好，有自己的乐趣所在，也应该有自己想要做但没来得及做的事情。一切都不算晚，一切都还有机会，最重要的是学会开始，毕竟“万事开头难”。改变并不意味着要短时间的巨变，给自己一个过渡的时间，一个循序渐进的过程，“量变到质变”是一个永恒不变的真理。\n\n所以，我想，首先学会写博客，把自己的生活记录下来，再分享给大家。不一定要有很多人看，更不奢求有什么粉丝，只是希望看到文章的人在读到某一行，某一句的时候会心一笑，或者能帮你拨去心头的乌云。其实最简单的目的还是为了记录自己生活的点滴，记录自己的心路历程，同时也记录自己思想转变的过程，我相信日后回味起来，这将是一杯世间最醇的“美酒”......\n\n最后，把我很喜欢的一段话分享给大家，这是国产电影《大鱼·海棠》中女主人公 —— 椿 的一段独白：\n\n> **你相信奇迹吗？**\n> **生命是一场旅程，我们等了多少个轮回，才有机会去享受这一次旅程。**\n> **这短短的一生，我们最终都会失去，不妨大胆一些，爱一个人，攀一座山，追一个梦。是的，不妨大胆一些。**\n> **很多事我都不了解，很多问题也没有答案。但我相信，上天给我们生命，一定是为了让我们创造奇迹的。**\n> **—— 电影《大鱼·海棠》**\n","source":"_posts/beginning.md","raw":"---\ntitle: 伊 始\ndate: 2018-07-11 14:34:49\ncategories: 日志\ntags: 生活工作\n---\n\n### 开始的开始\n\n最近几天的西安城，阴雨绵绵，到哪都是湿漉漉的一片，给人一种身处烟雨江南的感觉。走在人少路窄的街道上，你也许能体会到戴望舒那“独自徘徊在悠长、悠长又寂寥的雨巷”朦胧而又幽深的美感，还会期待着“逢着一个丁香一样的结着愁怨的姑娘”。说实话，这不是西安第一次让我产生这样的错觉，今年夏天的西安，似乎更受雨水的青睐，总在温度快速攀升至30多度的时候迎来一场及时雨，之后又快速回落，这便被网友玩成了“满30立减20”的梗。的确，今年夏天西安少了一些往年的燥热，多了几分夏末秋初的凉爽。\n\n<!--more-->\n\n### 善“思”\n\n我喜欢下雨天，不仅仅是因为雨天凉快，更重要的是我喜欢雨后万物如新洗的明丽和纯粹，洗去一身尘垢，显得本真色彩，这种雨后独有的清新秀丽在其他时间是看不到、体会不到的。其实，还有一个重要原因是我喜欢时不时地“胡思乱想”。一直觉得雨天最适合“天马行空”，尤其是雨后，觅一幽静之处，檐下雨水滴答，袖间凉风习习，雾气散尽之后，溢成满屋花香。这个时候，放空脑袋，忘却平日的紧张与忙碌，心随着眼睛漫无目的的在近处、远处、高处、低处肆意游荡。当有趣的事物映入眼帘，定睛多瞧几眼，之后会心一笑。仰望天空，乌云未散，依旧能感受到“黑云压城城欲摧”的气势。凝望着天空，就好似凝望着无尽的深渊，而此时，深渊也在凝望着你，看得愈久，陷得愈深，这便开始了天马行空般的“胡思乱想”。可能会从日常闲事想到人生哲理，也许会从方隅之间想到世界宇宙，会想东想西，会“思前想后”。这种思考不一定有多大意义，甚至可能有人认为毫无意义，但最重要的是这可以放松身心，在匆忙疲惫的生活中在精神上宽慰自己。心里的豁然开朗、风轻云淡，还有思维的释放，用语言很难表达出那种奇妙的感觉。据说每天给自己一定时间的冥想，能很好地平静内心，缓解压力，促进身心健康，更重要的是，也许某一时刻的灵光闪动，就会是改变你一生的“箴言”。\n\n最近一直阴雨天，加上近来工作也相对清闲，便有了较多的时间做自己想做的事情，这对于我，可以说是如获至宝。因为真正忙碌的时候，没有时间更重要是没有心思去做其他的事情，也可能是长时间的“养老”氛围让我有些安逸和懒惰了。这一段时间，一直觉得过得有些浑浑噩噩，过于单调乏味。白天上班，空余看看技术文章，找找技术盲点研究研究，时间长了就会有些许疲惫。下班之后，便起身回到住处（我不太喜欢把租的公寓称之为“家”，不论是合租还是自己一个人住，因为在我觉得那不是“家”，称之为“住处”更为合适），回去便是“咸鱼躺”，然后刷刷新闻、微博，看看综艺（《向往的生活》一直是我很喜欢的一档综艺，很慢生活，很田园，推荐可以看看），隔三差五洗洗衣服。几乎每天都是这样，这让我每天起床睁眼，总觉得被“困”在了同一天，循环这一天所有的事情，就像电影[《土拨鼠之日》](https://baike.baidu.com/item/%E5%9C%9F%E6%8B%A8%E9%BC%A0%E4%B9%8B%E6%97%A5/3687686)一样。\n\n这样的生活也有一段时了，刚开始没感到有什么不妥，也没察觉其中的可怕之处。这几天，总是觉得被这一天“困”得无法前进，觉得自己更像是一个“智能机器”，醒来之后便重复着几乎相同的事情，睡着后什么都像是忘掉了，可能连“梦”都没有。都说不做梦，是因为睡眠质量好，可一直不做梦是不是也有些可怜甚至可悲呢？这种循环最可怕的在于，你的记忆里就只有了早上起床洗漱、挤公交上班、枯燥地工作八小时甚至十几个小时、挤公交下班、洗漱睡觉这些事情，然后一天天地反复循环，没有尽头......这样的生活还会给人一种可怕的错觉 —— “时间过得真快”，对于一般的工薪上班族，这种感觉应该是格外明显。在我看来，这种生活是可怜的，也是可怕的，时间久了，如果渐渐适应或者说妥协，是一件很可怕的事情，就像[“青蛙效应”](https://baike.baidu.com/item/%E9%9D%92%E8%9B%99%E6%95%88%E5%BA%94/9627267)。毕竟从“智人”进化而来的人类，是“智”、“思考”造就了今天的我们，生而为人，如果每天扮演一个“智能机器”的角色，还真是很不甘心啊......\n\n### 善“思”，亦应善“行”\n\n与其被困在原地，每天浑浑噩噩，那不如做一些改变。如果说没有意识到，或者说习惯了循环式的生活，那就另当别论。但如果选择改变，选择不妥协，那就应该做出改变。工作学习之余，合理安排时间，看看书，练练字，写写博客，跑跑步，健健身，学学厨艺，学学摄影，随处走走停停......对了，每天给自己冥想的时间，也是一个不错的选择，在善“思”的同时，亦应该做到善“行”。\n\n每个人都应该有自己的爱好，有自己的乐趣所在，也应该有自己想要做但没来得及做的事情。一切都不算晚，一切都还有机会，最重要的是学会开始，毕竟“万事开头难”。改变并不意味着要短时间的巨变，给自己一个过渡的时间，一个循序渐进的过程，“量变到质变”是一个永恒不变的真理。\n\n所以，我想，首先学会写博客，把自己的生活记录下来，再分享给大家。不一定要有很多人看，更不奢求有什么粉丝，只是希望看到文章的人在读到某一行，某一句的时候会心一笑，或者能帮你拨去心头的乌云。其实最简单的目的还是为了记录自己生活的点滴，记录自己的心路历程，同时也记录自己思想转变的过程，我相信日后回味起来，这将是一杯世间最醇的“美酒”......\n\n最后，把我很喜欢的一段话分享给大家，这是国产电影《大鱼·海棠》中女主人公 —— 椿 的一段独白：\n\n> **你相信奇迹吗？**\n> **生命是一场旅程，我们等了多少个轮回，才有机会去享受这一次旅程。**\n> **这短短的一生，我们最终都会失去，不妨大胆一些，爱一个人，攀一座山，追一个梦。是的，不妨大胆一些。**\n> **很多事我都不了解，很多问题也没有答案。但我相信，上天给我们生命，一定是为了让我们创造奇迹的。**\n> **—— 电影《大鱼·海棠》**\n","slug":"beginning","published":1,"updated":"2018-12-17T16:37:49.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4muo001a9kvb7qqqgq2e","content":"<h3 id=\"开始的开始\"><a href=\"#开始的开始\" class=\"headerlink\" title=\"开始的开始\"></a>开始的开始</h3><p>最近几天的西安城，阴雨绵绵，到哪都是湿漉漉的一片，给人一种身处烟雨江南的感觉。走在人少路窄的街道上，你也许能体会到戴望舒那“独自徘徊在悠长、悠长又寂寥的雨巷”朦胧而又幽深的美感，还会期待着“逢着一个丁香一样的结着愁怨的姑娘”。说实话，这不是西安第一次让我产生这样的错觉，今年夏天的西安，似乎更受雨水的青睐，总在温度快速攀升至30多度的时候迎来一场及时雨，之后又快速回落，这便被网友玩成了“满30立减20”的梗。的确，今年夏天西安少了一些往年的燥热，多了几分夏末秋初的凉爽。</p>\n<a id=\"more\"></a>\n<h3 id=\"善“思”\"><a href=\"#善“思”\" class=\"headerlink\" title=\"善“思”\"></a>善“思”</h3><p>我喜欢下雨天，不仅仅是因为雨天凉快，更重要的是我喜欢雨后万物如新洗的明丽和纯粹，洗去一身尘垢，显得本真色彩，这种雨后独有的清新秀丽在其他时间是看不到、体会不到的。其实，还有一个重要原因是我喜欢时不时地“胡思乱想”。一直觉得雨天最适合“天马行空”，尤其是雨后，觅一幽静之处，檐下雨水滴答，袖间凉风习习，雾气散尽之后，溢成满屋花香。这个时候，放空脑袋，忘却平日的紧张与忙碌，心随着眼睛漫无目的的在近处、远处、高处、低处肆意游荡。当有趣的事物映入眼帘，定睛多瞧几眼，之后会心一笑。仰望天空，乌云未散，依旧能感受到“黑云压城城欲摧”的气势。凝望着天空，就好似凝望着无尽的深渊，而此时，深渊也在凝望着你，看得愈久，陷得愈深，这便开始了天马行空般的“胡思乱想”。可能会从日常闲事想到人生哲理，也许会从方隅之间想到世界宇宙，会想东想西，会“思前想后”。这种思考不一定有多大意义，甚至可能有人认为毫无意义，但最重要的是这可以放松身心，在匆忙疲惫的生活中在精神上宽慰自己。心里的豁然开朗、风轻云淡，还有思维的释放，用语言很难表达出那种奇妙的感觉。据说每天给自己一定时间的冥想，能很好地平静内心，缓解压力，促进身心健康，更重要的是，也许某一时刻的灵光闪动，就会是改变你一生的“箴言”。</p>\n<p>最近一直阴雨天，加上近来工作也相对清闲，便有了较多的时间做自己想做的事情，这对于我，可以说是如获至宝。因为真正忙碌的时候，没有时间更重要是没有心思去做其他的事情，也可能是长时间的“养老”氛围让我有些安逸和懒惰了。这一段时间，一直觉得过得有些浑浑噩噩，过于单调乏味。白天上班，空余看看技术文章，找找技术盲点研究研究，时间长了就会有些许疲惫。下班之后，便起身回到住处（我不太喜欢把租的公寓称之为“家”，不论是合租还是自己一个人住，因为在我觉得那不是“家”，称之为“住处”更为合适），回去便是“咸鱼躺”，然后刷刷新闻、微博，看看综艺（《向往的生活》一直是我很喜欢的一档综艺，很慢生活，很田园，推荐可以看看），隔三差五洗洗衣服。几乎每天都是这样，这让我每天起床睁眼，总觉得被“困”在了同一天，循环这一天所有的事情，就像电影<a href=\"https://baike.baidu.com/item/%E5%9C%9F%E6%8B%A8%E9%BC%A0%E4%B9%8B%E6%97%A5/3687686\" target=\"_blank\" rel=\"noopener\">《土拨鼠之日》</a>一样。</p>\n<p>这样的生活也有一段时了，刚开始没感到有什么不妥，也没察觉其中的可怕之处。这几天，总是觉得被这一天“困”得无法前进，觉得自己更像是一个“智能机器”，醒来之后便重复着几乎相同的事情，睡着后什么都像是忘掉了，可能连“梦”都没有。都说不做梦，是因为睡眠质量好，可一直不做梦是不是也有些可怜甚至可悲呢？这种循环最可怕的在于，你的记忆里就只有了早上起床洗漱、挤公交上班、枯燥地工作八小时甚至十几个小时、挤公交下班、洗漱睡觉这些事情，然后一天天地反复循环，没有尽头……这样的生活还会给人一种可怕的错觉 —— “时间过得真快”，对于一般的工薪上班族，这种感觉应该是格外明显。在我看来，这种生活是可怜的，也是可怕的，时间久了，如果渐渐适应或者说妥协，是一件很可怕的事情，就像<a href=\"https://baike.baidu.com/item/%E9%9D%92%E8%9B%99%E6%95%88%E5%BA%94/9627267\" target=\"_blank\" rel=\"noopener\">“青蛙效应”</a>。毕竟从“智人”进化而来的人类，是“智”、“思考”造就了今天的我们，生而为人，如果每天扮演一个“智能机器”的角色，还真是很不甘心啊……</p>\n<h3 id=\"善“思”，亦应善“行”\"><a href=\"#善“思”，亦应善“行”\" class=\"headerlink\" title=\"善“思”，亦应善“行”\"></a>善“思”，亦应善“行”</h3><p>与其被困在原地，每天浑浑噩噩，那不如做一些改变。如果说没有意识到，或者说习惯了循环式的生活，那就另当别论。但如果选择改变，选择不妥协，那就应该做出改变。工作学习之余，合理安排时间，看看书，练练字，写写博客，跑跑步，健健身，学学厨艺，学学摄影，随处走走停停……对了，每天给自己冥想的时间，也是一个不错的选择，在善“思”的同时，亦应该做到善“行”。</p>\n<p>每个人都应该有自己的爱好，有自己的乐趣所在，也应该有自己想要做但没来得及做的事情。一切都不算晚，一切都还有机会，最重要的是学会开始，毕竟“万事开头难”。改变并不意味着要短时间的巨变，给自己一个过渡的时间，一个循序渐进的过程，“量变到质变”是一个永恒不变的真理。</p>\n<p>所以，我想，首先学会写博客，把自己的生活记录下来，再分享给大家。不一定要有很多人看，更不奢求有什么粉丝，只是希望看到文章的人在读到某一行，某一句的时候会心一笑，或者能帮你拨去心头的乌云。其实最简单的目的还是为了记录自己生活的点滴，记录自己的心路历程，同时也记录自己思想转变的过程，我相信日后回味起来，这将是一杯世间最醇的“美酒”……</p>\n<p>最后，把我很喜欢的一段话分享给大家，这是国产电影《大鱼·海棠》中女主人公 —— 椿 的一段独白：</p>\n<blockquote>\n<p><strong>你相信奇迹吗？</strong><br><strong>生命是一场旅程，我们等了多少个轮回，才有机会去享受这一次旅程。</strong><br><strong>这短短的一生，我们最终都会失去，不妨大胆一些，爱一个人，攀一座山，追一个梦。是的，不妨大胆一些。</strong><br><strong>很多事我都不了解，很多问题也没有答案。但我相信，上天给我们生命，一定是为了让我们创造奇迹的。</strong><br><strong>—— 电影《大鱼·海棠》</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"开始的开始\"><a href=\"#开始的开始\" class=\"headerlink\" title=\"开始的开始\"></a>开始的开始</h3><p>最近几天的西安城，阴雨绵绵，到哪都是湿漉漉的一片，给人一种身处烟雨江南的感觉。走在人少路窄的街道上，你也许能体会到戴望舒那“独自徘徊在悠长、悠长又寂寥的雨巷”朦胧而又幽深的美感，还会期待着“逢着一个丁香一样的结着愁怨的姑娘”。说实话，这不是西安第一次让我产生这样的错觉，今年夏天的西安，似乎更受雨水的青睐，总在温度快速攀升至30多度的时候迎来一场及时雨，之后又快速回落，这便被网友玩成了“满30立减20”的梗。的确，今年夏天西安少了一些往年的燥热，多了几分夏末秋初的凉爽。</p>","more":"<h3 id=\"善“思”\"><a href=\"#善“思”\" class=\"headerlink\" title=\"善“思”\"></a>善“思”</h3><p>我喜欢下雨天，不仅仅是因为雨天凉快，更重要的是我喜欢雨后万物如新洗的明丽和纯粹，洗去一身尘垢，显得本真色彩，这种雨后独有的清新秀丽在其他时间是看不到、体会不到的。其实，还有一个重要原因是我喜欢时不时地“胡思乱想”。一直觉得雨天最适合“天马行空”，尤其是雨后，觅一幽静之处，檐下雨水滴答，袖间凉风习习，雾气散尽之后，溢成满屋花香。这个时候，放空脑袋，忘却平日的紧张与忙碌，心随着眼睛漫无目的的在近处、远处、高处、低处肆意游荡。当有趣的事物映入眼帘，定睛多瞧几眼，之后会心一笑。仰望天空，乌云未散，依旧能感受到“黑云压城城欲摧”的气势。凝望着天空，就好似凝望着无尽的深渊，而此时，深渊也在凝望着你，看得愈久，陷得愈深，这便开始了天马行空般的“胡思乱想”。可能会从日常闲事想到人生哲理，也许会从方隅之间想到世界宇宙，会想东想西，会“思前想后”。这种思考不一定有多大意义，甚至可能有人认为毫无意义，但最重要的是这可以放松身心，在匆忙疲惫的生活中在精神上宽慰自己。心里的豁然开朗、风轻云淡，还有思维的释放，用语言很难表达出那种奇妙的感觉。据说每天给自己一定时间的冥想，能很好地平静内心，缓解压力，促进身心健康，更重要的是，也许某一时刻的灵光闪动，就会是改变你一生的“箴言”。</p>\n<p>最近一直阴雨天，加上近来工作也相对清闲，便有了较多的时间做自己想做的事情，这对于我，可以说是如获至宝。因为真正忙碌的时候，没有时间更重要是没有心思去做其他的事情，也可能是长时间的“养老”氛围让我有些安逸和懒惰了。这一段时间，一直觉得过得有些浑浑噩噩，过于单调乏味。白天上班，空余看看技术文章，找找技术盲点研究研究，时间长了就会有些许疲惫。下班之后，便起身回到住处（我不太喜欢把租的公寓称之为“家”，不论是合租还是自己一个人住，因为在我觉得那不是“家”，称之为“住处”更为合适），回去便是“咸鱼躺”，然后刷刷新闻、微博，看看综艺（《向往的生活》一直是我很喜欢的一档综艺，很慢生活，很田园，推荐可以看看），隔三差五洗洗衣服。几乎每天都是这样，这让我每天起床睁眼，总觉得被“困”在了同一天，循环这一天所有的事情，就像电影<a href=\"https://baike.baidu.com/item/%E5%9C%9F%E6%8B%A8%E9%BC%A0%E4%B9%8B%E6%97%A5/3687686\" target=\"_blank\" rel=\"noopener\">《土拨鼠之日》</a>一样。</p>\n<p>这样的生活也有一段时了，刚开始没感到有什么不妥，也没察觉其中的可怕之处。这几天，总是觉得被这一天“困”得无法前进，觉得自己更像是一个“智能机器”，醒来之后便重复着几乎相同的事情，睡着后什么都像是忘掉了，可能连“梦”都没有。都说不做梦，是因为睡眠质量好，可一直不做梦是不是也有些可怜甚至可悲呢？这种循环最可怕的在于，你的记忆里就只有了早上起床洗漱、挤公交上班、枯燥地工作八小时甚至十几个小时、挤公交下班、洗漱睡觉这些事情，然后一天天地反复循环，没有尽头……这样的生活还会给人一种可怕的错觉 —— “时间过得真快”，对于一般的工薪上班族，这种感觉应该是格外明显。在我看来，这种生活是可怜的，也是可怕的，时间久了，如果渐渐适应或者说妥协，是一件很可怕的事情，就像<a href=\"https://baike.baidu.com/item/%E9%9D%92%E8%9B%99%E6%95%88%E5%BA%94/9627267\" target=\"_blank\" rel=\"noopener\">“青蛙效应”</a>。毕竟从“智人”进化而来的人类，是“智”、“思考”造就了今天的我们，生而为人，如果每天扮演一个“智能机器”的角色，还真是很不甘心啊……</p>\n<h3 id=\"善“思”，亦应善“行”\"><a href=\"#善“思”，亦应善“行”\" class=\"headerlink\" title=\"善“思”，亦应善“行”\"></a>善“思”，亦应善“行”</h3><p>与其被困在原地，每天浑浑噩噩，那不如做一些改变。如果说没有意识到，或者说习惯了循环式的生活，那就另当别论。但如果选择改变，选择不妥协，那就应该做出改变。工作学习之余，合理安排时间，看看书，练练字，写写博客，跑跑步，健健身，学学厨艺，学学摄影，随处走走停停……对了，每天给自己冥想的时间，也是一个不错的选择，在善“思”的同时，亦应该做到善“行”。</p>\n<p>每个人都应该有自己的爱好，有自己的乐趣所在，也应该有自己想要做但没来得及做的事情。一切都不算晚，一切都还有机会，最重要的是学会开始，毕竟“万事开头难”。改变并不意味着要短时间的巨变，给自己一个过渡的时间，一个循序渐进的过程，“量变到质变”是一个永恒不变的真理。</p>\n<p>所以，我想，首先学会写博客，把自己的生活记录下来，再分享给大家。不一定要有很多人看，更不奢求有什么粉丝，只是希望看到文章的人在读到某一行，某一句的时候会心一笑，或者能帮你拨去心头的乌云。其实最简单的目的还是为了记录自己生活的点滴，记录自己的心路历程，同时也记录自己思想转变的过程，我相信日后回味起来，这将是一杯世间最醇的“美酒”……</p>\n<p>最后，把我很喜欢的一段话分享给大家，这是国产电影《大鱼·海棠》中女主人公 —— 椿 的一段独白：</p>\n<blockquote>\n<p><strong>你相信奇迹吗？</strong><br><strong>生命是一场旅程，我们等了多少个轮回，才有机会去享受这一次旅程。</strong><br><strong>这短短的一生，我们最终都会失去，不妨大胆一些，爱一个人，攀一座山，追一个梦。是的，不妨大胆一些。</strong><br><strong>很多事我都不了解，很多问题也没有答案。但我相信，上天给我们生命，一定是为了让我们创造奇迹的。</strong><br><strong>—— 电影《大鱼·海棠》</strong></p>\n</blockquote>"},{"title":"CreateJS 入门","date":"2018-07-18T08:30:49.000Z","_content":"\n### 什么是CreateJS\n\n> [官网介绍](https://www.createjs.com/) （[中文](http://www.createjs.cc/)）：CreateJS 是一组模块化代码库和工具套件，可以独立工作也可以组合工作，用于通过HTML5技术来在网页上开发丰富的交互式内容。\n\n### 四个核心库\nCreateJS主要包含如下四个类库：\n* `EaselJS` – 简化处理HTML5画布（核心）\n* `TweenJS` – 用来帮助设计H5动画，调整HTML5属性\n* `SoundJS` – 用来简化处理HTML5 audio 音频\n* `PreloadJS` – 帮助管理和协调加载中的一些资源\n\n<!--more-->\n\n**今天，主要来了解一下 `EaselJS` 库**\n\n### EaselJS\n![EaselJS][1]\n\n#### EaselJS 简介\n> `EaselJS` 是一个JavaScript库,用来简单快捷的操作 `HTML5 Canvas` 标签。在创建H5游戏，生成艺术作品、处理其他高级图形化等工作中有着很友好的体验。\n\n#### EaselJS中的一些核心类\n1. `Stage Class` -- 创建舞台\n2. `Text Class` -- 绘制文字\n3. `Graphics Class` -- 绘制图形\n4. `Shape Class` -- 绘制图形\n5. `Bitmap Class` -- 绘制图片\n6. `Ticker Class` -- 定时广播\n7. ......等\n\n### 一些\"栗子\"\n\n#### 绘制文本(Text Class)\n定义一个`<canvas> </canvas>` 画布。\n```\n// HTML:\n<!-- Text Class 文本类-->\n<canvas id=\"demo1\" width=\"650\" height=\"400\"></canvas>\n```\n\n调用`EaselJS`提供的`API - new createjs.Text()`，绘制文字\n```\n// JS\n<script src=\"https://code.createjs.com/1.0.0/createjs.min.js\"></script>\n<script>\n  window.onload = () => {\n    /**\n      * Test Class 文本类 -- demo\n      */\n    let stage1 = new createjs.Stage(\"demo1\");\n\n    let text1 = new createjs.Text(\"Text 1 !\", \"bold 26px Arial\", \"#ff7700\");\n    text1.regX = -50;     // 沿X轴负方向的偏移量\n    text1.regY = -50;     // 沿Y轴负方向的偏移量\n    text1.x = 100;        // 绘制源点 X坐标\n    text1.y = 50;         // 绘制源点 Y坐标\n\n    let text2 = new createjs.Text(\"旋转+XY拉伸！\", \"bold 18px Arial\", \"#ff7700\");\n    text2.x = 50;\n    text2.y = 50;\n    text2.rotation = 50;      // 旋转角度 DEG\n    text2.scaleX = 3;         // X轴放大(拉伸)\n    text2.scaleY = 2;         // X轴放大(拉伸)\n\n    let text3 = new createjs.Text(\"XY轴倾斜\", \"bold 50px Arial\", \"#ff7700\");\n    text3.x = 300;\n    text3.y = 200;\n    text3.skewX = 45;         // X轴倾斜角度 DEG\n    text3.skewY = 20;         // Y周倾斜角度 DEG\n\n    let text4 = new createjs.Text(\"文字shadow\", \"bold 30px Arial\", \"#ff7700\");\n    text4.x = 400;\n    text4.y = 100;\n    text4.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);      // 创建一个shadow实例Object\n\n    stage1.addChild(text1, text2, text3, text4);\n    stage1.update();    // 更新舞台，每次修改操作后需要更新真个舞台才有效果\n  }\n</script>\n```\n\n#### 绘制图形(Graphics Class)\n定义一个`<canvas> </canvas>` 画布。\n```\n// HTML:\n<!-- Graphics Class 文本类-->\n<canvas id=\"demo2\" width=\"650\" height=\"400\"></canvas>\n```\n\n调用`EaselJS`提供的`API - new createjs.Graphics()`，绘制图形\n```\n// JS\n<script src=\"https://code.createjs.com/1.0.0/createjs.min.js\"></script>\n<script>\n  window.onload = () => {\n    /**\n      * Graphics Class 绘图类 -- demo\n      * 用于生成矢量绘图指令\n      */\n    let stage2 = new createjs.Stage('demo2')\n\n    // 画线\n    let g = new createjs.Graphics();\n    /* 同一个 Graphics 实例， 可以多次绘制，以下线段、折线都是用 g 实例绘制的*/\n    g.setStrokeStyle(10).beginStroke(\"#d23c4f\").moveTo(400,10).lineTo(600,100)\n    // 简写形式\n    g.ss(20).s('#fafa35').mt(400,100).lt(400,260)\n    // 多点折线的简写形式\n    g.ss(1).s('#000').mt(600,400).lt(600, 200).lt(400,300).lt(500, 550)\n\n    // Graphics 实例不能直接 addChild() 到舞台 stage 中，实例化为 Shape 实例后才可以\n    let line = new createjs.Shape(g)\n\n    // 圆\n    let g1 = new createjs.Graphics();\n    g1.setStrokeStyle(1);         // 描边\n    g1.beginStroke(\"#000000\");    // 描边颜色\n    g1.beginFill(\"red\");          // 图形填充\n    g1.drawCircle(0,0,100);        // 绘制 (X, X, R)\n    let c1 = new createjs.Shape(g1)     // 实例化Shape对象\n\n    // 矩形\n    let g2 = new createjs.Graphics().beginStroke(\"red\").beginFill(\"blue\").drawRect(150, 0, 200, 100);     // X, Y, W, H\n    let c2 = new createjs.Shape(g2)\n\n    // 命令对象\n    let g3 = new createjs.Graphics();\n    // 每个图形接口调用后会生成一个命令对象，可以使用.command访问，它保存对已创建或附加的最后一个命令的引用\n    let fillCommand = g3.beginFill(\"green\").command;\n    g3.drawCircle(200,200,50);        // 绘制 (X, X, R)\n    let c3 = new createjs.Shape(g3);\n\n    // 一些异步操作后，更新填充样式/颜色:\n    setTimeout(() => {\n      fillCommand.style = \"gray\";\n      stage2.update();                // 不更新舞台，不会重新渲染\n    }, 2000);\n\n    // 点击事件\n    //c3.addEventListener('click', () => {\n    // alert(123)\n    // fillCommand.style = \"gray\";\n    // stage2.update();          // 不更新舞台，不会重新渲染\n    //})\n  \n    stage2.addChild(c1, c2, c3, line);\n    stage2.update();\n  }\n</script>\n```\n\n#### 绘制图像imgaes(Bitmap Class)\n定义一个`<canvas> </canvas>` 画布。\n```\n// HTML:\n<!-- Bitmap Class 图像类-->\n<canvas id=\"demo3\" width=\"650\" height=\"400\"></canvas>\n```\n\n调用`EaselJS`提供的`API - new createjs.Bitmap()`，绘制图像\n```\n// JS\n<script src=\"https://code.createjs.com/1.0.0/createjs.min.js\"></script>\n<script>\n  window.onload = () => {\n    /**\n      * bitmap Class 图像类\n      * 用于在画布显示列表中渲染图像\n      */\n    let stage3 = new createjs.Stage('demo3')\n\n    // 渲染图片\n    let bitmap = new createjs.Bitmap('./assets/img/hill1.png')\n    bitmap.alpha = 0.6      // 透明度\n    bitmap.cursor = 'help'\n    // 创建一个shadow实例Object(color, offsetX, offsetY, blur)\n    bitmap.shadow = new createjs.Shadow(\"#97c89e\", 20, 10, 20);\n\n    // 给图片添加遮罩\n    let bitmap2 = new createjs.Bitmap('./assets/img/avatar.jpg')\n    bitmap2.x = 400;        // 图片绘制的起始点X坐标\n    bitmap2.y = 0;          // 图片绘制的起始点Y坐标\n    //遮罩图形\n    let shape = new createjs.Shape();\n    shape.graphics.beginFill('#000').drawCircle(0, 0, 100);\n    shape.x = 500;          // 圆心X坐标\n    shape.y = 100;          // 圆心Y坐标\n    bitmap2.mask = shape;   //给图片bg添加遮罩\n\n    // 绘制一片草地\n    let groundBg = new createjs.Bitmap(\"./assets/img/ground.png\").image;\n    let ground = new createjs.Shape();\n    w = stage3.canvas.width;      // 650\n    h = stage3.canvas.height;     // 400\n    stage3.addChild(ground)\n\n    stage3.addChild(bitmap, bitmap2)\n    stage3.update()       // 此处刷新无效\n\n    // 监听定时广播\n    createjs.Ticker.timingMode = createjs.Ticker.RAF;\n    createjs.Ticker.addEventListener('tick',(event) => {\n      ground.tileW = groundBg.width;\n      ground.y = h - groundBg.height;\n      ground.graphics.beginBitmapFill(groundBg).drawRect(0, 0, w, groundBg.height);\n      ground.cache(0, 0, w, groundBg.height);\n        \n      stage3.update()\n    });\n  }\n</script>\n```\n\n### 一个小游戏(来自官网Demo) Running man\n#### 定义一个`<canvas></canvas>`画布\n```\n<!-- HTML -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>running-man game</title>\n</head>\n<body>\n  <canvas id=\"demoCanvas\" width=\"960\" height=\"400\"></canvas>\n  </body>\n</html>\n```\n#### JS代码\n这里就不写具体思路分析了，代码不长，注释也很详细，方便理解，直接上代码。\n\n```\n// JS\n<script src=\"https://code.createjs.com/1.0.0/createjs.min.js\"></script>\n<script>\n  window.onload = () => {\n    let stage, w, h, loader;\n    let sky, grant, ground, hill, hill2;\n\n    function init() {\n      stage = new createjs.StageGL(\"demoCanvas\");\n\n      // 获取画布的宽和高，后面计算使用\n      w = stage.canvas.width;     // 960\n      h = stage.canvas.height;    // 400\n\n      // 定义静态资源\n      let manifest = [{\n        src: \"spritesheet_grant.png\", id: \"grant\"}, {     // 人物动作雪碧图\n        src: \"sky.png\", id: \"sky\"}, {           // 天空\n        src: \"ground.png\", id: \"ground\"}, {     // 地面\n        src: \"hill1.png\", id: \"hill\"}, {        // 远山\n        src: \"hill2.png\", id: \"hill2\"           // 近山\n      }];     // Array, String, Object\n      \n      // 创建资源加载队列\n      // (Boolean) 用XHR还是用HTML标签来加载\n      // 如果是false的时候，就用标签来加载，如果不能用标签的话，就用XHR来加载。默认是true，用XHR来加载。\n      loader = new createjs.LoadQueue(false);\n      // 添加\"资源加载完成\"事件\n      loader.addEventListener(\"complete\", handleComplete);\n      // 加载资源\n      loader.loadManifest(manifest, true, \"./assets/img/\");  // (manifest, loadNow, basePath)\n    }\n\n    /**\n      * 静态资源加载完成，处理函数\n      */\n    function handleComplete() {\n      // 渲染天空\n      sky = new createjs.Shape();\n      sky.graphics.beginBitmapFill(loader.getResult(\"sky\")).drawRect(0, 0, w, h);\n      // 定义缓存区域(整个天空的区域))\n      sky.cache(0, 0, w, h);\n\n      // 渲染地面\n      let groundImg = loader.getResult(\"ground\");\n      ground = new createjs.Shape();\n      // 注意：drawRect()宽度要躲绘制一个单位\n      ground.graphics.beginBitmapFill(groundImg).drawRect(0, 0, w + groundImg.width, groundImg.height);\n      ground.tileW = groundImg.width;\n      ground.y = h - groundImg.height;\n      // 缓存区域(地面的区域)\n      ground.cache(0, 0, w + groundImg.width, groundImg.height);\n\n      // 随机渲染远处山脉\n      hill = new createjs.Bitmap(loader.getResult(\"hill\"));\n      // 设置图像转换\n      // setTransform([x=0], [y=0], [scaleX=1], [scaleY=1], [rotation=0], [skewX=0], [skewY=0], [regX=0], [regY=0])\n      hill.setTransform(Math.random() * w, h - hill.image.height * 4 - groundImg.height, 4, 4);\n      hill.alpha = 0.5;     // 设置透明度\n\n      // 随机渲染近处山脉\n      hill2 = new createjs.Bitmap(loader.getResult(\"hill2\"));\n      hill2.setTransform(Math.random() * w, h - hill2.image.height * 3 - groundImg.height, 3, 3);\n\n      // 创建雪碧图动画\n      let spriteSheet = new createjs.SpriteSheet({\n        framerate: 30,      // 帧率 FPS\n        \"images\": [loader.getResult(\"grant\")],      // 雪碧图原图\n        \"frames\": {\"width\": 165, \"height\": 292, \"count\": 64, \"regX\": 82, \"regY\": 0},  // 初始化\n        // 定义动画\n        \"animations\": {\n          \"run\": [0, 25, \"run\"],     // name: [开始索引, 结束索引, '下一个动画名称', 倍率]\n          \"jump\": [26, 63, \"run\"]\n        }\n      });\n\n      // 绘制动画\n      grant = new createjs.Sprite(spriteSheet, \"run\");\n      // 处理雪碧图人物下方空白\n      grant.y = 35;\n\n      // 将生成的所有内容渲染至舞台\n      stage.addChild(sky, ground, hill, hill2, grant);\n\n      // 监听舞台上的鼠标点击事件\n      stage.addEventListener(\"stagemousedown\", () => {\n        // 跳转播放 jump 动画\n        grant.gotoAndPlay(\"jump\");\n      });\n\n      createjs.Ticker.timingMode = createjs.Ticker.RAF;     // RAF / RAF_SYNCHED / TIMEOUT\n      createjs.Ticker.addEventListener(\"tick\", tick);\n    }\n\n\n    /**\n      * 定时器-重绘舞台\n      */\n    function tick(event) {\n      // event.delta -- 上一次tick到当前tick的ms\n      let deltaS = event.delta / 1000;\n      // 雪碧图人物移动距离\n      let position = grant.x + 150 * deltaS;\n\n      // getBounds() -- 返回当前帧相对于雪碧图原点的边界\n      let grantW = grant.getBounds().width * grant.scaleX;\n      grant.x = (position >= w + grantW) ? -grantW : position;\n\n      ground.x = (ground.x - deltaS * 150) % ground.tileW;\n\n      // 从右至左移动山脉\n      hill.x = (hill.x - deltaS * 30);\n      // 如果山脉从左侧离开屏幕\n      if (hill.x + hill.image.width * hill.scaleX <= 0) {\n        hill.x = w;     // 重置回屏幕最右侧\n      }\n\n      // 处理如上\n      hill2.x = (hill2.x - deltaS * 45);\n      if (hill2.x + hill2.image.width * hill2.scaleX <= 0) {\n        hill2.x = w;\n      }\n\n      stage.update();\n    }\n\n    // 程序主入口-初始化\n    init()\n  }\n</script>\n```\n### 完整代码\n> 示例demo的GitHub地址：[完整代码][2]\n\n<!-- 图片链接定义-->\n[1]: /medias/article/coding/create-js/easeljs.jpg\n[2]: https://github.com/webCaolixin/study-notes/tree/master/create-js","source":"_posts/create-js.md","raw":"---\ntitle: CreateJS 入门\ncategories: 编程\ntags: Create.JS\ndate: 2018-07-18 16:30:49\n---\n\n### 什么是CreateJS\n\n> [官网介绍](https://www.createjs.com/) （[中文](http://www.createjs.cc/)）：CreateJS 是一组模块化代码库和工具套件，可以独立工作也可以组合工作，用于通过HTML5技术来在网页上开发丰富的交互式内容。\n\n### 四个核心库\nCreateJS主要包含如下四个类库：\n* `EaselJS` – 简化处理HTML5画布（核心）\n* `TweenJS` – 用来帮助设计H5动画，调整HTML5属性\n* `SoundJS` – 用来简化处理HTML5 audio 音频\n* `PreloadJS` – 帮助管理和协调加载中的一些资源\n\n<!--more-->\n\n**今天，主要来了解一下 `EaselJS` 库**\n\n### EaselJS\n![EaselJS][1]\n\n#### EaselJS 简介\n> `EaselJS` 是一个JavaScript库,用来简单快捷的操作 `HTML5 Canvas` 标签。在创建H5游戏，生成艺术作品、处理其他高级图形化等工作中有着很友好的体验。\n\n#### EaselJS中的一些核心类\n1. `Stage Class` -- 创建舞台\n2. `Text Class` -- 绘制文字\n3. `Graphics Class` -- 绘制图形\n4. `Shape Class` -- 绘制图形\n5. `Bitmap Class` -- 绘制图片\n6. `Ticker Class` -- 定时广播\n7. ......等\n\n### 一些\"栗子\"\n\n#### 绘制文本(Text Class)\n定义一个`<canvas> </canvas>` 画布。\n```\n// HTML:\n<!-- Text Class 文本类-->\n<canvas id=\"demo1\" width=\"650\" height=\"400\"></canvas>\n```\n\n调用`EaselJS`提供的`API - new createjs.Text()`，绘制文字\n```\n// JS\n<script src=\"https://code.createjs.com/1.0.0/createjs.min.js\"></script>\n<script>\n  window.onload = () => {\n    /**\n      * Test Class 文本类 -- demo\n      */\n    let stage1 = new createjs.Stage(\"demo1\");\n\n    let text1 = new createjs.Text(\"Text 1 !\", \"bold 26px Arial\", \"#ff7700\");\n    text1.regX = -50;     // 沿X轴负方向的偏移量\n    text1.regY = -50;     // 沿Y轴负方向的偏移量\n    text1.x = 100;        // 绘制源点 X坐标\n    text1.y = 50;         // 绘制源点 Y坐标\n\n    let text2 = new createjs.Text(\"旋转+XY拉伸！\", \"bold 18px Arial\", \"#ff7700\");\n    text2.x = 50;\n    text2.y = 50;\n    text2.rotation = 50;      // 旋转角度 DEG\n    text2.scaleX = 3;         // X轴放大(拉伸)\n    text2.scaleY = 2;         // X轴放大(拉伸)\n\n    let text3 = new createjs.Text(\"XY轴倾斜\", \"bold 50px Arial\", \"#ff7700\");\n    text3.x = 300;\n    text3.y = 200;\n    text3.skewX = 45;         // X轴倾斜角度 DEG\n    text3.skewY = 20;         // Y周倾斜角度 DEG\n\n    let text4 = new createjs.Text(\"文字shadow\", \"bold 30px Arial\", \"#ff7700\");\n    text4.x = 400;\n    text4.y = 100;\n    text4.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);      // 创建一个shadow实例Object\n\n    stage1.addChild(text1, text2, text3, text4);\n    stage1.update();    // 更新舞台，每次修改操作后需要更新真个舞台才有效果\n  }\n</script>\n```\n\n#### 绘制图形(Graphics Class)\n定义一个`<canvas> </canvas>` 画布。\n```\n// HTML:\n<!-- Graphics Class 文本类-->\n<canvas id=\"demo2\" width=\"650\" height=\"400\"></canvas>\n```\n\n调用`EaselJS`提供的`API - new createjs.Graphics()`，绘制图形\n```\n// JS\n<script src=\"https://code.createjs.com/1.0.0/createjs.min.js\"></script>\n<script>\n  window.onload = () => {\n    /**\n      * Graphics Class 绘图类 -- demo\n      * 用于生成矢量绘图指令\n      */\n    let stage2 = new createjs.Stage('demo2')\n\n    // 画线\n    let g = new createjs.Graphics();\n    /* 同一个 Graphics 实例， 可以多次绘制，以下线段、折线都是用 g 实例绘制的*/\n    g.setStrokeStyle(10).beginStroke(\"#d23c4f\").moveTo(400,10).lineTo(600,100)\n    // 简写形式\n    g.ss(20).s('#fafa35').mt(400,100).lt(400,260)\n    // 多点折线的简写形式\n    g.ss(1).s('#000').mt(600,400).lt(600, 200).lt(400,300).lt(500, 550)\n\n    // Graphics 实例不能直接 addChild() 到舞台 stage 中，实例化为 Shape 实例后才可以\n    let line = new createjs.Shape(g)\n\n    // 圆\n    let g1 = new createjs.Graphics();\n    g1.setStrokeStyle(1);         // 描边\n    g1.beginStroke(\"#000000\");    // 描边颜色\n    g1.beginFill(\"red\");          // 图形填充\n    g1.drawCircle(0,0,100);        // 绘制 (X, X, R)\n    let c1 = new createjs.Shape(g1)     // 实例化Shape对象\n\n    // 矩形\n    let g2 = new createjs.Graphics().beginStroke(\"red\").beginFill(\"blue\").drawRect(150, 0, 200, 100);     // X, Y, W, H\n    let c2 = new createjs.Shape(g2)\n\n    // 命令对象\n    let g3 = new createjs.Graphics();\n    // 每个图形接口调用后会生成一个命令对象，可以使用.command访问，它保存对已创建或附加的最后一个命令的引用\n    let fillCommand = g3.beginFill(\"green\").command;\n    g3.drawCircle(200,200,50);        // 绘制 (X, X, R)\n    let c3 = new createjs.Shape(g3);\n\n    // 一些异步操作后，更新填充样式/颜色:\n    setTimeout(() => {\n      fillCommand.style = \"gray\";\n      stage2.update();                // 不更新舞台，不会重新渲染\n    }, 2000);\n\n    // 点击事件\n    //c3.addEventListener('click', () => {\n    // alert(123)\n    // fillCommand.style = \"gray\";\n    // stage2.update();          // 不更新舞台，不会重新渲染\n    //})\n  \n    stage2.addChild(c1, c2, c3, line);\n    stage2.update();\n  }\n</script>\n```\n\n#### 绘制图像imgaes(Bitmap Class)\n定义一个`<canvas> </canvas>` 画布。\n```\n// HTML:\n<!-- Bitmap Class 图像类-->\n<canvas id=\"demo3\" width=\"650\" height=\"400\"></canvas>\n```\n\n调用`EaselJS`提供的`API - new createjs.Bitmap()`，绘制图像\n```\n// JS\n<script src=\"https://code.createjs.com/1.0.0/createjs.min.js\"></script>\n<script>\n  window.onload = () => {\n    /**\n      * bitmap Class 图像类\n      * 用于在画布显示列表中渲染图像\n      */\n    let stage3 = new createjs.Stage('demo3')\n\n    // 渲染图片\n    let bitmap = new createjs.Bitmap('./assets/img/hill1.png')\n    bitmap.alpha = 0.6      // 透明度\n    bitmap.cursor = 'help'\n    // 创建一个shadow实例Object(color, offsetX, offsetY, blur)\n    bitmap.shadow = new createjs.Shadow(\"#97c89e\", 20, 10, 20);\n\n    // 给图片添加遮罩\n    let bitmap2 = new createjs.Bitmap('./assets/img/avatar.jpg')\n    bitmap2.x = 400;        // 图片绘制的起始点X坐标\n    bitmap2.y = 0;          // 图片绘制的起始点Y坐标\n    //遮罩图形\n    let shape = new createjs.Shape();\n    shape.graphics.beginFill('#000').drawCircle(0, 0, 100);\n    shape.x = 500;          // 圆心X坐标\n    shape.y = 100;          // 圆心Y坐标\n    bitmap2.mask = shape;   //给图片bg添加遮罩\n\n    // 绘制一片草地\n    let groundBg = new createjs.Bitmap(\"./assets/img/ground.png\").image;\n    let ground = new createjs.Shape();\n    w = stage3.canvas.width;      // 650\n    h = stage3.canvas.height;     // 400\n    stage3.addChild(ground)\n\n    stage3.addChild(bitmap, bitmap2)\n    stage3.update()       // 此处刷新无效\n\n    // 监听定时广播\n    createjs.Ticker.timingMode = createjs.Ticker.RAF;\n    createjs.Ticker.addEventListener('tick',(event) => {\n      ground.tileW = groundBg.width;\n      ground.y = h - groundBg.height;\n      ground.graphics.beginBitmapFill(groundBg).drawRect(0, 0, w, groundBg.height);\n      ground.cache(0, 0, w, groundBg.height);\n        \n      stage3.update()\n    });\n  }\n</script>\n```\n\n### 一个小游戏(来自官网Demo) Running man\n#### 定义一个`<canvas></canvas>`画布\n```\n<!-- HTML -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>running-man game</title>\n</head>\n<body>\n  <canvas id=\"demoCanvas\" width=\"960\" height=\"400\"></canvas>\n  </body>\n</html>\n```\n#### JS代码\n这里就不写具体思路分析了，代码不长，注释也很详细，方便理解，直接上代码。\n\n```\n// JS\n<script src=\"https://code.createjs.com/1.0.0/createjs.min.js\"></script>\n<script>\n  window.onload = () => {\n    let stage, w, h, loader;\n    let sky, grant, ground, hill, hill2;\n\n    function init() {\n      stage = new createjs.StageGL(\"demoCanvas\");\n\n      // 获取画布的宽和高，后面计算使用\n      w = stage.canvas.width;     // 960\n      h = stage.canvas.height;    // 400\n\n      // 定义静态资源\n      let manifest = [{\n        src: \"spritesheet_grant.png\", id: \"grant\"}, {     // 人物动作雪碧图\n        src: \"sky.png\", id: \"sky\"}, {           // 天空\n        src: \"ground.png\", id: \"ground\"}, {     // 地面\n        src: \"hill1.png\", id: \"hill\"}, {        // 远山\n        src: \"hill2.png\", id: \"hill2\"           // 近山\n      }];     // Array, String, Object\n      \n      // 创建资源加载队列\n      // (Boolean) 用XHR还是用HTML标签来加载\n      // 如果是false的时候，就用标签来加载，如果不能用标签的话，就用XHR来加载。默认是true，用XHR来加载。\n      loader = new createjs.LoadQueue(false);\n      // 添加\"资源加载完成\"事件\n      loader.addEventListener(\"complete\", handleComplete);\n      // 加载资源\n      loader.loadManifest(manifest, true, \"./assets/img/\");  // (manifest, loadNow, basePath)\n    }\n\n    /**\n      * 静态资源加载完成，处理函数\n      */\n    function handleComplete() {\n      // 渲染天空\n      sky = new createjs.Shape();\n      sky.graphics.beginBitmapFill(loader.getResult(\"sky\")).drawRect(0, 0, w, h);\n      // 定义缓存区域(整个天空的区域))\n      sky.cache(0, 0, w, h);\n\n      // 渲染地面\n      let groundImg = loader.getResult(\"ground\");\n      ground = new createjs.Shape();\n      // 注意：drawRect()宽度要躲绘制一个单位\n      ground.graphics.beginBitmapFill(groundImg).drawRect(0, 0, w + groundImg.width, groundImg.height);\n      ground.tileW = groundImg.width;\n      ground.y = h - groundImg.height;\n      // 缓存区域(地面的区域)\n      ground.cache(0, 0, w + groundImg.width, groundImg.height);\n\n      // 随机渲染远处山脉\n      hill = new createjs.Bitmap(loader.getResult(\"hill\"));\n      // 设置图像转换\n      // setTransform([x=0], [y=0], [scaleX=1], [scaleY=1], [rotation=0], [skewX=0], [skewY=0], [regX=0], [regY=0])\n      hill.setTransform(Math.random() * w, h - hill.image.height * 4 - groundImg.height, 4, 4);\n      hill.alpha = 0.5;     // 设置透明度\n\n      // 随机渲染近处山脉\n      hill2 = new createjs.Bitmap(loader.getResult(\"hill2\"));\n      hill2.setTransform(Math.random() * w, h - hill2.image.height * 3 - groundImg.height, 3, 3);\n\n      // 创建雪碧图动画\n      let spriteSheet = new createjs.SpriteSheet({\n        framerate: 30,      // 帧率 FPS\n        \"images\": [loader.getResult(\"grant\")],      // 雪碧图原图\n        \"frames\": {\"width\": 165, \"height\": 292, \"count\": 64, \"regX\": 82, \"regY\": 0},  // 初始化\n        // 定义动画\n        \"animations\": {\n          \"run\": [0, 25, \"run\"],     // name: [开始索引, 结束索引, '下一个动画名称', 倍率]\n          \"jump\": [26, 63, \"run\"]\n        }\n      });\n\n      // 绘制动画\n      grant = new createjs.Sprite(spriteSheet, \"run\");\n      // 处理雪碧图人物下方空白\n      grant.y = 35;\n\n      // 将生成的所有内容渲染至舞台\n      stage.addChild(sky, ground, hill, hill2, grant);\n\n      // 监听舞台上的鼠标点击事件\n      stage.addEventListener(\"stagemousedown\", () => {\n        // 跳转播放 jump 动画\n        grant.gotoAndPlay(\"jump\");\n      });\n\n      createjs.Ticker.timingMode = createjs.Ticker.RAF;     // RAF / RAF_SYNCHED / TIMEOUT\n      createjs.Ticker.addEventListener(\"tick\", tick);\n    }\n\n\n    /**\n      * 定时器-重绘舞台\n      */\n    function tick(event) {\n      // event.delta -- 上一次tick到当前tick的ms\n      let deltaS = event.delta / 1000;\n      // 雪碧图人物移动距离\n      let position = grant.x + 150 * deltaS;\n\n      // getBounds() -- 返回当前帧相对于雪碧图原点的边界\n      let grantW = grant.getBounds().width * grant.scaleX;\n      grant.x = (position >= w + grantW) ? -grantW : position;\n\n      ground.x = (ground.x - deltaS * 150) % ground.tileW;\n\n      // 从右至左移动山脉\n      hill.x = (hill.x - deltaS * 30);\n      // 如果山脉从左侧离开屏幕\n      if (hill.x + hill.image.width * hill.scaleX <= 0) {\n        hill.x = w;     // 重置回屏幕最右侧\n      }\n\n      // 处理如上\n      hill2.x = (hill2.x - deltaS * 45);\n      if (hill2.x + hill2.image.width * hill2.scaleX <= 0) {\n        hill2.x = w;\n      }\n\n      stage.update();\n    }\n\n    // 程序主入口-初始化\n    init()\n  }\n</script>\n```\n### 完整代码\n> 示例demo的GitHub地址：[完整代码][2]\n\n<!-- 图片链接定义-->\n[1]: /medias/article/coding/create-js/easeljs.jpg\n[2]: https://github.com/webCaolixin/study-notes/tree/master/create-js","slug":"create-js","published":1,"updated":"2019-01-04T11:43:35.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mut001e9kvb3llwyeq0","content":"<h3 id=\"什么是CreateJS\"><a href=\"#什么是CreateJS\" class=\"headerlink\" title=\"什么是CreateJS\"></a>什么是CreateJS</h3><blockquote>\n<p><a href=\"https://www.createjs.com/\" target=\"_blank\" rel=\"noopener\">官网介绍</a> （<a href=\"http://www.createjs.cc/\" target=\"_blank\" rel=\"noopener\">中文</a>）：CreateJS 是一组模块化代码库和工具套件，可以独立工作也可以组合工作，用于通过HTML5技术来在网页上开发丰富的交互式内容。</p>\n</blockquote>\n<h3 id=\"四个核心库\"><a href=\"#四个核心库\" class=\"headerlink\" title=\"四个核心库\"></a>四个核心库</h3><p>CreateJS主要包含如下四个类库：</p>\n<ul>\n<li><code>EaselJS</code> – 简化处理HTML5画布（核心）</li>\n<li><code>TweenJS</code> – 用来帮助设计H5动画，调整HTML5属性</li>\n<li><code>SoundJS</code> – 用来简化处理HTML5 audio 音频</li>\n<li><code>PreloadJS</code> – 帮助管理和协调加载中的一些资源</li>\n</ul>\n<a id=\"more\"></a>\n<p><strong>今天，主要来了解一下 <code>EaselJS</code> 库</strong></p>\n<h3 id=\"EaselJS\"><a href=\"#EaselJS\" class=\"headerlink\" title=\"EaselJS\"></a>EaselJS</h3><p><img src=\"/medias/article/coding/create-js/easeljs.jpg\" alt=\"EaselJS\"></p>\n<h4 id=\"EaselJS-简介\"><a href=\"#EaselJS-简介\" class=\"headerlink\" title=\"EaselJS 简介\"></a>EaselJS 简介</h4><blockquote>\n<p><code>EaselJS</code> 是一个JavaScript库,用来简单快捷的操作 <code>HTML5 Canvas</code> 标签。在创建H5游戏，生成艺术作品、处理其他高级图形化等工作中有着很友好的体验。</p>\n</blockquote>\n<h4 id=\"EaselJS中的一些核心类\"><a href=\"#EaselJS中的一些核心类\" class=\"headerlink\" title=\"EaselJS中的一些核心类\"></a>EaselJS中的一些核心类</h4><ol>\n<li><code>Stage Class</code> – 创建舞台</li>\n<li><code>Text Class</code> – 绘制文字</li>\n<li><code>Graphics Class</code> – 绘制图形</li>\n<li><code>Shape Class</code> – 绘制图形</li>\n<li><code>Bitmap Class</code> – 绘制图片</li>\n<li><code>Ticker Class</code> – 定时广播</li>\n<li>……等</li>\n</ol>\n<h3 id=\"一些”栗子”\"><a href=\"#一些”栗子”\" class=\"headerlink\" title=\"一些”栗子”\"></a>一些”栗子”</h3><h4 id=\"绘制文本-Text-Class\"><a href=\"#绘制文本-Text-Class\" class=\"headerlink\" title=\"绘制文本(Text Class)\"></a>绘制文本(Text Class)</h4><p>定义一个<code>&lt;canvas&gt; &lt;/canvas&gt;</code> 画布。</p>\n<pre><code>// HTML:\n&lt;!-- Text Class 文本类--&gt;\n&lt;canvas id=&quot;demo1&quot; width=&quot;650&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;\n</code></pre><p>调用<code>EaselJS</code>提供的<code>API - new createjs.Text()</code>，绘制文字</p>\n<pre><code>// JS\n&lt;script src=&quot;https://code.createjs.com/1.0.0/createjs.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.onload = () =&gt; {\n    /**\n      * Test Class 文本类 -- demo\n      */\n    let stage1 = new createjs.Stage(&quot;demo1&quot;);\n\n    let text1 = new createjs.Text(&quot;Text 1 !&quot;, &quot;bold 26px Arial&quot;, &quot;#ff7700&quot;);\n    text1.regX = -50;     // 沿X轴负方向的偏移量\n    text1.regY = -50;     // 沿Y轴负方向的偏移量\n    text1.x = 100;        // 绘制源点 X坐标\n    text1.y = 50;         // 绘制源点 Y坐标\n\n    let text2 = new createjs.Text(&quot;旋转+XY拉伸！&quot;, &quot;bold 18px Arial&quot;, &quot;#ff7700&quot;);\n    text2.x = 50;\n    text2.y = 50;\n    text2.rotation = 50;      // 旋转角度 DEG\n    text2.scaleX = 3;         // X轴放大(拉伸)\n    text2.scaleY = 2;         // X轴放大(拉伸)\n\n    let text3 = new createjs.Text(&quot;XY轴倾斜&quot;, &quot;bold 50px Arial&quot;, &quot;#ff7700&quot;);\n    text3.x = 300;\n    text3.y = 200;\n    text3.skewX = 45;         // X轴倾斜角度 DEG\n    text3.skewY = 20;         // Y周倾斜角度 DEG\n\n    let text4 = new createjs.Text(&quot;文字shadow&quot;, &quot;bold 30px Arial&quot;, &quot;#ff7700&quot;);\n    text4.x = 400;\n    text4.y = 100;\n    text4.shadow = new createjs.Shadow(&quot;#000000&quot;, 5, 5, 10);      // 创建一个shadow实例Object\n\n    stage1.addChild(text1, text2, text3, text4);\n    stage1.update();    // 更新舞台，每次修改操作后需要更新真个舞台才有效果\n  }\n&lt;/script&gt;\n</code></pre><h4 id=\"绘制图形-Graphics-Class\"><a href=\"#绘制图形-Graphics-Class\" class=\"headerlink\" title=\"绘制图形(Graphics Class)\"></a>绘制图形(Graphics Class)</h4><p>定义一个<code>&lt;canvas&gt; &lt;/canvas&gt;</code> 画布。</p>\n<pre><code>// HTML:\n&lt;!-- Graphics Class 文本类--&gt;\n&lt;canvas id=&quot;demo2&quot; width=&quot;650&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;\n</code></pre><p>调用<code>EaselJS</code>提供的<code>API - new createjs.Graphics()</code>，绘制图形</p>\n<pre><code>// JS\n&lt;script src=&quot;https://code.createjs.com/1.0.0/createjs.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.onload = () =&gt; {\n    /**\n      * Graphics Class 绘图类 -- demo\n      * 用于生成矢量绘图指令\n      */\n    let stage2 = new createjs.Stage(&#39;demo2&#39;)\n\n    // 画线\n    let g = new createjs.Graphics();\n    /* 同一个 Graphics 实例， 可以多次绘制，以下线段、折线都是用 g 实例绘制的*/\n    g.setStrokeStyle(10).beginStroke(&quot;#d23c4f&quot;).moveTo(400,10).lineTo(600,100)\n    // 简写形式\n    g.ss(20).s(&#39;#fafa35&#39;).mt(400,100).lt(400,260)\n    // 多点折线的简写形式\n    g.ss(1).s(&#39;#000&#39;).mt(600,400).lt(600, 200).lt(400,300).lt(500, 550)\n\n    // Graphics 实例不能直接 addChild() 到舞台 stage 中，实例化为 Shape 实例后才可以\n    let line = new createjs.Shape(g)\n\n    // 圆\n    let g1 = new createjs.Graphics();\n    g1.setStrokeStyle(1);         // 描边\n    g1.beginStroke(&quot;#000000&quot;);    // 描边颜色\n    g1.beginFill(&quot;red&quot;);          // 图形填充\n    g1.drawCircle(0,0,100);        // 绘制 (X, X, R)\n    let c1 = new createjs.Shape(g1)     // 实例化Shape对象\n\n    // 矩形\n    let g2 = new createjs.Graphics().beginStroke(&quot;red&quot;).beginFill(&quot;blue&quot;).drawRect(150, 0, 200, 100);     // X, Y, W, H\n    let c2 = new createjs.Shape(g2)\n\n    // 命令对象\n    let g3 = new createjs.Graphics();\n    // 每个图形接口调用后会生成一个命令对象，可以使用.command访问，它保存对已创建或附加的最后一个命令的引用\n    let fillCommand = g3.beginFill(&quot;green&quot;).command;\n    g3.drawCircle(200,200,50);        // 绘制 (X, X, R)\n    let c3 = new createjs.Shape(g3);\n\n    // 一些异步操作后，更新填充样式/颜色:\n    setTimeout(() =&gt; {\n      fillCommand.style = &quot;gray&quot;;\n      stage2.update();                // 不更新舞台，不会重新渲染\n    }, 2000);\n\n    // 点击事件\n    //c3.addEventListener(&#39;click&#39;, () =&gt; {\n    // alert(123)\n    // fillCommand.style = &quot;gray&quot;;\n    // stage2.update();          // 不更新舞台，不会重新渲染\n    //})\n\n    stage2.addChild(c1, c2, c3, line);\n    stage2.update();\n  }\n&lt;/script&gt;\n</code></pre><h4 id=\"绘制图像imgaes-Bitmap-Class\"><a href=\"#绘制图像imgaes-Bitmap-Class\" class=\"headerlink\" title=\"绘制图像imgaes(Bitmap Class)\"></a>绘制图像imgaes(Bitmap Class)</h4><p>定义一个<code>&lt;canvas&gt; &lt;/canvas&gt;</code> 画布。</p>\n<pre><code>// HTML:\n&lt;!-- Bitmap Class 图像类--&gt;\n&lt;canvas id=&quot;demo3&quot; width=&quot;650&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;\n</code></pre><p>调用<code>EaselJS</code>提供的<code>API - new createjs.Bitmap()</code>，绘制图像</p>\n<pre><code>// JS\n&lt;script src=&quot;https://code.createjs.com/1.0.0/createjs.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.onload = () =&gt; {\n    /**\n      * bitmap Class 图像类\n      * 用于在画布显示列表中渲染图像\n      */\n    let stage3 = new createjs.Stage(&#39;demo3&#39;)\n\n    // 渲染图片\n    let bitmap = new createjs.Bitmap(&#39;./assets/img/hill1.png&#39;)\n    bitmap.alpha = 0.6      // 透明度\n    bitmap.cursor = &#39;help&#39;\n    // 创建一个shadow实例Object(color, offsetX, offsetY, blur)\n    bitmap.shadow = new createjs.Shadow(&quot;#97c89e&quot;, 20, 10, 20);\n\n    // 给图片添加遮罩\n    let bitmap2 = new createjs.Bitmap(&#39;./assets/img/avatar.jpg&#39;)\n    bitmap2.x = 400;        // 图片绘制的起始点X坐标\n    bitmap2.y = 0;          // 图片绘制的起始点Y坐标\n    //遮罩图形\n    let shape = new createjs.Shape();\n    shape.graphics.beginFill(&#39;#000&#39;).drawCircle(0, 0, 100);\n    shape.x = 500;          // 圆心X坐标\n    shape.y = 100;          // 圆心Y坐标\n    bitmap2.mask = shape;   //给图片bg添加遮罩\n\n    // 绘制一片草地\n    let groundBg = new createjs.Bitmap(&quot;./assets/img/ground.png&quot;).image;\n    let ground = new createjs.Shape();\n    w = stage3.canvas.width;      // 650\n    h = stage3.canvas.height;     // 400\n    stage3.addChild(ground)\n\n    stage3.addChild(bitmap, bitmap2)\n    stage3.update()       // 此处刷新无效\n\n    // 监听定时广播\n    createjs.Ticker.timingMode = createjs.Ticker.RAF;\n    createjs.Ticker.addEventListener(&#39;tick&#39;,(event) =&gt; {\n      ground.tileW = groundBg.width;\n      ground.y = h - groundBg.height;\n      ground.graphics.beginBitmapFill(groundBg).drawRect(0, 0, w, groundBg.height);\n      ground.cache(0, 0, w, groundBg.height);\n\n      stage3.update()\n    });\n  }\n&lt;/script&gt;\n</code></pre><h3 id=\"一个小游戏-来自官网Demo-Running-man\"><a href=\"#一个小游戏-来自官网Demo-Running-man\" class=\"headerlink\" title=\"一个小游戏(来自官网Demo) Running man\"></a>一个小游戏(来自官网Demo) Running man</h3><h4 id=\"定义一个-lt-canvas-gt-lt-canvas-gt-画布\"><a href=\"#定义一个-lt-canvas-gt-lt-canvas-gt-画布\" class=\"headerlink\" title=\"定义一个&lt;canvas&gt;&lt;/canvas&gt;画布\"></a>定义一个<code>&lt;canvas&gt;&lt;/canvas&gt;</code>画布</h4><pre><code>&lt;!-- HTML --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n  &lt;title&gt;running-man game&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;canvas id=&quot;demoCanvas&quot; width=&quot;960&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码\"></a>JS代码</h4><p>这里就不写具体思路分析了，代码不长，注释也很详细，方便理解，直接上代码。</p>\n<pre><code>// JS\n&lt;script src=&quot;https://code.createjs.com/1.0.0/createjs.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.onload = () =&gt; {\n    let stage, w, h, loader;\n    let sky, grant, ground, hill, hill2;\n\n    function init() {\n      stage = new createjs.StageGL(&quot;demoCanvas&quot;);\n\n      // 获取画布的宽和高，后面计算使用\n      w = stage.canvas.width;     // 960\n      h = stage.canvas.height;    // 400\n\n      // 定义静态资源\n      let manifest = [{\n        src: &quot;spritesheet_grant.png&quot;, id: &quot;grant&quot;}, {     // 人物动作雪碧图\n        src: &quot;sky.png&quot;, id: &quot;sky&quot;}, {           // 天空\n        src: &quot;ground.png&quot;, id: &quot;ground&quot;}, {     // 地面\n        src: &quot;hill1.png&quot;, id: &quot;hill&quot;}, {        // 远山\n        src: &quot;hill2.png&quot;, id: &quot;hill2&quot;           // 近山\n      }];     // Array, String, Object\n\n      // 创建资源加载队列\n      // (Boolean) 用XHR还是用HTML标签来加载\n      // 如果是false的时候，就用标签来加载，如果不能用标签的话，就用XHR来加载。默认是true，用XHR来加载。\n      loader = new createjs.LoadQueue(false);\n      // 添加&quot;资源加载完成&quot;事件\n      loader.addEventListener(&quot;complete&quot;, handleComplete);\n      // 加载资源\n      loader.loadManifest(manifest, true, &quot;./assets/img/&quot;);  // (manifest, loadNow, basePath)\n    }\n\n    /**\n      * 静态资源加载完成，处理函数\n      */\n    function handleComplete() {\n      // 渲染天空\n      sky = new createjs.Shape();\n      sky.graphics.beginBitmapFill(loader.getResult(&quot;sky&quot;)).drawRect(0, 0, w, h);\n      // 定义缓存区域(整个天空的区域))\n      sky.cache(0, 0, w, h);\n\n      // 渲染地面\n      let groundImg = loader.getResult(&quot;ground&quot;);\n      ground = new createjs.Shape();\n      // 注意：drawRect()宽度要躲绘制一个单位\n      ground.graphics.beginBitmapFill(groundImg).drawRect(0, 0, w + groundImg.width, groundImg.height);\n      ground.tileW = groundImg.width;\n      ground.y = h - groundImg.height;\n      // 缓存区域(地面的区域)\n      ground.cache(0, 0, w + groundImg.width, groundImg.height);\n\n      // 随机渲染远处山脉\n      hill = new createjs.Bitmap(loader.getResult(&quot;hill&quot;));\n      // 设置图像转换\n      // setTransform([x=0], [y=0], [scaleX=1], [scaleY=1], [rotation=0], [skewX=0], [skewY=0], [regX=0], [regY=0])\n      hill.setTransform(Math.random() * w, h - hill.image.height * 4 - groundImg.height, 4, 4);\n      hill.alpha = 0.5;     // 设置透明度\n\n      // 随机渲染近处山脉\n      hill2 = new createjs.Bitmap(loader.getResult(&quot;hill2&quot;));\n      hill2.setTransform(Math.random() * w, h - hill2.image.height * 3 - groundImg.height, 3, 3);\n\n      // 创建雪碧图动画\n      let spriteSheet = new createjs.SpriteSheet({\n        framerate: 30,      // 帧率 FPS\n        &quot;images&quot;: [loader.getResult(&quot;grant&quot;)],      // 雪碧图原图\n        &quot;frames&quot;: {&quot;width&quot;: 165, &quot;height&quot;: 292, &quot;count&quot;: 64, &quot;regX&quot;: 82, &quot;regY&quot;: 0},  // 初始化\n        // 定义动画\n        &quot;animations&quot;: {\n          &quot;run&quot;: [0, 25, &quot;run&quot;],     // name: [开始索引, 结束索引, &#39;下一个动画名称&#39;, 倍率]\n          &quot;jump&quot;: [26, 63, &quot;run&quot;]\n        }\n      });\n\n      // 绘制动画\n      grant = new createjs.Sprite(spriteSheet, &quot;run&quot;);\n      // 处理雪碧图人物下方空白\n      grant.y = 35;\n\n      // 将生成的所有内容渲染至舞台\n      stage.addChild(sky, ground, hill, hill2, grant);\n\n      // 监听舞台上的鼠标点击事件\n      stage.addEventListener(&quot;stagemousedown&quot;, () =&gt; {\n        // 跳转播放 jump 动画\n        grant.gotoAndPlay(&quot;jump&quot;);\n      });\n\n      createjs.Ticker.timingMode = createjs.Ticker.RAF;     // RAF / RAF_SYNCHED / TIMEOUT\n      createjs.Ticker.addEventListener(&quot;tick&quot;, tick);\n    }\n\n\n    /**\n      * 定时器-重绘舞台\n      */\n    function tick(event) {\n      // event.delta -- 上一次tick到当前tick的ms\n      let deltaS = event.delta / 1000;\n      // 雪碧图人物移动距离\n      let position = grant.x + 150 * deltaS;\n\n      // getBounds() -- 返回当前帧相对于雪碧图原点的边界\n      let grantW = grant.getBounds().width * grant.scaleX;\n      grant.x = (position &gt;= w + grantW) ? -grantW : position;\n\n      ground.x = (ground.x - deltaS * 150) % ground.tileW;\n\n      // 从右至左移动山脉\n      hill.x = (hill.x - deltaS * 30);\n      // 如果山脉从左侧离开屏幕\n      if (hill.x + hill.image.width * hill.scaleX &lt;= 0) {\n        hill.x = w;     // 重置回屏幕最右侧\n      }\n\n      // 处理如上\n      hill2.x = (hill2.x - deltaS * 45);\n      if (hill2.x + hill2.image.width * hill2.scaleX &lt;= 0) {\n        hill2.x = w;\n      }\n\n      stage.update();\n    }\n\n    // 程序主入口-初始化\n    init()\n  }\n&lt;/script&gt;\n</code></pre><h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><blockquote>\n<p>示例demo的GitHub地址：<a href=\"https://github.com/webCaolixin/study-notes/tree/master/create-js\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n</blockquote>\n<!-- 图片链接定义-->\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是CreateJS\"><a href=\"#什么是CreateJS\" class=\"headerlink\" title=\"什么是CreateJS\"></a>什么是CreateJS</h3><blockquote>\n<p><a href=\"https://www.createjs.com/\" target=\"_blank\" rel=\"noopener\">官网介绍</a> （<a href=\"http://www.createjs.cc/\" target=\"_blank\" rel=\"noopener\">中文</a>）：CreateJS 是一组模块化代码库和工具套件，可以独立工作也可以组合工作，用于通过HTML5技术来在网页上开发丰富的交互式内容。</p>\n</blockquote>\n<h3 id=\"四个核心库\"><a href=\"#四个核心库\" class=\"headerlink\" title=\"四个核心库\"></a>四个核心库</h3><p>CreateJS主要包含如下四个类库：</p>\n<ul>\n<li><code>EaselJS</code> – 简化处理HTML5画布（核心）</li>\n<li><code>TweenJS</code> – 用来帮助设计H5动画，调整HTML5属性</li>\n<li><code>SoundJS</code> – 用来简化处理HTML5 audio 音频</li>\n<li><code>PreloadJS</code> – 帮助管理和协调加载中的一些资源</li>\n</ul>","more":"<p><strong>今天，主要来了解一下 <code>EaselJS</code> 库</strong></p>\n<h3 id=\"EaselJS\"><a href=\"#EaselJS\" class=\"headerlink\" title=\"EaselJS\"></a>EaselJS</h3><p><img src=\"/medias/article/coding/create-js/easeljs.jpg\" alt=\"EaselJS\"></p>\n<h4 id=\"EaselJS-简介\"><a href=\"#EaselJS-简介\" class=\"headerlink\" title=\"EaselJS 简介\"></a>EaselJS 简介</h4><blockquote>\n<p><code>EaselJS</code> 是一个JavaScript库,用来简单快捷的操作 <code>HTML5 Canvas</code> 标签。在创建H5游戏，生成艺术作品、处理其他高级图形化等工作中有着很友好的体验。</p>\n</blockquote>\n<h4 id=\"EaselJS中的一些核心类\"><a href=\"#EaselJS中的一些核心类\" class=\"headerlink\" title=\"EaselJS中的一些核心类\"></a>EaselJS中的一些核心类</h4><ol>\n<li><code>Stage Class</code> – 创建舞台</li>\n<li><code>Text Class</code> – 绘制文字</li>\n<li><code>Graphics Class</code> – 绘制图形</li>\n<li><code>Shape Class</code> – 绘制图形</li>\n<li><code>Bitmap Class</code> – 绘制图片</li>\n<li><code>Ticker Class</code> – 定时广播</li>\n<li>……等</li>\n</ol>\n<h3 id=\"一些”栗子”\"><a href=\"#一些”栗子”\" class=\"headerlink\" title=\"一些”栗子”\"></a>一些”栗子”</h3><h4 id=\"绘制文本-Text-Class\"><a href=\"#绘制文本-Text-Class\" class=\"headerlink\" title=\"绘制文本(Text Class)\"></a>绘制文本(Text Class)</h4><p>定义一个<code>&lt;canvas&gt; &lt;/canvas&gt;</code> 画布。</p>\n<pre><code>// HTML:\n&lt;!-- Text Class 文本类--&gt;\n&lt;canvas id=&quot;demo1&quot; width=&quot;650&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;\n</code></pre><p>调用<code>EaselJS</code>提供的<code>API - new createjs.Text()</code>，绘制文字</p>\n<pre><code>// JS\n&lt;script src=&quot;https://code.createjs.com/1.0.0/createjs.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.onload = () =&gt; {\n    /**\n      * Test Class 文本类 -- demo\n      */\n    let stage1 = new createjs.Stage(&quot;demo1&quot;);\n\n    let text1 = new createjs.Text(&quot;Text 1 !&quot;, &quot;bold 26px Arial&quot;, &quot;#ff7700&quot;);\n    text1.regX = -50;     // 沿X轴负方向的偏移量\n    text1.regY = -50;     // 沿Y轴负方向的偏移量\n    text1.x = 100;        // 绘制源点 X坐标\n    text1.y = 50;         // 绘制源点 Y坐标\n\n    let text2 = new createjs.Text(&quot;旋转+XY拉伸！&quot;, &quot;bold 18px Arial&quot;, &quot;#ff7700&quot;);\n    text2.x = 50;\n    text2.y = 50;\n    text2.rotation = 50;      // 旋转角度 DEG\n    text2.scaleX = 3;         // X轴放大(拉伸)\n    text2.scaleY = 2;         // X轴放大(拉伸)\n\n    let text3 = new createjs.Text(&quot;XY轴倾斜&quot;, &quot;bold 50px Arial&quot;, &quot;#ff7700&quot;);\n    text3.x = 300;\n    text3.y = 200;\n    text3.skewX = 45;         // X轴倾斜角度 DEG\n    text3.skewY = 20;         // Y周倾斜角度 DEG\n\n    let text4 = new createjs.Text(&quot;文字shadow&quot;, &quot;bold 30px Arial&quot;, &quot;#ff7700&quot;);\n    text4.x = 400;\n    text4.y = 100;\n    text4.shadow = new createjs.Shadow(&quot;#000000&quot;, 5, 5, 10);      // 创建一个shadow实例Object\n\n    stage1.addChild(text1, text2, text3, text4);\n    stage1.update();    // 更新舞台，每次修改操作后需要更新真个舞台才有效果\n  }\n&lt;/script&gt;\n</code></pre><h4 id=\"绘制图形-Graphics-Class\"><a href=\"#绘制图形-Graphics-Class\" class=\"headerlink\" title=\"绘制图形(Graphics Class)\"></a>绘制图形(Graphics Class)</h4><p>定义一个<code>&lt;canvas&gt; &lt;/canvas&gt;</code> 画布。</p>\n<pre><code>// HTML:\n&lt;!-- Graphics Class 文本类--&gt;\n&lt;canvas id=&quot;demo2&quot; width=&quot;650&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;\n</code></pre><p>调用<code>EaselJS</code>提供的<code>API - new createjs.Graphics()</code>，绘制图形</p>\n<pre><code>// JS\n&lt;script src=&quot;https://code.createjs.com/1.0.0/createjs.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.onload = () =&gt; {\n    /**\n      * Graphics Class 绘图类 -- demo\n      * 用于生成矢量绘图指令\n      */\n    let stage2 = new createjs.Stage(&#39;demo2&#39;)\n\n    // 画线\n    let g = new createjs.Graphics();\n    /* 同一个 Graphics 实例， 可以多次绘制，以下线段、折线都是用 g 实例绘制的*/\n    g.setStrokeStyle(10).beginStroke(&quot;#d23c4f&quot;).moveTo(400,10).lineTo(600,100)\n    // 简写形式\n    g.ss(20).s(&#39;#fafa35&#39;).mt(400,100).lt(400,260)\n    // 多点折线的简写形式\n    g.ss(1).s(&#39;#000&#39;).mt(600,400).lt(600, 200).lt(400,300).lt(500, 550)\n\n    // Graphics 实例不能直接 addChild() 到舞台 stage 中，实例化为 Shape 实例后才可以\n    let line = new createjs.Shape(g)\n\n    // 圆\n    let g1 = new createjs.Graphics();\n    g1.setStrokeStyle(1);         // 描边\n    g1.beginStroke(&quot;#000000&quot;);    // 描边颜色\n    g1.beginFill(&quot;red&quot;);          // 图形填充\n    g1.drawCircle(0,0,100);        // 绘制 (X, X, R)\n    let c1 = new createjs.Shape(g1)     // 实例化Shape对象\n\n    // 矩形\n    let g2 = new createjs.Graphics().beginStroke(&quot;red&quot;).beginFill(&quot;blue&quot;).drawRect(150, 0, 200, 100);     // X, Y, W, H\n    let c2 = new createjs.Shape(g2)\n\n    // 命令对象\n    let g3 = new createjs.Graphics();\n    // 每个图形接口调用后会生成一个命令对象，可以使用.command访问，它保存对已创建或附加的最后一个命令的引用\n    let fillCommand = g3.beginFill(&quot;green&quot;).command;\n    g3.drawCircle(200,200,50);        // 绘制 (X, X, R)\n    let c3 = new createjs.Shape(g3);\n\n    // 一些异步操作后，更新填充样式/颜色:\n    setTimeout(() =&gt; {\n      fillCommand.style = &quot;gray&quot;;\n      stage2.update();                // 不更新舞台，不会重新渲染\n    }, 2000);\n\n    // 点击事件\n    //c3.addEventListener(&#39;click&#39;, () =&gt; {\n    // alert(123)\n    // fillCommand.style = &quot;gray&quot;;\n    // stage2.update();          // 不更新舞台，不会重新渲染\n    //})\n\n    stage2.addChild(c1, c2, c3, line);\n    stage2.update();\n  }\n&lt;/script&gt;\n</code></pre><h4 id=\"绘制图像imgaes-Bitmap-Class\"><a href=\"#绘制图像imgaes-Bitmap-Class\" class=\"headerlink\" title=\"绘制图像imgaes(Bitmap Class)\"></a>绘制图像imgaes(Bitmap Class)</h4><p>定义一个<code>&lt;canvas&gt; &lt;/canvas&gt;</code> 画布。</p>\n<pre><code>// HTML:\n&lt;!-- Bitmap Class 图像类--&gt;\n&lt;canvas id=&quot;demo3&quot; width=&quot;650&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;\n</code></pre><p>调用<code>EaselJS</code>提供的<code>API - new createjs.Bitmap()</code>，绘制图像</p>\n<pre><code>// JS\n&lt;script src=&quot;https://code.createjs.com/1.0.0/createjs.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.onload = () =&gt; {\n    /**\n      * bitmap Class 图像类\n      * 用于在画布显示列表中渲染图像\n      */\n    let stage3 = new createjs.Stage(&#39;demo3&#39;)\n\n    // 渲染图片\n    let bitmap = new createjs.Bitmap(&#39;./assets/img/hill1.png&#39;)\n    bitmap.alpha = 0.6      // 透明度\n    bitmap.cursor = &#39;help&#39;\n    // 创建一个shadow实例Object(color, offsetX, offsetY, blur)\n    bitmap.shadow = new createjs.Shadow(&quot;#97c89e&quot;, 20, 10, 20);\n\n    // 给图片添加遮罩\n    let bitmap2 = new createjs.Bitmap(&#39;./assets/img/avatar.jpg&#39;)\n    bitmap2.x = 400;        // 图片绘制的起始点X坐标\n    bitmap2.y = 0;          // 图片绘制的起始点Y坐标\n    //遮罩图形\n    let shape = new createjs.Shape();\n    shape.graphics.beginFill(&#39;#000&#39;).drawCircle(0, 0, 100);\n    shape.x = 500;          // 圆心X坐标\n    shape.y = 100;          // 圆心Y坐标\n    bitmap2.mask = shape;   //给图片bg添加遮罩\n\n    // 绘制一片草地\n    let groundBg = new createjs.Bitmap(&quot;./assets/img/ground.png&quot;).image;\n    let ground = new createjs.Shape();\n    w = stage3.canvas.width;      // 650\n    h = stage3.canvas.height;     // 400\n    stage3.addChild(ground)\n\n    stage3.addChild(bitmap, bitmap2)\n    stage3.update()       // 此处刷新无效\n\n    // 监听定时广播\n    createjs.Ticker.timingMode = createjs.Ticker.RAF;\n    createjs.Ticker.addEventListener(&#39;tick&#39;,(event) =&gt; {\n      ground.tileW = groundBg.width;\n      ground.y = h - groundBg.height;\n      ground.graphics.beginBitmapFill(groundBg).drawRect(0, 0, w, groundBg.height);\n      ground.cache(0, 0, w, groundBg.height);\n\n      stage3.update()\n    });\n  }\n&lt;/script&gt;\n</code></pre><h3 id=\"一个小游戏-来自官网Demo-Running-man\"><a href=\"#一个小游戏-来自官网Demo-Running-man\" class=\"headerlink\" title=\"一个小游戏(来自官网Demo) Running man\"></a>一个小游戏(来自官网Demo) Running man</h3><h4 id=\"定义一个-lt-canvas-gt-lt-canvas-gt-画布\"><a href=\"#定义一个-lt-canvas-gt-lt-canvas-gt-画布\" class=\"headerlink\" title=\"定义一个&lt;canvas&gt;&lt;/canvas&gt;画布\"></a>定义一个<code>&lt;canvas&gt;&lt;/canvas&gt;</code>画布</h4><pre><code>&lt;!-- HTML --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n  &lt;title&gt;running-man game&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;canvas id=&quot;demoCanvas&quot; width=&quot;960&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码\"></a>JS代码</h4><p>这里就不写具体思路分析了，代码不长，注释也很详细，方便理解，直接上代码。</p>\n<pre><code>// JS\n&lt;script src=&quot;https://code.createjs.com/1.0.0/createjs.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  window.onload = () =&gt; {\n    let stage, w, h, loader;\n    let sky, grant, ground, hill, hill2;\n\n    function init() {\n      stage = new createjs.StageGL(&quot;demoCanvas&quot;);\n\n      // 获取画布的宽和高，后面计算使用\n      w = stage.canvas.width;     // 960\n      h = stage.canvas.height;    // 400\n\n      // 定义静态资源\n      let manifest = [{\n        src: &quot;spritesheet_grant.png&quot;, id: &quot;grant&quot;}, {     // 人物动作雪碧图\n        src: &quot;sky.png&quot;, id: &quot;sky&quot;}, {           // 天空\n        src: &quot;ground.png&quot;, id: &quot;ground&quot;}, {     // 地面\n        src: &quot;hill1.png&quot;, id: &quot;hill&quot;}, {        // 远山\n        src: &quot;hill2.png&quot;, id: &quot;hill2&quot;           // 近山\n      }];     // Array, String, Object\n\n      // 创建资源加载队列\n      // (Boolean) 用XHR还是用HTML标签来加载\n      // 如果是false的时候，就用标签来加载，如果不能用标签的话，就用XHR来加载。默认是true，用XHR来加载。\n      loader = new createjs.LoadQueue(false);\n      // 添加&quot;资源加载完成&quot;事件\n      loader.addEventListener(&quot;complete&quot;, handleComplete);\n      // 加载资源\n      loader.loadManifest(manifest, true, &quot;./assets/img/&quot;);  // (manifest, loadNow, basePath)\n    }\n\n    /**\n      * 静态资源加载完成，处理函数\n      */\n    function handleComplete() {\n      // 渲染天空\n      sky = new createjs.Shape();\n      sky.graphics.beginBitmapFill(loader.getResult(&quot;sky&quot;)).drawRect(0, 0, w, h);\n      // 定义缓存区域(整个天空的区域))\n      sky.cache(0, 0, w, h);\n\n      // 渲染地面\n      let groundImg = loader.getResult(&quot;ground&quot;);\n      ground = new createjs.Shape();\n      // 注意：drawRect()宽度要躲绘制一个单位\n      ground.graphics.beginBitmapFill(groundImg).drawRect(0, 0, w + groundImg.width, groundImg.height);\n      ground.tileW = groundImg.width;\n      ground.y = h - groundImg.height;\n      // 缓存区域(地面的区域)\n      ground.cache(0, 0, w + groundImg.width, groundImg.height);\n\n      // 随机渲染远处山脉\n      hill = new createjs.Bitmap(loader.getResult(&quot;hill&quot;));\n      // 设置图像转换\n      // setTransform([x=0], [y=0], [scaleX=1], [scaleY=1], [rotation=0], [skewX=0], [skewY=0], [regX=0], [regY=0])\n      hill.setTransform(Math.random() * w, h - hill.image.height * 4 - groundImg.height, 4, 4);\n      hill.alpha = 0.5;     // 设置透明度\n\n      // 随机渲染近处山脉\n      hill2 = new createjs.Bitmap(loader.getResult(&quot;hill2&quot;));\n      hill2.setTransform(Math.random() * w, h - hill2.image.height * 3 - groundImg.height, 3, 3);\n\n      // 创建雪碧图动画\n      let spriteSheet = new createjs.SpriteSheet({\n        framerate: 30,      // 帧率 FPS\n        &quot;images&quot;: [loader.getResult(&quot;grant&quot;)],      // 雪碧图原图\n        &quot;frames&quot;: {&quot;width&quot;: 165, &quot;height&quot;: 292, &quot;count&quot;: 64, &quot;regX&quot;: 82, &quot;regY&quot;: 0},  // 初始化\n        // 定义动画\n        &quot;animations&quot;: {\n          &quot;run&quot;: [0, 25, &quot;run&quot;],     // name: [开始索引, 结束索引, &#39;下一个动画名称&#39;, 倍率]\n          &quot;jump&quot;: [26, 63, &quot;run&quot;]\n        }\n      });\n\n      // 绘制动画\n      grant = new createjs.Sprite(spriteSheet, &quot;run&quot;);\n      // 处理雪碧图人物下方空白\n      grant.y = 35;\n\n      // 将生成的所有内容渲染至舞台\n      stage.addChild(sky, ground, hill, hill2, grant);\n\n      // 监听舞台上的鼠标点击事件\n      stage.addEventListener(&quot;stagemousedown&quot;, () =&gt; {\n        // 跳转播放 jump 动画\n        grant.gotoAndPlay(&quot;jump&quot;);\n      });\n\n      createjs.Ticker.timingMode = createjs.Ticker.RAF;     // RAF / RAF_SYNCHED / TIMEOUT\n      createjs.Ticker.addEventListener(&quot;tick&quot;, tick);\n    }\n\n\n    /**\n      * 定时器-重绘舞台\n      */\n    function tick(event) {\n      // event.delta -- 上一次tick到当前tick的ms\n      let deltaS = event.delta / 1000;\n      // 雪碧图人物移动距离\n      let position = grant.x + 150 * deltaS;\n\n      // getBounds() -- 返回当前帧相对于雪碧图原点的边界\n      let grantW = grant.getBounds().width * grant.scaleX;\n      grant.x = (position &gt;= w + grantW) ? -grantW : position;\n\n      ground.x = (ground.x - deltaS * 150) % ground.tileW;\n\n      // 从右至左移动山脉\n      hill.x = (hill.x - deltaS * 30);\n      // 如果山脉从左侧离开屏幕\n      if (hill.x + hill.image.width * hill.scaleX &lt;= 0) {\n        hill.x = w;     // 重置回屏幕最右侧\n      }\n\n      // 处理如上\n      hill2.x = (hill2.x - deltaS * 45);\n      if (hill2.x + hill2.image.width * hill2.scaleX &lt;= 0) {\n        hill2.x = w;\n      }\n\n      stage.update();\n    }\n\n    // 程序主入口-初始化\n    init()\n  }\n&lt;/script&gt;\n</code></pre><h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><blockquote>\n<p>示例demo的GitHub地址：<a href=\"https://github.com/webCaolixin/study-notes/tree/master/create-js\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n</blockquote>\n<!-- 图片链接定义-->"},{"title":"倒影","date":"2018-09-29T06:28:13.000Z","_content":"\n> 几月前，于微博中见一题为——`“摄影师眼里雨后的世界”`的博文，摄影师将镜头倒转，在雨后的一汪小水潭中捕捉到一个美丽的`“镜像世界”`，幽蓝的夜色下，车水马龙、灯火阑珊的街头，却给人一种平静祥和来自现实的梦幻般的美，观之实为惊叹。\n\n<img id=\"sina-blog\" src=\"/medias/galleries/reflection/sina-blog.jpg\" alt=\"摄影师眼里雨后的世界”引用博文(侵删)\"/>\n<div class=\"gallery-tip-ceter\">“摄影师眼里雨后的世界”引用博文(侵删)</div>\n\n<img id=\"sina-blog-img\" src=\"/medias/galleries/reflection/sina-blog-img.jpg\" alt=\"摄影师眼里雨后的世界”视频截图(侵删)\"/>\n<div class=\"gallery-tip-ceter\">“摄影师眼里雨后的世界”视频截图(侵删)</div>\n\n\n>个人同样爱好摄影，但并不专业，平日里自己琢磨，纯属“自娱自乐”。看到这一博文，从此便迷上这个角度，闲暇之时幸遇一些相似的景致，用手机记录下一个个瞬间，便有了这`《倒影》`影集。若有专业人士不吝赐教，也欢迎点评指正。\n\n![2018.09.20-摄于西安市高新区][1]\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n![2018.09.20-摄于西安市高新区][2]\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n![2018.09.20-摄于西安市高新区][3]\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n![2018.09.19-摄于西安市高新区][4]\n<div class=\"gallery-tip-ceter\">2018.09.19-摄于西安市高新区</div>\n\n![2018.09.05-摄于西安市高新区][5]\n<div class=\"gallery-tip-ceter\">2018.09.05-摄于西安市高新区</div>\n\n![2018.07.04-摄于西安市高新区][6]\n<div class=\"gallery-tip-ceter\">2018.07.04-摄于西安市高新区</div>\n\n![2018.06.26-摄于西安市高新区][7]\n<div class=\"gallery-tip-ceter\">2018.06.26-摄于西安市高新区</div>\n\n\n[1]: /medias/galleries/reflection/20180920_193227.jpg\n[2]: /medias/galleries/reflection/20180920_193229.jpg\n[3]: /medias/galleries/reflection/20180920_193340.jpg\n[4]: /medias/galleries/reflection/20180919_184602.jpg\n[5]: /medias/galleries/reflection/20180905_191759.jpg\n[6]: /medias/galleries/reflection/20180704_211340.jpg\n[7]: /medias/galleries/reflection/20180626_191742.jpg\n\n\n<style>\n  #galleryContent img#sina-blog-img,\n  #galleryContent img#sina-blog {\n    width: auto;\n  }\n</style>","source":"_posts/gallery-1.md","raw":"---\ntitle: 倒影\ndate: 2018-09-29 14:28:13\ncategories: 影集\ntags: 随拍(影集)\n---\n\n> 几月前，于微博中见一题为——`“摄影师眼里雨后的世界”`的博文，摄影师将镜头倒转，在雨后的一汪小水潭中捕捉到一个美丽的`“镜像世界”`，幽蓝的夜色下，车水马龙、灯火阑珊的街头，却给人一种平静祥和来自现实的梦幻般的美，观之实为惊叹。\n\n<img id=\"sina-blog\" src=\"/medias/galleries/reflection/sina-blog.jpg\" alt=\"摄影师眼里雨后的世界”引用博文(侵删)\"/>\n<div class=\"gallery-tip-ceter\">“摄影师眼里雨后的世界”引用博文(侵删)</div>\n\n<img id=\"sina-blog-img\" src=\"/medias/galleries/reflection/sina-blog-img.jpg\" alt=\"摄影师眼里雨后的世界”视频截图(侵删)\"/>\n<div class=\"gallery-tip-ceter\">“摄影师眼里雨后的世界”视频截图(侵删)</div>\n\n\n>个人同样爱好摄影，但并不专业，平日里自己琢磨，纯属“自娱自乐”。看到这一博文，从此便迷上这个角度，闲暇之时幸遇一些相似的景致，用手机记录下一个个瞬间，便有了这`《倒影》`影集。若有专业人士不吝赐教，也欢迎点评指正。\n\n![2018.09.20-摄于西安市高新区][1]\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n![2018.09.20-摄于西安市高新区][2]\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n![2018.09.20-摄于西安市高新区][3]\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n![2018.09.19-摄于西安市高新区][4]\n<div class=\"gallery-tip-ceter\">2018.09.19-摄于西安市高新区</div>\n\n![2018.09.05-摄于西安市高新区][5]\n<div class=\"gallery-tip-ceter\">2018.09.05-摄于西安市高新区</div>\n\n![2018.07.04-摄于西安市高新区][6]\n<div class=\"gallery-tip-ceter\">2018.07.04-摄于西安市高新区</div>\n\n![2018.06.26-摄于西安市高新区][7]\n<div class=\"gallery-tip-ceter\">2018.06.26-摄于西安市高新区</div>\n\n\n[1]: /medias/galleries/reflection/20180920_193227.jpg\n[2]: /medias/galleries/reflection/20180920_193229.jpg\n[3]: /medias/galleries/reflection/20180920_193340.jpg\n[4]: /medias/galleries/reflection/20180919_184602.jpg\n[5]: /medias/galleries/reflection/20180905_191759.jpg\n[6]: /medias/galleries/reflection/20180704_211340.jpg\n[7]: /medias/galleries/reflection/20180626_191742.jpg\n\n\n<style>\n  #galleryContent img#sina-blog-img,\n  #galleryContent img#sina-blog {\n    width: auto;\n  }\n</style>","slug":"gallery-1","published":1,"updated":"2019-03-21T14:00:47.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4muz001k9kvbz8jq6qju","content":"<blockquote>\n<p>几月前，于微博中见一题为——<code>“摄影师眼里雨后的世界”</code>的博文，摄影师将镜头倒转，在雨后的一汪小水潭中捕捉到一个美丽的<code>“镜像世界”</code>，幽蓝的夜色下，车水马龙、灯火阑珊的街头，却给人一种平静祥和来自现实的梦幻般的美，观之实为惊叹。</p>\n</blockquote>\n<p><img id=\"sina-blog\" src=\"/medias/galleries/reflection/sina-blog.jpg\" alt=\"摄影师眼里雨后的世界”引用博文(侵删)\"></p>\n<div class=\"gallery-tip-ceter\">“摄影师眼里雨后的世界”引用博文(侵删)</div>\n\n<p><img id=\"sina-blog-img\" src=\"/medias/galleries/reflection/sina-blog-img.jpg\" alt=\"摄影师眼里雨后的世界”视频截图(侵删)\"></p>\n<div class=\"gallery-tip-ceter\">“摄影师眼里雨后的世界”视频截图(侵删)</div>\n\n\n<blockquote>\n<p>个人同样爱好摄影，但并不专业，平日里自己琢磨，纯属“自娱自乐”。看到这一博文，从此便迷上这个角度，闲暇之时幸遇一些相似的景致，用手机记录下一个个瞬间，便有了这<code>《倒影》</code>影集。若有专业人士不吝赐教，也欢迎点评指正。</p>\n</blockquote>\n<p><img src=\"/medias/galleries/reflection/20180920_193227.jpg\" alt=\"2018.09.20-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180920_193229.jpg\" alt=\"2018.09.20-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180920_193340.jpg\" alt=\"2018.09.20-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180919_184602.jpg\" alt=\"2018.09.19-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.19-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180905_191759.jpg\" alt=\"2018.09.05-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.05-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180704_211340.jpg\" alt=\"2018.07.04-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.07.04-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180626_191742.jpg\" alt=\"2018.06.26-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.06.26-摄于西安市高新区</div>\n\n\n<style>\n  #galleryContent img#sina-blog-img,\n  #galleryContent img#sina-blog {\n    width: auto;\n  }\n</style>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>几月前，于微博中见一题为——<code>“摄影师眼里雨后的世界”</code>的博文，摄影师将镜头倒转，在雨后的一汪小水潭中捕捉到一个美丽的<code>“镜像世界”</code>，幽蓝的夜色下，车水马龙、灯火阑珊的街头，却给人一种平静祥和来自现实的梦幻般的美，观之实为惊叹。</p>\n</blockquote>\n<p><img id=\"sina-blog\" src=\"/medias/galleries/reflection/sina-blog.jpg\" alt=\"摄影师眼里雨后的世界”引用博文(侵删)\"></p>\n<div class=\"gallery-tip-ceter\">“摄影师眼里雨后的世界”引用博文(侵删)</div>\n\n<p><img id=\"sina-blog-img\" src=\"/medias/galleries/reflection/sina-blog-img.jpg\" alt=\"摄影师眼里雨后的世界”视频截图(侵删)\"></p>\n<div class=\"gallery-tip-ceter\">“摄影师眼里雨后的世界”视频截图(侵删)</div>\n\n\n<blockquote>\n<p>个人同样爱好摄影，但并不专业，平日里自己琢磨，纯属“自娱自乐”。看到这一博文，从此便迷上这个角度，闲暇之时幸遇一些相似的景致，用手机记录下一个个瞬间，便有了这<code>《倒影》</code>影集。若有专业人士不吝赐教，也欢迎点评指正。</p>\n</blockquote>\n<p><img src=\"/medias/galleries/reflection/20180920_193227.jpg\" alt=\"2018.09.20-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180920_193229.jpg\" alt=\"2018.09.20-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180920_193340.jpg\" alt=\"2018.09.20-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.20-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180919_184602.jpg\" alt=\"2018.09.19-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.19-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180905_191759.jpg\" alt=\"2018.09.05-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.09.05-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180704_211340.jpg\" alt=\"2018.07.04-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.07.04-摄于西安市高新区</div>\n\n<p><img src=\"/medias/galleries/reflection/20180626_191742.jpg\" alt=\"2018.06.26-摄于西安市高新区\"></p>\n<div class=\"gallery-tip-ceter\">2018.06.26-摄于西安市高新区</div>\n\n\n<style>\n  #galleryContent img#sina-blog-img,\n  #galleryContent img#sina-blog {\n    width: auto;\n  }\n</style>"},{"title":"如果没有2018","date":"2018-12-31T01:45:14.000Z","img":"/medias/article/journal/goodbbye2108-hello2019.jpg","_content":"\n>有人说，2018是告别的一年，说着江湖已远，说着时代落幕......也有人说，2018年是启航的一年，说着见证历史，说着荣光与梦......可如果没有2018，我们的生活又将会怎样？\n\n![2019新年快乐][1]\n\n### 如果没有2018\n\n**如果没有2018，我们应该会少涨很多“姿势”。**\n\n如果没有2018，我们不会知道原来“`蓝月亮`”不仅仅是洗衣液，还是夜空中的一轮明月；我们不会知道就算“`卡路里`”被注入灵魂，也依旧逃不过“`来了，老弟！`”的“`真香`”定律；我们没想到一只“`爱旅行的青蛙`”会让我们朝思暮想，夜夜盼“蛙”归；我们更没想到的是别人`“逃掉”的税款`，就有可能是你几辈子都挣不来的“天文数字”。\n\n2018年，我们知道原来“`佛系`”不是大学的院系，但我们中的很多人却都是“佛系”的高材生；我们知道原来“`山竹`”不仅味道酸甜可口，而且还威力无穷；我们无数次“`确认过眼神`”，遇到各种各样的人，却总是没有“`遇见对的人`”；不再相信“我们”的誓言，同时又被“`官宣`”惊得措手不及；我们知道了不仅`烤面筋`又麻又辣，“中暑”、“忧郁”的`竹鼠`烤起来也是又香又脆。\n\n**如果没有2018，我们应该会少了很多自豪。**\n\n当苏炳添`亚运百米夺冠`，我们自豪于黄种人同样可以打破短跑世界纪录，同样可以被称作“飞人”。当武大靖平昌冬奥会冲过`500米短道速滑`的终点，我们热血沸腾，中国人同样可以在冬奥会赛场上“更高、更快、更强”，而真正的强者从来不需要在背地里为对手使绊子。\n\n我们自豪于大型水陆两栖大飞机“`鲲龙号`”成功首飞，我们自豪于“`天眼FAST`”让我们听到宇宙的心跳声，我们自豪于`港珠澳大桥`在蔚蓝的海面上气贯长虹，同样自豪于它接受了16及超强台风“`山竹`”的亲自验收。我们自豪于“`嫦娥4号`”成功奔月，自豪于世界第一张`高清月背图`由中国制造，更自豪于“`玉兔号`”的月背旅行，从此月球的背面不再神秘。\n\n当`华为`引领`5G时代`，当孟晚舟无理由被捕，我们自豪于华为的伟大，我们更知道“`伟大的背后都是苦难”`。当`外交部天团`霸气回应各方记者提问，我们自豪于自己的背后有这样一个强大的祖国。\n\n**如果没有2018，我们应该会晚几年见证一些历史性的时刻。**\n\n当韩朝领导人在板门店进行那历史性的握手时，总给人一种似曾相识的感觉；当跨过“三八线”的那一刻，这是两个人的一小步，却是人类的一大步；当韩朝双方运动员共举半岛旗帜歩入平昌冬奥会会场时，我们知道半岛和平迎来了新希望。让人不由得感慨：`柏林墙倒了，三八线模糊了，何时在外的“游子”那心中沉甸甸的思念能跨越那一湾浅浅的海峡？`\n\n**如果没有2018，我们应该会少一些告别和缅怀。**\n\n9月，注定是中国文艺界最悲痛的一个月。常宝华、常贵田、刘文步、张文霞、师胜杰等相声大师相继离世，今后，我们也只能在录影录像中感受他们的风采，感受他们带来的欢笑和相声的魅力。\n\n10月，李咏走了，走得那么突然，那么悄无声息。就像咏哥曾经在节目演讲《生命中的最后一天》里说的：“`我会找一个安静的地方，静静地待着，我不会有道歉，也不会有离别，更不会有抱怨，我只会有感谢......所有电视机前的观众朋友们，感谢你们给我留下了美好的回忆`”。当哈文“永失我爱”之时，我能看到照片中咏哥眼眶里那一滴平静而又不舍的泪。\n\n第二天，金庸先生驾鹤仙逝，带走了无数人的江湖梦，更甚至带走了一个时代。江湖之梦杳不灭，侠影远去侠气长存，从此，我们只能在“`飞雪连天射白鹿，笑书神侠倚碧鸳`”的文字中领悟江湖侠义，继续我们儿时就有的江湖梦。\n\n也许是上天想听曲了，臧天朔、盛中国老师去了；想看小说了，二月河老师去了；想听评书了，单田芳老师去了，想看剧了，蓝洁瑛、计春华老师也去了......\n\n2018年，好像世界也是悲痛的。3月，霍金逝世，世界失去了一位伟大的理论物理学家。那浩瀚无垠的宇宙、“深不见底”的黑洞好像变得更加神秘莫测。11月，“漫威之父” —— 斯坦·李去世。漫威迷哭了，比告别“狼叔”的时候哭得还伤心，“超级英雄”流泪了，比灭霸完成“梦想”的时候还要绝望。而我们，再也看不到那个爱客串的老爷爷惊喜般地出现在荧幕的任何一个角落。`我在想，在平行宇宙里，还会有一个老先生微笑着出现在各种超级英雄的身边么？`\n\n2018年，我们体会了因爱而痛，我们学会了挥手告别。但我们告别的岂止是某些人，我们更像是告别了一个时代......\n\n**如果没有2018，我们应该会少一些悲痛。**\n\n当听闻米脂三中校门口，花季的学生被丧心病狂的歹徒袭击造成9死19伤时，我们怒发冲冠，愤恨不已。但当无偿献血的队伍排成长龙，人山人海之时，我们又体会到什么是人间大爱。`愿离开这个世界的孩子都能化作天上最亮的一颗星，愿破碎的家庭能够早日走出悲痛，拥抱新的生活`。\n\n当听闻普吉岛游船倾覆致47人遇难时，在心生悲痛之余依旧警醒着我们`诗和远方固然美丽，但依存在看不见的危险`。\n\n当听闻重庆万州公交坠江后，我们默默祈祷，救援人员全力以赴。当我们知道车内15人无一生还时，心中更是悲痛难忍！当看到视频发布的那一刻，痛心疾首，那种惊恐绝望的呼喊声，足矣刺痛每个人的心。那种求生的歇斯底里的呼喊，那种对死亡的恐惧，足矣唤醒那些麻木不仁的、自以为是的、丑恶的灵魂！当真相水落石出之后，我们更加惊讶于因为短短的一站路，会让无情的江水吞没15条鲜活的生命。多少事故的发生，多少无辜生命的离去，就是因为一些人对于生命缺乏发自内心的敬畏。我依旧想提醒刘某：`一场无谓的纷争，拉十几人“陪葬”，不论你今生如何，也无论你来世在哪，都别忘了那呼喊和呻吟在冰冷的江水下的无辜的冤魂。`\n\n不要停留于愤怒，痛定思痛，为何乘客与司机互殴何以一再出现？如果司机能合理处理纠纷，停止互殴，如果其他乘客能上前阻止，如果所有人能对生命多一些敬畏，是否就能减少甚至避免此类悲剧的发生。无彻底反思就无真正救赎，同样，不形成制度正义，类似悲剧便难断绝。\n\n**如果没有2018，我们应该会少一些愤怒。**\n\n我们愤怒于`网约车`女乘客屡遭侵害。花季的生命被“兽性大发”的禽兽侮辱杀害，这不禁让人感叹：`地狱空荡荡，魔鬼在人间`。人们胸中的怒火难以熄灭，就像某位知名演员所说:“`删了也不会变好...对吧？`”。网约车公司审查规则不严格，监管力度不彻底，应急措施不完善，响应制度不灵活就是导致这类恶心事件发生的主要原因。同样，法律法规制定层面恐怕同样也难辞其咎。\n\n我们愤怒于`高铁霸座事件`屡次发生。第一次的“我站不起来，你帮我呗”，就好似给那些不知羞耻的老赖们做了一个很好的“榜样”，这些人一次次刷新我们的价值观，我们不禁冷笑：`世界上竟会有如此厚颜无耻之人！`此类现象频发固然与无赖的素质低有关，恐怕也与执法者的弱势、旁观者的冷漠有很大关系。\n\n我们愤怒于`毒疫苗`的危害。小时候，每次打完疫苗，就像美国队长注射了“超级强化药剂”一样，总觉得自己拥有了超能力，成了世间最强壮的人。可在2018年7月份，长春长生生物科技有限公司却“告诉”我们，接种的疫苗是假的，是“有毒”的，一时间全国哗然，甚至有些恐慌。虽然最终真相结果水落石出，相关人员受到处理，但是，一个视生命为儿戏，对生命缺乏起码的尊重和敬畏的公司，就永远要收到人们和社会的谴责 —— “曾经曾鼓起那么大的勇气，你特么告诉我这是无效的？”、“不搞你，对不起罪过的花朵”。百年大计，育人为本，可当孩子们的健康都被扼杀在摇篮里时，又何谈少年强则国强？\n\n### 凡是过去，皆为序章\n\n平淡的生活，依然会有真善美，为我们的前行送来温暖。猝不及防的痛与哀，也是促进我们更上一层楼的决心。`凡是过去，皆为序章`，如果没有2018，又哪来的2019......新的开始，总会有新的期待。\n\n在告别2018，迎来2019的时刻，也许你还在加班，丝毫没有辞旧迎新的激动；也许你还在四处奔波，为能过一个美满的农历新年在努力打拼；也许你还还在自习室里奋笔疾书，挑灯夜读；也许你仍驻守在祖国边疆，负重前行......\n\n而此时，无论你身在何方，在做什么，祝愿你新的一年不用转发“锦鲤”也同样幸运满满，依旧有实现梦想的信心。祝你不用沉迷于虚幻，依旧能得到内心的慰藉。祝你在奋斗的道路上，遇到志同道合的人。祝你在孤单的旅途中，遇到那个对的人......\n\n2019，愿所有人被世界温柔以待！愿你的世界，春暖花开！\n\n2019，愿人间充满阳光，愿世界和平！\n\n---\n\n<center>2018年度热点图鉴</center>\n![2018年度热点图鉴][2]\n\n\n[1]: /medias/article/journal/2019.png\n[2]: /medias/article/journal/2018-summary.jpg\n","source":"_posts/if-there-is-no-2018.md","raw":"---\ntitle: 如果没有2018\ndate: 2018-12-31 09:45:14\ncategories: 日志\ntags: 2018\nimg: /medias/article/journal/goodbbye2108-hello2019.jpg\n---\n\n>有人说，2018是告别的一年，说着江湖已远，说着时代落幕......也有人说，2018年是启航的一年，说着见证历史，说着荣光与梦......可如果没有2018，我们的生活又将会怎样？\n\n![2019新年快乐][1]\n\n### 如果没有2018\n\n**如果没有2018，我们应该会少涨很多“姿势”。**\n\n如果没有2018，我们不会知道原来“`蓝月亮`”不仅仅是洗衣液，还是夜空中的一轮明月；我们不会知道就算“`卡路里`”被注入灵魂，也依旧逃不过“`来了，老弟！`”的“`真香`”定律；我们没想到一只“`爱旅行的青蛙`”会让我们朝思暮想，夜夜盼“蛙”归；我们更没想到的是别人`“逃掉”的税款`，就有可能是你几辈子都挣不来的“天文数字”。\n\n2018年，我们知道原来“`佛系`”不是大学的院系，但我们中的很多人却都是“佛系”的高材生；我们知道原来“`山竹`”不仅味道酸甜可口，而且还威力无穷；我们无数次“`确认过眼神`”，遇到各种各样的人，却总是没有“`遇见对的人`”；不再相信“我们”的誓言，同时又被“`官宣`”惊得措手不及；我们知道了不仅`烤面筋`又麻又辣，“中暑”、“忧郁”的`竹鼠`烤起来也是又香又脆。\n\n**如果没有2018，我们应该会少了很多自豪。**\n\n当苏炳添`亚运百米夺冠`，我们自豪于黄种人同样可以打破短跑世界纪录，同样可以被称作“飞人”。当武大靖平昌冬奥会冲过`500米短道速滑`的终点，我们热血沸腾，中国人同样可以在冬奥会赛场上“更高、更快、更强”，而真正的强者从来不需要在背地里为对手使绊子。\n\n我们自豪于大型水陆两栖大飞机“`鲲龙号`”成功首飞，我们自豪于“`天眼FAST`”让我们听到宇宙的心跳声，我们自豪于`港珠澳大桥`在蔚蓝的海面上气贯长虹，同样自豪于它接受了16及超强台风“`山竹`”的亲自验收。我们自豪于“`嫦娥4号`”成功奔月，自豪于世界第一张`高清月背图`由中国制造，更自豪于“`玉兔号`”的月背旅行，从此月球的背面不再神秘。\n\n当`华为`引领`5G时代`，当孟晚舟无理由被捕，我们自豪于华为的伟大，我们更知道“`伟大的背后都是苦难”`。当`外交部天团`霸气回应各方记者提问，我们自豪于自己的背后有这样一个强大的祖国。\n\n**如果没有2018，我们应该会晚几年见证一些历史性的时刻。**\n\n当韩朝领导人在板门店进行那历史性的握手时，总给人一种似曾相识的感觉；当跨过“三八线”的那一刻，这是两个人的一小步，却是人类的一大步；当韩朝双方运动员共举半岛旗帜歩入平昌冬奥会会场时，我们知道半岛和平迎来了新希望。让人不由得感慨：`柏林墙倒了，三八线模糊了，何时在外的“游子”那心中沉甸甸的思念能跨越那一湾浅浅的海峡？`\n\n**如果没有2018，我们应该会少一些告别和缅怀。**\n\n9月，注定是中国文艺界最悲痛的一个月。常宝华、常贵田、刘文步、张文霞、师胜杰等相声大师相继离世，今后，我们也只能在录影录像中感受他们的风采，感受他们带来的欢笑和相声的魅力。\n\n10月，李咏走了，走得那么突然，那么悄无声息。就像咏哥曾经在节目演讲《生命中的最后一天》里说的：“`我会找一个安静的地方，静静地待着，我不会有道歉，也不会有离别，更不会有抱怨，我只会有感谢......所有电视机前的观众朋友们，感谢你们给我留下了美好的回忆`”。当哈文“永失我爱”之时，我能看到照片中咏哥眼眶里那一滴平静而又不舍的泪。\n\n第二天，金庸先生驾鹤仙逝，带走了无数人的江湖梦，更甚至带走了一个时代。江湖之梦杳不灭，侠影远去侠气长存，从此，我们只能在“`飞雪连天射白鹿，笑书神侠倚碧鸳`”的文字中领悟江湖侠义，继续我们儿时就有的江湖梦。\n\n也许是上天想听曲了，臧天朔、盛中国老师去了；想看小说了，二月河老师去了；想听评书了，单田芳老师去了，想看剧了，蓝洁瑛、计春华老师也去了......\n\n2018年，好像世界也是悲痛的。3月，霍金逝世，世界失去了一位伟大的理论物理学家。那浩瀚无垠的宇宙、“深不见底”的黑洞好像变得更加神秘莫测。11月，“漫威之父” —— 斯坦·李去世。漫威迷哭了，比告别“狼叔”的时候哭得还伤心，“超级英雄”流泪了，比灭霸完成“梦想”的时候还要绝望。而我们，再也看不到那个爱客串的老爷爷惊喜般地出现在荧幕的任何一个角落。`我在想，在平行宇宙里，还会有一个老先生微笑着出现在各种超级英雄的身边么？`\n\n2018年，我们体会了因爱而痛，我们学会了挥手告别。但我们告别的岂止是某些人，我们更像是告别了一个时代......\n\n**如果没有2018，我们应该会少一些悲痛。**\n\n当听闻米脂三中校门口，花季的学生被丧心病狂的歹徒袭击造成9死19伤时，我们怒发冲冠，愤恨不已。但当无偿献血的队伍排成长龙，人山人海之时，我们又体会到什么是人间大爱。`愿离开这个世界的孩子都能化作天上最亮的一颗星，愿破碎的家庭能够早日走出悲痛，拥抱新的生活`。\n\n当听闻普吉岛游船倾覆致47人遇难时，在心生悲痛之余依旧警醒着我们`诗和远方固然美丽，但依存在看不见的危险`。\n\n当听闻重庆万州公交坠江后，我们默默祈祷，救援人员全力以赴。当我们知道车内15人无一生还时，心中更是悲痛难忍！当看到视频发布的那一刻，痛心疾首，那种惊恐绝望的呼喊声，足矣刺痛每个人的心。那种求生的歇斯底里的呼喊，那种对死亡的恐惧，足矣唤醒那些麻木不仁的、自以为是的、丑恶的灵魂！当真相水落石出之后，我们更加惊讶于因为短短的一站路，会让无情的江水吞没15条鲜活的生命。多少事故的发生，多少无辜生命的离去，就是因为一些人对于生命缺乏发自内心的敬畏。我依旧想提醒刘某：`一场无谓的纷争，拉十几人“陪葬”，不论你今生如何，也无论你来世在哪，都别忘了那呼喊和呻吟在冰冷的江水下的无辜的冤魂。`\n\n不要停留于愤怒，痛定思痛，为何乘客与司机互殴何以一再出现？如果司机能合理处理纠纷，停止互殴，如果其他乘客能上前阻止，如果所有人能对生命多一些敬畏，是否就能减少甚至避免此类悲剧的发生。无彻底反思就无真正救赎，同样，不形成制度正义，类似悲剧便难断绝。\n\n**如果没有2018，我们应该会少一些愤怒。**\n\n我们愤怒于`网约车`女乘客屡遭侵害。花季的生命被“兽性大发”的禽兽侮辱杀害，这不禁让人感叹：`地狱空荡荡，魔鬼在人间`。人们胸中的怒火难以熄灭，就像某位知名演员所说:“`删了也不会变好...对吧？`”。网约车公司审查规则不严格，监管力度不彻底，应急措施不完善，响应制度不灵活就是导致这类恶心事件发生的主要原因。同样，法律法规制定层面恐怕同样也难辞其咎。\n\n我们愤怒于`高铁霸座事件`屡次发生。第一次的“我站不起来，你帮我呗”，就好似给那些不知羞耻的老赖们做了一个很好的“榜样”，这些人一次次刷新我们的价值观，我们不禁冷笑：`世界上竟会有如此厚颜无耻之人！`此类现象频发固然与无赖的素质低有关，恐怕也与执法者的弱势、旁观者的冷漠有很大关系。\n\n我们愤怒于`毒疫苗`的危害。小时候，每次打完疫苗，就像美国队长注射了“超级强化药剂”一样，总觉得自己拥有了超能力，成了世间最强壮的人。可在2018年7月份，长春长生生物科技有限公司却“告诉”我们，接种的疫苗是假的，是“有毒”的，一时间全国哗然，甚至有些恐慌。虽然最终真相结果水落石出，相关人员受到处理，但是，一个视生命为儿戏，对生命缺乏起码的尊重和敬畏的公司，就永远要收到人们和社会的谴责 —— “曾经曾鼓起那么大的勇气，你特么告诉我这是无效的？”、“不搞你，对不起罪过的花朵”。百年大计，育人为本，可当孩子们的健康都被扼杀在摇篮里时，又何谈少年强则国强？\n\n### 凡是过去，皆为序章\n\n平淡的生活，依然会有真善美，为我们的前行送来温暖。猝不及防的痛与哀，也是促进我们更上一层楼的决心。`凡是过去，皆为序章`，如果没有2018，又哪来的2019......新的开始，总会有新的期待。\n\n在告别2018，迎来2019的时刻，也许你还在加班，丝毫没有辞旧迎新的激动；也许你还在四处奔波，为能过一个美满的农历新年在努力打拼；也许你还还在自习室里奋笔疾书，挑灯夜读；也许你仍驻守在祖国边疆，负重前行......\n\n而此时，无论你身在何方，在做什么，祝愿你新的一年不用转发“锦鲤”也同样幸运满满，依旧有实现梦想的信心。祝你不用沉迷于虚幻，依旧能得到内心的慰藉。祝你在奋斗的道路上，遇到志同道合的人。祝你在孤单的旅途中，遇到那个对的人......\n\n2019，愿所有人被世界温柔以待！愿你的世界，春暖花开！\n\n2019，愿人间充满阳光，愿世界和平！\n\n---\n\n<center>2018年度热点图鉴</center>\n![2018年度热点图鉴][2]\n\n\n[1]: /medias/article/journal/2019.png\n[2]: /medias/article/journal/2018-summary.jpg\n","slug":"if-there-is-no-2018","published":1,"updated":"2019-01-08T15:31:31.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mv3001n9kvb5vn4nbpu","content":"<blockquote>\n<p>有人说，2018是告别的一年，说着江湖已远，说着时代落幕……也有人说，2018年是启航的一年，说着见证历史，说着荣光与梦……可如果没有2018，我们的生活又将会怎样？</p>\n</blockquote>\n<p><img src=\"/medias/article/journal/2019.png\" alt=\"2019新年快乐\"></p>\n<h3 id=\"如果没有2018\"><a href=\"#如果没有2018\" class=\"headerlink\" title=\"如果没有2018\"></a>如果没有2018</h3><p><strong>如果没有2018，我们应该会少涨很多“姿势”。</strong></p>\n<p>如果没有2018，我们不会知道原来“<code>蓝月亮</code>”不仅仅是洗衣液，还是夜空中的一轮明月；我们不会知道就算“<code>卡路里</code>”被注入灵魂，也依旧逃不过“<code>来了，老弟！</code>”的“<code>真香</code>”定律；我们没想到一只“<code>爱旅行的青蛙</code>”会让我们朝思暮想，夜夜盼“蛙”归；我们更没想到的是别人<code>“逃掉”的税款</code>，就有可能是你几辈子都挣不来的“天文数字”。</p>\n<p>2018年，我们知道原来“<code>佛系</code>”不是大学的院系，但我们中的很多人却都是“佛系”的高材生；我们知道原来“<code>山竹</code>”不仅味道酸甜可口，而且还威力无穷；我们无数次“<code>确认过眼神</code>”，遇到各种各样的人，却总是没有“<code>遇见对的人</code>”；不再相信“我们”的誓言，同时又被“<code>官宣</code>”惊得措手不及；我们知道了不仅<code>烤面筋</code>又麻又辣，“中暑”、“忧郁”的<code>竹鼠</code>烤起来也是又香又脆。</p>\n<p><strong>如果没有2018，我们应该会少了很多自豪。</strong></p>\n<p>当苏炳添<code>亚运百米夺冠</code>，我们自豪于黄种人同样可以打破短跑世界纪录，同样可以被称作“飞人”。当武大靖平昌冬奥会冲过<code>500米短道速滑</code>的终点，我们热血沸腾，中国人同样可以在冬奥会赛场上“更高、更快、更强”，而真正的强者从来不需要在背地里为对手使绊子。</p>\n<p>我们自豪于大型水陆两栖大飞机“<code>鲲龙号</code>”成功首飞，我们自豪于“<code>天眼FAST</code>”让我们听到宇宙的心跳声，我们自豪于<code>港珠澳大桥</code>在蔚蓝的海面上气贯长虹，同样自豪于它接受了16及超强台风“<code>山竹</code>”的亲自验收。我们自豪于“<code>嫦娥4号</code>”成功奔月，自豪于世界第一张<code>高清月背图</code>由中国制造，更自豪于“<code>玉兔号</code>”的月背旅行，从此月球的背面不再神秘。</p>\n<p>当<code>华为</code>引领<code>5G时代</code>，当孟晚舟无理由被捕，我们自豪于华为的伟大，我们更知道“<code>伟大的背后都是苦难”</code>。当<code>外交部天团</code>霸气回应各方记者提问，我们自豪于自己的背后有这样一个强大的祖国。</p>\n<p><strong>如果没有2018，我们应该会晚几年见证一些历史性的时刻。</strong></p>\n<p>当韩朝领导人在板门店进行那历史性的握手时，总给人一种似曾相识的感觉；当跨过“三八线”的那一刻，这是两个人的一小步，却是人类的一大步；当韩朝双方运动员共举半岛旗帜歩入平昌冬奥会会场时，我们知道半岛和平迎来了新希望。让人不由得感慨：<code>柏林墙倒了，三八线模糊了，何时在外的“游子”那心中沉甸甸的思念能跨越那一湾浅浅的海峡？</code></p>\n<p><strong>如果没有2018，我们应该会少一些告别和缅怀。</strong></p>\n<p>9月，注定是中国文艺界最悲痛的一个月。常宝华、常贵田、刘文步、张文霞、师胜杰等相声大师相继离世，今后，我们也只能在录影录像中感受他们的风采，感受他们带来的欢笑和相声的魅力。</p>\n<p>10月，李咏走了，走得那么突然，那么悄无声息。就像咏哥曾经在节目演讲《生命中的最后一天》里说的：“<code>我会找一个安静的地方，静静地待着，我不会有道歉，也不会有离别，更不会有抱怨，我只会有感谢......所有电视机前的观众朋友们，感谢你们给我留下了美好的回忆</code>”。当哈文“永失我爱”之时，我能看到照片中咏哥眼眶里那一滴平静而又不舍的泪。</p>\n<p>第二天，金庸先生驾鹤仙逝，带走了无数人的江湖梦，更甚至带走了一个时代。江湖之梦杳不灭，侠影远去侠气长存，从此，我们只能在“<code>飞雪连天射白鹿，笑书神侠倚碧鸳</code>”的文字中领悟江湖侠义，继续我们儿时就有的江湖梦。</p>\n<p>也许是上天想听曲了，臧天朔、盛中国老师去了；想看小说了，二月河老师去了；想听评书了，单田芳老师去了，想看剧了，蓝洁瑛、计春华老师也去了……</p>\n<p>2018年，好像世界也是悲痛的。3月，霍金逝世，世界失去了一位伟大的理论物理学家。那浩瀚无垠的宇宙、“深不见底”的黑洞好像变得更加神秘莫测。11月，“漫威之父” —— 斯坦·李去世。漫威迷哭了，比告别“狼叔”的时候哭得还伤心，“超级英雄”流泪了，比灭霸完成“梦想”的时候还要绝望。而我们，再也看不到那个爱客串的老爷爷惊喜般地出现在荧幕的任何一个角落。<code>我在想，在平行宇宙里，还会有一个老先生微笑着出现在各种超级英雄的身边么？</code></p>\n<p>2018年，我们体会了因爱而痛，我们学会了挥手告别。但我们告别的岂止是某些人，我们更像是告别了一个时代……</p>\n<p><strong>如果没有2018，我们应该会少一些悲痛。</strong></p>\n<p>当听闻米脂三中校门口，花季的学生被丧心病狂的歹徒袭击造成9死19伤时，我们怒发冲冠，愤恨不已。但当无偿献血的队伍排成长龙，人山人海之时，我们又体会到什么是人间大爱。<code>愿离开这个世界的孩子都能化作天上最亮的一颗星，愿破碎的家庭能够早日走出悲痛，拥抱新的生活</code>。</p>\n<p>当听闻普吉岛游船倾覆致47人遇难时，在心生悲痛之余依旧警醒着我们<code>诗和远方固然美丽，但依存在看不见的危险</code>。</p>\n<p>当听闻重庆万州公交坠江后，我们默默祈祷，救援人员全力以赴。当我们知道车内15人无一生还时，心中更是悲痛难忍！当看到视频发布的那一刻，痛心疾首，那种惊恐绝望的呼喊声，足矣刺痛每个人的心。那种求生的歇斯底里的呼喊，那种对死亡的恐惧，足矣唤醒那些麻木不仁的、自以为是的、丑恶的灵魂！当真相水落石出之后，我们更加惊讶于因为短短的一站路，会让无情的江水吞没15条鲜活的生命。多少事故的发生，多少无辜生命的离去，就是因为一些人对于生命缺乏发自内心的敬畏。我依旧想提醒刘某：<code>一场无谓的纷争，拉十几人“陪葬”，不论你今生如何，也无论你来世在哪，都别忘了那呼喊和呻吟在冰冷的江水下的无辜的冤魂。</code></p>\n<p>不要停留于愤怒，痛定思痛，为何乘客与司机互殴何以一再出现？如果司机能合理处理纠纷，停止互殴，如果其他乘客能上前阻止，如果所有人能对生命多一些敬畏，是否就能减少甚至避免此类悲剧的发生。无彻底反思就无真正救赎，同样，不形成制度正义，类似悲剧便难断绝。</p>\n<p><strong>如果没有2018，我们应该会少一些愤怒。</strong></p>\n<p>我们愤怒于<code>网约车</code>女乘客屡遭侵害。花季的生命被“兽性大发”的禽兽侮辱杀害，这不禁让人感叹：<code>地狱空荡荡，魔鬼在人间</code>。人们胸中的怒火难以熄灭，就像某位知名演员所说:“<code>删了也不会变好...对吧？</code>”。网约车公司审查规则不严格，监管力度不彻底，应急措施不完善，响应制度不灵活就是导致这类恶心事件发生的主要原因。同样，法律法规制定层面恐怕同样也难辞其咎。</p>\n<p>我们愤怒于<code>高铁霸座事件</code>屡次发生。第一次的“我站不起来，你帮我呗”，就好似给那些不知羞耻的老赖们做了一个很好的“榜样”，这些人一次次刷新我们的价值观，我们不禁冷笑：<code>世界上竟会有如此厚颜无耻之人！</code>此类现象频发固然与无赖的素质低有关，恐怕也与执法者的弱势、旁观者的冷漠有很大关系。</p>\n<p>我们愤怒于<code>毒疫苗</code>的危害。小时候，每次打完疫苗，就像美国队长注射了“超级强化药剂”一样，总觉得自己拥有了超能力，成了世间最强壮的人。可在2018年7月份，长春长生生物科技有限公司却“告诉”我们，接种的疫苗是假的，是“有毒”的，一时间全国哗然，甚至有些恐慌。虽然最终真相结果水落石出，相关人员受到处理，但是，一个视生命为儿戏，对生命缺乏起码的尊重和敬畏的公司，就永远要收到人们和社会的谴责 —— “曾经曾鼓起那么大的勇气，你特么告诉我这是无效的？”、“不搞你，对不起罪过的花朵”。百年大计，育人为本，可当孩子们的健康都被扼杀在摇篮里时，又何谈少年强则国强？</p>\n<h3 id=\"凡是过去，皆为序章\"><a href=\"#凡是过去，皆为序章\" class=\"headerlink\" title=\"凡是过去，皆为序章\"></a>凡是过去，皆为序章</h3><p>平淡的生活，依然会有真善美，为我们的前行送来温暖。猝不及防的痛与哀，也是促进我们更上一层楼的决心。<code>凡是过去，皆为序章</code>，如果没有2018，又哪来的2019……新的开始，总会有新的期待。</p>\n<p>在告别2018，迎来2019的时刻，也许你还在加班，丝毫没有辞旧迎新的激动；也许你还在四处奔波，为能过一个美满的农历新年在努力打拼；也许你还还在自习室里奋笔疾书，挑灯夜读；也许你仍驻守在祖国边疆，负重前行……</p>\n<p>而此时，无论你身在何方，在做什么，祝愿你新的一年不用转发“锦鲤”也同样幸运满满，依旧有实现梦想的信心。祝你不用沉迷于虚幻，依旧能得到内心的慰藉。祝你在奋斗的道路上，遇到志同道合的人。祝你在孤单的旅途中，遇到那个对的人……</p>\n<p>2019，愿所有人被世界温柔以待！愿你的世界，春暖花开！</p>\n<p>2019，愿人间充满阳光，愿世界和平！</p>\n<hr>\n<p><center>2018年度热点图鉴</center><br><img src=\"/medias/article/journal/2018-summary.jpg\" alt=\"2018年度热点图鉴\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>有人说，2018是告别的一年，说着江湖已远，说着时代落幕……也有人说，2018年是启航的一年，说着见证历史，说着荣光与梦……可如果没有2018，我们的生活又将会怎样？</p>\n</blockquote>\n<p><img src=\"/medias/article/journal/2019.png\" alt=\"2019新年快乐\"></p>\n<h3 id=\"如果没有2018\"><a href=\"#如果没有2018\" class=\"headerlink\" title=\"如果没有2018\"></a>如果没有2018</h3><p><strong>如果没有2018，我们应该会少涨很多“姿势”。</strong></p>\n<p>如果没有2018，我们不会知道原来“<code>蓝月亮</code>”不仅仅是洗衣液，还是夜空中的一轮明月；我们不会知道就算“<code>卡路里</code>”被注入灵魂，也依旧逃不过“<code>来了，老弟！</code>”的“<code>真香</code>”定律；我们没想到一只“<code>爱旅行的青蛙</code>”会让我们朝思暮想，夜夜盼“蛙”归；我们更没想到的是别人<code>“逃掉”的税款</code>，就有可能是你几辈子都挣不来的“天文数字”。</p>\n<p>2018年，我们知道原来“<code>佛系</code>”不是大学的院系，但我们中的很多人却都是“佛系”的高材生；我们知道原来“<code>山竹</code>”不仅味道酸甜可口，而且还威力无穷；我们无数次“<code>确认过眼神</code>”，遇到各种各样的人，却总是没有“<code>遇见对的人</code>”；不再相信“我们”的誓言，同时又被“<code>官宣</code>”惊得措手不及；我们知道了不仅<code>烤面筋</code>又麻又辣，“中暑”、“忧郁”的<code>竹鼠</code>烤起来也是又香又脆。</p>\n<p><strong>如果没有2018，我们应该会少了很多自豪。</strong></p>\n<p>当苏炳添<code>亚运百米夺冠</code>，我们自豪于黄种人同样可以打破短跑世界纪录，同样可以被称作“飞人”。当武大靖平昌冬奥会冲过<code>500米短道速滑</code>的终点，我们热血沸腾，中国人同样可以在冬奥会赛场上“更高、更快、更强”，而真正的强者从来不需要在背地里为对手使绊子。</p>\n<p>我们自豪于大型水陆两栖大飞机“<code>鲲龙号</code>”成功首飞，我们自豪于“<code>天眼FAST</code>”让我们听到宇宙的心跳声，我们自豪于<code>港珠澳大桥</code>在蔚蓝的海面上气贯长虹，同样自豪于它接受了16及超强台风“<code>山竹</code>”的亲自验收。我们自豪于“<code>嫦娥4号</code>”成功奔月，自豪于世界第一张<code>高清月背图</code>由中国制造，更自豪于“<code>玉兔号</code>”的月背旅行，从此月球的背面不再神秘。</p>\n<p>当<code>华为</code>引领<code>5G时代</code>，当孟晚舟无理由被捕，我们自豪于华为的伟大，我们更知道“<code>伟大的背后都是苦难”</code>。当<code>外交部天团</code>霸气回应各方记者提问，我们自豪于自己的背后有这样一个强大的祖国。</p>\n<p><strong>如果没有2018，我们应该会晚几年见证一些历史性的时刻。</strong></p>\n<p>当韩朝领导人在板门店进行那历史性的握手时，总给人一种似曾相识的感觉；当跨过“三八线”的那一刻，这是两个人的一小步，却是人类的一大步；当韩朝双方运动员共举半岛旗帜歩入平昌冬奥会会场时，我们知道半岛和平迎来了新希望。让人不由得感慨：<code>柏林墙倒了，三八线模糊了，何时在外的“游子”那心中沉甸甸的思念能跨越那一湾浅浅的海峡？</code></p>\n<p><strong>如果没有2018，我们应该会少一些告别和缅怀。</strong></p>\n<p>9月，注定是中国文艺界最悲痛的一个月。常宝华、常贵田、刘文步、张文霞、师胜杰等相声大师相继离世，今后，我们也只能在录影录像中感受他们的风采，感受他们带来的欢笑和相声的魅力。</p>\n<p>10月，李咏走了，走得那么突然，那么悄无声息。就像咏哥曾经在节目演讲《生命中的最后一天》里说的：“<code>我会找一个安静的地方，静静地待着，我不会有道歉，也不会有离别，更不会有抱怨，我只会有感谢......所有电视机前的观众朋友们，感谢你们给我留下了美好的回忆</code>”。当哈文“永失我爱”之时，我能看到照片中咏哥眼眶里那一滴平静而又不舍的泪。</p>\n<p>第二天，金庸先生驾鹤仙逝，带走了无数人的江湖梦，更甚至带走了一个时代。江湖之梦杳不灭，侠影远去侠气长存，从此，我们只能在“<code>飞雪连天射白鹿，笑书神侠倚碧鸳</code>”的文字中领悟江湖侠义，继续我们儿时就有的江湖梦。</p>\n<p>也许是上天想听曲了，臧天朔、盛中国老师去了；想看小说了，二月河老师去了；想听评书了，单田芳老师去了，想看剧了，蓝洁瑛、计春华老师也去了……</p>\n<p>2018年，好像世界也是悲痛的。3月，霍金逝世，世界失去了一位伟大的理论物理学家。那浩瀚无垠的宇宙、“深不见底”的黑洞好像变得更加神秘莫测。11月，“漫威之父” —— 斯坦·李去世。漫威迷哭了，比告别“狼叔”的时候哭得还伤心，“超级英雄”流泪了，比灭霸完成“梦想”的时候还要绝望。而我们，再也看不到那个爱客串的老爷爷惊喜般地出现在荧幕的任何一个角落。<code>我在想，在平行宇宙里，还会有一个老先生微笑着出现在各种超级英雄的身边么？</code></p>\n<p>2018年，我们体会了因爱而痛，我们学会了挥手告别。但我们告别的岂止是某些人，我们更像是告别了一个时代……</p>\n<p><strong>如果没有2018，我们应该会少一些悲痛。</strong></p>\n<p>当听闻米脂三中校门口，花季的学生被丧心病狂的歹徒袭击造成9死19伤时，我们怒发冲冠，愤恨不已。但当无偿献血的队伍排成长龙，人山人海之时，我们又体会到什么是人间大爱。<code>愿离开这个世界的孩子都能化作天上最亮的一颗星，愿破碎的家庭能够早日走出悲痛，拥抱新的生活</code>。</p>\n<p>当听闻普吉岛游船倾覆致47人遇难时，在心生悲痛之余依旧警醒着我们<code>诗和远方固然美丽，但依存在看不见的危险</code>。</p>\n<p>当听闻重庆万州公交坠江后，我们默默祈祷，救援人员全力以赴。当我们知道车内15人无一生还时，心中更是悲痛难忍！当看到视频发布的那一刻，痛心疾首，那种惊恐绝望的呼喊声，足矣刺痛每个人的心。那种求生的歇斯底里的呼喊，那种对死亡的恐惧，足矣唤醒那些麻木不仁的、自以为是的、丑恶的灵魂！当真相水落石出之后，我们更加惊讶于因为短短的一站路，会让无情的江水吞没15条鲜活的生命。多少事故的发生，多少无辜生命的离去，就是因为一些人对于生命缺乏发自内心的敬畏。我依旧想提醒刘某：<code>一场无谓的纷争，拉十几人“陪葬”，不论你今生如何，也无论你来世在哪，都别忘了那呼喊和呻吟在冰冷的江水下的无辜的冤魂。</code></p>\n<p>不要停留于愤怒，痛定思痛，为何乘客与司机互殴何以一再出现？如果司机能合理处理纠纷，停止互殴，如果其他乘客能上前阻止，如果所有人能对生命多一些敬畏，是否就能减少甚至避免此类悲剧的发生。无彻底反思就无真正救赎，同样，不形成制度正义，类似悲剧便难断绝。</p>\n<p><strong>如果没有2018，我们应该会少一些愤怒。</strong></p>\n<p>我们愤怒于<code>网约车</code>女乘客屡遭侵害。花季的生命被“兽性大发”的禽兽侮辱杀害，这不禁让人感叹：<code>地狱空荡荡，魔鬼在人间</code>。人们胸中的怒火难以熄灭，就像某位知名演员所说:“<code>删了也不会变好...对吧？</code>”。网约车公司审查规则不严格，监管力度不彻底，应急措施不完善，响应制度不灵活就是导致这类恶心事件发生的主要原因。同样，法律法规制定层面恐怕同样也难辞其咎。</p>\n<p>我们愤怒于<code>高铁霸座事件</code>屡次发生。第一次的“我站不起来，你帮我呗”，就好似给那些不知羞耻的老赖们做了一个很好的“榜样”，这些人一次次刷新我们的价值观，我们不禁冷笑：<code>世界上竟会有如此厚颜无耻之人！</code>此类现象频发固然与无赖的素质低有关，恐怕也与执法者的弱势、旁观者的冷漠有很大关系。</p>\n<p>我们愤怒于<code>毒疫苗</code>的危害。小时候，每次打完疫苗，就像美国队长注射了“超级强化药剂”一样，总觉得自己拥有了超能力，成了世间最强壮的人。可在2018年7月份，长春长生生物科技有限公司却“告诉”我们，接种的疫苗是假的，是“有毒”的，一时间全国哗然，甚至有些恐慌。虽然最终真相结果水落石出，相关人员受到处理，但是，一个视生命为儿戏，对生命缺乏起码的尊重和敬畏的公司，就永远要收到人们和社会的谴责 —— “曾经曾鼓起那么大的勇气，你特么告诉我这是无效的？”、“不搞你，对不起罪过的花朵”。百年大计，育人为本，可当孩子们的健康都被扼杀在摇篮里时，又何谈少年强则国强？</p>\n<h3 id=\"凡是过去，皆为序章\"><a href=\"#凡是过去，皆为序章\" class=\"headerlink\" title=\"凡是过去，皆为序章\"></a>凡是过去，皆为序章</h3><p>平淡的生活，依然会有真善美，为我们的前行送来温暖。猝不及防的痛与哀，也是促进我们更上一层楼的决心。<code>凡是过去，皆为序章</code>，如果没有2018，又哪来的2019……新的开始，总会有新的期待。</p>\n<p>在告别2018，迎来2019的时刻，也许你还在加班，丝毫没有辞旧迎新的激动；也许你还在四处奔波，为能过一个美满的农历新年在努力打拼；也许你还还在自习室里奋笔疾书，挑灯夜读；也许你仍驻守在祖国边疆，负重前行……</p>\n<p>而此时，无论你身在何方，在做什么，祝愿你新的一年不用转发“锦鲤”也同样幸运满满，依旧有实现梦想的信心。祝你不用沉迷于虚幻，依旧能得到内心的慰藉。祝你在奋斗的道路上，遇到志同道合的人。祝你在孤单的旅途中，遇到那个对的人……</p>\n<p>2019，愿所有人被世界温柔以待！愿你的世界，春暖花开！</p>\n<p>2019，愿人间充满阳光，愿世界和平！</p>\n<hr>\n<p><center>2018年度热点图鉴</center><br><img src=\"/medias/article/journal/2018-summary.jpg\" alt=\"2018年度热点图鉴\"></p>\n"},{"title":"惊鸿一面","date":"2019-05-19T10:35:59.000Z","img":"/medias/article/featureimages/jing-hong-yi-mian.jpg","_content":"\n### 序言\n>许嵩歌曲《惊鸿一面》中有：`柳下闻瑶琴起舞和一曲，仿佛若当年翩若惊鸿影`。歌曲词义中，表现了一份动人心弦的浪漫爱情故事。这篇短文写于2017年4月份。当时，正是夜晚灯火阑珊，坐在车上，听此歌曲，触景生情，有感而发，写下寥寥几笔。\n\n![惊鸿一面][1]\n\n<div id=\"content-ctn\"><div class=\"center-content\">\n  **惊鸿一面**\n  \n  弹指一挥间，恍如隔世\n  夜未央，灯火阑珊\n  惊鸿一瞥，若芙蕖出波\n  明眸皓齿，飘然若仙\n  肌若凝脂，气若幽兰\n  一颦一笑，摇曳星云\n  素若春梅绽雪，艳若霞映澄塘\n  静若松生空谷，神若月射寒江\n  娇娇倾国色，缓缓步移莲\n  似轻云蔽月，若流风回雪\n  纵使丹青绝笔，难绘嫣然一笑\n\n  <span class=\"date\">—— 2017.04.27</span>\n</div></div>\n\n[1]: /medias/article/random-thoughts/jing-hong-yi-mian-2.jpg","source":"_posts/jing-hong-yi-mian.md","raw":"---\ntitle: 惊鸿一面\ndate: 2019-05-19 18:35:59\ncategories: 随想\ntags: 朝花夕拾\nimg:  /medias/article/featureimages/jing-hong-yi-mian.jpg\n---\n\n### 序言\n>许嵩歌曲《惊鸿一面》中有：`柳下闻瑶琴起舞和一曲，仿佛若当年翩若惊鸿影`。歌曲词义中，表现了一份动人心弦的浪漫爱情故事。这篇短文写于2017年4月份。当时，正是夜晚灯火阑珊，坐在车上，听此歌曲，触景生情，有感而发，写下寥寥几笔。\n\n![惊鸿一面][1]\n\n<div id=\"content-ctn\"><div class=\"center-content\">\n  **惊鸿一面**\n  \n  弹指一挥间，恍如隔世\n  夜未央，灯火阑珊\n  惊鸿一瞥，若芙蕖出波\n  明眸皓齿，飘然若仙\n  肌若凝脂，气若幽兰\n  一颦一笑，摇曳星云\n  素若春梅绽雪，艳若霞映澄塘\n  静若松生空谷，神若月射寒江\n  娇娇倾国色，缓缓步移莲\n  似轻云蔽月，若流风回雪\n  纵使丹青绝笔，难绘嫣然一笑\n\n  <span class=\"date\">—— 2017.04.27</span>\n</div></div>\n\n[1]: /medias/article/random-thoughts/jing-hong-yi-mian-2.jpg","slug":"jing-hong-yi-mian","published":1,"updated":"2019-05-19T12:13:22.353Z","_id":"cjvuu4mv7001p9kvbw3zomaza","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><blockquote>\n<p>许嵩歌曲《惊鸿一面》中有：<code>柳下闻瑶琴起舞和一曲，仿佛若当年翩若惊鸿影</code>。歌曲词义中，表现了一份动人心弦的浪漫爱情故事。这篇短文写于2017年4月份。当时，正是夜晚灯火阑珊，坐在车上，听此歌曲，触景生情，有感而发，写下寥寥几笔。</p>\n</blockquote>\n<p><img src=\"/medias/article/random-thoughts/jing-hong-yi-mian-2.jpg\" alt=\"惊鸿一面\"></p>\n<div id=\"content-ctn\"><div class=\"center-content\"><br>  <strong>惊鸿一面</strong><br><br>  弹指一挥间，恍如隔世<br>  夜未央，灯火阑珊<br>  惊鸿一瞥，若芙蕖出波<br>  明眸皓齿，飘然若仙<br>  肌若凝脂，气若幽兰<br>  一颦一笑，摇曳星云<br>  素若春梅绽雪，艳若霞映澄塘<br>  静若松生空谷，神若月射寒江<br>  娇娇倾国色，缓缓步移莲<br>  似轻云蔽月，若流风回雪<br>  纵使丹青绝笔，难绘嫣然一笑<br><br>  <span class=\"date\">—— 2017.04.27</span><br></div></div>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><blockquote>\n<p>许嵩歌曲《惊鸿一面》中有：<code>柳下闻瑶琴起舞和一曲，仿佛若当年翩若惊鸿影</code>。歌曲词义中，表现了一份动人心弦的浪漫爱情故事。这篇短文写于2017年4月份。当时，正是夜晚灯火阑珊，坐在车上，听此歌曲，触景生情，有感而发，写下寥寥几笔。</p>\n</blockquote>\n<p><img src=\"/medias/article/random-thoughts/jing-hong-yi-mian-2.jpg\" alt=\"惊鸿一面\"></p>\n<div id=\"content-ctn\"><div class=\"center-content\"><br>  <strong>惊鸿一面</strong><br><br>  弹指一挥间，恍如隔世<br>  夜未央，灯火阑珊<br>  惊鸿一瞥，若芙蕖出波<br>  明眸皓齿，飘然若仙<br>  肌若凝脂，气若幽兰<br>  一颦一笑，摇曳星云<br>  素若春梅绽雪，艳若霞映澄塘<br>  静若松生空谷，神若月射寒江<br>  娇娇倾国色，缓缓步移莲<br>  似轻云蔽月，若流风回雪<br>  纵使丹青绝笔，难绘嫣然一笑<br><br>  <span class=\"date\">—— 2017.04.27</span><br></div></div>\n\n"},{"title":"生命难以承受的“2 ℃\"","date":"2018-08-10T08:43:21.000Z","_content":"\n### “番茄炒蛋”\n\n近一个月来的西安城高温持续不下，与阴雨绵绵、凉爽怡人的7月初的差距算得上是天冠地屦，近几日的气温用“烁石流金”形容也是毫无夸张之嫌。在七八月份华南华北甚至全国“一片火热”的形势下，西安的温度也算是遥遥领先。当华南华北高温在地图上连上一片时，西安城的气温很多时候就像冬日那傲然的梅花，真可谓一枝独秀，也算是“雄鸡”中心最瞩目的一点。夏季的西安，在高温预报图上就是一个又红又紫，红得发紫的城市。\n\n西安所处地理位置典型的温带季风性气候——夏季高温多雨，冬季寒冷干燥。看起来降水充足，但以个人的感受，西安的高温实在是有过之而无不及。下图是2018年8月13日，中央气象台发布的全国高温预报图，说西安“一枝独秀”、红得发紫，真的是名副其实。\n\n<!--more-->\n\n![中央气象台2018.08.13 06:00:00全国高温预报图][1]\n\n\n下图是2018.07.14 - 2018.08.12全国高温分布图。每年七八月份，不仅是西安城，全国的气温预报图便成了一片又红又紫的“雄鸡”。网友也调侃着说，全国气温图看起来就像是一盘“番茄炒蛋”。\n\n![全国近一个月温度分布图][2]\n\n<p class=\"data-resource\">以上数据来源，[中央气象台](http://www.nmc.cn/)</p>\n\n### 最近的地球\n\n2018年，好像全球都比往年更加“火热”。** `地球，好像发烧了，而且，高烧不退...` **\n\n今年7月初，多个北非国家也出现热浪，撒哈拉沙漠地区最高气温达到51.3℃。世界气象组织说，这应该是阿尔及利亚可靠的温度记录中的最高值。持续的高温同样袭击了整个欧洲，瑞典、西班牙、葡萄牙、法国、意大利、德国、芬兰等几乎所有欧洲国家都出现了历史上罕见的高温天气。地处东欧的波兰，往年被视为避暑好去处，最近却连续遭遇30℃以上罕见高温，最高气温34℃。\n\n>**[北晚新视觉 - 《欧洲多地持续高温：局地或超47℃ 瑞典最高峰冰川融化4米》](http://www.takefoto.cn/viewnews-1532649.html)**\n\n此外，就连北极圈内也出现了罕见的超过30℃的高温，冰川融化，甚至严重威胁到北极熊的生存。茫茫无边的北极圈海面上天空阴沉昏暗，让人窒息，冰冷刺骨的海面上飘着一块孤零零的来自极地的冰山，一只北极熊蜷缩在上面睡着了。饥饿、劳累，但对于它来说，比海更广阔的是内心的孤独...\n\n![比海更广阔的是内心的孤独][3]\n\n>**[澎湃新闻 - 《四大洲同现极端高温北极圈罕见32℃，北极熊或40年内灭绝》](https://www.thepaper.cn/newsDetail_forward_2322066)**\n>**[百度百家号新闻 - 《北极圈出现罕见高温，北极熊将消失？》](https://baijiahao.baidu.com/s?id=1608148193270009243&wfr=spider&for=pc)**\n\n**[这里](https://www.thepaper.cn/newsDetail_forward_2335388)**，有一封来自北极熊的独白信。充满悲伤、孤独和无奈... 人类用了几十年就使几百万年的北极冰川大面积融化... 因饥饿与劳累北极熊溺死在北极冰冷的海水中... 以海豹为主食的北极熊，开始捕食鸟蛋、海豚，甚至撕碎并吃掉自己的孩子... 最后的图文中有一句话**`“不知道人类还记不记得，北极，Arctic，这个词源自希腊语，意思是 —— 被熊照耀的地方...”`** 如今的北极，好像也生病了... 而且，无法康复...\n\n\n### 一串数字\n\n下面这一串数字，访问**[这里](http://trillionthtonne.org/)**，你可以看到它在飞速增长。`6240多亿`（截止于2018.08.13，相信以后会越来越多），粗略估计大约每`2秒`就会增加`1000`。它代表什么？你所拥有的财富的增长？某个国家GDP总量的增长？地球氧气总量的增长？你可能会有很多猜测... \n\n![飞速增长的全球二氧化碳排放总量][4]\n\n<p class=\"data-resource\">数据来源，[这里](http://trillionthtonne.org/)</p>\n\n其实，它代表的是** `自工业化以来，全球范围内人类在化石燃料使用、水泥制造、土地利用等活动中排放的二氧化碳总量，并且在实时更新` **，值得注意的是，该数值的单位是 **`吨`**。这就表示，自工业化以来全球目前排放二氧化碳** `6240多亿吨` **。第一次知道它代表的含义，在看着这飞速增长的数字，我心惊肉跳。我想让它走得慢一些... 我恨不得抓住它，抑制住它。可是，我无能为力，心有余而力不足... 那种焦虑和无助感，真的可以让你抓耳挠心塞。在这个网站页面主体的右下方，还有一个倒计时，目前，预计在2036年2月全球二氧化碳排放量达到10000亿吨，意味着那时全球平均温度较现在升高2℃左右。每一秒看着时间的走近，就让人觉得恐慌，灾难在一步步靠近...\n\n![全球二氧化碳排放量达到10000亿吨倒计时][5]\n\n>笔者注：这一数据信息是我在阅读阮一峰大佬的**[这一片博客](http://www.ruanyifeng.com/blog/2018/08/weekly-issue-17.html)**时获取到的，相信数据的真实性。个人对于这个数据，个人还存在一些疑问。\n>1. 目前我还没有搞清楚该网站如何获得这一数据值的，同时也不清楚该网站如何做到实时同步全球二氧化碳排放量的。\n>2. 这应该是一个估计值，个人感觉实际的二氧化碳排放量肯定是有过之而无不及。\n\n全球变暖已经是活生生的现实。化石燃料的过度使用，温室气体大量排放，滥砍滥发，绿色植被逐年大幅减少，海平面上升... 现在的地球就像是一个天然的`“烤炉”`。\n\n> <p class=\"data-resource\">以下信息，引用自[阮一峰博客](http://www.ruanyifeng.com/blog/2018/08/weekly-issue-17.html)</p>\n>科学家估计，目前的年平均气温比工业革命前已经升高了`1度`。《巴黎气候协议》的目标是，气温升高控制在`2度`，但是成功的希望据说只有`5%`。如果学过统计学，你就知道，`5%`的机会在统计学上可以视作不会发生。现在的计算是，如果人类排放`10000亿吨`二氧化碳，地球就会升高`2度`，千万不要觉得，`2度`不算什么，**[《纽约时报》](https://www.nytimes.com/interactive/2018/08/01/magazine/climate-change-losing-earth.html)**描述了后果：\n>* 升高`2度`：热带珊瑚礁灭绝，海平面上升几米，波斯湾不适合人类居住。\n>* 升高`3度`：北极的森林和大多数沿海城市被淹没。\n>* 升高`4度`：欧洲永久干旱， 中国、印度和孟加拉国大部分地区变成沙漠，美国科罗拉多河接近干涸，美国西南部将不适合居住。\n>* 升高`5度`：人类文明终结。\n\n### 我们到底要拯救谁\n\n第二次工业革命以来，人类社会飞速发展。起初，我们天真地以为地球资源取之不尽用之不竭，各个国家费劲一切力气开发一切可用资源——土地、石油、煤炭、天然气、海洋资源等等，为掠夺资源而发动战争也是屡见不鲜。我们错误地认为所谓位于食物链顶端的自由就是可以随意地拥有，我们陷入迷途肆意地挥洒，我们深陷迷途却毫不清楚、“义无反顾”... 到最后却要穷尽地球的所有... \n\n我们的行为，极大地改变了地球生态，曾经的辉煌变成如今眼前的荒芜。全球气温升高，冰川面积锐减，海平面上升，极端天气骤多，臭氧层破坏，酸雨频发，生物多样性破坏，土地退化及荒漠化，森林面积锐减... 地球，愈来愈伤痕累累...\n\n后来，我们“长大了”，意识到了问题的严重性。政府颁布各种法律禁令，国际组织签订个多项协议公约，目的就是想尽力保护地球生态，而这些行为有一个几乎相同的口号——“保护地球，保护我们赖以生存的家园”。以前觉得这一口号言简意赅、目的明确，知错就改，还是“好孩子”。直到最近，在网上看到下面这样一段话，感触很深。\n\n>比起拯救地球，人类最需要拯救的是自己。地球她并不担心，因为她经历过更严重的灾难，毁灭般的气候变换，五次绝世大爆炸，数次核爆炸，数不清的火山喷发，社会动乱，彗星撞击，难以想象的冰川时期，各大洲错位的情况也时有发生，但是她都挺过来了，而且过得好好的。但，在这45亿年来，地球上96%的水生动物和70%的陆地脊椎动物都灭绝了。\n\n太阳的寿命100亿年，它已经走过了漫长的50亿年，地球也已经46亿岁了。以一个最简单的模型估计，太阳的终结伴随着地球的湮灭，那么地球还有50多亿年的寿命。前45亿年，经历了那么多的“坎坷”，地球依旧好好的，我相信以后的50多亿年，也不会坏到哪去，可这并不代表人类就能一直好好好的。**`对于地球的“一生”来说，人类的出现好似沧海一粟那么渺小，在慢慢长河中，甚至比不上弹指一挥间的短暂。我们的出现，就像你在春日里看到的路边的野花，就像是夜晚昙花那一瞬的闪耀。`** 我们要明白，拯救地球，拯救的不是地球本身，地球也不需要我们来拯救。**`我们要拯救的，是自己，而这其中更多的是对人类自己过往的一种救赎`**。\n\n也许，对于地球来说，在不久的将来，她会回到自己最初的模样，一切归于沉寂，一切会从头来过。而那时，她已失去所有，失去了日出月落，失去了碧海蓝天，失去了草长莺飞，失去了寒梅傲雪。更重要的，她失去了自己的“孩子”，失去了欢声笑语，失去了曾经的辉煌，曾经的一切... 可，她还在，在宇宙的一隅，叹一口长长的太息，哀婉于曾经“孩子”的欲望与迷途...\n\n\n### 一首歌\n\n> 最后，把我最喜欢的一位歌手——**[李健](https://www.baidu.com/link?url=BsltTzlHbDVY83hcXfq3fs1sPLee1fFXhRZperHgpnpGYrvNA1pkm_tIOWp6uwExDNz7hzr-4fK3XXpcLC3cvZElHhODunSKMhXqKqAcjTu&wd=&eqid=a1ae7140000804bc000000035b7167a3)**的一首歌曲**[《深海之寻》](https://baike.baidu.com/item/%E6%B7%B1%E6%B5%B7%E4%B9%8B%E5%AF%BB/18337760?fr=aladdin)**分享给大家。这是李健作为`“国家海洋公益形象大使”`为`“世界海洋日暨中国海洋公益日”`创作的宣传曲。在歌中采用与海洋“对话”式的表达，用反思的方式，写出了自然对人类的失望，人类对自然的亏欠。\n<div id=\"content-ctn\">\n  <div class=\"center-content\">\n** 深海之寻 **\n作词：李健\n作曲：李健\n编曲：赵兆\n\n这无穷宇宙谁能看得透\n不知不觉中你已经远走\n我以为自由 是随意的拥有\n可是到最后 快一无所有\n我的辉煌让你黯淡了很久\n我的挥洒穷尽了你的所有\n在那拥挤的天空何止乌云密布\n我已经深陷迷途还不清楚\n竟义无反顾\n\n这无边海洋装不下欲望\n每一朵浪花都历经沧桑\n我的辉煌让你黯淡了很久\n我的挥洒穷尽了你的所有\n在那拥挤的天空何止乌云密布\n我已经深陷迷途还不清楚\n竟义无反顾\n\n曾经辉煌的地方如今已荒芜\n一路孤独铺满了你的去处\n在那风平浪静的下面暗流涌动\n我已经踏上征途 狂奔向你\n竟义无反顾\n\nWu~ 这无穷宇宙\nWu~ 谁能看得透\nWu~ 让我奔向你\nWu~ 给你我所有\n  </div>\n </div>\n\n\n\n[1]: /medias/article/journal/temperature-1.jpg\n[2]: /medias/article/journal/temperature-2.jpg\n[3]: /medias/article/journal/arctic.jpg\n[4]: /medias/article/journal/carbon.jpg\n[5]: /medias/article/journal/reserve-time.jpg\n\n<style>\n  #iframe-ctn {\n    padding: 0px;\n    margin: 30px auto 30px;\n    overflow: hidden;\n    width: 800px;\n    height: 95px;\n  }\n  #page-iframe {\n    position: relative;\n    left: 0px;\n    top: -205px;\n  }\n  .data-resource {\n    text-align:right;\n    font-size: 12px;\n    color: #999;\n  }\n  #arctic-pic img {\n    float: left;\n    height: 500px;\n  }\n</style>","source":"_posts/journal-2.md","raw":"---\ntitle: 生命难以承受的“2 ℃\"\ndate: 2018-08-10 16:43:21\ncategories: 日志\ntags: 阅读感悟\n---\n\n### “番茄炒蛋”\n\n近一个月来的西安城高温持续不下，与阴雨绵绵、凉爽怡人的7月初的差距算得上是天冠地屦，近几日的气温用“烁石流金”形容也是毫无夸张之嫌。在七八月份华南华北甚至全国“一片火热”的形势下，西安的温度也算是遥遥领先。当华南华北高温在地图上连上一片时，西安城的气温很多时候就像冬日那傲然的梅花，真可谓一枝独秀，也算是“雄鸡”中心最瞩目的一点。夏季的西安，在高温预报图上就是一个又红又紫，红得发紫的城市。\n\n西安所处地理位置典型的温带季风性气候——夏季高温多雨，冬季寒冷干燥。看起来降水充足，但以个人的感受，西安的高温实在是有过之而无不及。下图是2018年8月13日，中央气象台发布的全国高温预报图，说西安“一枝独秀”、红得发紫，真的是名副其实。\n\n<!--more-->\n\n![中央气象台2018.08.13 06:00:00全国高温预报图][1]\n\n\n下图是2018.07.14 - 2018.08.12全国高温分布图。每年七八月份，不仅是西安城，全国的气温预报图便成了一片又红又紫的“雄鸡”。网友也调侃着说，全国气温图看起来就像是一盘“番茄炒蛋”。\n\n![全国近一个月温度分布图][2]\n\n<p class=\"data-resource\">以上数据来源，[中央气象台](http://www.nmc.cn/)</p>\n\n### 最近的地球\n\n2018年，好像全球都比往年更加“火热”。** `地球，好像发烧了，而且，高烧不退...` **\n\n今年7月初，多个北非国家也出现热浪，撒哈拉沙漠地区最高气温达到51.3℃。世界气象组织说，这应该是阿尔及利亚可靠的温度记录中的最高值。持续的高温同样袭击了整个欧洲，瑞典、西班牙、葡萄牙、法国、意大利、德国、芬兰等几乎所有欧洲国家都出现了历史上罕见的高温天气。地处东欧的波兰，往年被视为避暑好去处，最近却连续遭遇30℃以上罕见高温，最高气温34℃。\n\n>**[北晚新视觉 - 《欧洲多地持续高温：局地或超47℃ 瑞典最高峰冰川融化4米》](http://www.takefoto.cn/viewnews-1532649.html)**\n\n此外，就连北极圈内也出现了罕见的超过30℃的高温，冰川融化，甚至严重威胁到北极熊的生存。茫茫无边的北极圈海面上天空阴沉昏暗，让人窒息，冰冷刺骨的海面上飘着一块孤零零的来自极地的冰山，一只北极熊蜷缩在上面睡着了。饥饿、劳累，但对于它来说，比海更广阔的是内心的孤独...\n\n![比海更广阔的是内心的孤独][3]\n\n>**[澎湃新闻 - 《四大洲同现极端高温北极圈罕见32℃，北极熊或40年内灭绝》](https://www.thepaper.cn/newsDetail_forward_2322066)**\n>**[百度百家号新闻 - 《北极圈出现罕见高温，北极熊将消失？》](https://baijiahao.baidu.com/s?id=1608148193270009243&wfr=spider&for=pc)**\n\n**[这里](https://www.thepaper.cn/newsDetail_forward_2335388)**，有一封来自北极熊的独白信。充满悲伤、孤独和无奈... 人类用了几十年就使几百万年的北极冰川大面积融化... 因饥饿与劳累北极熊溺死在北极冰冷的海水中... 以海豹为主食的北极熊，开始捕食鸟蛋、海豚，甚至撕碎并吃掉自己的孩子... 最后的图文中有一句话**`“不知道人类还记不记得，北极，Arctic，这个词源自希腊语，意思是 —— 被熊照耀的地方...”`** 如今的北极，好像也生病了... 而且，无法康复...\n\n\n### 一串数字\n\n下面这一串数字，访问**[这里](http://trillionthtonne.org/)**，你可以看到它在飞速增长。`6240多亿`（截止于2018.08.13，相信以后会越来越多），粗略估计大约每`2秒`就会增加`1000`。它代表什么？你所拥有的财富的增长？某个国家GDP总量的增长？地球氧气总量的增长？你可能会有很多猜测... \n\n![飞速增长的全球二氧化碳排放总量][4]\n\n<p class=\"data-resource\">数据来源，[这里](http://trillionthtonne.org/)</p>\n\n其实，它代表的是** `自工业化以来，全球范围内人类在化石燃料使用、水泥制造、土地利用等活动中排放的二氧化碳总量，并且在实时更新` **，值得注意的是，该数值的单位是 **`吨`**。这就表示，自工业化以来全球目前排放二氧化碳** `6240多亿吨` **。第一次知道它代表的含义，在看着这飞速增长的数字，我心惊肉跳。我想让它走得慢一些... 我恨不得抓住它，抑制住它。可是，我无能为力，心有余而力不足... 那种焦虑和无助感，真的可以让你抓耳挠心塞。在这个网站页面主体的右下方，还有一个倒计时，目前，预计在2036年2月全球二氧化碳排放量达到10000亿吨，意味着那时全球平均温度较现在升高2℃左右。每一秒看着时间的走近，就让人觉得恐慌，灾难在一步步靠近...\n\n![全球二氧化碳排放量达到10000亿吨倒计时][5]\n\n>笔者注：这一数据信息是我在阅读阮一峰大佬的**[这一片博客](http://www.ruanyifeng.com/blog/2018/08/weekly-issue-17.html)**时获取到的，相信数据的真实性。个人对于这个数据，个人还存在一些疑问。\n>1. 目前我还没有搞清楚该网站如何获得这一数据值的，同时也不清楚该网站如何做到实时同步全球二氧化碳排放量的。\n>2. 这应该是一个估计值，个人感觉实际的二氧化碳排放量肯定是有过之而无不及。\n\n全球变暖已经是活生生的现实。化石燃料的过度使用，温室气体大量排放，滥砍滥发，绿色植被逐年大幅减少，海平面上升... 现在的地球就像是一个天然的`“烤炉”`。\n\n> <p class=\"data-resource\">以下信息，引用自[阮一峰博客](http://www.ruanyifeng.com/blog/2018/08/weekly-issue-17.html)</p>\n>科学家估计，目前的年平均气温比工业革命前已经升高了`1度`。《巴黎气候协议》的目标是，气温升高控制在`2度`，但是成功的希望据说只有`5%`。如果学过统计学，你就知道，`5%`的机会在统计学上可以视作不会发生。现在的计算是，如果人类排放`10000亿吨`二氧化碳，地球就会升高`2度`，千万不要觉得，`2度`不算什么，**[《纽约时报》](https://www.nytimes.com/interactive/2018/08/01/magazine/climate-change-losing-earth.html)**描述了后果：\n>* 升高`2度`：热带珊瑚礁灭绝，海平面上升几米，波斯湾不适合人类居住。\n>* 升高`3度`：北极的森林和大多数沿海城市被淹没。\n>* 升高`4度`：欧洲永久干旱， 中国、印度和孟加拉国大部分地区变成沙漠，美国科罗拉多河接近干涸，美国西南部将不适合居住。\n>* 升高`5度`：人类文明终结。\n\n### 我们到底要拯救谁\n\n第二次工业革命以来，人类社会飞速发展。起初，我们天真地以为地球资源取之不尽用之不竭，各个国家费劲一切力气开发一切可用资源——土地、石油、煤炭、天然气、海洋资源等等，为掠夺资源而发动战争也是屡见不鲜。我们错误地认为所谓位于食物链顶端的自由就是可以随意地拥有，我们陷入迷途肆意地挥洒，我们深陷迷途却毫不清楚、“义无反顾”... 到最后却要穷尽地球的所有... \n\n我们的行为，极大地改变了地球生态，曾经的辉煌变成如今眼前的荒芜。全球气温升高，冰川面积锐减，海平面上升，极端天气骤多，臭氧层破坏，酸雨频发，生物多样性破坏，土地退化及荒漠化，森林面积锐减... 地球，愈来愈伤痕累累...\n\n后来，我们“长大了”，意识到了问题的严重性。政府颁布各种法律禁令，国际组织签订个多项协议公约，目的就是想尽力保护地球生态，而这些行为有一个几乎相同的口号——“保护地球，保护我们赖以生存的家园”。以前觉得这一口号言简意赅、目的明确，知错就改，还是“好孩子”。直到最近，在网上看到下面这样一段话，感触很深。\n\n>比起拯救地球，人类最需要拯救的是自己。地球她并不担心，因为她经历过更严重的灾难，毁灭般的气候变换，五次绝世大爆炸，数次核爆炸，数不清的火山喷发，社会动乱，彗星撞击，难以想象的冰川时期，各大洲错位的情况也时有发生，但是她都挺过来了，而且过得好好的。但，在这45亿年来，地球上96%的水生动物和70%的陆地脊椎动物都灭绝了。\n\n太阳的寿命100亿年，它已经走过了漫长的50亿年，地球也已经46亿岁了。以一个最简单的模型估计，太阳的终结伴随着地球的湮灭，那么地球还有50多亿年的寿命。前45亿年，经历了那么多的“坎坷”，地球依旧好好的，我相信以后的50多亿年，也不会坏到哪去，可这并不代表人类就能一直好好好的。**`对于地球的“一生”来说，人类的出现好似沧海一粟那么渺小，在慢慢长河中，甚至比不上弹指一挥间的短暂。我们的出现，就像你在春日里看到的路边的野花，就像是夜晚昙花那一瞬的闪耀。`** 我们要明白，拯救地球，拯救的不是地球本身，地球也不需要我们来拯救。**`我们要拯救的，是自己，而这其中更多的是对人类自己过往的一种救赎`**。\n\n也许，对于地球来说，在不久的将来，她会回到自己最初的模样，一切归于沉寂，一切会从头来过。而那时，她已失去所有，失去了日出月落，失去了碧海蓝天，失去了草长莺飞，失去了寒梅傲雪。更重要的，她失去了自己的“孩子”，失去了欢声笑语，失去了曾经的辉煌，曾经的一切... 可，她还在，在宇宙的一隅，叹一口长长的太息，哀婉于曾经“孩子”的欲望与迷途...\n\n\n### 一首歌\n\n> 最后，把我最喜欢的一位歌手——**[李健](https://www.baidu.com/link?url=BsltTzlHbDVY83hcXfq3fs1sPLee1fFXhRZperHgpnpGYrvNA1pkm_tIOWp6uwExDNz7hzr-4fK3XXpcLC3cvZElHhODunSKMhXqKqAcjTu&wd=&eqid=a1ae7140000804bc000000035b7167a3)**的一首歌曲**[《深海之寻》](https://baike.baidu.com/item/%E6%B7%B1%E6%B5%B7%E4%B9%8B%E5%AF%BB/18337760?fr=aladdin)**分享给大家。这是李健作为`“国家海洋公益形象大使”`为`“世界海洋日暨中国海洋公益日”`创作的宣传曲。在歌中采用与海洋“对话”式的表达，用反思的方式，写出了自然对人类的失望，人类对自然的亏欠。\n<div id=\"content-ctn\">\n  <div class=\"center-content\">\n** 深海之寻 **\n作词：李健\n作曲：李健\n编曲：赵兆\n\n这无穷宇宙谁能看得透\n不知不觉中你已经远走\n我以为自由 是随意的拥有\n可是到最后 快一无所有\n我的辉煌让你黯淡了很久\n我的挥洒穷尽了你的所有\n在那拥挤的天空何止乌云密布\n我已经深陷迷途还不清楚\n竟义无反顾\n\n这无边海洋装不下欲望\n每一朵浪花都历经沧桑\n我的辉煌让你黯淡了很久\n我的挥洒穷尽了你的所有\n在那拥挤的天空何止乌云密布\n我已经深陷迷途还不清楚\n竟义无反顾\n\n曾经辉煌的地方如今已荒芜\n一路孤独铺满了你的去处\n在那风平浪静的下面暗流涌动\n我已经踏上征途 狂奔向你\n竟义无反顾\n\nWu~ 这无穷宇宙\nWu~ 谁能看得透\nWu~ 让我奔向你\nWu~ 给你我所有\n  </div>\n </div>\n\n\n\n[1]: /medias/article/journal/temperature-1.jpg\n[2]: /medias/article/journal/temperature-2.jpg\n[3]: /medias/article/journal/arctic.jpg\n[4]: /medias/article/journal/carbon.jpg\n[5]: /medias/article/journal/reserve-time.jpg\n\n<style>\n  #iframe-ctn {\n    padding: 0px;\n    margin: 30px auto 30px;\n    overflow: hidden;\n    width: 800px;\n    height: 95px;\n  }\n  #page-iframe {\n    position: relative;\n    left: 0px;\n    top: -205px;\n  }\n  .data-resource {\n    text-align:right;\n    font-size: 12px;\n    color: #999;\n  }\n  #arctic-pic img {\n    float: left;\n    height: 500px;\n  }\n</style>","slug":"journal-2","published":1,"updated":"2019-05-19T10:33:54.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mvc001u9kvbv9oemhuw","content":"<h3 id=\"“番茄炒蛋”\"><a href=\"#“番茄炒蛋”\" class=\"headerlink\" title=\"“番茄炒蛋”\"></a>“番茄炒蛋”</h3><p>近一个月来的西安城高温持续不下，与阴雨绵绵、凉爽怡人的7月初的差距算得上是天冠地屦，近几日的气温用“烁石流金”形容也是毫无夸张之嫌。在七八月份华南华北甚至全国“一片火热”的形势下，西安的温度也算是遥遥领先。当华南华北高温在地图上连上一片时，西安城的气温很多时候就像冬日那傲然的梅花，真可谓一枝独秀，也算是“雄鸡”中心最瞩目的一点。夏季的西安，在高温预报图上就是一个又红又紫，红得发紫的城市。</p>\n<p>西安所处地理位置典型的温带季风性气候——夏季高温多雨，冬季寒冷干燥。看起来降水充足，但以个人的感受，西安的高温实在是有过之而无不及。下图是2018年8月13日，中央气象台发布的全国高温预报图，说西安“一枝独秀”、红得发紫，真的是名副其实。</p>\n<a id=\"more\"></a>\n<p><img src=\"/medias/article/journal/temperature-1.jpg\" alt=\"中央气象台2018.08.13 06:00:00全国高温预报图\"></p>\n<p>下图是2018.07.14 - 2018.08.12全国高温分布图。每年七八月份，不仅是西安城，全国的气温预报图便成了一片又红又紫的“雄鸡”。网友也调侃着说，全国气温图看起来就像是一盘“番茄炒蛋”。</p>\n<p><img src=\"/medias/article/journal/temperature-2.jpg\" alt=\"全国近一个月温度分布图\"></p>\n<p class=\"data-resource\">以上数据来源，<a href=\"http://www.nmc.cn/\" target=\"_blank\" rel=\"noopener\">中央气象台</a></p>\n\n<h3 id=\"最近的地球\"><a href=\"#最近的地球\" class=\"headerlink\" title=\"最近的地球\"></a>最近的地球</h3><p>2018年，好像全球都比往年更加“火热”。<strong> <code>地球，好像发烧了，而且，高烧不退...</code> </strong></p>\n<p>今年7月初，多个北非国家也出现热浪，撒哈拉沙漠地区最高气温达到51.3℃。世界气象组织说，这应该是阿尔及利亚可靠的温度记录中的最高值。持续的高温同样袭击了整个欧洲，瑞典、西班牙、葡萄牙、法国、意大利、德国、芬兰等几乎所有欧洲国家都出现了历史上罕见的高温天气。地处东欧的波兰，往年被视为避暑好去处，最近却连续遭遇30℃以上罕见高温，最高气温34℃。</p>\n<blockquote>\n<p><strong><a href=\"http://www.takefoto.cn/viewnews-1532649.html\" target=\"_blank\" rel=\"noopener\">北晚新视觉 - 《欧洲多地持续高温：局地或超47℃ 瑞典最高峰冰川融化4米》</a></strong></p>\n</blockquote>\n<p>此外，就连北极圈内也出现了罕见的超过30℃的高温，冰川融化，甚至严重威胁到北极熊的生存。茫茫无边的北极圈海面上天空阴沉昏暗，让人窒息，冰冷刺骨的海面上飘着一块孤零零的来自极地的冰山，一只北极熊蜷缩在上面睡着了。饥饿、劳累，但对于它来说，比海更广阔的是内心的孤独…</p>\n<p><img src=\"/medias/article/journal/arctic.jpg\" alt=\"比海更广阔的是内心的孤独\"></p>\n<blockquote>\n<p><strong><a href=\"https://www.thepaper.cn/newsDetail_forward_2322066\" target=\"_blank\" rel=\"noopener\">澎湃新闻 - 《四大洲同现极端高温北极圈罕见32℃，北极熊或40年内灭绝》</a></strong><br><strong><a href=\"https://baijiahao.baidu.com/s?id=1608148193270009243&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">百度百家号新闻 - 《北极圈出现罕见高温，北极熊将消失？》</a></strong></p>\n</blockquote>\n<p><strong><a href=\"https://www.thepaper.cn/newsDetail_forward_2335388\" target=\"_blank\" rel=\"noopener\">这里</a></strong>，有一封来自北极熊的独白信。充满悲伤、孤独和无奈… 人类用了几十年就使几百万年的北极冰川大面积融化… 因饥饿与劳累北极熊溺死在北极冰冷的海水中… 以海豹为主食的北极熊，开始捕食鸟蛋、海豚，甚至撕碎并吃掉自己的孩子… 最后的图文中有一句话<strong><code>“不知道人类还记不记得，北极，Arctic，这个词源自希腊语，意思是 —— 被熊照耀的地方...”</code></strong> 如今的北极，好像也生病了… 而且，无法康复…</p>\n<h3 id=\"一串数字\"><a href=\"#一串数字\" class=\"headerlink\" title=\"一串数字\"></a>一串数字</h3><p>下面这一串数字，访问<strong><a href=\"http://trillionthtonne.org/\" target=\"_blank\" rel=\"noopener\">这里</a></strong>，你可以看到它在飞速增长。<code>6240多亿</code>（截止于2018.08.13，相信以后会越来越多），粗略估计大约每<code>2秒</code>就会增加<code>1000</code>。它代表什么？你所拥有的财富的增长？某个国家GDP总量的增长？地球氧气总量的增长？你可能会有很多猜测… </p>\n<p><img src=\"/medias/article/journal/carbon.jpg\" alt=\"飞速增长的全球二氧化碳排放总量\"></p>\n<p class=\"data-resource\">数据来源，<a href=\"http://trillionthtonne.org/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n\n<p>其实，它代表的是<strong> <code>自工业化以来，全球范围内人类在化石燃料使用、水泥制造、土地利用等活动中排放的二氧化碳总量，并且在实时更新</code> </strong>，值得注意的是，该数值的单位是 <strong><code>吨</code></strong>。这就表示，自工业化以来全球目前排放二氧化碳<strong> <code>6240多亿吨</code> </strong>。第一次知道它代表的含义，在看着这飞速增长的数字，我心惊肉跳。我想让它走得慢一些… 我恨不得抓住它，抑制住它。可是，我无能为力，心有余而力不足… 那种焦虑和无助感，真的可以让你抓耳挠心塞。在这个网站页面主体的右下方，还有一个倒计时，目前，预计在2036年2月全球二氧化碳排放量达到10000亿吨，意味着那时全球平均温度较现在升高2℃左右。每一秒看着时间的走近，就让人觉得恐慌，灾难在一步步靠近…</p>\n<p><img src=\"/medias/article/journal/reserve-time.jpg\" alt=\"全球二氧化碳排放量达到10000亿吨倒计时\"></p>\n<blockquote>\n<p>笔者注：这一数据信息是我在阅读阮一峰大佬的<strong><a href=\"http://www.ruanyifeng.com/blog/2018/08/weekly-issue-17.html\" target=\"_blank\" rel=\"noopener\">这一片博客</a></strong>时获取到的，相信数据的真实性。个人对于这个数据，个人还存在一些疑问。</p>\n<ol>\n<li>目前我还没有搞清楚该网站如何获得这一数据值的，同时也不清楚该网站如何做到实时同步全球二氧化碳排放量的。</li>\n<li>这应该是一个估计值，个人感觉实际的二氧化碳排放量肯定是有过之而无不及。</li>\n</ol>\n</blockquote>\n<p>全球变暖已经是活生生的现实。化石燃料的过度使用，温室气体大量排放，滥砍滥发，绿色植被逐年大幅减少，海平面上升… 现在的地球就像是一个天然的<code>“烤炉”</code>。</p>\n<blockquote>\n<p></p><p class=\"data-resource\">以下信息，引用自<a href=\"http://www.ruanyifeng.com/blog/2018/08/weekly-issue-17.html\" target=\"_blank\" rel=\"noopener\">阮一峰博客</a></p><br>科学家估计，目前的年平均气温比工业革命前已经升高了<code>1度</code>。《巴黎气候协议》的目标是，气温升高控制在<code>2度</code>，但是成功的希望据说只有<code>5%</code>。如果学过统计学，你就知道，<code>5%</code>的机会在统计学上可以视作不会发生。现在的计算是，如果人类排放<code>10000亿吨</code>二氧化碳，地球就会升高<code>2度</code>，千万不要觉得，<code>2度</code>不算什么，<strong><a href=\"https://www.nytimes.com/interactive/2018/08/01/magazine/climate-change-losing-earth.html\" target=\"_blank\" rel=\"noopener\">《纽约时报》</a></strong>描述了后果：<p></p>\n<ul>\n<li>升高<code>2度</code>：热带珊瑚礁灭绝，海平面上升几米，波斯湾不适合人类居住。</li>\n<li>升高<code>3度</code>：北极的森林和大多数沿海城市被淹没。</li>\n<li>升高<code>4度</code>：欧洲永久干旱， 中国、印度和孟加拉国大部分地区变成沙漠，美国科罗拉多河接近干涸，美国西南部将不适合居住。</li>\n<li>升高<code>5度</code>：人类文明终结。</li>\n</ul>\n</blockquote>\n<h3 id=\"我们到底要拯救谁\"><a href=\"#我们到底要拯救谁\" class=\"headerlink\" title=\"我们到底要拯救谁\"></a>我们到底要拯救谁</h3><p>第二次工业革命以来，人类社会飞速发展。起初，我们天真地以为地球资源取之不尽用之不竭，各个国家费劲一切力气开发一切可用资源——土地、石油、煤炭、天然气、海洋资源等等，为掠夺资源而发动战争也是屡见不鲜。我们错误地认为所谓位于食物链顶端的自由就是可以随意地拥有，我们陷入迷途肆意地挥洒，我们深陷迷途却毫不清楚、“义无反顾”… 到最后却要穷尽地球的所有… </p>\n<p>我们的行为，极大地改变了地球生态，曾经的辉煌变成如今眼前的荒芜。全球气温升高，冰川面积锐减，海平面上升，极端天气骤多，臭氧层破坏，酸雨频发，生物多样性破坏，土地退化及荒漠化，森林面积锐减… 地球，愈来愈伤痕累累…</p>\n<p>后来，我们“长大了”，意识到了问题的严重性。政府颁布各种法律禁令，国际组织签订个多项协议公约，目的就是想尽力保护地球生态，而这些行为有一个几乎相同的口号——“保护地球，保护我们赖以生存的家园”。以前觉得这一口号言简意赅、目的明确，知错就改，还是“好孩子”。直到最近，在网上看到下面这样一段话，感触很深。</p>\n<blockquote>\n<p>比起拯救地球，人类最需要拯救的是自己。地球她并不担心，因为她经历过更严重的灾难，毁灭般的气候变换，五次绝世大爆炸，数次核爆炸，数不清的火山喷发，社会动乱，彗星撞击，难以想象的冰川时期，各大洲错位的情况也时有发生，但是她都挺过来了，而且过得好好的。但，在这45亿年来，地球上96%的水生动物和70%的陆地脊椎动物都灭绝了。</p>\n</blockquote>\n<p>太阳的寿命100亿年，它已经走过了漫长的50亿年，地球也已经46亿岁了。以一个最简单的模型估计，太阳的终结伴随着地球的湮灭，那么地球还有50多亿年的寿命。前45亿年，经历了那么多的“坎坷”，地球依旧好好的，我相信以后的50多亿年，也不会坏到哪去，可这并不代表人类就能一直好好好的。<strong><code>对于地球的“一生”来说，人类的出现好似沧海一粟那么渺小，在慢慢长河中，甚至比不上弹指一挥间的短暂。我们的出现，就像你在春日里看到的路边的野花，就像是夜晚昙花那一瞬的闪耀。</code></strong> 我们要明白，拯救地球，拯救的不是地球本身，地球也不需要我们来拯救。<strong><code>我们要拯救的，是自己，而这其中更多的是对人类自己过往的一种救赎</code></strong>。</p>\n<p>也许，对于地球来说，在不久的将来，她会回到自己最初的模样，一切归于沉寂，一切会从头来过。而那时，她已失去所有，失去了日出月落，失去了碧海蓝天，失去了草长莺飞，失去了寒梅傲雪。更重要的，她失去了自己的“孩子”，失去了欢声笑语，失去了曾经的辉煌，曾经的一切… 可，她还在，在宇宙的一隅，叹一口长长的太息，哀婉于曾经“孩子”的欲望与迷途…</p>\n<h3 id=\"一首歌\"><a href=\"#一首歌\" class=\"headerlink\" title=\"一首歌\"></a>一首歌</h3><blockquote>\n<p>最后，把我最喜欢的一位歌手——<strong><a href=\"https://www.baidu.com/link?url=BsltTzlHbDVY83hcXfq3fs1sPLee1fFXhRZperHgpnpGYrvNA1pkm_tIOWp6uwExDNz7hzr-4fK3XXpcLC3cvZElHhODunSKMhXqKqAcjTu&amp;wd=&amp;eqid=a1ae7140000804bc000000035b7167a3\" target=\"_blank\" rel=\"noopener\">李健</a></strong>的一首歌曲<strong><a href=\"https://baike.baidu.com/item/%E6%B7%B1%E6%B5%B7%E4%B9%8B%E5%AF%BB/18337760?fr=aladdin\" target=\"_blank\" rel=\"noopener\">《深海之寻》</a></strong>分享给大家。这是李健作为<code>“国家海洋公益形象大使”</code>为<code>“世界海洋日暨中国海洋公益日”</code>创作的宣传曲。在歌中采用与海洋“对话”式的表达，用反思的方式，写出了自然对人类的失望，人类对自然的亏欠。</p>\n</blockquote>\n<div id=\"content-ctn\"><br>  <div class=\"center-content\"><br><strong> 深海之寻 </strong><br>作词：李健<br>作曲：李健<br>编曲：赵兆<br><br>这无穷宇宙谁能看得透<br>不知不觉中你已经远走<br>我以为自由 是随意的拥有<br>可是到最后 快一无所有<br>我的辉煌让你黯淡了很久<br>我的挥洒穷尽了你的所有<br>在那拥挤的天空何止乌云密布<br>我已经深陷迷途还不清楚<br>竟义无反顾<br><br>这无边海洋装不下欲望<br>每一朵浪花都历经沧桑<br>我的辉煌让你黯淡了很久<br>我的挥洒穷尽了你的所有<br>在那拥挤的天空何止乌云密布<br>我已经深陷迷途还不清楚<br>竟义无反顾<br><br>曾经辉煌的地方如今已荒芜<br>一路孤独铺满了你的去处<br>在那风平浪静的下面暗流涌动<br>我已经踏上征途 狂奔向你<br>竟义无反顾<br><br>Wu~ 这无穷宇宙<br>Wu~ 谁能看得透<br>Wu~ 让我奔向你<br>Wu~ 给你我所有<br>  </div><br> </div>\n\n\n\n<style>\n  #iframe-ctn {\n    padding: 0px;\n    margin: 30px auto 30px;\n    overflow: hidden;\n    width: 800px;\n    height: 95px;\n  }\n  #page-iframe {\n    position: relative;\n    left: 0px;\n    top: -205px;\n  }\n  .data-resource {\n    text-align:right;\n    font-size: 12px;\n    color: #999;\n  }\n  #arctic-pic img {\n    float: left;\n    height: 500px;\n  }\n</style>","site":{"data":{}},"excerpt":"<h3 id=\"“番茄炒蛋”\"><a href=\"#“番茄炒蛋”\" class=\"headerlink\" title=\"“番茄炒蛋”\"></a>“番茄炒蛋”</h3><p>近一个月来的西安城高温持续不下，与阴雨绵绵、凉爽怡人的7月初的差距算得上是天冠地屦，近几日的气温用“烁石流金”形容也是毫无夸张之嫌。在七八月份华南华北甚至全国“一片火热”的形势下，西安的温度也算是遥遥领先。当华南华北高温在地图上连上一片时，西安城的气温很多时候就像冬日那傲然的梅花，真可谓一枝独秀，也算是“雄鸡”中心最瞩目的一点。夏季的西安，在高温预报图上就是一个又红又紫，红得发紫的城市。</p>\n<p>西安所处地理位置典型的温带季风性气候——夏季高温多雨，冬季寒冷干燥。看起来降水充足，但以个人的感受，西安的高温实在是有过之而无不及。下图是2018年8月13日，中央气象台发布的全国高温预报图，说西安“一枝独秀”、红得发紫，真的是名副其实。</p>","more":"<p><img src=\"/medias/article/journal/temperature-1.jpg\" alt=\"中央气象台2018.08.13 06:00:00全国高温预报图\"></p>\n<p>下图是2018.07.14 - 2018.08.12全国高温分布图。每年七八月份，不仅是西安城，全国的气温预报图便成了一片又红又紫的“雄鸡”。网友也调侃着说，全国气温图看起来就像是一盘“番茄炒蛋”。</p>\n<p><img src=\"/medias/article/journal/temperature-2.jpg\" alt=\"全国近一个月温度分布图\"></p>\n<p class=\"data-resource\">以上数据来源，<a href=\"http://www.nmc.cn/\" target=\"_blank\" rel=\"noopener\">中央气象台</a></p>\n\n<h3 id=\"最近的地球\"><a href=\"#最近的地球\" class=\"headerlink\" title=\"最近的地球\"></a>最近的地球</h3><p>2018年，好像全球都比往年更加“火热”。<strong> <code>地球，好像发烧了，而且，高烧不退...</code> </strong></p>\n<p>今年7月初，多个北非国家也出现热浪，撒哈拉沙漠地区最高气温达到51.3℃。世界气象组织说，这应该是阿尔及利亚可靠的温度记录中的最高值。持续的高温同样袭击了整个欧洲，瑞典、西班牙、葡萄牙、法国、意大利、德国、芬兰等几乎所有欧洲国家都出现了历史上罕见的高温天气。地处东欧的波兰，往年被视为避暑好去处，最近却连续遭遇30℃以上罕见高温，最高气温34℃。</p>\n<blockquote>\n<p><strong><a href=\"http://www.takefoto.cn/viewnews-1532649.html\" target=\"_blank\" rel=\"noopener\">北晚新视觉 - 《欧洲多地持续高温：局地或超47℃ 瑞典最高峰冰川融化4米》</a></strong></p>\n</blockquote>\n<p>此外，就连北极圈内也出现了罕见的超过30℃的高温，冰川融化，甚至严重威胁到北极熊的生存。茫茫无边的北极圈海面上天空阴沉昏暗，让人窒息，冰冷刺骨的海面上飘着一块孤零零的来自极地的冰山，一只北极熊蜷缩在上面睡着了。饥饿、劳累，但对于它来说，比海更广阔的是内心的孤独…</p>\n<p><img src=\"/medias/article/journal/arctic.jpg\" alt=\"比海更广阔的是内心的孤独\"></p>\n<blockquote>\n<p><strong><a href=\"https://www.thepaper.cn/newsDetail_forward_2322066\" target=\"_blank\" rel=\"noopener\">澎湃新闻 - 《四大洲同现极端高温北极圈罕见32℃，北极熊或40年内灭绝》</a></strong><br><strong><a href=\"https://baijiahao.baidu.com/s?id=1608148193270009243&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">百度百家号新闻 - 《北极圈出现罕见高温，北极熊将消失？》</a></strong></p>\n</blockquote>\n<p><strong><a href=\"https://www.thepaper.cn/newsDetail_forward_2335388\" target=\"_blank\" rel=\"noopener\">这里</a></strong>，有一封来自北极熊的独白信。充满悲伤、孤独和无奈… 人类用了几十年就使几百万年的北极冰川大面积融化… 因饥饿与劳累北极熊溺死在北极冰冷的海水中… 以海豹为主食的北极熊，开始捕食鸟蛋、海豚，甚至撕碎并吃掉自己的孩子… 最后的图文中有一句话<strong><code>“不知道人类还记不记得，北极，Arctic，这个词源自希腊语，意思是 —— 被熊照耀的地方...”</code></strong> 如今的北极，好像也生病了… 而且，无法康复…</p>\n<h3 id=\"一串数字\"><a href=\"#一串数字\" class=\"headerlink\" title=\"一串数字\"></a>一串数字</h3><p>下面这一串数字，访问<strong><a href=\"http://trillionthtonne.org/\" target=\"_blank\" rel=\"noopener\">这里</a></strong>，你可以看到它在飞速增长。<code>6240多亿</code>（截止于2018.08.13，相信以后会越来越多），粗略估计大约每<code>2秒</code>就会增加<code>1000</code>。它代表什么？你所拥有的财富的增长？某个国家GDP总量的增长？地球氧气总量的增长？你可能会有很多猜测… </p>\n<p><img src=\"/medias/article/journal/carbon.jpg\" alt=\"飞速增长的全球二氧化碳排放总量\"></p>\n<p class=\"data-resource\">数据来源，<a href=\"http://trillionthtonne.org/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n\n<p>其实，它代表的是<strong> <code>自工业化以来，全球范围内人类在化石燃料使用、水泥制造、土地利用等活动中排放的二氧化碳总量，并且在实时更新</code> </strong>，值得注意的是，该数值的单位是 <strong><code>吨</code></strong>。这就表示，自工业化以来全球目前排放二氧化碳<strong> <code>6240多亿吨</code> </strong>。第一次知道它代表的含义，在看着这飞速增长的数字，我心惊肉跳。我想让它走得慢一些… 我恨不得抓住它，抑制住它。可是，我无能为力，心有余而力不足… 那种焦虑和无助感，真的可以让你抓耳挠心塞。在这个网站页面主体的右下方，还有一个倒计时，目前，预计在2036年2月全球二氧化碳排放量达到10000亿吨，意味着那时全球平均温度较现在升高2℃左右。每一秒看着时间的走近，就让人觉得恐慌，灾难在一步步靠近…</p>\n<p><img src=\"/medias/article/journal/reserve-time.jpg\" alt=\"全球二氧化碳排放量达到10000亿吨倒计时\"></p>\n<blockquote>\n<p>笔者注：这一数据信息是我在阅读阮一峰大佬的<strong><a href=\"http://www.ruanyifeng.com/blog/2018/08/weekly-issue-17.html\" target=\"_blank\" rel=\"noopener\">这一片博客</a></strong>时获取到的，相信数据的真实性。个人对于这个数据，个人还存在一些疑问。</p>\n<ol>\n<li>目前我还没有搞清楚该网站如何获得这一数据值的，同时也不清楚该网站如何做到实时同步全球二氧化碳排放量的。</li>\n<li>这应该是一个估计值，个人感觉实际的二氧化碳排放量肯定是有过之而无不及。</li>\n</ol>\n</blockquote>\n<p>全球变暖已经是活生生的现实。化石燃料的过度使用，温室气体大量排放，滥砍滥发，绿色植被逐年大幅减少，海平面上升… 现在的地球就像是一个天然的<code>“烤炉”</code>。</p>\n<blockquote>\n<p></p><p class=\"data-resource\">以下信息，引用自<a href=\"http://www.ruanyifeng.com/blog/2018/08/weekly-issue-17.html\" target=\"_blank\" rel=\"noopener\">阮一峰博客</a></p><br>科学家估计，目前的年平均气温比工业革命前已经升高了<code>1度</code>。《巴黎气候协议》的目标是，气温升高控制在<code>2度</code>，但是成功的希望据说只有<code>5%</code>。如果学过统计学，你就知道，<code>5%</code>的机会在统计学上可以视作不会发生。现在的计算是，如果人类排放<code>10000亿吨</code>二氧化碳，地球就会升高<code>2度</code>，千万不要觉得，<code>2度</code>不算什么，<strong><a href=\"https://www.nytimes.com/interactive/2018/08/01/magazine/climate-change-losing-earth.html\" target=\"_blank\" rel=\"noopener\">《纽约时报》</a></strong>描述了后果：<p></p>\n<ul>\n<li>升高<code>2度</code>：热带珊瑚礁灭绝，海平面上升几米，波斯湾不适合人类居住。</li>\n<li>升高<code>3度</code>：北极的森林和大多数沿海城市被淹没。</li>\n<li>升高<code>4度</code>：欧洲永久干旱， 中国、印度和孟加拉国大部分地区变成沙漠，美国科罗拉多河接近干涸，美国西南部将不适合居住。</li>\n<li>升高<code>5度</code>：人类文明终结。</li>\n</ul>\n</blockquote>\n<h3 id=\"我们到底要拯救谁\"><a href=\"#我们到底要拯救谁\" class=\"headerlink\" title=\"我们到底要拯救谁\"></a>我们到底要拯救谁</h3><p>第二次工业革命以来，人类社会飞速发展。起初，我们天真地以为地球资源取之不尽用之不竭，各个国家费劲一切力气开发一切可用资源——土地、石油、煤炭、天然气、海洋资源等等，为掠夺资源而发动战争也是屡见不鲜。我们错误地认为所谓位于食物链顶端的自由就是可以随意地拥有，我们陷入迷途肆意地挥洒，我们深陷迷途却毫不清楚、“义无反顾”… 到最后却要穷尽地球的所有… </p>\n<p>我们的行为，极大地改变了地球生态，曾经的辉煌变成如今眼前的荒芜。全球气温升高，冰川面积锐减，海平面上升，极端天气骤多，臭氧层破坏，酸雨频发，生物多样性破坏，土地退化及荒漠化，森林面积锐减… 地球，愈来愈伤痕累累…</p>\n<p>后来，我们“长大了”，意识到了问题的严重性。政府颁布各种法律禁令，国际组织签订个多项协议公约，目的就是想尽力保护地球生态，而这些行为有一个几乎相同的口号——“保护地球，保护我们赖以生存的家园”。以前觉得这一口号言简意赅、目的明确，知错就改，还是“好孩子”。直到最近，在网上看到下面这样一段话，感触很深。</p>\n<blockquote>\n<p>比起拯救地球，人类最需要拯救的是自己。地球她并不担心，因为她经历过更严重的灾难，毁灭般的气候变换，五次绝世大爆炸，数次核爆炸，数不清的火山喷发，社会动乱，彗星撞击，难以想象的冰川时期，各大洲错位的情况也时有发生，但是她都挺过来了，而且过得好好的。但，在这45亿年来，地球上96%的水生动物和70%的陆地脊椎动物都灭绝了。</p>\n</blockquote>\n<p>太阳的寿命100亿年，它已经走过了漫长的50亿年，地球也已经46亿岁了。以一个最简单的模型估计，太阳的终结伴随着地球的湮灭，那么地球还有50多亿年的寿命。前45亿年，经历了那么多的“坎坷”，地球依旧好好的，我相信以后的50多亿年，也不会坏到哪去，可这并不代表人类就能一直好好好的。<strong><code>对于地球的“一生”来说，人类的出现好似沧海一粟那么渺小，在慢慢长河中，甚至比不上弹指一挥间的短暂。我们的出现，就像你在春日里看到的路边的野花，就像是夜晚昙花那一瞬的闪耀。</code></strong> 我们要明白，拯救地球，拯救的不是地球本身，地球也不需要我们来拯救。<strong><code>我们要拯救的，是自己，而这其中更多的是对人类自己过往的一种救赎</code></strong>。</p>\n<p>也许，对于地球来说，在不久的将来，她会回到自己最初的模样，一切归于沉寂，一切会从头来过。而那时，她已失去所有，失去了日出月落，失去了碧海蓝天，失去了草长莺飞，失去了寒梅傲雪。更重要的，她失去了自己的“孩子”，失去了欢声笑语，失去了曾经的辉煌，曾经的一切… 可，她还在，在宇宙的一隅，叹一口长长的太息，哀婉于曾经“孩子”的欲望与迷途…</p>\n<h3 id=\"一首歌\"><a href=\"#一首歌\" class=\"headerlink\" title=\"一首歌\"></a>一首歌</h3><blockquote>\n<p>最后，把我最喜欢的一位歌手——<strong><a href=\"https://www.baidu.com/link?url=BsltTzlHbDVY83hcXfq3fs1sPLee1fFXhRZperHgpnpGYrvNA1pkm_tIOWp6uwExDNz7hzr-4fK3XXpcLC3cvZElHhODunSKMhXqKqAcjTu&amp;wd=&amp;eqid=a1ae7140000804bc000000035b7167a3\" target=\"_blank\" rel=\"noopener\">李健</a></strong>的一首歌曲<strong><a href=\"https://baike.baidu.com/item/%E6%B7%B1%E6%B5%B7%E4%B9%8B%E5%AF%BB/18337760?fr=aladdin\" target=\"_blank\" rel=\"noopener\">《深海之寻》</a></strong>分享给大家。这是李健作为<code>“国家海洋公益形象大使”</code>为<code>“世界海洋日暨中国海洋公益日”</code>创作的宣传曲。在歌中采用与海洋“对话”式的表达，用反思的方式，写出了自然对人类的失望，人类对自然的亏欠。</p>\n</blockquote>\n<div id=\"content-ctn\"><br>  <div class=\"center-content\"><br><strong> 深海之寻 </strong><br>作词：李健<br>作曲：李健<br>编曲：赵兆<br><br>这无穷宇宙谁能看得透<br>不知不觉中你已经远走<br>我以为自由 是随意的拥有<br>可是到最后 快一无所有<br>我的辉煌让你黯淡了很久<br>我的挥洒穷尽了你的所有<br>在那拥挤的天空何止乌云密布<br>我已经深陷迷途还不清楚<br>竟义无反顾<br><br>这无边海洋装不下欲望<br>每一朵浪花都历经沧桑<br>我的辉煌让你黯淡了很久<br>我的挥洒穷尽了你的所有<br>在那拥挤的天空何止乌云密布<br>我已经深陷迷途还不清楚<br>竟义无反顾<br><br>曾经辉煌的地方如今已荒芜<br>一路孤独铺满了你的去处<br>在那风平浪静的下面暗流涌动<br>我已经踏上征途 狂奔向你<br>竟义无反顾<br><br>Wu~ 这无穷宇宙<br>Wu~ 谁能看得透<br>Wu~ 让我奔向你<br>Wu~ 给你我所有<br>  </div><br> </div>\n\n\n\n<style>\n  #iframe-ctn {\n    padding: 0px;\n    margin: 30px auto 30px;\n    overflow: hidden;\n    width: 800px;\n    height: 95px;\n  }\n  #page-iframe {\n    position: relative;\n    left: 0px;\n    top: -205px;\n  }\n  .data-resource {\n    text-align:right;\n    font-size: 12px;\n    color: #999;\n  }\n  #arctic-pic img {\n    float: left;\n    height: 500px;\n  }\n</style>"},{"title":"愿你活成自己想要的样子","date":"2019-05-19T11:02:49.000Z","img":"/medias/article/featureimages/behind-the-suffering.jpg","_content":"\n### 近来\n说实话，个人近来的状态不是很好。每天无精打采，睡眠质量也不是很好，也只有我自己知道这个中原因，实在不愿多提。\n\n工作上，也是名副其实的程序员时间。不说“攀比”`9-9-6`，但`9-9-5`应该是有了。按照目前的情形，`9-10-6`应该也不会远了。所以，生活上基本就会是睁眼代码，一觉醒来又是代码的无限循环。\n\n### 伟大的背后，都是苦难\n突然想起前一段时间程序员中闹得沸沸扬扬的`“996.icu”`事件，概括起来就是“上班`9-9-6`，生病`ICU`”。我国的信息产业高速发展，我们的电子支付、网上购物以及各式各样让人眼花缭乱的APP方便着我们生活的一点一滴，更惊叹着许多外国友人。一片“欣欣向荣”的背后，都是`9-9-6`，`9-11-6`的杰作。其实，`“伟大的背后，都是苦难！”`\n\n![伟大的背后，都是苦难][1]\n\n现在常有人会把加班或者`9-9-6`、`9-11-6`的工作状态称之为奋斗，应该被赞扬、被肯定。我很客观的说，不同人的不同价值观念和生活方式决定了对这个问题不同的看法和态度。但对于我，我个人觉得，所谓“奋斗式”的`9-9-6`、`9-11-6`都是在浪费生命，浪费父母为你创造的这个世界。\n\n今年的读书计划3月初就已经定好了。自己还是喜欢纸质书籍的味道和阅读体验，所以趁着读书日的活动购齐了所有计划要读的书目。可惜的是，到现在也只看完了其中的三本。按照目前的工作节奏，今年的计划恐怕是无法完成了。\n\n### 以前，现在\n以前喜欢听点音乐，现在听到最多的是键盘协奏曲。以前喜欢看点书，现在却陷在`if-else`、`try-catch`的牢笼里无法自拔。以前喜欢迎着夕阳，哼着歌，走回住所，现在返回的路上只有昏暗的路灯，还有那经常看不到的月亮和星星。以前喜欢和三五好友出行远足，现在只能在夹缝中忙里偷闲。以前，还能时常下厨温习老妈教授的“课程”，现在养活我的是外卖和楼下的老潼关。以前……\n\n### 活成自己想要的样子\n我在自己的博客首页中有一行醒目的内容——“生活不仅有coding，还有文字和音乐”。说实话我非常讨厌一成不变，单调乏味的生活方式。我曾经说过：“同样的一年，有两种过法。一种，1+1+1+…+1（365个1相加），另一种，1 * 365。第二种过法的人是悲催的。”但更可悲的是，我在逐渐变成自己当初觉得“可悲又可怜”的人。细想起来，还有点像某些文艺电影中的经典台词——“最后，我们终究还是变成了自己最讨厌的样子”。\n\n有位朋友曾经告诉我说：“你还是经历的事太少。”没错，和久经沧桑、深谙世事的人比起来，我经历的确实不多，很多事也都还不明白。也许经过时间的磨砺，最后会坚强很多，释然很多，当然也会麻木很多。所以，这句话对也不全对。久经世事，并不代表学会妥协、随波浮沉、不悲不喜，更不代表放弃思考，对本就存在问题的事情欣然接受。\n\n我并没有真的弄清楚，是我的生活态度和方式出了问题，还是很多人都会遇到同样的问题，有同样的困惑？又有多少人找到了其中的“生门”？\n\n你呢？希望你的生活与我相反。愿所有人都能尽可能地活成自己最想要的模样。\n\n\n[1]: /medias/article/featureimages/behind-the-suffering.jpg","source":"_posts/live-as-you-want.md","raw":"---\ntitle: 愿你活成自己想要的样子\ndate: 2019-05-19 19:02:49\ncategories: 日志\ntags: 生活\nimg: /medias/article/featureimages/behind-the-suffering.jpg\n---\n\n### 近来\n说实话，个人近来的状态不是很好。每天无精打采，睡眠质量也不是很好，也只有我自己知道这个中原因，实在不愿多提。\n\n工作上，也是名副其实的程序员时间。不说“攀比”`9-9-6`，但`9-9-5`应该是有了。按照目前的情形，`9-10-6`应该也不会远了。所以，生活上基本就会是睁眼代码，一觉醒来又是代码的无限循环。\n\n### 伟大的背后，都是苦难\n突然想起前一段时间程序员中闹得沸沸扬扬的`“996.icu”`事件，概括起来就是“上班`9-9-6`，生病`ICU`”。我国的信息产业高速发展，我们的电子支付、网上购物以及各式各样让人眼花缭乱的APP方便着我们生活的一点一滴，更惊叹着许多外国友人。一片“欣欣向荣”的背后，都是`9-9-6`，`9-11-6`的杰作。其实，`“伟大的背后，都是苦难！”`\n\n![伟大的背后，都是苦难][1]\n\n现在常有人会把加班或者`9-9-6`、`9-11-6`的工作状态称之为奋斗，应该被赞扬、被肯定。我很客观的说，不同人的不同价值观念和生活方式决定了对这个问题不同的看法和态度。但对于我，我个人觉得，所谓“奋斗式”的`9-9-6`、`9-11-6`都是在浪费生命，浪费父母为你创造的这个世界。\n\n今年的读书计划3月初就已经定好了。自己还是喜欢纸质书籍的味道和阅读体验，所以趁着读书日的活动购齐了所有计划要读的书目。可惜的是，到现在也只看完了其中的三本。按照目前的工作节奏，今年的计划恐怕是无法完成了。\n\n### 以前，现在\n以前喜欢听点音乐，现在听到最多的是键盘协奏曲。以前喜欢看点书，现在却陷在`if-else`、`try-catch`的牢笼里无法自拔。以前喜欢迎着夕阳，哼着歌，走回住所，现在返回的路上只有昏暗的路灯，还有那经常看不到的月亮和星星。以前喜欢和三五好友出行远足，现在只能在夹缝中忙里偷闲。以前，还能时常下厨温习老妈教授的“课程”，现在养活我的是外卖和楼下的老潼关。以前……\n\n### 活成自己想要的样子\n我在自己的博客首页中有一行醒目的内容——“生活不仅有coding，还有文字和音乐”。说实话我非常讨厌一成不变，单调乏味的生活方式。我曾经说过：“同样的一年，有两种过法。一种，1+1+1+…+1（365个1相加），另一种，1 * 365。第二种过法的人是悲催的。”但更可悲的是，我在逐渐变成自己当初觉得“可悲又可怜”的人。细想起来，还有点像某些文艺电影中的经典台词——“最后，我们终究还是变成了自己最讨厌的样子”。\n\n有位朋友曾经告诉我说：“你还是经历的事太少。”没错，和久经沧桑、深谙世事的人比起来，我经历的确实不多，很多事也都还不明白。也许经过时间的磨砺，最后会坚强很多，释然很多，当然也会麻木很多。所以，这句话对也不全对。久经世事，并不代表学会妥协、随波浮沉、不悲不喜，更不代表放弃思考，对本就存在问题的事情欣然接受。\n\n我并没有真的弄清楚，是我的生活态度和方式出了问题，还是很多人都会遇到同样的问题，有同样的困惑？又有多少人找到了其中的“生门”？\n\n你呢？希望你的生活与我相反。愿所有人都能尽可能地活成自己最想要的模样。\n\n\n[1]: /medias/article/featureimages/behind-the-suffering.jpg","slug":"live-as-you-want","published":1,"updated":"2019-05-19T11:57:55.101Z","_id":"cjvuu4mvg001v9kvbg3o9k934","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"近来\"><a href=\"#近来\" class=\"headerlink\" title=\"近来\"></a>近来</h3><p>说实话，个人近来的状态不是很好。每天无精打采，睡眠质量也不是很好，也只有我自己知道这个中原因，实在不愿多提。</p>\n<p>工作上，也是名副其实的程序员时间。不说“攀比”<code>9-9-6</code>，但<code>9-9-5</code>应该是有了。按照目前的情形，<code>9-10-6</code>应该也不会远了。所以，生活上基本就会是睁眼代码，一觉醒来又是代码的无限循环。</p>\n<h3 id=\"伟大的背后，都是苦难\"><a href=\"#伟大的背后，都是苦难\" class=\"headerlink\" title=\"伟大的背后，都是苦难\"></a>伟大的背后，都是苦难</h3><p>突然想起前一段时间程序员中闹得沸沸扬扬的<code>“996.icu”</code>事件，概括起来就是“上班<code>9-9-6</code>，生病<code>ICU</code>”。我国的信息产业高速发展，我们的电子支付、网上购物以及各式各样让人眼花缭乱的APP方便着我们生活的一点一滴，更惊叹着许多外国友人。一片“欣欣向荣”的背后，都是<code>9-9-6</code>，<code>9-11-6</code>的杰作。其实，<code>“伟大的背后，都是苦难！”</code></p>\n<p><img src=\"/medias/article/featureimages/behind-the-suffering.jpg\" alt=\"伟大的背后，都是苦难\"></p>\n<p>现在常有人会把加班或者<code>9-9-6</code>、<code>9-11-6</code>的工作状态称之为奋斗，应该被赞扬、被肯定。我很客观的说，不同人的不同价值观念和生活方式决定了对这个问题不同的看法和态度。但对于我，我个人觉得，所谓“奋斗式”的<code>9-9-6</code>、<code>9-11-6</code>都是在浪费生命，浪费父母为你创造的这个世界。</p>\n<p>今年的读书计划3月初就已经定好了。自己还是喜欢纸质书籍的味道和阅读体验，所以趁着读书日的活动购齐了所有计划要读的书目。可惜的是，到现在也只看完了其中的三本。按照目前的工作节奏，今年的计划恐怕是无法完成了。</p>\n<h3 id=\"以前，现在\"><a href=\"#以前，现在\" class=\"headerlink\" title=\"以前，现在\"></a>以前，现在</h3><p>以前喜欢听点音乐，现在听到最多的是键盘协奏曲。以前喜欢看点书，现在却陷在<code>if-else</code>、<code>try-catch</code>的牢笼里无法自拔。以前喜欢迎着夕阳，哼着歌，走回住所，现在返回的路上只有昏暗的路灯，还有那经常看不到的月亮和星星。以前喜欢和三五好友出行远足，现在只能在夹缝中忙里偷闲。以前，还能时常下厨温习老妈教授的“课程”，现在养活我的是外卖和楼下的老潼关。以前……</p>\n<h3 id=\"活成自己想要的样子\"><a href=\"#活成自己想要的样子\" class=\"headerlink\" title=\"活成自己想要的样子\"></a>活成自己想要的样子</h3><p>我在自己的博客首页中有一行醒目的内容——“生活不仅有coding，还有文字和音乐”。说实话我非常讨厌一成不变，单调乏味的生活方式。我曾经说过：“同样的一年，有两种过法。一种，1+1+1+…+1（365个1相加），另一种，1 * 365。第二种过法的人是悲催的。”但更可悲的是，我在逐渐变成自己当初觉得“可悲又可怜”的人。细想起来，还有点像某些文艺电影中的经典台词——“最后，我们终究还是变成了自己最讨厌的样子”。</p>\n<p>有位朋友曾经告诉我说：“你还是经历的事太少。”没错，和久经沧桑、深谙世事的人比起来，我经历的确实不多，很多事也都还不明白。也许经过时间的磨砺，最后会坚强很多，释然很多，当然也会麻木很多。所以，这句话对也不全对。久经世事，并不代表学会妥协、随波浮沉、不悲不喜，更不代表放弃思考，对本就存在问题的事情欣然接受。</p>\n<p>我并没有真的弄清楚，是我的生活态度和方式出了问题，还是很多人都会遇到同样的问题，有同样的困惑？又有多少人找到了其中的“生门”？</p>\n<p>你呢？希望你的生活与我相反。愿所有人都能尽可能地活成自己最想要的模样。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"近来\"><a href=\"#近来\" class=\"headerlink\" title=\"近来\"></a>近来</h3><p>说实话，个人近来的状态不是很好。每天无精打采，睡眠质量也不是很好，也只有我自己知道这个中原因，实在不愿多提。</p>\n<p>工作上，也是名副其实的程序员时间。不说“攀比”<code>9-9-6</code>，但<code>9-9-5</code>应该是有了。按照目前的情形，<code>9-10-6</code>应该也不会远了。所以，生活上基本就会是睁眼代码，一觉醒来又是代码的无限循环。</p>\n<h3 id=\"伟大的背后，都是苦难\"><a href=\"#伟大的背后，都是苦难\" class=\"headerlink\" title=\"伟大的背后，都是苦难\"></a>伟大的背后，都是苦难</h3><p>突然想起前一段时间程序员中闹得沸沸扬扬的<code>“996.icu”</code>事件，概括起来就是“上班<code>9-9-6</code>，生病<code>ICU</code>”。我国的信息产业高速发展，我们的电子支付、网上购物以及各式各样让人眼花缭乱的APP方便着我们生活的一点一滴，更惊叹着许多外国友人。一片“欣欣向荣”的背后，都是<code>9-9-6</code>，<code>9-11-6</code>的杰作。其实，<code>“伟大的背后，都是苦难！”</code></p>\n<p><img src=\"/medias/article/featureimages/behind-the-suffering.jpg\" alt=\"伟大的背后，都是苦难\"></p>\n<p>现在常有人会把加班或者<code>9-9-6</code>、<code>9-11-6</code>的工作状态称之为奋斗，应该被赞扬、被肯定。我很客观的说，不同人的不同价值观念和生活方式决定了对这个问题不同的看法和态度。但对于我，我个人觉得，所谓“奋斗式”的<code>9-9-6</code>、<code>9-11-6</code>都是在浪费生命，浪费父母为你创造的这个世界。</p>\n<p>今年的读书计划3月初就已经定好了。自己还是喜欢纸质书籍的味道和阅读体验，所以趁着读书日的活动购齐了所有计划要读的书目。可惜的是，到现在也只看完了其中的三本。按照目前的工作节奏，今年的计划恐怕是无法完成了。</p>\n<h3 id=\"以前，现在\"><a href=\"#以前，现在\" class=\"headerlink\" title=\"以前，现在\"></a>以前，现在</h3><p>以前喜欢听点音乐，现在听到最多的是键盘协奏曲。以前喜欢看点书，现在却陷在<code>if-else</code>、<code>try-catch</code>的牢笼里无法自拔。以前喜欢迎着夕阳，哼着歌，走回住所，现在返回的路上只有昏暗的路灯，还有那经常看不到的月亮和星星。以前喜欢和三五好友出行远足，现在只能在夹缝中忙里偷闲。以前，还能时常下厨温习老妈教授的“课程”，现在养活我的是外卖和楼下的老潼关。以前……</p>\n<h3 id=\"活成自己想要的样子\"><a href=\"#活成自己想要的样子\" class=\"headerlink\" title=\"活成自己想要的样子\"></a>活成自己想要的样子</h3><p>我在自己的博客首页中有一行醒目的内容——“生活不仅有coding，还有文字和音乐”。说实话我非常讨厌一成不变，单调乏味的生活方式。我曾经说过：“同样的一年，有两种过法。一种，1+1+1+…+1（365个1相加），另一种，1 * 365。第二种过法的人是悲催的。”但更可悲的是，我在逐渐变成自己当初觉得“可悲又可怜”的人。细想起来，还有点像某些文艺电影中的经典台词——“最后，我们终究还是变成了自己最讨厌的样子”。</p>\n<p>有位朋友曾经告诉我说：“你还是经历的事太少。”没错，和久经沧桑、深谙世事的人比起来，我经历的确实不多，很多事也都还不明白。也许经过时间的磨砺，最后会坚强很多，释然很多，当然也会麻木很多。所以，这句话对也不全对。久经世事，并不代表学会妥协、随波浮沉、不悲不喜，更不代表放弃思考，对本就存在问题的事情欣然接受。</p>\n<p>我并没有真的弄清楚，是我的生活态度和方式出了问题，还是很多人都会遇到同样的问题，有同样的困惑？又有多少人找到了其中的“生门”？</p>\n<p>你呢？希望你的生活与我相反。愿所有人都能尽可能地活成自己最想要的模样。</p>\n"},{"title":"分分钟教你用node.js写个爬虫","date":"2018-06-08T06:34:49.000Z","_content":"\n### 一、什么是爬虫\n> [网络爬虫](https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&fromid=22046949&fromtitle=%E7%88%AC%E8%99%AB)（又被称为网页蜘蛛，网络机器人，在`FOAF`社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。\n> [WIKIPEDIA 爬虫介绍](https://en.wikipedia.org/wiki/Web_crawler)\n\n\n### 二、爬虫的分类\n* 通用网络爬虫（全网爬虫）\n> 爬行对象从一些 `种子URL` 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。\n\n<!--more-->\n\n![通用爬虫工作流程][1]\n\n* 聚焦网络爬虫（主题网络爬虫）\n> 是 `指选择性` 地爬行那些与预先定义好的主题相关页面的网络爬虫。 \n\n* 增量式网络爬虫\n> 指对已下载网页采取增量式更新和 `只爬行新产生的或者已经发生变化网页` 的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。\n\n* Deep Web 爬虫\n> 爬行对象是一些在用户填入关键字搜索或登录后才能访问到的`深层网页信息`的爬虫。\n\n\n### 三、爬虫的爬行策略\n* 通用网络爬虫（全网爬虫）\n> 深度优先策略、广度优先策略\n\n![页面关系模拟树状结构][2]\n\n* 聚焦网络爬虫（主题网络爬虫）\n> 基于内容评价的爬行策略（内容相关性），基于链接结构评价的爬行策略、基于增强学习的爬行策略（链接重要性），基于语境图的爬行策略（距离，图论中两节点间边的权重）\n\n* 增量式网络爬虫\n>  统一更新法、个体更新法、基于分类的更新法、自适应调频更新法\n\n* Deep Web 爬虫\n> Deep Web 爬虫爬行过程中最重要部分就是表单填写，包含两种类型：基于领域知识的表单填写、基于网页结构分析的表单填写\n\n**现代的网页爬虫的行为通常是四种策略组合的结果：**\n> 选择策略：决定所要下载的页面；\n> 重新访问策略：决定什么时候检查页面的更新变化；\n> 平衡礼貌策略：指出怎样避免站点超载；\n> 并行策略：指出怎么协同达到分布式抓取的效果；\n\n![现代分布式爬虫系统][3]\n\n### 四、写一个简单网页爬虫的流程\n1. 确定爬取对象（网站/页面）\n2. 分析页面内容（目标数据/DOM结构）\n3. 确定开发语言、框架、工具等\n4. 编码 测试，爬取数据\n5. 优化\n\n### 一个简单的百度新闻爬虫\n#### 确定爬取对象（网站/页面）\n> [百度新闻][4] （http://news.baidu.com/）\n\n#### 分析页面内容（目标数据/DOM结构）\n> ······\n\n#### 确定开发语言、框架、工具等\n> `node.js (express)` + `SublimeText 3`\n\n#### 编码，测试，爬取数据\n> coding ···\n\n### Let's start\n#### 新建项目目录\n> 1.在合适的磁盘目录下创建项目目录`baiduNews`（我的项目目录是：`F:\\web\\baiduNews`）\n\n**注：因为在写这篇文章的时候用的电脑真心比较渣。安装WebStorm或者VsCode跑项目有些吃力。所以后面的命令行操作我都是在Window自带的DOS命令行窗口中执行的。**\n\n#### 初始化package.json\n> 1.在DOS命令行中进入项目根目录 `baiduNews`\n> 2.执行`npm init`，初始化`package.json`文件\n\n\n#### 安装依赖\n> `express` （使用express来搭建一个简单的Http服务器。当然，你也可以使用node中自带的`http`模块）\n> `superagent` （superagent是node里一个非常方便的、轻量的、渐进式的第三方客户端请求代理模块，用他来请求目标页面）\n> `cheerio` （cheerio相当于node版的jQuery，用过jQuery的同学会非常容易上手。它主要是用来获取抓取到的页面元素和其中的数据信息）\n\n```\n// 个人比较喜欢使用yarn来安装依赖包,当然你也可以使用 npm install 来安装依赖，看个人习惯。\nyarn add express\nyarn add superagent\nyarn add cheerio\n```\n依赖安装完成后你可以在package.json中查看刚才安装的依赖是否成功。\n安装正确后如下图：\n\n![安装依赖包][5]\n\n#### 开始coding\n** 一、使用`express`启动一个简单的本地Http服务器 **\n\n1、在项目根目录下创建`index.js`文件（后面都会在这个index文件中进行coding）\n\n2、创建好`index.js`后，我们首先实例化一个`express`对象，用它来启动一个本地监听`3000`端口的Http服务。\n```\nconst express = require('express');\nconst app = express();\n\n// ...\n\nlet server = app.listen(3000, function () {\n  let host = server.address().address;\n  let port = server.address().port;\n  console.log('Your App is running at http://%s:%s', host, port);\n});\n```\n对，就是这么简单，不到10行代码，搭建启动一个简单的本地Http服务。\n\n3、按照国际惯例，我们希望在访问本机地址`http://localhost:3000`的时候，这个服务能给我们犯规一个`Hello World！`在`index.js`中加入如下代码：\n```\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n```\n>此时，在DOS中项目根目录`baiduNews`下执行`node index.js`,让项目跑起来。之后，打开浏览器，访问`http://localhost:3000`,你就会发现页面上显示'Hellow World!'字样。\n这样，在后面我们获取到百度新闻首页的信息后，就可以在访问`http://localhost:3000`时看到这些信息。\n\n**二、抓取百度新闻首页的新闻信息**\n\n1、 首先，我们先来分析一下百度新闻首页的页面信息。\n\n![百度新闻首页][6]\n\n![百度新闻首页][7]\n\n>百度新闻首页大体上分为“热点新闻”、“本地新闻”、“国内新闻”、“国际新闻”......等。这次我们先来尝试抓取左侧`“热点新闻”`和下方的`“本地新闻”`两处的新闻数据。\n\n![热点新闻DOM结构][8]\n>`F12`打开`Chrome`的控制台，审查页面元素，经过查看左侧“热点新闻”信息所在`DOM`的结构，我们发现所有的“热点新闻”信息（包括新闻标题和新闻页面链接）都在`id`为`#pane-news`的`<div`>下面`<ul>`下`<li>`下的`<a>`标签中。用`jQuery`的选择器表示为：`#pane-news ul li a`。\n\n2、为了爬取新闻数据，首先我们要用superagent请求目标页面，获取整个新闻首页信息\n```\n// 引入所需要的第三方包\nconst superagent= require('superagent');\n\nlet hotNews = [];\t\t\t\t\t\t\t\t// 热点新闻\nlet localNews = [];                              // 本地新闻\n\n/**\n * index.js\n * [description] - 使用superagent.get()方法来访问百度新闻首页\n */\nsuperagent.get('http://news.baidu.com/').end((err, res) => {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n   // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n   // 抓取热点新闻数据\n   hotNews = getHotNews(res)\n  }\n});\n```\n\n3、获取页面信息后，我们来定义一个函数`getHotNews()`来抓取页面内的“热点新闻”数据。\n```\n/**\n * index.js\n * [description] - 抓取热点新闻页面\n */\n// 引入所需要的第三方包\nconst cheerio = require('cheerio');\n\nlet getHotNews = (res) => {\n  let hotNews = [];\n  // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res.text中。\n  \n  /* 使用cheerio模块的cherrio.load()方法，将HTMLdocument作为参数传入函数\n     以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素\n   */\n  let $ = cheerio.load(res.text);\n\n  // 找到目标数据所在的页面元素，获取数据\n  $('div#pane-news ul li a').each((idx, ele) => {\n    // cherrio中$('selector').each()用来遍历所有匹配到的DOM元素\n    // 参数idx是当前遍历的元素的索引，ele就是当前便利的DOM元素\n    let news = {\n      title: $(ele).text(),        // 获取新闻标题\n      href: $(ele).attr('href')    // 获取新闻网页链接\n    };\n    hotNews.push(news)              // 存入最终结果数组\n  });\n  return hotNews\n};\n```\n\n> 这里要多说几点：\n> 1. `async/await`据说是异步编程的终级解决方案,它可以让我们以同步的思维方式来进行异步编程。`Promise`解决了异步编程的“回调地狱”，async/await同时使异步流程控制变得友好而有清晰，有兴趣的同学可以去了解学习一下，真的很好用。\n> 2. `superagent`模块提供了很多比如`get`、`post`、`delte`等方法，可以很方便地进行Ajax请求操作。在请求结束后执行`.end()`回调函数。`.end()`接受一个函数作为参数，该函数又有两个参数`error和res`。当请求失败，`error`会包含返回的错误信息，请求成功，`error`值为`null`，返回的数据会包含在`res`参数中。\n> 3. `cheerio`模块的`.load()`方法，将`HTML document`作为参数传入函数，以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素。同时可以使用类似于`jQuery`中的`.each()`来遍历元素。此外，还有很多方法，大家可以自行Google/Baidu。\n\n4、将抓取的数据返回给前端浏览器\n> 前面，`const app = express();`实例化了一个`express`对象`app`。\n`app.get('', async() => {})`接受两个参数，第一个参数接受一个String类型的路由路径，表示Ajax的请求路径。第二个参数接受一个函数Function，当请求此路径时就会执行这个函数中的代码。\n\n```\n/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get('/', async (req, res, next) => {\n  res.send(hotNews);\n});\n```\n>在DOS中项目根目录`baiduNews`下执行`node index.js`,让项目跑起来。之后，打开浏览器，访问`http://localhost:3000`,你就会发现抓取到的数据返回到了前端页面。我运行代码后浏览器展示的返回信息如下：\n**注：因为我的`Chrome`[安装了JSONView扩展程序][9]，所以返回的数据在页面展示的时候会被自动格式化为结构性的JSON格式，方便查看。**\n\n![热点新闻抓取结果][10]\n\n**OK！！这样，一个简单的百度`“热点新闻”`的爬虫就大功告成啦！！**\n\n> 简单总结一下，其实步骤很简单：\n> 1. `express`启动一个简单的`Http`服务\n> 2. 分析目标页面`DOM`结构，找到所要抓取的信息的相关`DOM`元素\n> 3. 使用`superagent`请求目标页面\n> 4. 使用`cheerio`获取页面元素，获取目标数据\n> 5. 返回数据到前端浏览器\n\n**现在，继续我们的目标，抓取`“本地新闻”`数据（编码过程中，我们会遇到一些有意思的问题）**\n有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。\n1、 分析页面中“本地新闻”部分的`DOM`结构，如下图：\n\n![百度新闻本地新闻][11]\n\n> `F12`打开控制台，审查“本地新闻”`DOM`元素，我们发现，“本地新闻”分为两个主要部分，“左侧新闻”和右侧的“新闻资讯”。这所有目标数据都在`id`为`#local_news`的`div`中。“左侧新闻”数据又在`id`为`#localnews-focus`的`ul`标签下的`li`标签下的`a`标签中，包括新闻标题和页面链接。“本地资讯”数据又在`id`为`#localnews-zixun`的`div`下的`ul`标签下的`li`标签下的`a`标签中，包括新闻标题和页面链接。\n\n2、OK！分析了`DOM`结构，确定了数据的位置，接下来和爬取`“热点新闻”`一样，按部就班，定义一个`getLocalNews()`函数，爬取这些数据。\n\n```\n/**\n * [description] - 抓取本地新闻页面\n */\nlet getLocalNews = (res) => {\n  let localNews = [];\n  let $ = cheerio.load(res);\n    \n  // 本地新闻\n  $('ul#localnews-focus li a').each((idx, ele) => {\n    let news = {\n      title: $(ele).text(),\n      href: $(ele).attr('href'),\n    };\n    localNews.push(news)\n  });\n    \n  // 本地资讯\n  $('div#localnews-zixun ul li a').each((index, item) => {\n    let news = {\n      title: $(item).text(),\n      href: $(item).attr('href')\n    };\n    localNews.push(news);\n  });\n\n  return localNews\n};\n```\n\n对应的，在`superagent.get()`中请求页面后，我们需要调用`getLocalNews()`函数，来爬去本地新闻数据。\n`superagent.get()`函数修改为：\n```\nsuperagent.get('http://news.baidu.com/').end((err, res) => {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n   // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n   // 抓取热点新闻数据\n   hotNews = getHotNews(res)\n   localNews = getLocalNews(res)\n  }\n});\n```\n\n同时，我们要在`app.get()`路由中也要将数据返回给前端浏览器。`app.get()`路由代码修改为：\n```\n/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get('/', async (req, res, next) => {\n  res.send({\n    hotNews: hotNews,\n    localNews: localNews\n  });\n});\n```\n\n>编码完成，激动不已！！`DOS`中让项目跑起来，用浏览器访问`http://localhost:3000`\n\n**尴尬的事情发生了！！返回的数据只有热点新闻，而本地新闻返回一个空数组`[ ]`。检查代码，发现也没有问题，但为什么一直返回的空数组呢？**\n**经过一番原因查找，才返现问题出在哪里！！**\n\n### 一个有意思的问题\n> 为了找到原因，首先，我们看看用`superagent.get('http://news.baidu.com/').end((err, res) => {})`请求百度新闻首页在回调函数`.end()`中的第二个参数res中到底拿到了什么内容？\n\n```\n// 新定义一个全局变量 pageRes\nlet pageRes = {};\t    // supergaent页面返回值\n\n// superagent.get()中将res存入pageRes\nsuperagent.get('http://news.baidu.com/').end((err, res) => {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n    // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n    // 抓取热点新闻数据\n    // hotNews = getHotNews(res)\n    // localNews = getLocalNews(res)\n    pageRes = res\n  }\n});\n\n// 将pageRes返回给前端浏览器，便于查看\napp.get('/', async (req, res, next) => {\n  res.send({\n    // {}hotNews: hotNews,\n    // localNews: localNews,\n    pageRes: pageRes\n  });\n});\n```\n\n> 访问浏览器`http://localhost:3000`，页面展示如下内容：\n\n![superagent.get()请求返回值][12]\n\n> 可以看到，返回值中的`text`字段应该就是整个页面的`HTML`代码的字符串格式。为了方便我们观察，可以直接把这个`text`字段值返回给前端浏览器，这样我们就能够清晰地看到经过浏览器渲染后的页面。\n\n\n修改给前端浏览器的返回值\n\n```\napp.get('/', async (req, res, next) => {\n  res.send(pageRes.text)\n}\n```\n\n访问浏览器`http://localhost:3000`，页面展示如下内容：\n\n![本地新闻返回页面][13]\n\n> 审查元素才发现，原来我们抓取的目标数据所在的`DOM`元素中是空的，里面没有数据！\n到这里，一切水落石出！在我们使用`superagent.get()`访问百度新闻首页时，`res`中包含的获取的页面内容中，我们想要的“本地新闻”数据还没有生成，`DOM`节点元素是空的，所以出现前面的情况！抓取后返回的数据一直是空数组`[ ]`。\n\n![本地新闻请求接口][14]\n\n> 在控制台的`Network`中我们发现页面请求了一次这样的接口：\n`http://localhost:3000/widget?id=LocalNews&ajax=json&t=1526295667917`，接口状态 `404`。\n这应该就是百度新闻获取`“本地新闻”`的接口，到这里一切都明白了！“本地新闻”是在页面加载后动态请求上面这个接口获取的，所以我们用`superagent.get()`请求的页面再去请求这个接口时，接口`URL`中`hostname`部分变成了本地`IP`地址，而本机上没有这个接口，所以`404`，请求不到数据。\n\n**找到原因，我们来想办法解决这个问题！！**\n> 1. 直接使用`superagen`t访问正确合法的百度`“本地新闻”`的接口，获取数据后返回给前端浏览器。\n> 2. 使用第三方`npm`包，模拟浏览器访问百度新闻首页，在这个模拟浏览器中当`“本地新闻”`加载成功后，抓取数据，返回给前端浏览器。\n\n**以上方法均可，我们来试试比较有意思的第二种方法**\n\n### 使用`Nightmare`自动化测试工具\n\n> `Electron`可以让你使用纯`JavaScript`调用`Chrome`丰富的原生的接口来创造桌面应用。你可以把它看作一个专注于桌面应用的`Node.js`的变体，而不是`Web`服务器。其基于浏览器的应用方式可以极方便的做各种响应式的交互\n\n> `Nightmare`是一个基于`Electron`的框架，针对`Web`自动化测试和爬虫，因为其具有跟`PlantomJS`一样的自动化测试的功能可以在页面上模拟用户的行为触发一些异步数据加载，也可以跟`Request`库一样直接访问`URL`来抓取数据，并且可以设置页面的延迟时间，所以无论是手动触发脚本还是行为触发脚本都是轻而易举的。\n\n#### 安装依赖\n\n```\n// 安装nightmare\nyarn add nightmare\n```\n\n#### 为获取“本地新闻”，继续coding...\n\n给`index.js`中新增如下代码：\n\n```\nconst Nightmare = require('nightmare');          // 自动化测试包，处理动态页面\nconst nightmare = Nightmare({ show: true });     // show:true  显示内置模拟浏览器\n\n/**\n * [description] - 抓取本地新闻页面\n * [nremark] - 百度本地新闻在访问页面后加载js定位IP位置后获取对应新闻，\n * 所以抓取本地新闻需要使用 nightmare 一类的自动化测试工具，\n * 模拟浏览器环境访问页面，使js运行，生成动态页面再抓取\n */\n// 抓取本地新闻页面\nnightmare\n.goto('http://news.baidu.com/')\n.wait(\"div#local_news\")\n.evaluate(() => document.querySelector(\"div#local_news\").innerHTML)\n.then(htmlStr => {\n  // 获取本地新闻数据\n  localNews = getLocalNews(htmlStr)\n})\n.catch(error => {\n  console.log(`本地新闻抓取失败 - ${error}`);\n})\n```\n\n修改`getLocalNews()`函数为：\n\n```\n/**\n * [description]- 获取本地新闻数据\n */\nlet getLocalNews = (htmlStr) => {\n  let localNews = [];\n  let $ = cheerio.load(htmlStr);\n\n  // 本地新闻\n  $('ul#localnews-focus li a').each((idx, ele) => {\n    let news = {\n      title: $(ele).text(),\n      href: $(ele).attr('href'),\n    };\n    localNews.push(news)\n  });\n\n  // 本地资讯\n  $('div#localnews-zixun ul li a').each((index, item) => {\n    let news = {\n      title: $(item).text(),\n      href: $(item).attr('href')\n    };\n    localNews.push(news);\n  });\n\n  return localNews\n}\n```\n\n\n修改`app.get('/')`路由为：\n\n```\n/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get('/', async (req, res, next) => {\n  res.send({\n    hotNews: hotNews,\n    localNews: localNews\n  })\n});\n```\n\n> 此时，`DOS`命令行中重新让项目跑起来，浏览器访问`https://localhost:3000`，看看页面展示的信息，看是否抓取到了`“本地新闻”`数据！\n\n\n**至此，一个简单而又完整的抓取百度新闻页面“热点新闻”和“本地新闻”的爬虫就大功告成啦！！**\n\n**最后总结一下，整体思路如下：**\n> 1. `express`启动一个简单的`Http`服务\n> 2. 分析目标页面`DOM`结构，找到所要抓取的信息的相关`DOM元`素\n> 3. 使用`superagent`请求目标页面\n> 4. **动态页面（需要加载页面后运行`JS`或请求接口的页面）可以使用`Nightmare`模拟浏览器访问**\n> 5. 使用`cheerio`获取页面元素，获取目标数据\n\n###完整代码\n> 爬虫完整代码GitHub地址：[完整代码][15]\n\n\n***后面，应该还会做一些进阶，来爬取某些网站上比较好看的图片（手动滑稽），会牵扯到`并发控制`和`反-反爬虫`的一些策略。再用爬虫取爬去一些需要登录和输入验证码的网站，欢迎到时大家关注和指正交流。***\n\n\n  [1]: /medias/article/coding/news-spider/1.jpg\n  [2]: /medias/article/coding/news-spider/2.png\n  [3]: /medias/article/coding/news-spider/3.jpg\n  [4]: http://news.baidu.com/\n  [5]: /medias/article/coding/news-spider/4.jpg\n  [6]: /medias/article/coding/news-spider/5.jpg\n  [7]: /medias/article/coding/news-spider/6.jpg\n  [8]: /medias/article/coding/news-spider/7.jpg\n  [9]: https://www.cnblogs.com/whycxb/p/7126116.html\n  [10]: /medias/article/coding/news-spider/9.jpg\n  [11]: /medias/article/coding/news-spider/10.jpg\n  [12]: /medias/article/coding/news-spider/11.jpg\n  [13]: /medias/article/coding/news-spider/12.jpg\n  [14]: /medias/article/coding/news-spider/13.jpg\n  [15]: https://github.com/webCaolixin/news-Spider","source":"_posts/news-spider.md","raw":"---\ntitle: 分分钟教你用node.js写个爬虫\ncategories: 编程\ntags: Node.JS\ndate: 2018-06-08 14:34:49\n---\n\n### 一、什么是爬虫\n> [网络爬虫](https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&fromid=22046949&fromtitle=%E7%88%AC%E8%99%AB)（又被称为网页蜘蛛，网络机器人，在`FOAF`社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。\n> [WIKIPEDIA 爬虫介绍](https://en.wikipedia.org/wiki/Web_crawler)\n\n\n### 二、爬虫的分类\n* 通用网络爬虫（全网爬虫）\n> 爬行对象从一些 `种子URL` 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。\n\n<!--more-->\n\n![通用爬虫工作流程][1]\n\n* 聚焦网络爬虫（主题网络爬虫）\n> 是 `指选择性` 地爬行那些与预先定义好的主题相关页面的网络爬虫。 \n\n* 增量式网络爬虫\n> 指对已下载网页采取增量式更新和 `只爬行新产生的或者已经发生变化网页` 的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。\n\n* Deep Web 爬虫\n> 爬行对象是一些在用户填入关键字搜索或登录后才能访问到的`深层网页信息`的爬虫。\n\n\n### 三、爬虫的爬行策略\n* 通用网络爬虫（全网爬虫）\n> 深度优先策略、广度优先策略\n\n![页面关系模拟树状结构][2]\n\n* 聚焦网络爬虫（主题网络爬虫）\n> 基于内容评价的爬行策略（内容相关性），基于链接结构评价的爬行策略、基于增强学习的爬行策略（链接重要性），基于语境图的爬行策略（距离，图论中两节点间边的权重）\n\n* 增量式网络爬虫\n>  统一更新法、个体更新法、基于分类的更新法、自适应调频更新法\n\n* Deep Web 爬虫\n> Deep Web 爬虫爬行过程中最重要部分就是表单填写，包含两种类型：基于领域知识的表单填写、基于网页结构分析的表单填写\n\n**现代的网页爬虫的行为通常是四种策略组合的结果：**\n> 选择策略：决定所要下载的页面；\n> 重新访问策略：决定什么时候检查页面的更新变化；\n> 平衡礼貌策略：指出怎样避免站点超载；\n> 并行策略：指出怎么协同达到分布式抓取的效果；\n\n![现代分布式爬虫系统][3]\n\n### 四、写一个简单网页爬虫的流程\n1. 确定爬取对象（网站/页面）\n2. 分析页面内容（目标数据/DOM结构）\n3. 确定开发语言、框架、工具等\n4. 编码 测试，爬取数据\n5. 优化\n\n### 一个简单的百度新闻爬虫\n#### 确定爬取对象（网站/页面）\n> [百度新闻][4] （http://news.baidu.com/）\n\n#### 分析页面内容（目标数据/DOM结构）\n> ······\n\n#### 确定开发语言、框架、工具等\n> `node.js (express)` + `SublimeText 3`\n\n#### 编码，测试，爬取数据\n> coding ···\n\n### Let's start\n#### 新建项目目录\n> 1.在合适的磁盘目录下创建项目目录`baiduNews`（我的项目目录是：`F:\\web\\baiduNews`）\n\n**注：因为在写这篇文章的时候用的电脑真心比较渣。安装WebStorm或者VsCode跑项目有些吃力。所以后面的命令行操作我都是在Window自带的DOS命令行窗口中执行的。**\n\n#### 初始化package.json\n> 1.在DOS命令行中进入项目根目录 `baiduNews`\n> 2.执行`npm init`，初始化`package.json`文件\n\n\n#### 安装依赖\n> `express` （使用express来搭建一个简单的Http服务器。当然，你也可以使用node中自带的`http`模块）\n> `superagent` （superagent是node里一个非常方便的、轻量的、渐进式的第三方客户端请求代理模块，用他来请求目标页面）\n> `cheerio` （cheerio相当于node版的jQuery，用过jQuery的同学会非常容易上手。它主要是用来获取抓取到的页面元素和其中的数据信息）\n\n```\n// 个人比较喜欢使用yarn来安装依赖包,当然你也可以使用 npm install 来安装依赖，看个人习惯。\nyarn add express\nyarn add superagent\nyarn add cheerio\n```\n依赖安装完成后你可以在package.json中查看刚才安装的依赖是否成功。\n安装正确后如下图：\n\n![安装依赖包][5]\n\n#### 开始coding\n** 一、使用`express`启动一个简单的本地Http服务器 **\n\n1、在项目根目录下创建`index.js`文件（后面都会在这个index文件中进行coding）\n\n2、创建好`index.js`后，我们首先实例化一个`express`对象，用它来启动一个本地监听`3000`端口的Http服务。\n```\nconst express = require('express');\nconst app = express();\n\n// ...\n\nlet server = app.listen(3000, function () {\n  let host = server.address().address;\n  let port = server.address().port;\n  console.log('Your App is running at http://%s:%s', host, port);\n});\n```\n对，就是这么简单，不到10行代码，搭建启动一个简单的本地Http服务。\n\n3、按照国际惯例，我们希望在访问本机地址`http://localhost:3000`的时候，这个服务能给我们犯规一个`Hello World！`在`index.js`中加入如下代码：\n```\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n```\n>此时，在DOS中项目根目录`baiduNews`下执行`node index.js`,让项目跑起来。之后，打开浏览器，访问`http://localhost:3000`,你就会发现页面上显示'Hellow World!'字样。\n这样，在后面我们获取到百度新闻首页的信息后，就可以在访问`http://localhost:3000`时看到这些信息。\n\n**二、抓取百度新闻首页的新闻信息**\n\n1、 首先，我们先来分析一下百度新闻首页的页面信息。\n\n![百度新闻首页][6]\n\n![百度新闻首页][7]\n\n>百度新闻首页大体上分为“热点新闻”、“本地新闻”、“国内新闻”、“国际新闻”......等。这次我们先来尝试抓取左侧`“热点新闻”`和下方的`“本地新闻”`两处的新闻数据。\n\n![热点新闻DOM结构][8]\n>`F12`打开`Chrome`的控制台，审查页面元素，经过查看左侧“热点新闻”信息所在`DOM`的结构，我们发现所有的“热点新闻”信息（包括新闻标题和新闻页面链接）都在`id`为`#pane-news`的`<div`>下面`<ul>`下`<li>`下的`<a>`标签中。用`jQuery`的选择器表示为：`#pane-news ul li a`。\n\n2、为了爬取新闻数据，首先我们要用superagent请求目标页面，获取整个新闻首页信息\n```\n// 引入所需要的第三方包\nconst superagent= require('superagent');\n\nlet hotNews = [];\t\t\t\t\t\t\t\t// 热点新闻\nlet localNews = [];                              // 本地新闻\n\n/**\n * index.js\n * [description] - 使用superagent.get()方法来访问百度新闻首页\n */\nsuperagent.get('http://news.baidu.com/').end((err, res) => {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n   // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n   // 抓取热点新闻数据\n   hotNews = getHotNews(res)\n  }\n});\n```\n\n3、获取页面信息后，我们来定义一个函数`getHotNews()`来抓取页面内的“热点新闻”数据。\n```\n/**\n * index.js\n * [description] - 抓取热点新闻页面\n */\n// 引入所需要的第三方包\nconst cheerio = require('cheerio');\n\nlet getHotNews = (res) => {\n  let hotNews = [];\n  // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res.text中。\n  \n  /* 使用cheerio模块的cherrio.load()方法，将HTMLdocument作为参数传入函数\n     以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素\n   */\n  let $ = cheerio.load(res.text);\n\n  // 找到目标数据所在的页面元素，获取数据\n  $('div#pane-news ul li a').each((idx, ele) => {\n    // cherrio中$('selector').each()用来遍历所有匹配到的DOM元素\n    // 参数idx是当前遍历的元素的索引，ele就是当前便利的DOM元素\n    let news = {\n      title: $(ele).text(),        // 获取新闻标题\n      href: $(ele).attr('href')    // 获取新闻网页链接\n    };\n    hotNews.push(news)              // 存入最终结果数组\n  });\n  return hotNews\n};\n```\n\n> 这里要多说几点：\n> 1. `async/await`据说是异步编程的终级解决方案,它可以让我们以同步的思维方式来进行异步编程。`Promise`解决了异步编程的“回调地狱”，async/await同时使异步流程控制变得友好而有清晰，有兴趣的同学可以去了解学习一下，真的很好用。\n> 2. `superagent`模块提供了很多比如`get`、`post`、`delte`等方法，可以很方便地进行Ajax请求操作。在请求结束后执行`.end()`回调函数。`.end()`接受一个函数作为参数，该函数又有两个参数`error和res`。当请求失败，`error`会包含返回的错误信息，请求成功，`error`值为`null`，返回的数据会包含在`res`参数中。\n> 3. `cheerio`模块的`.load()`方法，将`HTML document`作为参数传入函数，以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素。同时可以使用类似于`jQuery`中的`.each()`来遍历元素。此外，还有很多方法，大家可以自行Google/Baidu。\n\n4、将抓取的数据返回给前端浏览器\n> 前面，`const app = express();`实例化了一个`express`对象`app`。\n`app.get('', async() => {})`接受两个参数，第一个参数接受一个String类型的路由路径，表示Ajax的请求路径。第二个参数接受一个函数Function，当请求此路径时就会执行这个函数中的代码。\n\n```\n/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get('/', async (req, res, next) => {\n  res.send(hotNews);\n});\n```\n>在DOS中项目根目录`baiduNews`下执行`node index.js`,让项目跑起来。之后，打开浏览器，访问`http://localhost:3000`,你就会发现抓取到的数据返回到了前端页面。我运行代码后浏览器展示的返回信息如下：\n**注：因为我的`Chrome`[安装了JSONView扩展程序][9]，所以返回的数据在页面展示的时候会被自动格式化为结构性的JSON格式，方便查看。**\n\n![热点新闻抓取结果][10]\n\n**OK！！这样，一个简单的百度`“热点新闻”`的爬虫就大功告成啦！！**\n\n> 简单总结一下，其实步骤很简单：\n> 1. `express`启动一个简单的`Http`服务\n> 2. 分析目标页面`DOM`结构，找到所要抓取的信息的相关`DOM`元素\n> 3. 使用`superagent`请求目标页面\n> 4. 使用`cheerio`获取页面元素，获取目标数据\n> 5. 返回数据到前端浏览器\n\n**现在，继续我们的目标，抓取`“本地新闻”`数据（编码过程中，我们会遇到一些有意思的问题）**\n有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。\n1、 分析页面中“本地新闻”部分的`DOM`结构，如下图：\n\n![百度新闻本地新闻][11]\n\n> `F12`打开控制台，审查“本地新闻”`DOM`元素，我们发现，“本地新闻”分为两个主要部分，“左侧新闻”和右侧的“新闻资讯”。这所有目标数据都在`id`为`#local_news`的`div`中。“左侧新闻”数据又在`id`为`#localnews-focus`的`ul`标签下的`li`标签下的`a`标签中，包括新闻标题和页面链接。“本地资讯”数据又在`id`为`#localnews-zixun`的`div`下的`ul`标签下的`li`标签下的`a`标签中，包括新闻标题和页面链接。\n\n2、OK！分析了`DOM`结构，确定了数据的位置，接下来和爬取`“热点新闻”`一样，按部就班，定义一个`getLocalNews()`函数，爬取这些数据。\n\n```\n/**\n * [description] - 抓取本地新闻页面\n */\nlet getLocalNews = (res) => {\n  let localNews = [];\n  let $ = cheerio.load(res);\n    \n  // 本地新闻\n  $('ul#localnews-focus li a').each((idx, ele) => {\n    let news = {\n      title: $(ele).text(),\n      href: $(ele).attr('href'),\n    };\n    localNews.push(news)\n  });\n    \n  // 本地资讯\n  $('div#localnews-zixun ul li a').each((index, item) => {\n    let news = {\n      title: $(item).text(),\n      href: $(item).attr('href')\n    };\n    localNews.push(news);\n  });\n\n  return localNews\n};\n```\n\n对应的，在`superagent.get()`中请求页面后，我们需要调用`getLocalNews()`函数，来爬去本地新闻数据。\n`superagent.get()`函数修改为：\n```\nsuperagent.get('http://news.baidu.com/').end((err, res) => {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n   // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n   // 抓取热点新闻数据\n   hotNews = getHotNews(res)\n   localNews = getLocalNews(res)\n  }\n});\n```\n\n同时，我们要在`app.get()`路由中也要将数据返回给前端浏览器。`app.get()`路由代码修改为：\n```\n/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get('/', async (req, res, next) => {\n  res.send({\n    hotNews: hotNews,\n    localNews: localNews\n  });\n});\n```\n\n>编码完成，激动不已！！`DOS`中让项目跑起来，用浏览器访问`http://localhost:3000`\n\n**尴尬的事情发生了！！返回的数据只有热点新闻，而本地新闻返回一个空数组`[ ]`。检查代码，发现也没有问题，但为什么一直返回的空数组呢？**\n**经过一番原因查找，才返现问题出在哪里！！**\n\n### 一个有意思的问题\n> 为了找到原因，首先，我们看看用`superagent.get('http://news.baidu.com/').end((err, res) => {})`请求百度新闻首页在回调函数`.end()`中的第二个参数res中到底拿到了什么内容？\n\n```\n// 新定义一个全局变量 pageRes\nlet pageRes = {};\t    // supergaent页面返回值\n\n// superagent.get()中将res存入pageRes\nsuperagent.get('http://news.baidu.com/').end((err, res) => {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n    // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n    // 抓取热点新闻数据\n    // hotNews = getHotNews(res)\n    // localNews = getLocalNews(res)\n    pageRes = res\n  }\n});\n\n// 将pageRes返回给前端浏览器，便于查看\napp.get('/', async (req, res, next) => {\n  res.send({\n    // {}hotNews: hotNews,\n    // localNews: localNews,\n    pageRes: pageRes\n  });\n});\n```\n\n> 访问浏览器`http://localhost:3000`，页面展示如下内容：\n\n![superagent.get()请求返回值][12]\n\n> 可以看到，返回值中的`text`字段应该就是整个页面的`HTML`代码的字符串格式。为了方便我们观察，可以直接把这个`text`字段值返回给前端浏览器，这样我们就能够清晰地看到经过浏览器渲染后的页面。\n\n\n修改给前端浏览器的返回值\n\n```\napp.get('/', async (req, res, next) => {\n  res.send(pageRes.text)\n}\n```\n\n访问浏览器`http://localhost:3000`，页面展示如下内容：\n\n![本地新闻返回页面][13]\n\n> 审查元素才发现，原来我们抓取的目标数据所在的`DOM`元素中是空的，里面没有数据！\n到这里，一切水落石出！在我们使用`superagent.get()`访问百度新闻首页时，`res`中包含的获取的页面内容中，我们想要的“本地新闻”数据还没有生成，`DOM`节点元素是空的，所以出现前面的情况！抓取后返回的数据一直是空数组`[ ]`。\n\n![本地新闻请求接口][14]\n\n> 在控制台的`Network`中我们发现页面请求了一次这样的接口：\n`http://localhost:3000/widget?id=LocalNews&ajax=json&t=1526295667917`，接口状态 `404`。\n这应该就是百度新闻获取`“本地新闻”`的接口，到这里一切都明白了！“本地新闻”是在页面加载后动态请求上面这个接口获取的，所以我们用`superagent.get()`请求的页面再去请求这个接口时，接口`URL`中`hostname`部分变成了本地`IP`地址，而本机上没有这个接口，所以`404`，请求不到数据。\n\n**找到原因，我们来想办法解决这个问题！！**\n> 1. 直接使用`superagen`t访问正确合法的百度`“本地新闻”`的接口，获取数据后返回给前端浏览器。\n> 2. 使用第三方`npm`包，模拟浏览器访问百度新闻首页，在这个模拟浏览器中当`“本地新闻”`加载成功后，抓取数据，返回给前端浏览器。\n\n**以上方法均可，我们来试试比较有意思的第二种方法**\n\n### 使用`Nightmare`自动化测试工具\n\n> `Electron`可以让你使用纯`JavaScript`调用`Chrome`丰富的原生的接口来创造桌面应用。你可以把它看作一个专注于桌面应用的`Node.js`的变体，而不是`Web`服务器。其基于浏览器的应用方式可以极方便的做各种响应式的交互\n\n> `Nightmare`是一个基于`Electron`的框架，针对`Web`自动化测试和爬虫，因为其具有跟`PlantomJS`一样的自动化测试的功能可以在页面上模拟用户的行为触发一些异步数据加载，也可以跟`Request`库一样直接访问`URL`来抓取数据，并且可以设置页面的延迟时间，所以无论是手动触发脚本还是行为触发脚本都是轻而易举的。\n\n#### 安装依赖\n\n```\n// 安装nightmare\nyarn add nightmare\n```\n\n#### 为获取“本地新闻”，继续coding...\n\n给`index.js`中新增如下代码：\n\n```\nconst Nightmare = require('nightmare');          // 自动化测试包，处理动态页面\nconst nightmare = Nightmare({ show: true });     // show:true  显示内置模拟浏览器\n\n/**\n * [description] - 抓取本地新闻页面\n * [nremark] - 百度本地新闻在访问页面后加载js定位IP位置后获取对应新闻，\n * 所以抓取本地新闻需要使用 nightmare 一类的自动化测试工具，\n * 模拟浏览器环境访问页面，使js运行，生成动态页面再抓取\n */\n// 抓取本地新闻页面\nnightmare\n.goto('http://news.baidu.com/')\n.wait(\"div#local_news\")\n.evaluate(() => document.querySelector(\"div#local_news\").innerHTML)\n.then(htmlStr => {\n  // 获取本地新闻数据\n  localNews = getLocalNews(htmlStr)\n})\n.catch(error => {\n  console.log(`本地新闻抓取失败 - ${error}`);\n})\n```\n\n修改`getLocalNews()`函数为：\n\n```\n/**\n * [description]- 获取本地新闻数据\n */\nlet getLocalNews = (htmlStr) => {\n  let localNews = [];\n  let $ = cheerio.load(htmlStr);\n\n  // 本地新闻\n  $('ul#localnews-focus li a').each((idx, ele) => {\n    let news = {\n      title: $(ele).text(),\n      href: $(ele).attr('href'),\n    };\n    localNews.push(news)\n  });\n\n  // 本地资讯\n  $('div#localnews-zixun ul li a').each((index, item) => {\n    let news = {\n      title: $(item).text(),\n      href: $(item).attr('href')\n    };\n    localNews.push(news);\n  });\n\n  return localNews\n}\n```\n\n\n修改`app.get('/')`路由为：\n\n```\n/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get('/', async (req, res, next) => {\n  res.send({\n    hotNews: hotNews,\n    localNews: localNews\n  })\n});\n```\n\n> 此时，`DOS`命令行中重新让项目跑起来，浏览器访问`https://localhost:3000`，看看页面展示的信息，看是否抓取到了`“本地新闻”`数据！\n\n\n**至此，一个简单而又完整的抓取百度新闻页面“热点新闻”和“本地新闻”的爬虫就大功告成啦！！**\n\n**最后总结一下，整体思路如下：**\n> 1. `express`启动一个简单的`Http`服务\n> 2. 分析目标页面`DOM`结构，找到所要抓取的信息的相关`DOM元`素\n> 3. 使用`superagent`请求目标页面\n> 4. **动态页面（需要加载页面后运行`JS`或请求接口的页面）可以使用`Nightmare`模拟浏览器访问**\n> 5. 使用`cheerio`获取页面元素，获取目标数据\n\n###完整代码\n> 爬虫完整代码GitHub地址：[完整代码][15]\n\n\n***后面，应该还会做一些进阶，来爬取某些网站上比较好看的图片（手动滑稽），会牵扯到`并发控制`和`反-反爬虫`的一些策略。再用爬虫取爬去一些需要登录和输入验证码的网站，欢迎到时大家关注和指正交流。***\n\n\n  [1]: /medias/article/coding/news-spider/1.jpg\n  [2]: /medias/article/coding/news-spider/2.png\n  [3]: /medias/article/coding/news-spider/3.jpg\n  [4]: http://news.baidu.com/\n  [5]: /medias/article/coding/news-spider/4.jpg\n  [6]: /medias/article/coding/news-spider/5.jpg\n  [7]: /medias/article/coding/news-spider/6.jpg\n  [8]: /medias/article/coding/news-spider/7.jpg\n  [9]: https://www.cnblogs.com/whycxb/p/7126116.html\n  [10]: /medias/article/coding/news-spider/9.jpg\n  [11]: /medias/article/coding/news-spider/10.jpg\n  [12]: /medias/article/coding/news-spider/11.jpg\n  [13]: /medias/article/coding/news-spider/12.jpg\n  [14]: /medias/article/coding/news-spider/13.jpg\n  [15]: https://github.com/webCaolixin/news-Spider","slug":"news-spider","published":1,"updated":"2019-01-04T11:43:35.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mvk001z9kvb2un20i3d","content":"<h3 id=\"一、什么是爬虫\"><a href=\"#一、什么是爬虫\" class=\"headerlink\" title=\"一、什么是爬虫\"></a>一、什么是爬虫</h3><blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&amp;fromid=22046949&amp;fromtitle=%E7%88%AC%E8%99%AB\" target=\"_blank\" rel=\"noopener\">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在<code>FOAF</code>社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。<br><a href=\"https://en.wikipedia.org/wiki/Web_crawler\" target=\"_blank\" rel=\"noopener\">WIKIPEDIA 爬虫介绍</a></p>\n</blockquote>\n<h3 id=\"二、爬虫的分类\"><a href=\"#二、爬虫的分类\" class=\"headerlink\" title=\"二、爬虫的分类\"></a>二、爬虫的分类</h3><ul>\n<li>通用网络爬虫（全网爬虫）<blockquote>\n<p>爬行对象从一些 <code>种子URL</code> 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p><img src=\"/medias/article/coding/news-spider/1.jpg\" alt=\"通用爬虫工作流程\"></p>\n<ul>\n<li><p>聚焦网络爬虫（主题网络爬虫）</p>\n<blockquote>\n<p>是 <code>指选择性</code> 地爬行那些与预先定义好的主题相关页面的网络爬虫。 </p>\n</blockquote>\n</li>\n<li><p>增量式网络爬虫</p>\n<blockquote>\n<p>指对已下载网页采取增量式更新和 <code>只爬行新产生的或者已经发生变化网页</code> 的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</p>\n</blockquote>\n</li>\n<li><p>Deep Web 爬虫</p>\n<blockquote>\n<p>爬行对象是一些在用户填入关键字搜索或登录后才能访问到的<code>深层网页信息</code>的爬虫。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"三、爬虫的爬行策略\"><a href=\"#三、爬虫的爬行策略\" class=\"headerlink\" title=\"三、爬虫的爬行策略\"></a>三、爬虫的爬行策略</h3><ul>\n<li>通用网络爬虫（全网爬虫）<blockquote>\n<p>深度优先策略、广度优先策略</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/medias/article/coding/news-spider/2.png\" alt=\"页面关系模拟树状结构\"></p>\n<ul>\n<li><p>聚焦网络爬虫（主题网络爬虫）</p>\n<blockquote>\n<p>基于内容评价的爬行策略（内容相关性），基于链接结构评价的爬行策略、基于增强学习的爬行策略（链接重要性），基于语境图的爬行策略（距离，图论中两节点间边的权重）</p>\n</blockquote>\n</li>\n<li><p>增量式网络爬虫</p>\n<blockquote>\n<p> 统一更新法、个体更新法、基于分类的更新法、自适应调频更新法</p>\n</blockquote>\n</li>\n<li><p>Deep Web 爬虫</p>\n<blockquote>\n<p>Deep Web 爬虫爬行过程中最重要部分就是表单填写，包含两种类型：基于领域知识的表单填写、基于网页结构分析的表单填写</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>现代的网页爬虫的行为通常是四种策略组合的结果：</strong></p>\n<blockquote>\n<p>选择策略：决定所要下载的页面；<br>重新访问策略：决定什么时候检查页面的更新变化；<br>平衡礼貌策略：指出怎样避免站点超载；<br>并行策略：指出怎么协同达到分布式抓取的效果；</p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/3.jpg\" alt=\"现代分布式爬虫系统\"></p>\n<h3 id=\"四、写一个简单网页爬虫的流程\"><a href=\"#四、写一个简单网页爬虫的流程\" class=\"headerlink\" title=\"四、写一个简单网页爬虫的流程\"></a>四、写一个简单网页爬虫的流程</h3><ol>\n<li>确定爬取对象（网站/页面）</li>\n<li>分析页面内容（目标数据/DOM结构）</li>\n<li>确定开发语言、框架、工具等</li>\n<li>编码 测试，爬取数据</li>\n<li>优化</li>\n</ol>\n<h3 id=\"一个简单的百度新闻爬虫\"><a href=\"#一个简单的百度新闻爬虫\" class=\"headerlink\" title=\"一个简单的百度新闻爬虫\"></a>一个简单的百度新闻爬虫</h3><h4 id=\"确定爬取对象（网站-页面）\"><a href=\"#确定爬取对象（网站-页面）\" class=\"headerlink\" title=\"确定爬取对象（网站/页面）\"></a>确定爬取对象（网站/页面）</h4><blockquote>\n<p><a href=\"http://news.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度新闻</a> （<a href=\"http://news.baidu.com/）\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/）</a></p>\n</blockquote>\n<h4 id=\"分析页面内容（目标数据-DOM结构）\"><a href=\"#分析页面内容（目标数据-DOM结构）\" class=\"headerlink\" title=\"分析页面内容（目标数据/DOM结构）\"></a>分析页面内容（目标数据/DOM结构）</h4><blockquote>\n<p>······</p>\n</blockquote>\n<h4 id=\"确定开发语言、框架、工具等\"><a href=\"#确定开发语言、框架、工具等\" class=\"headerlink\" title=\"确定开发语言、框架、工具等\"></a>确定开发语言、框架、工具等</h4><blockquote>\n<p><code>node.js (express)</code> + <code>SublimeText 3</code></p>\n</blockquote>\n<h4 id=\"编码，测试，爬取数据\"><a href=\"#编码，测试，爬取数据\" class=\"headerlink\" title=\"编码，测试，爬取数据\"></a>编码，测试，爬取数据</h4><blockquote>\n<p>coding ···</p>\n</blockquote>\n<h3 id=\"Let’s-start\"><a href=\"#Let’s-start\" class=\"headerlink\" title=\"Let’s start\"></a>Let’s start</h3><h4 id=\"新建项目目录\"><a href=\"#新建项目目录\" class=\"headerlink\" title=\"新建项目目录\"></a>新建项目目录</h4><blockquote>\n<p>1.在合适的磁盘目录下创建项目目录<code>baiduNews</code>（我的项目目录是：<code>F:\\web\\baiduNews</code>）</p>\n</blockquote>\n<p><strong>注：因为在写这篇文章的时候用的电脑真心比较渣。安装WebStorm或者VsCode跑项目有些吃力。所以后面的命令行操作我都是在Window自带的DOS命令行窗口中执行的。</strong></p>\n<h4 id=\"初始化package-json\"><a href=\"#初始化package-json\" class=\"headerlink\" title=\"初始化package.json\"></a>初始化package.json</h4><blockquote>\n<p>1.在DOS命令行中进入项目根目录 <code>baiduNews</code><br>2.执行<code>npm init</code>，初始化<code>package.json</code>文件</p>\n</blockquote>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><blockquote>\n<p><code>express</code> （使用express来搭建一个简单的Http服务器。当然，你也可以使用node中自带的<code>http</code>模块）<br><code>superagent</code> （superagent是node里一个非常方便的、轻量的、渐进式的第三方客户端请求代理模块，用他来请求目标页面）<br><code>cheerio</code> （cheerio相当于node版的jQuery，用过jQuery的同学会非常容易上手。它主要是用来获取抓取到的页面元素和其中的数据信息）</p>\n</blockquote>\n<pre><code>// 个人比较喜欢使用yarn来安装依赖包,当然你也可以使用 npm install 来安装依赖，看个人习惯。\nyarn add express\nyarn add superagent\nyarn add cheerio\n</code></pre><p>依赖安装完成后你可以在package.json中查看刚才安装的依赖是否成功。<br>安装正确后如下图：</p>\n<p><img src=\"/medias/article/coding/news-spider/4.jpg\" alt=\"安装依赖包\"></p>\n<h4 id=\"开始coding\"><a href=\"#开始coding\" class=\"headerlink\" title=\"开始coding\"></a>开始coding</h4><p><strong> 一、使用<code>express</code>启动一个简单的本地Http服务器 </strong></p>\n<p>1、在项目根目录下创建<code>index.js</code>文件（后面都会在这个index文件中进行coding）</p>\n<p>2、创建好<code>index.js</code>后，我们首先实例化一个<code>express</code>对象，用它来启动一个本地监听<code>3000</code>端口的Http服务。</p>\n<pre><code>const express = require(&#39;express&#39;);\nconst app = express();\n\n// ...\n\nlet server = app.listen(3000, function () {\n  let host = server.address().address;\n  let port = server.address().port;\n  console.log(&#39;Your App is running at http://%s:%s&#39;, host, port);\n});\n</code></pre><p>对，就是这么简单，不到10行代码，搭建启动一个简单的本地Http服务。</p>\n<p>3、按照国际惯例，我们希望在访问本机地址<code>http://localhost:3000</code>的时候，这个服务能给我们犯规一个<code>Hello World！</code>在<code>index.js</code>中加入如下代码：</p>\n<pre><code>app.get(&#39;/&#39;, function (req, res) {\n  res.send(&#39;Hello World!&#39;);\n});\n</code></pre><blockquote>\n<p>此时，在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code>http://localhost:3000</code>,你就会发现页面上显示’Hellow World!’字样。<br>这样，在后面我们获取到百度新闻首页的信息后，就可以在访问<code>http://localhost:3000</code>时看到这些信息。</p>\n</blockquote>\n<p><strong>二、抓取百度新闻首页的新闻信息</strong></p>\n<p>1、 首先，我们先来分析一下百度新闻首页的页面信息。</p>\n<p><img src=\"/medias/article/coding/news-spider/5.jpg\" alt=\"百度新闻首页\"></p>\n<p><img src=\"/medias/article/coding/news-spider/6.jpg\" alt=\"百度新闻首页\"></p>\n<blockquote>\n<p>百度新闻首页大体上分为“热点新闻”、“本地新闻”、“国内新闻”、“国际新闻”……等。这次我们先来尝试抓取左侧<code>“热点新闻”</code>和下方的<code>“本地新闻”</code>两处的新闻数据。</p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/7.jpg\" alt=\"热点新闻DOM结构\"></p>\n<blockquote>\n<p><code>F12</code>打开<code>Chrome</code>的控制台，审查页面元素，经过查看左侧“热点新闻”信息所在<code>DOM</code>的结构，我们发现所有的“热点新闻”信息（包括新闻标题和新闻页面链接）都在<code>id</code>为<code>#pane-news</code>的<code>&lt;div</code>&gt;下面<code>&lt;ul&gt;</code>下<code>&lt;li&gt;</code>下的<code>&lt;a&gt;</code>标签中。用<code>jQuery</code>的选择器表示为：<code>#pane-news ul li a</code>。</p>\n</blockquote>\n<p>2、为了爬取新闻数据，首先我们要用superagent请求目标页面，获取整个新闻首页信息</p>\n<pre><code>// 引入所需要的第三方包\nconst superagent= require(&#39;superagent&#39;);\n\nlet hotNews = [];                                // 热点新闻\nlet localNews = [];                              // 本地新闻\n\n/**\n * index.js\n * [description] - 使用superagent.get()方法来访问百度新闻首页\n */\nsuperagent.get(&#39;http://news.baidu.com/&#39;).end((err, res) =&gt; {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n   // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n   // 抓取热点新闻数据\n   hotNews = getHotNews(res)\n  }\n});\n</code></pre><p>3、获取页面信息后，我们来定义一个函数<code>getHotNews()</code>来抓取页面内的“热点新闻”数据。</p>\n<pre><code>/**\n * index.js\n * [description] - 抓取热点新闻页面\n */\n// 引入所需要的第三方包\nconst cheerio = require(&#39;cheerio&#39;);\n\nlet getHotNews = (res) =&gt; {\n  let hotNews = [];\n  // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res.text中。\n\n  /* 使用cheerio模块的cherrio.load()方法，将HTMLdocument作为参数传入函数\n     以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素\n   */\n  let $ = cheerio.load(res.text);\n\n  // 找到目标数据所在的页面元素，获取数据\n  $(&#39;div#pane-news ul li a&#39;).each((idx, ele) =&gt; {\n    // cherrio中$(&#39;selector&#39;).each()用来遍历所有匹配到的DOM元素\n    // 参数idx是当前遍历的元素的索引，ele就是当前便利的DOM元素\n    let news = {\n      title: $(ele).text(),        // 获取新闻标题\n      href: $(ele).attr(&#39;href&#39;)    // 获取新闻网页链接\n    };\n    hotNews.push(news)              // 存入最终结果数组\n  });\n  return hotNews\n};\n</code></pre><blockquote>\n<p>这里要多说几点：</p>\n<ol>\n<li><code>async/await</code>据说是异步编程的终级解决方案,它可以让我们以同步的思维方式来进行异步编程。<code>Promise</code>解决了异步编程的“回调地狱”，async/await同时使异步流程控制变得友好而有清晰，有兴趣的同学可以去了解学习一下，真的很好用。</li>\n<li><code>superagent</code>模块提供了很多比如<code>get</code>、<code>post</code>、<code>delte</code>等方法，可以很方便地进行Ajax请求操作。在请求结束后执行<code>.end()</code>回调函数。<code>.end()</code>接受一个函数作为参数，该函数又有两个参数<code>error和res</code>。当请求失败，<code>error</code>会包含返回的错误信息，请求成功，<code>error</code>值为<code>null</code>，返回的数据会包含在<code>res</code>参数中。</li>\n<li><code>cheerio</code>模块的<code>.load()</code>方法，将<code>HTML document</code>作为参数传入函数，以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素。同时可以使用类似于<code>jQuery</code>中的<code>.each()</code>来遍历元素。此外，还有很多方法，大家可以自行Google/Baidu。</li>\n</ol>\n</blockquote>\n<p>4、将抓取的数据返回给前端浏览器</p>\n<blockquote>\n<p>前面，<code>const app = express();</code>实例化了一个<code>express</code>对象<code>app</code>。<br><code>app.get(&#39;&#39;, async() =&gt; {})</code>接受两个参数，第一个参数接受一个String类型的路由路径，表示Ajax的请求路径。第二个参数接受一个函数Function，当请求此路径时就会执行这个函数中的代码。</p>\n</blockquote>\n<pre><code>/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send(hotNews);\n});\n</code></pre><blockquote>\n<p>在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code>http://localhost:3000</code>,你就会发现抓取到的数据返回到了前端页面。我运行代码后浏览器展示的返回信息如下：<br><strong>注：因为我的<code>Chrome</code><a href=\"https://www.cnblogs.com/whycxb/p/7126116.html\" target=\"_blank\" rel=\"noopener\">安装了JSONView扩展程序</a>，所以返回的数据在页面展示的时候会被自动格式化为结构性的JSON格式，方便查看。</strong></p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/9.jpg\" alt=\"热点新闻抓取结果\"></p>\n<p><strong>OK！！这样，一个简单的百度<code>“热点新闻”</code>的爬虫就大功告成啦！！</strong></p>\n<blockquote>\n<p>简单总结一下，其实步骤很简单：</p>\n<ol>\n<li><code>express</code>启动一个简单的<code>Http</code>服务</li>\n<li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM</code>元素</li>\n<li>使用<code>superagent</code>请求目标页面</li>\n<li>使用<code>cheerio</code>获取页面元素，获取目标数据</li>\n<li>返回数据到前端浏览器</li>\n</ol>\n</blockquote>\n<p><strong>现在，继续我们的目标，抓取<code>“本地新闻”</code>数据（编码过程中，我们会遇到一些有意思的问题）</strong><br>有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。<br>1、 分析页面中“本地新闻”部分的<code>DOM</code>结构，如下图：</p>\n<p><img src=\"/medias/article/coding/news-spider/10.jpg\" alt=\"百度新闻本地新闻\"></p>\n<blockquote>\n<p><code>F12</code>打开控制台，审查“本地新闻”<code>DOM</code>元素，我们发现，“本地新闻”分为两个主要部分，“左侧新闻”和右侧的“新闻资讯”。这所有目标数据都在<code>id</code>为<code>#local_news</code>的<code>div</code>中。“左侧新闻”数据又在<code>id</code>为<code>#localnews-focus</code>的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。“本地资讯”数据又在<code>id</code>为<code>#localnews-zixun</code>的<code>div</code>下的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。</p>\n</blockquote>\n<p>2、OK！分析了<code>DOM</code>结构，确定了数据的位置，接下来和爬取<code>“热点新闻”</code>一样，按部就班，定义一个<code>getLocalNews()</code>函数，爬取这些数据。</p>\n<pre><code>/**\n * [description] - 抓取本地新闻页面\n */\nlet getLocalNews = (res) =&gt; {\n  let localNews = [];\n  let $ = cheerio.load(res);\n\n  // 本地新闻\n  $(&#39;ul#localnews-focus li a&#39;).each((idx, ele) =&gt; {\n    let news = {\n      title: $(ele).text(),\n      href: $(ele).attr(&#39;href&#39;),\n    };\n    localNews.push(news)\n  });\n\n  // 本地资讯\n  $(&#39;div#localnews-zixun ul li a&#39;).each((index, item) =&gt; {\n    let news = {\n      title: $(item).text(),\n      href: $(item).attr(&#39;href&#39;)\n    };\n    localNews.push(news);\n  });\n\n  return localNews\n};\n</code></pre><p>对应的，在<code>superagent.get()</code>中请求页面后，我们需要调用<code>getLocalNews()</code>函数，来爬去本地新闻数据。<br><code>superagent.get()</code>函数修改为：</p>\n<pre><code>superagent.get(&#39;http://news.baidu.com/&#39;).end((err, res) =&gt; {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n   // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n   // 抓取热点新闻数据\n   hotNews = getHotNews(res)\n   localNews = getLocalNews(res)\n  }\n});\n</code></pre><p>同时，我们要在<code>app.get()</code>路由中也要将数据返回给前端浏览器。<code>app.get()</code>路由代码修改为：</p>\n<pre><code>/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send({\n    hotNews: hotNews,\n    localNews: localNews\n  });\n});\n</code></pre><blockquote>\n<p>编码完成，激动不已！！<code>DOS</code>中让项目跑起来，用浏览器访问<code>http://localhost:3000</code></p>\n</blockquote>\n<p><strong>尴尬的事情发生了！！返回的数据只有热点新闻，而本地新闻返回一个空数组<code>[ ]</code>。检查代码，发现也没有问题，但为什么一直返回的空数组呢？</strong><br><strong>经过一番原因查找，才返现问题出在哪里！！</strong></p>\n<h3 id=\"一个有意思的问题\"><a href=\"#一个有意思的问题\" class=\"headerlink\" title=\"一个有意思的问题\"></a>一个有意思的问题</h3><blockquote>\n<p>为了找到原因，首先，我们看看用<code>superagent.get(&#39;http://news.baidu.com/&#39;).end((err, res) =&gt; {})</code>请求百度新闻首页在回调函数<code>.end()</code>中的第二个参数res中到底拿到了什么内容？</p>\n</blockquote>\n<pre><code>// 新定义一个全局变量 pageRes\nlet pageRes = {};        // supergaent页面返回值\n\n// superagent.get()中将res存入pageRes\nsuperagent.get(&#39;http://news.baidu.com/&#39;).end((err, res) =&gt; {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n    // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n    // 抓取热点新闻数据\n    // hotNews = getHotNews(res)\n    // localNews = getLocalNews(res)\n    pageRes = res\n  }\n});\n\n// 将pageRes返回给前端浏览器，便于查看\napp.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send({\n    // {}hotNews: hotNews,\n    // localNews: localNews,\n    pageRes: pageRes\n  });\n});\n</code></pre><blockquote>\n<p>访问浏览器<code>http://localhost:3000</code>，页面展示如下内容：</p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/11.jpg\" alt=\"superagent.get()请求返回值\"></p>\n<blockquote>\n<p>可以看到，返回值中的<code>text</code>字段应该就是整个页面的<code>HTML</code>代码的字符串格式。为了方便我们观察，可以直接把这个<code>text</code>字段值返回给前端浏览器，这样我们就能够清晰地看到经过浏览器渲染后的页面。</p>\n</blockquote>\n<p>修改给前端浏览器的返回值</p>\n<pre><code>app.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send(pageRes.text)\n}\n</code></pre><p>访问浏览器<code>http://localhost:3000</code>，页面展示如下内容：</p>\n<p><img src=\"/medias/article/coding/news-spider/12.jpg\" alt=\"本地新闻返回页面\"></p>\n<blockquote>\n<p>审查元素才发现，原来我们抓取的目标数据所在的<code>DOM</code>元素中是空的，里面没有数据！<br>到这里，一切水落石出！在我们使用<code>superagent.get()</code>访问百度新闻首页时，<code>res</code>中包含的获取的页面内容中，我们想要的“本地新闻”数据还没有生成，<code>DOM</code>节点元素是空的，所以出现前面的情况！抓取后返回的数据一直是空数组<code>[ ]</code>。</p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/13.jpg\" alt=\"本地新闻请求接口\"></p>\n<blockquote>\n<p>在控制台的<code>Network</code>中我们发现页面请求了一次这样的接口：<br><code>http://localhost:3000/widget?id=LocalNews&amp;ajax=json&amp;t=1526295667917</code>，接口状态 <code>404</code>。<br>这应该就是百度新闻获取<code>“本地新闻”</code>的接口，到这里一切都明白了！“本地新闻”是在页面加载后动态请求上面这个接口获取的，所以我们用<code>superagent.get()</code>请求的页面再去请求这个接口时，接口<code>URL</code>中<code>hostname</code>部分变成了本地<code>IP</code>地址，而本机上没有这个接口，所以<code>404</code>，请求不到数据。</p>\n</blockquote>\n<p><strong>找到原因，我们来想办法解决这个问题！！</strong></p>\n<blockquote>\n<ol>\n<li>直接使用<code>superagen</code>t访问正确合法的百度<code>“本地新闻”</code>的接口，获取数据后返回给前端浏览器。</li>\n<li>使用第三方<code>npm</code>包，模拟浏览器访问百度新闻首页，在这个模拟浏览器中当<code>“本地新闻”</code>加载成功后，抓取数据，返回给前端浏览器。</li>\n</ol>\n</blockquote>\n<p><strong>以上方法均可，我们来试试比较有意思的第二种方法</strong></p>\n<h3 id=\"使用Nightmare自动化测试工具\"><a href=\"#使用Nightmare自动化测试工具\" class=\"headerlink\" title=\"使用Nightmare自动化测试工具\"></a>使用<code>Nightmare</code>自动化测试工具</h3><blockquote>\n<p><code>Electron</code>可以让你使用纯<code>JavaScript</code>调用<code>Chrome</code>丰富的原生的接口来创造桌面应用。你可以把它看作一个专注于桌面应用的<code>Node.js</code>的变体，而不是<code>Web</code>服务器。其基于浏览器的应用方式可以极方便的做各种响应式的交互</p>\n</blockquote>\n<blockquote>\n<p><code>Nightmare</code>是一个基于<code>Electron</code>的框架，针对<code>Web</code>自动化测试和爬虫，因为其具有跟<code>PlantomJS</code>一样的自动化测试的功能可以在页面上模拟用户的行为触发一些异步数据加载，也可以跟<code>Request</code>库一样直接访问<code>URL</code>来抓取数据，并且可以设置页面的延迟时间，所以无论是手动触发脚本还是行为触发脚本都是轻而易举的。</p>\n</blockquote>\n<h4 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><pre><code>// 安装nightmare\nyarn add nightmare\n</code></pre><h4 id=\"为获取“本地新闻”，继续coding…\"><a href=\"#为获取“本地新闻”，继续coding…\" class=\"headerlink\" title=\"为获取“本地新闻”，继续coding…\"></a>为获取“本地新闻”，继续coding…</h4><p>给<code>index.js</code>中新增如下代码：</p>\n<pre><code>const Nightmare = require(&#39;nightmare&#39;);          // 自动化测试包，处理动态页面\nconst nightmare = Nightmare({ show: true });     // show:true  显示内置模拟浏览器\n\n/**\n * [description] - 抓取本地新闻页面\n * [nremark] - 百度本地新闻在访问页面后加载js定位IP位置后获取对应新闻，\n * 所以抓取本地新闻需要使用 nightmare 一类的自动化测试工具，\n * 模拟浏览器环境访问页面，使js运行，生成动态页面再抓取\n */\n// 抓取本地新闻页面\nnightmare\n.goto(&#39;http://news.baidu.com/&#39;)\n.wait(&quot;div#local_news&quot;)\n.evaluate(() =&gt; document.querySelector(&quot;div#local_news&quot;).innerHTML)\n.then(htmlStr =&gt; {\n  // 获取本地新闻数据\n  localNews = getLocalNews(htmlStr)\n})\n.catch(error =&gt; {\n  console.log(`本地新闻抓取失败 - ${error}`);\n})\n</code></pre><p>修改<code>getLocalNews()</code>函数为：</p>\n<pre><code>/**\n * [description]- 获取本地新闻数据\n */\nlet getLocalNews = (htmlStr) =&gt; {\n  let localNews = [];\n  let $ = cheerio.load(htmlStr);\n\n  // 本地新闻\n  $(&#39;ul#localnews-focus li a&#39;).each((idx, ele) =&gt; {\n    let news = {\n      title: $(ele).text(),\n      href: $(ele).attr(&#39;href&#39;),\n    };\n    localNews.push(news)\n  });\n\n  // 本地资讯\n  $(&#39;div#localnews-zixun ul li a&#39;).each((index, item) =&gt; {\n    let news = {\n      title: $(item).text(),\n      href: $(item).attr(&#39;href&#39;)\n    };\n    localNews.push(news);\n  });\n\n  return localNews\n}\n</code></pre><p>修改<code>app.get(&#39;/&#39;)</code>路由为：</p>\n<pre><code>/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send({\n    hotNews: hotNews,\n    localNews: localNews\n  })\n});\n</code></pre><blockquote>\n<p>此时，<code>DOS</code>命令行中重新让项目跑起来，浏览器访问<code>https://localhost:3000</code>，看看页面展示的信息，看是否抓取到了<code>“本地新闻”</code>数据！</p>\n</blockquote>\n<p><strong>至此，一个简单而又完整的抓取百度新闻页面“热点新闻”和“本地新闻”的爬虫就大功告成啦！！</strong></p>\n<p><strong>最后总结一下，整体思路如下：</strong></p>\n<blockquote>\n<ol>\n<li><code>express</code>启动一个简单的<code>Http</code>服务</li>\n<li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM元</code>素</li>\n<li>使用<code>superagent</code>请求目标页面</li>\n<li><strong>动态页面（需要加载页面后运行<code>JS</code>或请求接口的页面）可以使用<code>Nightmare</code>模拟浏览器访问</strong></li>\n<li>使用<code>cheerio</code>获取页面元素，获取目标数据</li>\n</ol>\n</blockquote>\n<p>###完整代码</p>\n<blockquote>\n<p>爬虫完整代码GitHub地址：<a href=\"https://github.com/webCaolixin/news-Spider\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n</blockquote>\n<p><strong><em>后面，应该还会做一些进阶，来爬取某些网站上比较好看的图片（手动滑稽），会牵扯到<code>并发控制</code>和<code>反-反爬虫</code>的一些策略。再用爬虫取爬去一些需要登录和输入验证码的网站，欢迎到时大家关注和指正交流。</em></strong></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一、什么是爬虫\"><a href=\"#一、什么是爬虫\" class=\"headerlink\" title=\"一、什么是爬虫\"></a>一、什么是爬虫</h3><blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&amp;fromid=22046949&amp;fromtitle=%E7%88%AC%E8%99%AB\" target=\"_blank\" rel=\"noopener\">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在<code>FOAF</code>社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。<br><a href=\"https://en.wikipedia.org/wiki/Web_crawler\" target=\"_blank\" rel=\"noopener\">WIKIPEDIA 爬虫介绍</a></p>\n</blockquote>\n<h3 id=\"二、爬虫的分类\"><a href=\"#二、爬虫的分类\" class=\"headerlink\" title=\"二、爬虫的分类\"></a>二、爬虫的分类</h3><ul>\n<li>通用网络爬虫（全网爬虫）<blockquote>\n<p>爬行对象从一些 <code>种子URL</code> 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</p>\n</blockquote>\n</li>\n</ul>","more":"<p><img src=\"/medias/article/coding/news-spider/1.jpg\" alt=\"通用爬虫工作流程\"></p>\n<ul>\n<li><p>聚焦网络爬虫（主题网络爬虫）</p>\n<blockquote>\n<p>是 <code>指选择性</code> 地爬行那些与预先定义好的主题相关页面的网络爬虫。 </p>\n</blockquote>\n</li>\n<li><p>增量式网络爬虫</p>\n<blockquote>\n<p>指对已下载网页采取增量式更新和 <code>只爬行新产生的或者已经发生变化网页</code> 的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</p>\n</blockquote>\n</li>\n<li><p>Deep Web 爬虫</p>\n<blockquote>\n<p>爬行对象是一些在用户填入关键字搜索或登录后才能访问到的<code>深层网页信息</code>的爬虫。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"三、爬虫的爬行策略\"><a href=\"#三、爬虫的爬行策略\" class=\"headerlink\" title=\"三、爬虫的爬行策略\"></a>三、爬虫的爬行策略</h3><ul>\n<li>通用网络爬虫（全网爬虫）<blockquote>\n<p>深度优先策略、广度优先策略</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/medias/article/coding/news-spider/2.png\" alt=\"页面关系模拟树状结构\"></p>\n<ul>\n<li><p>聚焦网络爬虫（主题网络爬虫）</p>\n<blockquote>\n<p>基于内容评价的爬行策略（内容相关性），基于链接结构评价的爬行策略、基于增强学习的爬行策略（链接重要性），基于语境图的爬行策略（距离，图论中两节点间边的权重）</p>\n</blockquote>\n</li>\n<li><p>增量式网络爬虫</p>\n<blockquote>\n<p> 统一更新法、个体更新法、基于分类的更新法、自适应调频更新法</p>\n</blockquote>\n</li>\n<li><p>Deep Web 爬虫</p>\n<blockquote>\n<p>Deep Web 爬虫爬行过程中最重要部分就是表单填写，包含两种类型：基于领域知识的表单填写、基于网页结构分析的表单填写</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>现代的网页爬虫的行为通常是四种策略组合的结果：</strong></p>\n<blockquote>\n<p>选择策略：决定所要下载的页面；<br>重新访问策略：决定什么时候检查页面的更新变化；<br>平衡礼貌策略：指出怎样避免站点超载；<br>并行策略：指出怎么协同达到分布式抓取的效果；</p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/3.jpg\" alt=\"现代分布式爬虫系统\"></p>\n<h3 id=\"四、写一个简单网页爬虫的流程\"><a href=\"#四、写一个简单网页爬虫的流程\" class=\"headerlink\" title=\"四、写一个简单网页爬虫的流程\"></a>四、写一个简单网页爬虫的流程</h3><ol>\n<li>确定爬取对象（网站/页面）</li>\n<li>分析页面内容（目标数据/DOM结构）</li>\n<li>确定开发语言、框架、工具等</li>\n<li>编码 测试，爬取数据</li>\n<li>优化</li>\n</ol>\n<h3 id=\"一个简单的百度新闻爬虫\"><a href=\"#一个简单的百度新闻爬虫\" class=\"headerlink\" title=\"一个简单的百度新闻爬虫\"></a>一个简单的百度新闻爬虫</h3><h4 id=\"确定爬取对象（网站-页面）\"><a href=\"#确定爬取对象（网站-页面）\" class=\"headerlink\" title=\"确定爬取对象（网站/页面）\"></a>确定爬取对象（网站/页面）</h4><blockquote>\n<p><a href=\"http://news.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度新闻</a> （<a href=\"http://news.baidu.com/）\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/）</a></p>\n</blockquote>\n<h4 id=\"分析页面内容（目标数据-DOM结构）\"><a href=\"#分析页面内容（目标数据-DOM结构）\" class=\"headerlink\" title=\"分析页面内容（目标数据/DOM结构）\"></a>分析页面内容（目标数据/DOM结构）</h4><blockquote>\n<p>······</p>\n</blockquote>\n<h4 id=\"确定开发语言、框架、工具等\"><a href=\"#确定开发语言、框架、工具等\" class=\"headerlink\" title=\"确定开发语言、框架、工具等\"></a>确定开发语言、框架、工具等</h4><blockquote>\n<p><code>node.js (express)</code> + <code>SublimeText 3</code></p>\n</blockquote>\n<h4 id=\"编码，测试，爬取数据\"><a href=\"#编码，测试，爬取数据\" class=\"headerlink\" title=\"编码，测试，爬取数据\"></a>编码，测试，爬取数据</h4><blockquote>\n<p>coding ···</p>\n</blockquote>\n<h3 id=\"Let’s-start\"><a href=\"#Let’s-start\" class=\"headerlink\" title=\"Let’s start\"></a>Let’s start</h3><h4 id=\"新建项目目录\"><a href=\"#新建项目目录\" class=\"headerlink\" title=\"新建项目目录\"></a>新建项目目录</h4><blockquote>\n<p>1.在合适的磁盘目录下创建项目目录<code>baiduNews</code>（我的项目目录是：<code>F:\\web\\baiduNews</code>）</p>\n</blockquote>\n<p><strong>注：因为在写这篇文章的时候用的电脑真心比较渣。安装WebStorm或者VsCode跑项目有些吃力。所以后面的命令行操作我都是在Window自带的DOS命令行窗口中执行的。</strong></p>\n<h4 id=\"初始化package-json\"><a href=\"#初始化package-json\" class=\"headerlink\" title=\"初始化package.json\"></a>初始化package.json</h4><blockquote>\n<p>1.在DOS命令行中进入项目根目录 <code>baiduNews</code><br>2.执行<code>npm init</code>，初始化<code>package.json</code>文件</p>\n</blockquote>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><blockquote>\n<p><code>express</code> （使用express来搭建一个简单的Http服务器。当然，你也可以使用node中自带的<code>http</code>模块）<br><code>superagent</code> （superagent是node里一个非常方便的、轻量的、渐进式的第三方客户端请求代理模块，用他来请求目标页面）<br><code>cheerio</code> （cheerio相当于node版的jQuery，用过jQuery的同学会非常容易上手。它主要是用来获取抓取到的页面元素和其中的数据信息）</p>\n</blockquote>\n<pre><code>// 个人比较喜欢使用yarn来安装依赖包,当然你也可以使用 npm install 来安装依赖，看个人习惯。\nyarn add express\nyarn add superagent\nyarn add cheerio\n</code></pre><p>依赖安装完成后你可以在package.json中查看刚才安装的依赖是否成功。<br>安装正确后如下图：</p>\n<p><img src=\"/medias/article/coding/news-spider/4.jpg\" alt=\"安装依赖包\"></p>\n<h4 id=\"开始coding\"><a href=\"#开始coding\" class=\"headerlink\" title=\"开始coding\"></a>开始coding</h4><p><strong> 一、使用<code>express</code>启动一个简单的本地Http服务器 </strong></p>\n<p>1、在项目根目录下创建<code>index.js</code>文件（后面都会在这个index文件中进行coding）</p>\n<p>2、创建好<code>index.js</code>后，我们首先实例化一个<code>express</code>对象，用它来启动一个本地监听<code>3000</code>端口的Http服务。</p>\n<pre><code>const express = require(&#39;express&#39;);\nconst app = express();\n\n// ...\n\nlet server = app.listen(3000, function () {\n  let host = server.address().address;\n  let port = server.address().port;\n  console.log(&#39;Your App is running at http://%s:%s&#39;, host, port);\n});\n</code></pre><p>对，就是这么简单，不到10行代码，搭建启动一个简单的本地Http服务。</p>\n<p>3、按照国际惯例，我们希望在访问本机地址<code>http://localhost:3000</code>的时候，这个服务能给我们犯规一个<code>Hello World！</code>在<code>index.js</code>中加入如下代码：</p>\n<pre><code>app.get(&#39;/&#39;, function (req, res) {\n  res.send(&#39;Hello World!&#39;);\n});\n</code></pre><blockquote>\n<p>此时，在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code>http://localhost:3000</code>,你就会发现页面上显示’Hellow World!’字样。<br>这样，在后面我们获取到百度新闻首页的信息后，就可以在访问<code>http://localhost:3000</code>时看到这些信息。</p>\n</blockquote>\n<p><strong>二、抓取百度新闻首页的新闻信息</strong></p>\n<p>1、 首先，我们先来分析一下百度新闻首页的页面信息。</p>\n<p><img src=\"/medias/article/coding/news-spider/5.jpg\" alt=\"百度新闻首页\"></p>\n<p><img src=\"/medias/article/coding/news-spider/6.jpg\" alt=\"百度新闻首页\"></p>\n<blockquote>\n<p>百度新闻首页大体上分为“热点新闻”、“本地新闻”、“国内新闻”、“国际新闻”……等。这次我们先来尝试抓取左侧<code>“热点新闻”</code>和下方的<code>“本地新闻”</code>两处的新闻数据。</p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/7.jpg\" alt=\"热点新闻DOM结构\"></p>\n<blockquote>\n<p><code>F12</code>打开<code>Chrome</code>的控制台，审查页面元素，经过查看左侧“热点新闻”信息所在<code>DOM</code>的结构，我们发现所有的“热点新闻”信息（包括新闻标题和新闻页面链接）都在<code>id</code>为<code>#pane-news</code>的<code>&lt;div</code>&gt;下面<code>&lt;ul&gt;</code>下<code>&lt;li&gt;</code>下的<code>&lt;a&gt;</code>标签中。用<code>jQuery</code>的选择器表示为：<code>#pane-news ul li a</code>。</p>\n</blockquote>\n<p>2、为了爬取新闻数据，首先我们要用superagent请求目标页面，获取整个新闻首页信息</p>\n<pre><code>// 引入所需要的第三方包\nconst superagent= require(&#39;superagent&#39;);\n\nlet hotNews = [];                                // 热点新闻\nlet localNews = [];                              // 本地新闻\n\n/**\n * index.js\n * [description] - 使用superagent.get()方法来访问百度新闻首页\n */\nsuperagent.get(&#39;http://news.baidu.com/&#39;).end((err, res) =&gt; {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n   // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n   // 抓取热点新闻数据\n   hotNews = getHotNews(res)\n  }\n});\n</code></pre><p>3、获取页面信息后，我们来定义一个函数<code>getHotNews()</code>来抓取页面内的“热点新闻”数据。</p>\n<pre><code>/**\n * index.js\n * [description] - 抓取热点新闻页面\n */\n// 引入所需要的第三方包\nconst cheerio = require(&#39;cheerio&#39;);\n\nlet getHotNews = (res) =&gt; {\n  let hotNews = [];\n  // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res.text中。\n\n  /* 使用cheerio模块的cherrio.load()方法，将HTMLdocument作为参数传入函数\n     以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素\n   */\n  let $ = cheerio.load(res.text);\n\n  // 找到目标数据所在的页面元素，获取数据\n  $(&#39;div#pane-news ul li a&#39;).each((idx, ele) =&gt; {\n    // cherrio中$(&#39;selector&#39;).each()用来遍历所有匹配到的DOM元素\n    // 参数idx是当前遍历的元素的索引，ele就是当前便利的DOM元素\n    let news = {\n      title: $(ele).text(),        // 获取新闻标题\n      href: $(ele).attr(&#39;href&#39;)    // 获取新闻网页链接\n    };\n    hotNews.push(news)              // 存入最终结果数组\n  });\n  return hotNews\n};\n</code></pre><blockquote>\n<p>这里要多说几点：</p>\n<ol>\n<li><code>async/await</code>据说是异步编程的终级解决方案,它可以让我们以同步的思维方式来进行异步编程。<code>Promise</code>解决了异步编程的“回调地狱”，async/await同时使异步流程控制变得友好而有清晰，有兴趣的同学可以去了解学习一下，真的很好用。</li>\n<li><code>superagent</code>模块提供了很多比如<code>get</code>、<code>post</code>、<code>delte</code>等方法，可以很方便地进行Ajax请求操作。在请求结束后执行<code>.end()</code>回调函数。<code>.end()</code>接受一个函数作为参数，该函数又有两个参数<code>error和res</code>。当请求失败，<code>error</code>会包含返回的错误信息，请求成功，<code>error</code>值为<code>null</code>，返回的数据会包含在<code>res</code>参数中。</li>\n<li><code>cheerio</code>模块的<code>.load()</code>方法，将<code>HTML document</code>作为参数传入函数，以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素。同时可以使用类似于<code>jQuery</code>中的<code>.each()</code>来遍历元素。此外，还有很多方法，大家可以自行Google/Baidu。</li>\n</ol>\n</blockquote>\n<p>4、将抓取的数据返回给前端浏览器</p>\n<blockquote>\n<p>前面，<code>const app = express();</code>实例化了一个<code>express</code>对象<code>app</code>。<br><code>app.get(&#39;&#39;, async() =&gt; {})</code>接受两个参数，第一个参数接受一个String类型的路由路径，表示Ajax的请求路径。第二个参数接受一个函数Function，当请求此路径时就会执行这个函数中的代码。</p>\n</blockquote>\n<pre><code>/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send(hotNews);\n});\n</code></pre><blockquote>\n<p>在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code>http://localhost:3000</code>,你就会发现抓取到的数据返回到了前端页面。我运行代码后浏览器展示的返回信息如下：<br><strong>注：因为我的<code>Chrome</code><a href=\"https://www.cnblogs.com/whycxb/p/7126116.html\" target=\"_blank\" rel=\"noopener\">安装了JSONView扩展程序</a>，所以返回的数据在页面展示的时候会被自动格式化为结构性的JSON格式，方便查看。</strong></p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/9.jpg\" alt=\"热点新闻抓取结果\"></p>\n<p><strong>OK！！这样，一个简单的百度<code>“热点新闻”</code>的爬虫就大功告成啦！！</strong></p>\n<blockquote>\n<p>简单总结一下，其实步骤很简单：</p>\n<ol>\n<li><code>express</code>启动一个简单的<code>Http</code>服务</li>\n<li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM</code>元素</li>\n<li>使用<code>superagent</code>请求目标页面</li>\n<li>使用<code>cheerio</code>获取页面元素，获取目标数据</li>\n<li>返回数据到前端浏览器</li>\n</ol>\n</blockquote>\n<p><strong>现在，继续我们的目标，抓取<code>“本地新闻”</code>数据（编码过程中，我们会遇到一些有意思的问题）</strong><br>有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。<br>1、 分析页面中“本地新闻”部分的<code>DOM</code>结构，如下图：</p>\n<p><img src=\"/medias/article/coding/news-spider/10.jpg\" alt=\"百度新闻本地新闻\"></p>\n<blockquote>\n<p><code>F12</code>打开控制台，审查“本地新闻”<code>DOM</code>元素，我们发现，“本地新闻”分为两个主要部分，“左侧新闻”和右侧的“新闻资讯”。这所有目标数据都在<code>id</code>为<code>#local_news</code>的<code>div</code>中。“左侧新闻”数据又在<code>id</code>为<code>#localnews-focus</code>的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。“本地资讯”数据又在<code>id</code>为<code>#localnews-zixun</code>的<code>div</code>下的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。</p>\n</blockquote>\n<p>2、OK！分析了<code>DOM</code>结构，确定了数据的位置，接下来和爬取<code>“热点新闻”</code>一样，按部就班，定义一个<code>getLocalNews()</code>函数，爬取这些数据。</p>\n<pre><code>/**\n * [description] - 抓取本地新闻页面\n */\nlet getLocalNews = (res) =&gt; {\n  let localNews = [];\n  let $ = cheerio.load(res);\n\n  // 本地新闻\n  $(&#39;ul#localnews-focus li a&#39;).each((idx, ele) =&gt; {\n    let news = {\n      title: $(ele).text(),\n      href: $(ele).attr(&#39;href&#39;),\n    };\n    localNews.push(news)\n  });\n\n  // 本地资讯\n  $(&#39;div#localnews-zixun ul li a&#39;).each((index, item) =&gt; {\n    let news = {\n      title: $(item).text(),\n      href: $(item).attr(&#39;href&#39;)\n    };\n    localNews.push(news);\n  });\n\n  return localNews\n};\n</code></pre><p>对应的，在<code>superagent.get()</code>中请求页面后，我们需要调用<code>getLocalNews()</code>函数，来爬去本地新闻数据。<br><code>superagent.get()</code>函数修改为：</p>\n<pre><code>superagent.get(&#39;http://news.baidu.com/&#39;).end((err, res) =&gt; {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n   // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n   // 抓取热点新闻数据\n   hotNews = getHotNews(res)\n   localNews = getLocalNews(res)\n  }\n});\n</code></pre><p>同时，我们要在<code>app.get()</code>路由中也要将数据返回给前端浏览器。<code>app.get()</code>路由代码修改为：</p>\n<pre><code>/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send({\n    hotNews: hotNews,\n    localNews: localNews\n  });\n});\n</code></pre><blockquote>\n<p>编码完成，激动不已！！<code>DOS</code>中让项目跑起来，用浏览器访问<code>http://localhost:3000</code></p>\n</blockquote>\n<p><strong>尴尬的事情发生了！！返回的数据只有热点新闻，而本地新闻返回一个空数组<code>[ ]</code>。检查代码，发现也没有问题，但为什么一直返回的空数组呢？</strong><br><strong>经过一番原因查找，才返现问题出在哪里！！</strong></p>\n<h3 id=\"一个有意思的问题\"><a href=\"#一个有意思的问题\" class=\"headerlink\" title=\"一个有意思的问题\"></a>一个有意思的问题</h3><blockquote>\n<p>为了找到原因，首先，我们看看用<code>superagent.get(&#39;http://news.baidu.com/&#39;).end((err, res) =&gt; {})</code>请求百度新闻首页在回调函数<code>.end()</code>中的第二个参数res中到底拿到了什么内容？</p>\n</blockquote>\n<pre><code>// 新定义一个全局变量 pageRes\nlet pageRes = {};        // supergaent页面返回值\n\n// superagent.get()中将res存入pageRes\nsuperagent.get(&#39;http://news.baidu.com/&#39;).end((err, res) =&gt; {\n  if (err) {\n    // 如果访问失败或者出错，会这行这里\n    console.log(`热点新闻抓取失败 - ${err}`)\n  } else {\n    // 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res\n    // 抓取热点新闻数据\n    // hotNews = getHotNews(res)\n    // localNews = getLocalNews(res)\n    pageRes = res\n  }\n});\n\n// 将pageRes返回给前端浏览器，便于查看\napp.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send({\n    // {}hotNews: hotNews,\n    // localNews: localNews,\n    pageRes: pageRes\n  });\n});\n</code></pre><blockquote>\n<p>访问浏览器<code>http://localhost:3000</code>，页面展示如下内容：</p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/11.jpg\" alt=\"superagent.get()请求返回值\"></p>\n<blockquote>\n<p>可以看到，返回值中的<code>text</code>字段应该就是整个页面的<code>HTML</code>代码的字符串格式。为了方便我们观察，可以直接把这个<code>text</code>字段值返回给前端浏览器，这样我们就能够清晰地看到经过浏览器渲染后的页面。</p>\n</blockquote>\n<p>修改给前端浏览器的返回值</p>\n<pre><code>app.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send(pageRes.text)\n}\n</code></pre><p>访问浏览器<code>http://localhost:3000</code>，页面展示如下内容：</p>\n<p><img src=\"/medias/article/coding/news-spider/12.jpg\" alt=\"本地新闻返回页面\"></p>\n<blockquote>\n<p>审查元素才发现，原来我们抓取的目标数据所在的<code>DOM</code>元素中是空的，里面没有数据！<br>到这里，一切水落石出！在我们使用<code>superagent.get()</code>访问百度新闻首页时，<code>res</code>中包含的获取的页面内容中，我们想要的“本地新闻”数据还没有生成，<code>DOM</code>节点元素是空的，所以出现前面的情况！抓取后返回的数据一直是空数组<code>[ ]</code>。</p>\n</blockquote>\n<p><img src=\"/medias/article/coding/news-spider/13.jpg\" alt=\"本地新闻请求接口\"></p>\n<blockquote>\n<p>在控制台的<code>Network</code>中我们发现页面请求了一次这样的接口：<br><code>http://localhost:3000/widget?id=LocalNews&amp;ajax=json&amp;t=1526295667917</code>，接口状态 <code>404</code>。<br>这应该就是百度新闻获取<code>“本地新闻”</code>的接口，到这里一切都明白了！“本地新闻”是在页面加载后动态请求上面这个接口获取的，所以我们用<code>superagent.get()</code>请求的页面再去请求这个接口时，接口<code>URL</code>中<code>hostname</code>部分变成了本地<code>IP</code>地址，而本机上没有这个接口，所以<code>404</code>，请求不到数据。</p>\n</blockquote>\n<p><strong>找到原因，我们来想办法解决这个问题！！</strong></p>\n<blockquote>\n<ol>\n<li>直接使用<code>superagen</code>t访问正确合法的百度<code>“本地新闻”</code>的接口，获取数据后返回给前端浏览器。</li>\n<li>使用第三方<code>npm</code>包，模拟浏览器访问百度新闻首页，在这个模拟浏览器中当<code>“本地新闻”</code>加载成功后，抓取数据，返回给前端浏览器。</li>\n</ol>\n</blockquote>\n<p><strong>以上方法均可，我们来试试比较有意思的第二种方法</strong></p>\n<h3 id=\"使用Nightmare自动化测试工具\"><a href=\"#使用Nightmare自动化测试工具\" class=\"headerlink\" title=\"使用Nightmare自动化测试工具\"></a>使用<code>Nightmare</code>自动化测试工具</h3><blockquote>\n<p><code>Electron</code>可以让你使用纯<code>JavaScript</code>调用<code>Chrome</code>丰富的原生的接口来创造桌面应用。你可以把它看作一个专注于桌面应用的<code>Node.js</code>的变体，而不是<code>Web</code>服务器。其基于浏览器的应用方式可以极方便的做各种响应式的交互</p>\n</blockquote>\n<blockquote>\n<p><code>Nightmare</code>是一个基于<code>Electron</code>的框架，针对<code>Web</code>自动化测试和爬虫，因为其具有跟<code>PlantomJS</code>一样的自动化测试的功能可以在页面上模拟用户的行为触发一些异步数据加载，也可以跟<code>Request</code>库一样直接访问<code>URL</code>来抓取数据，并且可以设置页面的延迟时间，所以无论是手动触发脚本还是行为触发脚本都是轻而易举的。</p>\n</blockquote>\n<h4 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><pre><code>// 安装nightmare\nyarn add nightmare\n</code></pre><h4 id=\"为获取“本地新闻”，继续coding…\"><a href=\"#为获取“本地新闻”，继续coding…\" class=\"headerlink\" title=\"为获取“本地新闻”，继续coding…\"></a>为获取“本地新闻”，继续coding…</h4><p>给<code>index.js</code>中新增如下代码：</p>\n<pre><code>const Nightmare = require(&#39;nightmare&#39;);          // 自动化测试包，处理动态页面\nconst nightmare = Nightmare({ show: true });     // show:true  显示内置模拟浏览器\n\n/**\n * [description] - 抓取本地新闻页面\n * [nremark] - 百度本地新闻在访问页面后加载js定位IP位置后获取对应新闻，\n * 所以抓取本地新闻需要使用 nightmare 一类的自动化测试工具，\n * 模拟浏览器环境访问页面，使js运行，生成动态页面再抓取\n */\n// 抓取本地新闻页面\nnightmare\n.goto(&#39;http://news.baidu.com/&#39;)\n.wait(&quot;div#local_news&quot;)\n.evaluate(() =&gt; document.querySelector(&quot;div#local_news&quot;).innerHTML)\n.then(htmlStr =&gt; {\n  // 获取本地新闻数据\n  localNews = getLocalNews(htmlStr)\n})\n.catch(error =&gt; {\n  console.log(`本地新闻抓取失败 - ${error}`);\n})\n</code></pre><p>修改<code>getLocalNews()</code>函数为：</p>\n<pre><code>/**\n * [description]- 获取本地新闻数据\n */\nlet getLocalNews = (htmlStr) =&gt; {\n  let localNews = [];\n  let $ = cheerio.load(htmlStr);\n\n  // 本地新闻\n  $(&#39;ul#localnews-focus li a&#39;).each((idx, ele) =&gt; {\n    let news = {\n      title: $(ele).text(),\n      href: $(ele).attr(&#39;href&#39;),\n    };\n    localNews.push(news)\n  });\n\n  // 本地资讯\n  $(&#39;div#localnews-zixun ul li a&#39;).each((index, item) =&gt; {\n    let news = {\n      title: $(item).text(),\n      href: $(item).attr(&#39;href&#39;)\n    };\n    localNews.push(news);\n  });\n\n  return localNews\n}\n</code></pre><p>修改<code>app.get(&#39;/&#39;)</code>路由为：</p>\n<pre><code>/**\n * [description] - 跟路由\n */\n// 当一个get请求 http://localhost:3000时，就会后面的async函数\napp.get(&#39;/&#39;, async (req, res, next) =&gt; {\n  res.send({\n    hotNews: hotNews,\n    localNews: localNews\n  })\n});\n</code></pre><blockquote>\n<p>此时，<code>DOS</code>命令行中重新让项目跑起来，浏览器访问<code>https://localhost:3000</code>，看看页面展示的信息，看是否抓取到了<code>“本地新闻”</code>数据！</p>\n</blockquote>\n<p><strong>至此，一个简单而又完整的抓取百度新闻页面“热点新闻”和“本地新闻”的爬虫就大功告成啦！！</strong></p>\n<p><strong>最后总结一下，整体思路如下：</strong></p>\n<blockquote>\n<ol>\n<li><code>express</code>启动一个简单的<code>Http</code>服务</li>\n<li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM元</code>素</li>\n<li>使用<code>superagent</code>请求目标页面</li>\n<li><strong>动态页面（需要加载页面后运行<code>JS</code>或请求接口的页面）可以使用<code>Nightmare</code>模拟浏览器访问</strong></li>\n<li>使用<code>cheerio</code>获取页面元素，获取目标数据</li>\n</ol>\n</blockquote>\n<p>###完整代码</p>\n<blockquote>\n<p>爬虫完整代码GitHub地址：<a href=\"https://github.com/webCaolixin/news-Spider\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n</blockquote>\n<p><strong><em>后面，应该还会做一些进阶，来爬取某些网站上比较好看的图片（手动滑稽），会牵扯到<code>并发控制</code>和<code>反-反爬虫</code>的一些策略。再用爬虫取爬去一些需要登录和输入验证码的网站，欢迎到时大家关注和指正交流。</em></strong></p>"},{"title":"乐游原 - 青龙寺樱花","date":"2019-03-21T11:28:13.000Z","img":"/medias/galleries/qinglong-sakura/cover.jpg","_content":"大学母校与佛教八大宗派之一 —— 密宗祖庭，唐朝佛教真言宗祖庭的青龙寺只有两站路程，算得上是西安城内离青龙寺最近的高校，也是一种难得的缘分。然而，大学四年却未能亲身领略青龙寺的千年樱花美景。\n\n近日，稍有闲暇，与朋友一同前去，也算是弥补了往日的遗憾，再续大学四年的缘分。此次前去，是三月下旬，时间稍早，算是早春时节，樱花并未全部开放，但依然有络绎不绝的游人前来观赏，其中也不乏许多外地游客。\n\n游玩的过程中，拍得些许美丽景致，挑选其中几张满意之作，成此影集，与大家分享，也望朋友们不吝赐教。\n\n![日本垂樱-娥眉][1]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![日本垂樱-蜜蜂][2]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![樱花][3]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![樱花-阁楼][4]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![摄于西安市青龙寺][5]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![青龙寺遗址出土文物][6]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n[1]: /medias/galleries/qinglong-sakura/IMG_20190320_144732.jpg\n[2]: /medias/galleries/qinglong-sakura/IMG_20190320_145046.jpg\n[3]: /medias/galleries/qinglong-sakura/IMG_20190320_145943.jpg\n[4]: /medias/galleries/qinglong-sakura/IMG_20190320_150139.jpg\n[5]: /medias/galleries/qinglong-sakura/IMG_20190320_151655.jpg\n[6]: /medias/galleries/qinglong-sakura/IMG_20190320_160616.jpg\n\n\n<style>\n  #galleryContent img#sina-blog-img,\n  #galleryContent img#sina-blog {\n    width: auto;\n  }\n</style>","source":"_posts/qinglong-sakura.md","raw":"---\ntitle: 乐游原 - 青龙寺樱花\ndate: 2019-03-21 19:28:13\ncategories: 影集\ntags: 青龙寺(影集)\nimg: /medias/galleries/qinglong-sakura/cover.jpg\n---\n大学母校与佛教八大宗派之一 —— 密宗祖庭，唐朝佛教真言宗祖庭的青龙寺只有两站路程，算得上是西安城内离青龙寺最近的高校，也是一种难得的缘分。然而，大学四年却未能亲身领略青龙寺的千年樱花美景。\n\n近日，稍有闲暇，与朋友一同前去，也算是弥补了往日的遗憾，再续大学四年的缘分。此次前去，是三月下旬，时间稍早，算是早春时节，樱花并未全部开放，但依然有络绎不绝的游人前来观赏，其中也不乏许多外地游客。\n\n游玩的过程中，拍得些许美丽景致，挑选其中几张满意之作，成此影集，与大家分享，也望朋友们不吝赐教。\n\n![日本垂樱-娥眉][1]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![日本垂樱-蜜蜂][2]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![樱花][3]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![樱花-阁楼][4]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![摄于西安市青龙寺][5]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n![青龙寺遗址出土文物][6]\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n[1]: /medias/galleries/qinglong-sakura/IMG_20190320_144732.jpg\n[2]: /medias/galleries/qinglong-sakura/IMG_20190320_145046.jpg\n[3]: /medias/galleries/qinglong-sakura/IMG_20190320_145943.jpg\n[4]: /medias/galleries/qinglong-sakura/IMG_20190320_150139.jpg\n[5]: /medias/galleries/qinglong-sakura/IMG_20190320_151655.jpg\n[6]: /medias/galleries/qinglong-sakura/IMG_20190320_160616.jpg\n\n\n<style>\n  #galleryContent img#sina-blog-img,\n  #galleryContent img#sina-blog {\n    width: auto;\n  }\n</style>","slug":"qinglong-sakura","published":1,"updated":"2019-05-19T11:31:34.885Z","_id":"cjvuu4mvn00229kvbtrox0vgg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>大学母校与佛教八大宗派之一 —— 密宗祖庭，唐朝佛教真言宗祖庭的青龙寺只有两站路程，算得上是西安城内离青龙寺最近的高校，也是一种难得的缘分。然而，大学四年却未能亲身领略青龙寺的千年樱花美景。</p>\n<p>近日，稍有闲暇，与朋友一同前去，也算是弥补了往日的遗憾，再续大学四年的缘分。此次前去，是三月下旬，时间稍早，算是早春时节，樱花并未全部开放，但依然有络绎不绝的游人前来观赏，其中也不乏许多外地游客。</p>\n<p>游玩的过程中，拍得些许美丽景致，挑选其中几张满意之作，成此影集，与大家分享，也望朋友们不吝赐教。</p>\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_144732.jpg\" alt=\"日本垂樱-娥眉\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_145046.jpg\" alt=\"日本垂樱-蜜蜂\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_145943.jpg\" alt=\"樱花\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_150139.jpg\" alt=\"樱花-阁楼\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_151655.jpg\" alt=\"摄于西安市青龙寺\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_160616.jpg\" alt=\"青龙寺遗址出土文物\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<style>\n  #galleryContent img#sina-blog-img,\n  #galleryContent img#sina-blog {\n    width: auto;\n  }\n</style>","site":{"data":{}},"excerpt":"","more":"<p>大学母校与佛教八大宗派之一 —— 密宗祖庭，唐朝佛教真言宗祖庭的青龙寺只有两站路程，算得上是西安城内离青龙寺最近的高校，也是一种难得的缘分。然而，大学四年却未能亲身领略青龙寺的千年樱花美景。</p>\n<p>近日，稍有闲暇，与朋友一同前去，也算是弥补了往日的遗憾，再续大学四年的缘分。此次前去，是三月下旬，时间稍早，算是早春时节，樱花并未全部开放，但依然有络绎不绝的游人前来观赏，其中也不乏许多外地游客。</p>\n<p>游玩的过程中，拍得些许美丽景致，挑选其中几张满意之作，成此影集，与大家分享，也望朋友们不吝赐教。</p>\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_144732.jpg\" alt=\"日本垂樱-娥眉\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_145046.jpg\" alt=\"日本垂樱-蜜蜂\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_145943.jpg\" alt=\"樱花\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_150139.jpg\" alt=\"樱花-阁楼\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_151655.jpg\" alt=\"摄于西安市青龙寺\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<p><img src=\"/medias/galleries/qinglong-sakura/IMG_20190320_160616.jpg\" alt=\"青龙寺遗址出土文物\"></p>\n<div class=\"gallery-tip-ceter\">2019.03.20-摄于西安市青龙寺</div>\n\n<style>\n  #galleryContent img#sina-blog-img,\n  #galleryContent img#sina-blog {\n    width: auto;\n  }\n</style>"},{"title":"一篇2016年的随想","date":"2018-08-01T06:47:00.000Z","_content":"\n### 序言\n这篇随想，其实不是近期的作品，实际写于2016年9月6日。当时的我还在读大三，按照学校的教学安排，那个时候需要进行生产实习，两种选择 —— 参加学校组织的或者自己找实习工作。我自己找了一家本地的互联网公司去实习，做前端开发工作，这也是真正意义上的第一份工作，这篇随想就写于实习期间。\n\n当时的我刚开始尝试着从一个学生向一个职场IT工作者转变。说实话，并不是很顺利，自己也很不适应，所以那一阵子很煎熬，对未来正式工作也产生了迷茫。主要的原因是很多工作上和技术上的要求在学校学到的还差得很远，工作的环境氛围、压力和自己之前预想的、准备的差距较大，所以一时半会儿不太适应，当时也比较焦虑。实习期间，我一直住在学校宿舍，一天下班后，路过熟悉的校园，回想起过去近三年的大学生活，走在一条昏暗的小路上，突然有了一些感慨，回去就顺手写下了这篇随想。\n\n![random-thoughts-1插图][1]\n<center>图片摄于2016年07月15日-西安理工大学金花校区</center>\n\n### 正文\n<div id=\"content-ctn\"><div class=\"center-content\">\n  每个夜晚，\n  他都会向影子招手，\n  与草木问好，\n  昏暗幽静的小路上，\n  铺满一层层的煎熬与落寞。\n  他步伐缓慢，\n  一次次回望，\n  望见身后的挣扎先生，\n  神情依旧，\n  同样迈着缓缓的步子，\n  时不时也无奈地回头看。\n  一转身，\n  却又被自己撞到。\n  撞乱了春秋冬夏，\n  撞散了意念魂灵。\n\n  <span class=\"date\">—— 2016.09.06</span>\n</div></div>\n\n[1]: /medias/article/random-thoughts/plates-1.jpg","source":"_posts/random-thoughts-1.md","raw":"---\ntitle: 一篇2016年的随想\ndate: 2018-08-01 14:47:00\ncategories: 随想\ntags: 朝花夕拾\n---\n\n### 序言\n这篇随想，其实不是近期的作品，实际写于2016年9月6日。当时的我还在读大三，按照学校的教学安排，那个时候需要进行生产实习，两种选择 —— 参加学校组织的或者自己找实习工作。我自己找了一家本地的互联网公司去实习，做前端开发工作，这也是真正意义上的第一份工作，这篇随想就写于实习期间。\n\n当时的我刚开始尝试着从一个学生向一个职场IT工作者转变。说实话，并不是很顺利，自己也很不适应，所以那一阵子很煎熬，对未来正式工作也产生了迷茫。主要的原因是很多工作上和技术上的要求在学校学到的还差得很远，工作的环境氛围、压力和自己之前预想的、准备的差距较大，所以一时半会儿不太适应，当时也比较焦虑。实习期间，我一直住在学校宿舍，一天下班后，路过熟悉的校园，回想起过去近三年的大学生活，走在一条昏暗的小路上，突然有了一些感慨，回去就顺手写下了这篇随想。\n\n![random-thoughts-1插图][1]\n<center>图片摄于2016年07月15日-西安理工大学金花校区</center>\n\n### 正文\n<div id=\"content-ctn\"><div class=\"center-content\">\n  每个夜晚，\n  他都会向影子招手，\n  与草木问好，\n  昏暗幽静的小路上，\n  铺满一层层的煎熬与落寞。\n  他步伐缓慢，\n  一次次回望，\n  望见身后的挣扎先生，\n  神情依旧，\n  同样迈着缓缓的步子，\n  时不时也无奈地回头看。\n  一转身，\n  却又被自己撞到。\n  撞乱了春秋冬夏，\n  撞散了意念魂灵。\n\n  <span class=\"date\">—— 2016.09.06</span>\n</div></div>\n\n[1]: /medias/article/random-thoughts/plates-1.jpg","slug":"random-thoughts-1","published":1,"updated":"2019-05-19T10:54:58.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mvs00259kvbz5ct8rgb","content":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>这篇随想，其实不是近期的作品，实际写于2016年9月6日。当时的我还在读大三，按照学校的教学安排，那个时候需要进行生产实习，两种选择 —— 参加学校组织的或者自己找实习工作。我自己找了一家本地的互联网公司去实习，做前端开发工作，这也是真正意义上的第一份工作，这篇随想就写于实习期间。</p>\n<p>当时的我刚开始尝试着从一个学生向一个职场IT工作者转变。说实话，并不是很顺利，自己也很不适应，所以那一阵子很煎熬，对未来正式工作也产生了迷茫。主要的原因是很多工作上和技术上的要求在学校学到的还差得很远，工作的环境氛围、压力和自己之前预想的、准备的差距较大，所以一时半会儿不太适应，当时也比较焦虑。实习期间，我一直住在学校宿舍，一天下班后，路过熟悉的校园，回想起过去近三年的大学生活，走在一条昏暗的小路上，突然有了一些感慨，回去就顺手写下了这篇随想。</p>\n<p><img src=\"/medias/article/random-thoughts/plates-1.jpg\" alt=\"random-thoughts-1插图\"></p>\n<center>图片摄于2016年07月15日-西安理工大学金花校区</center>\n\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><div id=\"content-ctn\"><div class=\"center-content\"><br>  每个夜晚，<br>  他都会向影子招手，<br>  与草木问好，<br>  昏暗幽静的小路上，<br>  铺满一层层的煎熬与落寞。<br>  他步伐缓慢，<br>  一次次回望，<br>  望见身后的挣扎先生，<br>  神情依旧，<br>  同样迈着缓缓的步子，<br>  时不时也无奈地回头看。<br>  一转身，<br>  却又被自己撞到。<br>  撞乱了春秋冬夏，<br>  撞散了意念魂灵。<br><br>  <span class=\"date\">—— 2016.09.06</span><br></div></div>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>这篇随想，其实不是近期的作品，实际写于2016年9月6日。当时的我还在读大三，按照学校的教学安排，那个时候需要进行生产实习，两种选择 —— 参加学校组织的或者自己找实习工作。我自己找了一家本地的互联网公司去实习，做前端开发工作，这也是真正意义上的第一份工作，这篇随想就写于实习期间。</p>\n<p>当时的我刚开始尝试着从一个学生向一个职场IT工作者转变。说实话，并不是很顺利，自己也很不适应，所以那一阵子很煎熬，对未来正式工作也产生了迷茫。主要的原因是很多工作上和技术上的要求在学校学到的还差得很远，工作的环境氛围、压力和自己之前预想的、准备的差距较大，所以一时半会儿不太适应，当时也比较焦虑。实习期间，我一直住在学校宿舍，一天下班后，路过熟悉的校园，回想起过去近三年的大学生活，走在一条昏暗的小路上，突然有了一些感慨，回去就顺手写下了这篇随想。</p>\n<p><img src=\"/medias/article/random-thoughts/plates-1.jpg\" alt=\"random-thoughts-1插图\"></p>\n<center>图片摄于2016年07月15日-西安理工大学金花校区</center>\n\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><div id=\"content-ctn\"><div class=\"center-content\"><br>  每个夜晚，<br>  他都会向影子招手，<br>  与草木问好，<br>  昏暗幽静的小路上，<br>  铺满一层层的煎熬与落寞。<br>  他步伐缓慢，<br>  一次次回望，<br>  望见身后的挣扎先生，<br>  神情依旧，<br>  同样迈着缓缓的步子，<br>  时不时也无奈地回头看。<br>  一转身，<br>  却又被自己撞到。<br>  撞乱了春秋冬夏，<br>  撞散了意念魂灵。<br><br>  <span class=\"date\">—— 2016.09.06</span><br></div></div>\n\n"},{"title":"愿你拥有“太阳”，亦拥有“繁星”","date":"2018-08-20T14:27:18.000Z","_content":"\n近来在网上读到一段话，很是触动。网上标注这段话出自英国著名女作家，2007年诺贝尔文学奖获得者[**多丽丝·莱莘**](https://baike.baidu.com/item/%E5%A4%9A%E4%B8%BD%E4%B8%9D%C2%B7%E8%8E%B1%E8%BE%9B/8307879?fromtitle=%E8%8E%B1%E8%BE%9B&fromid=13350458&fr=aladdin)的长篇小说[**《幸存者回忆录》**](https://baike.baidu.com/item/%E5%B9%B8%E5%AD%98%E8%80%85%E5%9B%9E%E5%BF%86%E5%BD%95)，我粗略地阅读原著后并未在文中找到这段话，但可以肯定的是这段话确实出自莱莘笔下。进来，计划通读此书，再对以上话语作出最后定论。\n\n![幸存者回忆录][1]\n\n不论最终结论肯定与否，最重要的是，这段话的内容，值得每一个读到他的人深思。原文如下所言：\n\n<!--more-->\n\n>做孩子的时候，感到无聊，盼望着长大。长大后，又向往返回童年。 \n>我们浪费自己的健康，去赢得个人的财富,\n>然后又浪费自己的财富去重建自己的健康。\n>**我们焦虑地憧憬着未来，忘记了眼前的生活，**\n>**活得既不是为了现在，也不是为了未来。**\n>**我们活得似乎永远不会死，我们死得好像从来没活过。**\n\n文中最后两句话，尤其触动我的内心。私以为，这两句话一针见血地、深刻地总结了很多人的生活方式和生活意义。莱莘，英国人，都说艺术源于生活但高于生活，我倒觉得，文中的话用来描述很多人的生活和生命历程也是再贴切不过了。\n\n我们拼命地奔波，没日没夜的工作，放弃了休息团聚，忘记了春夏秋冬，看不到世界的“千里丹青”...... 我们苦苦追求，追求心中“向往的生活”。认为这只要现在“拼命”，以后就能过上想要的日子，就不用再“受罪”。我们总觉得来日方长，此时苦点儿没什么，以后“赢了”总有机会享受，好日子还在后头。可到后来，慢慢的，我们发现脖子不好了，腰不好了，胃不好了，血糖高了，血压也高了...... 迫不得已，再用浪费健康换得的为数不多的财富支付昂贵的医药费去重建自己的健康，之后再因为巨额的花销更加“拼命”...... 就这样，一直“乐此不疲”、“义无反顾”地走在这个“死循环”里。`我们活得似乎永远不会死`。\n\n到最后回首往昔，这一路走来却艰辛无比，我们反而失去很多，陪家人的时间少了，挚友少了，感情淡了，思考的时间少了，欢声笑语少了，甚至浪费了健康，却未见赢得多少财富，“好日子”似乎依旧遥遥无期。其实，我们忽略了一点，**并非生活没有变好，也不是努力没有意义，真正在于需求与欲望也同样在膨胀，而且远远快于你努力的速度。**于是，我们变得焦虑，焦虑于现在的不如人意，焦虑于将来可能的“不堪”，渐渐地忘记了眼前的生活。这样的生活，`活得既不是为了现在，也不是为了未来`。直到将要“告别”的时候，一切走到尽头，才恍然发现，我们没留下多少，更没有带走什么，`我们死得好像从来没活过`。真正的悲哀，莫过于此......\n\n[**泰戈尔**](https://baike.baidu.com/item/%E6%8B%89%E5%AE%BE%E5%BE%B7%E6%8B%89%E7%BA%B3%E7%89%B9%C2%B7%E6%B3%B0%E6%88%88%E5%B0%94/490458?fromtitle=%E6%B3%B0%E6%88%88%E5%B0%94&fromid=189375&fr=aladdin)在[**《飞鸟集》**](https://baike.baidu.com/item/%E9%A3%9E%E9%B8%9F%E9%9B%86/732033?fr=aladdin)中有一首脍炙人口又富含哲理的诗：\n\n>**如果你因错过太阳而哭泣，那么你也将失去繁星。**\n\n作者在洞察自然的同时用妙笔告诫人们：不要过分悲伤于错过的美好，珍惜眼前。短短二十几言，告诉了我们失与得联系，告诉我们化失望为希望，化悲伤为幸福的方法。而莱莘的文字中，正好描写了“铜币的另一面”——我们不仅错过了“太阳”，我们也失去了“繁星”。\n\n[**大冰**](https://baike.baidu.com/item/%E5%A4%A7%E5%86%B0/349069?fr=aladdin)在[**《乖，摸摸头》**](https://baike.baidu.com/item/%E4%B9%96%EF%BC%8C%E6%91%B8%E6%91%B8%E5%A4%B4/15817286)如是说 ：\n\n>**你我都明白，这从来就不是公平的世界。人们起点不同，路径不同，乃至遭遇不同，命运不同。有人认命，有人顺命，有人抗命，有人玩命，希望和失望交错而生，倏尔一生。**\n\n短短的一生中，有的人真正意义上获得的只是短暂的欣喜，更多的却是长久的自我煎熬。愿你的生活，与之相反，愿你拥有“太阳”，亦拥有璀璨的“繁星”。\n\n\n[1]: /medias/article/random-thoughts/The-Mcmoirs-of-a-Survivor.jpg","source":"_posts/random-thoughts-2.md","raw":"---\ntitle: 愿你拥有“太阳”，亦拥有“繁星”\ndate: 2018-08-20 22:27:18\ncategories: 随想\ntags: 阅读感悟\n---\n\n近来在网上读到一段话，很是触动。网上标注这段话出自英国著名女作家，2007年诺贝尔文学奖获得者[**多丽丝·莱莘**](https://baike.baidu.com/item/%E5%A4%9A%E4%B8%BD%E4%B8%9D%C2%B7%E8%8E%B1%E8%BE%9B/8307879?fromtitle=%E8%8E%B1%E8%BE%9B&fromid=13350458&fr=aladdin)的长篇小说[**《幸存者回忆录》**](https://baike.baidu.com/item/%E5%B9%B8%E5%AD%98%E8%80%85%E5%9B%9E%E5%BF%86%E5%BD%95)，我粗略地阅读原著后并未在文中找到这段话，但可以肯定的是这段话确实出自莱莘笔下。进来，计划通读此书，再对以上话语作出最后定论。\n\n![幸存者回忆录][1]\n\n不论最终结论肯定与否，最重要的是，这段话的内容，值得每一个读到他的人深思。原文如下所言：\n\n<!--more-->\n\n>做孩子的时候，感到无聊，盼望着长大。长大后，又向往返回童年。 \n>我们浪费自己的健康，去赢得个人的财富,\n>然后又浪费自己的财富去重建自己的健康。\n>**我们焦虑地憧憬着未来，忘记了眼前的生活，**\n>**活得既不是为了现在，也不是为了未来。**\n>**我们活得似乎永远不会死，我们死得好像从来没活过。**\n\n文中最后两句话，尤其触动我的内心。私以为，这两句话一针见血地、深刻地总结了很多人的生活方式和生活意义。莱莘，英国人，都说艺术源于生活但高于生活，我倒觉得，文中的话用来描述很多人的生活和生命历程也是再贴切不过了。\n\n我们拼命地奔波，没日没夜的工作，放弃了休息团聚，忘记了春夏秋冬，看不到世界的“千里丹青”...... 我们苦苦追求，追求心中“向往的生活”。认为这只要现在“拼命”，以后就能过上想要的日子，就不用再“受罪”。我们总觉得来日方长，此时苦点儿没什么，以后“赢了”总有机会享受，好日子还在后头。可到后来，慢慢的，我们发现脖子不好了，腰不好了，胃不好了，血糖高了，血压也高了...... 迫不得已，再用浪费健康换得的为数不多的财富支付昂贵的医药费去重建自己的健康，之后再因为巨额的花销更加“拼命”...... 就这样，一直“乐此不疲”、“义无反顾”地走在这个“死循环”里。`我们活得似乎永远不会死`。\n\n到最后回首往昔，这一路走来却艰辛无比，我们反而失去很多，陪家人的时间少了，挚友少了，感情淡了，思考的时间少了，欢声笑语少了，甚至浪费了健康，却未见赢得多少财富，“好日子”似乎依旧遥遥无期。其实，我们忽略了一点，**并非生活没有变好，也不是努力没有意义，真正在于需求与欲望也同样在膨胀，而且远远快于你努力的速度。**于是，我们变得焦虑，焦虑于现在的不如人意，焦虑于将来可能的“不堪”，渐渐地忘记了眼前的生活。这样的生活，`活得既不是为了现在，也不是为了未来`。直到将要“告别”的时候，一切走到尽头，才恍然发现，我们没留下多少，更没有带走什么，`我们死得好像从来没活过`。真正的悲哀，莫过于此......\n\n[**泰戈尔**](https://baike.baidu.com/item/%E6%8B%89%E5%AE%BE%E5%BE%B7%E6%8B%89%E7%BA%B3%E7%89%B9%C2%B7%E6%B3%B0%E6%88%88%E5%B0%94/490458?fromtitle=%E6%B3%B0%E6%88%88%E5%B0%94&fromid=189375&fr=aladdin)在[**《飞鸟集》**](https://baike.baidu.com/item/%E9%A3%9E%E9%B8%9F%E9%9B%86/732033?fr=aladdin)中有一首脍炙人口又富含哲理的诗：\n\n>**如果你因错过太阳而哭泣，那么你也将失去繁星。**\n\n作者在洞察自然的同时用妙笔告诫人们：不要过分悲伤于错过的美好，珍惜眼前。短短二十几言，告诉了我们失与得联系，告诉我们化失望为希望，化悲伤为幸福的方法。而莱莘的文字中，正好描写了“铜币的另一面”——我们不仅错过了“太阳”，我们也失去了“繁星”。\n\n[**大冰**](https://baike.baidu.com/item/%E5%A4%A7%E5%86%B0/349069?fr=aladdin)在[**《乖，摸摸头》**](https://baike.baidu.com/item/%E4%B9%96%EF%BC%8C%E6%91%B8%E6%91%B8%E5%A4%B4/15817286)如是说 ：\n\n>**你我都明白，这从来就不是公平的世界。人们起点不同，路径不同，乃至遭遇不同，命运不同。有人认命，有人顺命，有人抗命，有人玩命，希望和失望交错而生，倏尔一生。**\n\n短短的一生中，有的人真正意义上获得的只是短暂的欣喜，更多的却是长久的自我煎熬。愿你的生活，与之相反，愿你拥有“太阳”，亦拥有璀璨的“繁星”。\n\n\n[1]: /medias/article/random-thoughts/The-Mcmoirs-of-a-Survivor.jpg","slug":"random-thoughts-2","published":1,"updated":"2018-12-17T16:37:49.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mvw00289kvbeste4nj3","content":"<p>近来在网上读到一段话，很是触动。网上标注这段话出自英国著名女作家，2007年诺贝尔文学奖获得者<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E4%B8%BD%E4%B8%9D%C2%B7%E8%8E%B1%E8%BE%9B/8307879?fromtitle=%E8%8E%B1%E8%BE%9B&amp;fromid=13350458&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong>多丽丝·莱莘</strong></a>的长篇小说<a href=\"https://baike.baidu.com/item/%E5%B9%B8%E5%AD%98%E8%80%85%E5%9B%9E%E5%BF%86%E5%BD%95\" target=\"_blank\" rel=\"noopener\"><strong>《幸存者回忆录》</strong></a>，我粗略地阅读原著后并未在文中找到这段话，但可以肯定的是这段话确实出自莱莘笔下。进来，计划通读此书，再对以上话语作出最后定论。</p>\n<p><img src=\"/medias/article/random-thoughts/The-Mcmoirs-of-a-Survivor.jpg\" alt=\"幸存者回忆录\"></p>\n<p>不论最终结论肯定与否，最重要的是，这段话的内容，值得每一个读到他的人深思。原文如下所言：</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>做孩子的时候，感到无聊，盼望着长大。长大后，又向往返回童年。<br>我们浪费自己的健康，去赢得个人的财富,<br>然后又浪费自己的财富去重建自己的健康。<br><strong>我们焦虑地憧憬着未来，忘记了眼前的生活，</strong><br><strong>活得既不是为了现在，也不是为了未来。</strong><br><strong>我们活得似乎永远不会死，我们死得好像从来没活过。</strong></p>\n</blockquote>\n<p>文中最后两句话，尤其触动我的内心。私以为，这两句话一针见血地、深刻地总结了很多人的生活方式和生活意义。莱莘，英国人，都说艺术源于生活但高于生活，我倒觉得，文中的话用来描述很多人的生活和生命历程也是再贴切不过了。</p>\n<p>我们拼命地奔波，没日没夜的工作，放弃了休息团聚，忘记了春夏秋冬，看不到世界的“千里丹青”…… 我们苦苦追求，追求心中“向往的生活”。认为这只要现在“拼命”，以后就能过上想要的日子，就不用再“受罪”。我们总觉得来日方长，此时苦点儿没什么，以后“赢了”总有机会享受，好日子还在后头。可到后来，慢慢的，我们发现脖子不好了，腰不好了，胃不好了，血糖高了，血压也高了…… 迫不得已，再用浪费健康换得的为数不多的财富支付昂贵的医药费去重建自己的健康，之后再因为巨额的花销更加“拼命”…… 就这样，一直“乐此不疲”、“义无反顾”地走在这个“死循环”里。<code>我们活得似乎永远不会死</code>。</p>\n<p>到最后回首往昔，这一路走来却艰辛无比，我们反而失去很多，陪家人的时间少了，挚友少了，感情淡了，思考的时间少了，欢声笑语少了，甚至浪费了健康，却未见赢得多少财富，“好日子”似乎依旧遥遥无期。其实，我们忽略了一点，<strong>并非生活没有变好，也不是努力没有意义，真正在于需求与欲望也同样在膨胀，而且远远快于你努力的速度。</strong>于是，我们变得焦虑，焦虑于现在的不如人意，焦虑于将来可能的“不堪”，渐渐地忘记了眼前的生活。这样的生活，<code>活得既不是为了现在，也不是为了未来</code>。直到将要“告别”的时候，一切走到尽头，才恍然发现，我们没留下多少，更没有带走什么，<code>我们死得好像从来没活过</code>。真正的悲哀，莫过于此……</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%8B%89%E5%AE%BE%E5%BE%B7%E6%8B%89%E7%BA%B3%E7%89%B9%C2%B7%E6%B3%B0%E6%88%88%E5%B0%94/490458?fromtitle=%E6%B3%B0%E6%88%88%E5%B0%94&amp;fromid=189375&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong>泰戈尔</strong></a>在<a href=\"https://baike.baidu.com/item/%E9%A3%9E%E9%B8%9F%E9%9B%86/732033?fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong>《飞鸟集》</strong></a>中有一首脍炙人口又富含哲理的诗：</p>\n<blockquote>\n<p><strong>如果你因错过太阳而哭泣，那么你也将失去繁星。</strong></p>\n</blockquote>\n<p>作者在洞察自然的同时用妙笔告诫人们：不要过分悲伤于错过的美好，珍惜眼前。短短二十几言，告诉了我们失与得联系，告诉我们化失望为希望，化悲伤为幸福的方法。而莱莘的文字中，正好描写了“铜币的另一面”——我们不仅错过了“太阳”，我们也失去了“繁星”。</p>\n<p><a href=\"https://baike.baidu.com/item/%E5%A4%A7%E5%86%B0/349069?fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong>大冰</strong></a>在<a href=\"https://baike.baidu.com/item/%E4%B9%96%EF%BC%8C%E6%91%B8%E6%91%B8%E5%A4%B4/15817286\" target=\"_blank\" rel=\"noopener\"><strong>《乖，摸摸头》</strong></a>如是说 ：</p>\n<blockquote>\n<p><strong>你我都明白，这从来就不是公平的世界。人们起点不同，路径不同，乃至遭遇不同，命运不同。有人认命，有人顺命，有人抗命，有人玩命，希望和失望交错而生，倏尔一生。</strong></p>\n</blockquote>\n<p>短短的一生中，有的人真正意义上获得的只是短暂的欣喜，更多的却是长久的自我煎熬。愿你的生活，与之相反，愿你拥有“太阳”，亦拥有璀璨的“繁星”。</p>\n","site":{"data":{}},"excerpt":"<p>近来在网上读到一段话，很是触动。网上标注这段话出自英国著名女作家，2007年诺贝尔文学奖获得者<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E4%B8%BD%E4%B8%9D%C2%B7%E8%8E%B1%E8%BE%9B/8307879?fromtitle=%E8%8E%B1%E8%BE%9B&amp;fromid=13350458&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong>多丽丝·莱莘</strong></a>的长篇小说<a href=\"https://baike.baidu.com/item/%E5%B9%B8%E5%AD%98%E8%80%85%E5%9B%9E%E5%BF%86%E5%BD%95\" target=\"_blank\" rel=\"noopener\"><strong>《幸存者回忆录》</strong></a>，我粗略地阅读原著后并未在文中找到这段话，但可以肯定的是这段话确实出自莱莘笔下。进来，计划通读此书，再对以上话语作出最后定论。</p>\n<p><img src=\"/medias/article/random-thoughts/The-Mcmoirs-of-a-Survivor.jpg\" alt=\"幸存者回忆录\"></p>\n<p>不论最终结论肯定与否，最重要的是，这段话的内容，值得每一个读到他的人深思。原文如下所言：</p>","more":"<blockquote>\n<p>做孩子的时候，感到无聊，盼望着长大。长大后，又向往返回童年。<br>我们浪费自己的健康，去赢得个人的财富,<br>然后又浪费自己的财富去重建自己的健康。<br><strong>我们焦虑地憧憬着未来，忘记了眼前的生活，</strong><br><strong>活得既不是为了现在，也不是为了未来。</strong><br><strong>我们活得似乎永远不会死，我们死得好像从来没活过。</strong></p>\n</blockquote>\n<p>文中最后两句话，尤其触动我的内心。私以为，这两句话一针见血地、深刻地总结了很多人的生活方式和生活意义。莱莘，英国人，都说艺术源于生活但高于生活，我倒觉得，文中的话用来描述很多人的生活和生命历程也是再贴切不过了。</p>\n<p>我们拼命地奔波，没日没夜的工作，放弃了休息团聚，忘记了春夏秋冬，看不到世界的“千里丹青”…… 我们苦苦追求，追求心中“向往的生活”。认为这只要现在“拼命”，以后就能过上想要的日子，就不用再“受罪”。我们总觉得来日方长，此时苦点儿没什么，以后“赢了”总有机会享受，好日子还在后头。可到后来，慢慢的，我们发现脖子不好了，腰不好了，胃不好了，血糖高了，血压也高了…… 迫不得已，再用浪费健康换得的为数不多的财富支付昂贵的医药费去重建自己的健康，之后再因为巨额的花销更加“拼命”…… 就这样，一直“乐此不疲”、“义无反顾”地走在这个“死循环”里。<code>我们活得似乎永远不会死</code>。</p>\n<p>到最后回首往昔，这一路走来却艰辛无比，我们反而失去很多，陪家人的时间少了，挚友少了，感情淡了，思考的时间少了，欢声笑语少了，甚至浪费了健康，却未见赢得多少财富，“好日子”似乎依旧遥遥无期。其实，我们忽略了一点，<strong>并非生活没有变好，也不是努力没有意义，真正在于需求与欲望也同样在膨胀，而且远远快于你努力的速度。</strong>于是，我们变得焦虑，焦虑于现在的不如人意，焦虑于将来可能的“不堪”，渐渐地忘记了眼前的生活。这样的生活，<code>活得既不是为了现在，也不是为了未来</code>。直到将要“告别”的时候，一切走到尽头，才恍然发现，我们没留下多少，更没有带走什么，<code>我们死得好像从来没活过</code>。真正的悲哀，莫过于此……</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%8B%89%E5%AE%BE%E5%BE%B7%E6%8B%89%E7%BA%B3%E7%89%B9%C2%B7%E6%B3%B0%E6%88%88%E5%B0%94/490458?fromtitle=%E6%B3%B0%E6%88%88%E5%B0%94&amp;fromid=189375&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong>泰戈尔</strong></a>在<a href=\"https://baike.baidu.com/item/%E9%A3%9E%E9%B8%9F%E9%9B%86/732033?fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong>《飞鸟集》</strong></a>中有一首脍炙人口又富含哲理的诗：</p>\n<blockquote>\n<p><strong>如果你因错过太阳而哭泣，那么你也将失去繁星。</strong></p>\n</blockquote>\n<p>作者在洞察自然的同时用妙笔告诫人们：不要过分悲伤于错过的美好，珍惜眼前。短短二十几言，告诉了我们失与得联系，告诉我们化失望为希望，化悲伤为幸福的方法。而莱莘的文字中，正好描写了“铜币的另一面”——我们不仅错过了“太阳”，我们也失去了“繁星”。</p>\n<p><a href=\"https://baike.baidu.com/item/%E5%A4%A7%E5%86%B0/349069?fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong>大冰</strong></a>在<a href=\"https://baike.baidu.com/item/%E4%B9%96%EF%BC%8C%E6%91%B8%E6%91%B8%E5%A4%B4/15817286\" target=\"_blank\" rel=\"noopener\"><strong>《乖，摸摸头》</strong></a>如是说 ：</p>\n<blockquote>\n<p><strong>你我都明白，这从来就不是公平的世界。人们起点不同，路径不同，乃至遭遇不同，命运不同。有人认命，有人顺命，有人抗命，有人玩命，希望和失望交错而生，倏尔一生。</strong></p>\n</blockquote>\n<p>短短的一生中，有的人真正意义上获得的只是短暂的欣喜，更多的却是长久的自我煎熬。愿你的生活，与之相反，愿你拥有“太阳”，亦拥有璀璨的“繁星”。</p>"},{"title":"黄昏街头","date":"2019-05-19T10:06:52.000Z","img":"/medias/article/featureimages/dusk-street.jpg","_content":"\n### 序言\n> 这篇随想，写于2016年6月，当时我还在读大三。在晚饭之后，听着李健的[《风吹黄昏》](https://y.qq.com/n/yqq/song/004IkkOh2SGnq0.html)，因为歌词内容极具画面感和代入感，曲终，便有感而发，融入部分歌曲中的歌词，写下这篇随想。最近在整理电脑文件时，发现了当时留下来的电子版。整理到博客中，和大家分享。文笔有限，也欢迎大家探讨指教。\n\n### 正文\n<div id=\"content-ctn\"><div class=\"center-content\">\n  **黄昏街头**\n\n  在黄昏街头\n  我曾看到他\n  一个孤单的人\n  他脊背弓弯\n  形只影单\n\n  有人说\n  他在等待他的爱人\n  可他孤独多年\n  有人说\n  他在寻找他的孩子\n  找了许多年\n\n  在黄昏街头\n  我又看到他\n  一个苍老的人\n  他行动迟缓\n  步履蹒跚\n\n  谁知道，他是谁\n  谁知道，他去向哪里\n  他神色黯然\n  双眼充满期盼\n  向风中呼唤\n\n  在黄昏街头\n  我常看他到\n  一个失落的人\n  他自言自语\n  神色依然\n\n  突然间\n  狂风暴雨\n  风沙漫天\n  可他\n  表情淡然\n  心无波澜\n\n  又是个黄昏\n  我未看到他\n  那个恍惚的老人\n  人们赶路匆匆\n  时间依旧流转\n  他却不在出现\n\n  <span class=\"date\">—— 2016.06.28</span>\n</div></div>","source":"_posts/the-dusk-street.md","raw":"---\ntitle: 黄昏街头\ndate: 2019-05-19 18:06:52\ncategories: 随想\ntags: 朝花夕拾\nimg: /medias/article/featureimages/dusk-street.jpg\n---\n\n### 序言\n> 这篇随想，写于2016年6月，当时我还在读大三。在晚饭之后，听着李健的[《风吹黄昏》](https://y.qq.com/n/yqq/song/004IkkOh2SGnq0.html)，因为歌词内容极具画面感和代入感，曲终，便有感而发，融入部分歌曲中的歌词，写下这篇随想。最近在整理电脑文件时，发现了当时留下来的电子版。整理到博客中，和大家分享。文笔有限，也欢迎大家探讨指教。\n\n### 正文\n<div id=\"content-ctn\"><div class=\"center-content\">\n  **黄昏街头**\n\n  在黄昏街头\n  我曾看到他\n  一个孤单的人\n  他脊背弓弯\n  形只影单\n\n  有人说\n  他在等待他的爱人\n  可他孤独多年\n  有人说\n  他在寻找他的孩子\n  找了许多年\n\n  在黄昏街头\n  我又看到他\n  一个苍老的人\n  他行动迟缓\n  步履蹒跚\n\n  谁知道，他是谁\n  谁知道，他去向哪里\n  他神色黯然\n  双眼充满期盼\n  向风中呼唤\n\n  在黄昏街头\n  我常看他到\n  一个失落的人\n  他自言自语\n  神色依然\n\n  突然间\n  狂风暴雨\n  风沙漫天\n  可他\n  表情淡然\n  心无波澜\n\n  又是个黄昏\n  我未看到他\n  那个恍惚的老人\n  人们赶路匆匆\n  时间依旧流转\n  他却不在出现\n\n  <span class=\"date\">—— 2016.06.28</span>\n</div></div>","slug":"the-dusk-street","published":1,"updated":"2019-05-19T12:10:37.081Z","_id":"cjvuu4mw0002b9kvbbqv3v2hw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><blockquote>\n<p>这篇随想，写于2016年6月，当时我还在读大三。在晚饭之后，听着李健的<a href=\"https://y.qq.com/n/yqq/song/004IkkOh2SGnq0.html\" target=\"_blank\" rel=\"noopener\">《风吹黄昏》</a>，因为歌词内容极具画面感和代入感，曲终，便有感而发，融入部分歌曲中的歌词，写下这篇随想。最近在整理电脑文件时，发现了当时留下来的电子版。整理到博客中，和大家分享。文笔有限，也欢迎大家探讨指教。</p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><div id=\"content-ctn\"><div class=\"center-content\"><br>  <strong>黄昏街头</strong><br><br>  在黄昏街头<br>  我曾看到他<br>  一个孤单的人<br>  他脊背弓弯<br>  形只影单<br><br>  有人说<br>  他在等待他的爱人<br>  可他孤独多年<br>  有人说<br>  他在寻找他的孩子<br>  找了许多年<br><br>  在黄昏街头<br>  我又看到他<br>  一个苍老的人<br>  他行动迟缓<br>  步履蹒跚<br><br>  谁知道，他是谁<br>  谁知道，他去向哪里<br>  他神色黯然<br>  双眼充满期盼<br>  向风中呼唤<br><br>  在黄昏街头<br>  我常看他到<br>  一个失落的人<br>  他自言自语<br>  神色依然<br><br>  突然间<br>  狂风暴雨<br>  风沙漫天<br>  可他<br>  表情淡然<br>  心无波澜<br><br>  又是个黄昏<br>  我未看到他<br>  那个恍惚的老人<br>  人们赶路匆匆<br>  时间依旧流转<br>  他却不在出现<br><br>  <span class=\"date\">—— 2016.06.28</span><br></div></div>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><blockquote>\n<p>这篇随想，写于2016年6月，当时我还在读大三。在晚饭之后，听着李健的<a href=\"https://y.qq.com/n/yqq/song/004IkkOh2SGnq0.html\" target=\"_blank\" rel=\"noopener\">《风吹黄昏》</a>，因为歌词内容极具画面感和代入感，曲终，便有感而发，融入部分歌曲中的歌词，写下这篇随想。最近在整理电脑文件时，发现了当时留下来的电子版。整理到博客中，和大家分享。文笔有限，也欢迎大家探讨指教。</p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><div id=\"content-ctn\"><div class=\"center-content\"><br>  <strong>黄昏街头</strong><br><br>  在黄昏街头<br>  我曾看到他<br>  一个孤单的人<br>  他脊背弓弯<br>  形只影单<br><br>  有人说<br>  他在等待他的爱人<br>  可他孤独多年<br>  有人说<br>  他在寻找他的孩子<br>  找了许多年<br><br>  在黄昏街头<br>  我又看到他<br>  一个苍老的人<br>  他行动迟缓<br>  步履蹒跚<br><br>  谁知道，他是谁<br>  谁知道，他去向哪里<br>  他神色黯然<br>  双眼充满期盼<br>  向风中呼唤<br><br>  在黄昏街头<br>  我常看他到<br>  一个失落的人<br>  他自言自语<br>  神色依然<br><br>  突然间<br>  狂风暴雨<br>  风沙漫天<br>  可他<br>  表情淡然<br>  心无波澜<br><br>  又是个黄昏<br>  我未看到他<br>  那个恍惚的老人<br>  人们赶路匆匆<br>  时间依旧流转<br>  他却不在出现<br><br>  <span class=\"date\">—— 2016.06.28</span><br></div></div>"},{"title":"长安城里的夜","date":"2018-09-18T02:05:19.000Z","_content":"\n### 前言\n\n> 本文写于我大四实习期间，2017年7月2日，周日凌晨。那时我还住在学校，平时坐车上下班。7月1日加班至近午夜零点，下班后于街上漫步，幸遇些许人物场景，心生感慨，遂记之。\n\n### 正文\n\n昨日加班，下班时已近午夜，身心有些疲惫。心想，晚了便晚了罢，那便沿街走走，好好看看这头顶城市的夜，毕竟深夜的景，深夜的静，不是匆忙的白日里所能求得的。单肩背着书包，拖着沉重的双腿，迈着缓缓的步子，独自一人走在深夜的街道上，偶尔哼唱几段旋律，添添几分乐趣。\n\n此时的西安城，不再灯火辉煌，温热的风，昏暗的灯，迷离的霓虹，摇曳的树影......路上不见了公交车的踪影，一眼望去街上的行人屈指可数，时不时有几辆私家车或出租车从身边驶过，此时才发觉原本熟悉的西安城却有着如此的神秘。\n\n<!--more-->\n\n走了一段路程，突然发现前面不远处有一位交警，看样子是在夜里执勤，还真是辛苦。他也看见了我，向我走过来说道：“小伙子，这么晚了，还在外面？”我怔了一下，答道：“是啊，加班，准备回去了。”他沉默了一会儿，笑了笑说：“这么晚，男生也要注意安全，快回去吧。”我回道：“嗯，谢谢！”这个夜晚，安静祥和，我相信每个夜晚都会是这样，因为总有许多像这位警察一样的卫士守护着这座城市的安宁。\n\n走在深夜的街道上，吹着微热的晚风，哼唱着熟悉的旋律，路过高新路的街道，远远的便有声声笑声入耳。前面，几位建筑工人在路边行道上一起吃着西瓜，看着很是悠闲。其中，有人席地而坐，有的慵懒的站着，看上去好不惬意。路过他们身边，听得一人说道：“唉...把他家的，忙活了一天，终于歇下了......”听完这一句，也便已远离他们的位置，只有身后慢慢远去的笑声还回荡在耳边。一天的忙碌，方得这美好的深夜，一口多汁的西瓜，便可忘去整日的烦恼和劳累。此时的夜，陪着他们，一起感受西瓜的香甜......\n\n未走多远，同一条街边，看到一位四五十岁的阿姨她在路边的一棵树下整理着什么。仔细一看，才发现她在整理一些废旧的纸箱。昏暗的光线，想着也许并不能看得清楚，一个个纸箱却被她用心地拆开，依照棱角慢慢压平，再堆放在身边。走近，她便问道：“你好，这会儿几点了？”她的语气很是温和。我掏出手机，很遗憾的是没电了。“不好意思，我的手机没电了”，我一边答道一遍举起手机示意。想着从公司离开的时间，估算了一下， “大概快一点了吧”，我补充道。她回道：“谢谢！”我笑着说：“不客气。”离开的时候，那位阿姨还在仔细的整理着那些纸箱，她心里也想早点回到家里吧，毕竟这深夜里，独自一人还是会觉得有些许的孤独。\n\n就这样，哼着《十点半的地铁》，继续我回学校的路。走到南二环，在医学院附近，转过弯看到一个路边摊，想起还未吃晚饭，便想着填填肚子。走近摊位发现老板坐在低矮的凳子上，吃着一碗像是已经变凉的馄饨。“老板也才吃晚饭啊！”我走上前说道。他抬起头，看着我笑了笑，站了起来，此时才发现，老板是一位看起来五六十岁的大叔。“还有吃的么，老板？”我带着期待的眼神看着他。“有！”老板爽快的回道。“都有什么吃的啊？”我追问到。“馄饨、包子、米线，都有”。我甚是欣喜，在子夜还能吃到路边摊，其实也是不容易了。“来一碗馄饨吧”我说道，“好嘞！”老板开始了忙碌。\n\n坐在那矮矮的凳子上，顿时觉得惬意无比，全身的放松，让人想坐着这里，看着夜景，一直到天亮。坐下没多久，一位中年男子走过，蓝黑色的短袖，黑色的裤子，一双拖鞋，头略微扬起，看着天空，看样子也是满脸疲惫。经过摊位前，老板打声招呼:“下班啦？” “嗯，下班了......”中年男子叹息一样地回答道。我心想，这男子和老板应该是老熟人了吧，常常就在这摊位前，这样遇见。慢慢的，男子远离了摊位......在如今，总有人带着一天的酸甜苦辣，在深夜里，仰天长叹。\n\n没坐一会儿，馄饨登场，皮薄馅大，还未入口，便觉得馋人，一勺鲜汤，便可忘却前面所有的疲倦与劳累。鲜嫩的紫菜，清香的香菜还有点睛之效的榨菜为这看似普通的馄饨注入了灵魂。\n\n在细细享受这美食之时，一辆出租车停在了路边，司机看起来三十多岁，白色的体恤，棕色的裤子，一双凉皮鞋。未到摊位前便说道：“老板，一碗米线，一笼包子！”“先坐，马上就好！”老板爽快的回应到。司机坐在矮桌前，低着头看着手机，目不转睛，我能看到他时不时扬起嘴角，高兴的心情满满的溢在脸上。也许是看到了什么笑话，才让他在这摊位前暂时地放下一切，也许是今天拉客挣了些钱，可以给孩子买好吃的，也许，家里有喜事也说不定。没多久，一位外卖小哥骑着电动车，一身蓝色的工作服，来到摊位前：“老板，一碗麻辣米线带走。”“好嘞，马上就好！”之后，老板开始了新一轮的忙碌。小哥弯下身子，双臂搭在电动车头上，把头埋进了双臂中。他，应该也很是疲惫吧......忙碌的一天，给别人准时送去美食，自己却只能在这深夜里靠一碗米线填饱肚子。今晚，我们有缘相遇，尽管可能只是擦肩而过，但大家都是“夜归人”......\n\n吃完馄饨，特意多喝了几口汤，心满意足。“老板，馄饨多少钱？”，“5块...”老板回应道。付钱时，对老板笑道：“馄饨很好吃，谢谢！”老板开心地笑了笑。也许一碗馄饨没有多少利润，但一句肯定，一个微笑，希望在这深夜里给予老板小小的幸福。\n\n夜很深了，也该早些回学校了。在路边拦下一辆出租车，坐上副驾驶，“师傅，去理工大金花校区”，我一边系安全带一边告知司机我的目的地。司机娴熟的车技，带着我飞驰在深夜的南二环上。看着窗外快速倒退的风景，路边一闪即过的行道树，渐渐的有些困乏,眼睛微闭，靠在座椅上，静静地等待着回到学校。不超半个钟头，到达学校东门，今日的事情，深夜的见闻，即将结束。回到办公室（因下班太晚，宿舍大楼已熄灯闭门，当晚我便在学生会的办公室住了一夜），写下此文，用文字记下这如诗似剧的夜境。\n\n### 后记\n\n> 在如今，总有人披星戴月地奔波，早出晚归。深夜里，每一位“夜归人”都有属于自己的故事，属于自己酸甜苦辣，这所有的一切，就只为了自己心中那份最简单而又美好的心愿与目标。也许只有在这深夜里，在夜深人静的时候，我们才会静下心来，回味这一天，甚至是回味一路走来的平坦与坎坷。这时候，我们也许会审视自己，看看心灵深处的自己，开心、难过、委屈、思念等等这些情感在这时被不断放大，最终极大化。也许这时再也抑制不住内心的汹涌，迷离过后，流泪过后，我们依旧会怀揣着心里的那份执着、对未来的期许、对远方的思念等等寄托慢慢入睡，期待着明日的第一缕朝阳划破天际。\n\n最后，把我最喜欢的一位歌手——**[李健](https://www.baidu.com/link?url=BsltTzlHbDVY83hcXfq3fs1sPLee1fFXhRZperHgpnpGYrvNA1pkm_tIOWp6uwExDNz7hzr-4fK3XXpcLC3cvZElHhODunSKMhXqKqAcjTu&wd=&eqid=a1ae7140000804bc000000035b7167a3)**的一首歌曲 **[《异乡人》](https://baike.baidu.com/item/%E5%BC%82%E4%B9%A1%E4%BA%BA/6402179?fr=aladdin)**分享给大家。这是作为东北黑龙江人的李健当时身处北京时，所作的一首歌曲。在2017年《歌手》节目中对歌词进行新的修改和补充，词曲中对独自在外拼搏的“异乡人”的生活做了细致的描写，也对“异乡人”的孤独、迷茫、无助以及对故乡思念的情感进行了淋漓尽致的表达。\n<div id=\"content-ctn\">\n  <div class=\"center-content\">\n    **异乡人**\n    **作词： 李健**\n    **作曲: 李健**\n\n    披星戴月地奔波\n    只为一扇窗\n    当你迷失在路上\n    能够看见那灯光\n    不知不觉把他乡\n    当做了故乡\n    只是偶尔难过时\n    不经意遥望远方\n    曾经的乡音\n    悄悄地隐藏\n    说不出的诺言\n    一直放心上\n    有许多时候\n    眼泪就要流\n    那扇窗是让我\n    坚强的理由\n    小小的门口\n    还有她的温柔\n    给我温暖陪伴我左右\n    近在眼前的繁华\n    多少人着迷\n    当你走近才发现\n    远过故乡的距离\n    不知不觉把他乡\n    当做了故乡\n    故乡却已成他乡\n    偶尔你才敢回望\n    曾经的坎坷\n    现 在不用讲\n    异乡的人有着相同的惆怅\n    有许多时候\n    眼泪就要流\n    那扇窗是让我\n    坚强的理由\n    小小的门口\n    还有她的温柔\n    给我温暖陪伴我左右\n    有许多时候\n    眼泪就要流\n    那扇窗是让我坚强的理由\n    就在这时候\n    眼泪已经流\n    那扇窗依然明亮为我守候\n    看过了多少\n    海市蜃楼\n    让我回到小小的门口\n    给我温暖陪伴我左右\n    给我温暖陪伴我左右\n  </div>\n </div>","source":"_posts/the-night-scence-of-chang-An-city.md","raw":"---\ntitle: 长安城里的夜\ndate: 2018-09-18 10:05:19\ncategories: 日志\ntags: 朝花夕拾\n---\n\n### 前言\n\n> 本文写于我大四实习期间，2017年7月2日，周日凌晨。那时我还住在学校，平时坐车上下班。7月1日加班至近午夜零点，下班后于街上漫步，幸遇些许人物场景，心生感慨，遂记之。\n\n### 正文\n\n昨日加班，下班时已近午夜，身心有些疲惫。心想，晚了便晚了罢，那便沿街走走，好好看看这头顶城市的夜，毕竟深夜的景，深夜的静，不是匆忙的白日里所能求得的。单肩背着书包，拖着沉重的双腿，迈着缓缓的步子，独自一人走在深夜的街道上，偶尔哼唱几段旋律，添添几分乐趣。\n\n此时的西安城，不再灯火辉煌，温热的风，昏暗的灯，迷离的霓虹，摇曳的树影......路上不见了公交车的踪影，一眼望去街上的行人屈指可数，时不时有几辆私家车或出租车从身边驶过，此时才发觉原本熟悉的西安城却有着如此的神秘。\n\n<!--more-->\n\n走了一段路程，突然发现前面不远处有一位交警，看样子是在夜里执勤，还真是辛苦。他也看见了我，向我走过来说道：“小伙子，这么晚了，还在外面？”我怔了一下，答道：“是啊，加班，准备回去了。”他沉默了一会儿，笑了笑说：“这么晚，男生也要注意安全，快回去吧。”我回道：“嗯，谢谢！”这个夜晚，安静祥和，我相信每个夜晚都会是这样，因为总有许多像这位警察一样的卫士守护着这座城市的安宁。\n\n走在深夜的街道上，吹着微热的晚风，哼唱着熟悉的旋律，路过高新路的街道，远远的便有声声笑声入耳。前面，几位建筑工人在路边行道上一起吃着西瓜，看着很是悠闲。其中，有人席地而坐，有的慵懒的站着，看上去好不惬意。路过他们身边，听得一人说道：“唉...把他家的，忙活了一天，终于歇下了......”听完这一句，也便已远离他们的位置，只有身后慢慢远去的笑声还回荡在耳边。一天的忙碌，方得这美好的深夜，一口多汁的西瓜，便可忘去整日的烦恼和劳累。此时的夜，陪着他们，一起感受西瓜的香甜......\n\n未走多远，同一条街边，看到一位四五十岁的阿姨她在路边的一棵树下整理着什么。仔细一看，才发现她在整理一些废旧的纸箱。昏暗的光线，想着也许并不能看得清楚，一个个纸箱却被她用心地拆开，依照棱角慢慢压平，再堆放在身边。走近，她便问道：“你好，这会儿几点了？”她的语气很是温和。我掏出手机，很遗憾的是没电了。“不好意思，我的手机没电了”，我一边答道一遍举起手机示意。想着从公司离开的时间，估算了一下， “大概快一点了吧”，我补充道。她回道：“谢谢！”我笑着说：“不客气。”离开的时候，那位阿姨还在仔细的整理着那些纸箱，她心里也想早点回到家里吧，毕竟这深夜里，独自一人还是会觉得有些许的孤独。\n\n就这样，哼着《十点半的地铁》，继续我回学校的路。走到南二环，在医学院附近，转过弯看到一个路边摊，想起还未吃晚饭，便想着填填肚子。走近摊位发现老板坐在低矮的凳子上，吃着一碗像是已经变凉的馄饨。“老板也才吃晚饭啊！”我走上前说道。他抬起头，看着我笑了笑，站了起来，此时才发现，老板是一位看起来五六十岁的大叔。“还有吃的么，老板？”我带着期待的眼神看着他。“有！”老板爽快的回道。“都有什么吃的啊？”我追问到。“馄饨、包子、米线，都有”。我甚是欣喜，在子夜还能吃到路边摊，其实也是不容易了。“来一碗馄饨吧”我说道，“好嘞！”老板开始了忙碌。\n\n坐在那矮矮的凳子上，顿时觉得惬意无比，全身的放松，让人想坐着这里，看着夜景，一直到天亮。坐下没多久，一位中年男子走过，蓝黑色的短袖，黑色的裤子，一双拖鞋，头略微扬起，看着天空，看样子也是满脸疲惫。经过摊位前，老板打声招呼:“下班啦？” “嗯，下班了......”中年男子叹息一样地回答道。我心想，这男子和老板应该是老熟人了吧，常常就在这摊位前，这样遇见。慢慢的，男子远离了摊位......在如今，总有人带着一天的酸甜苦辣，在深夜里，仰天长叹。\n\n没坐一会儿，馄饨登场，皮薄馅大，还未入口，便觉得馋人，一勺鲜汤，便可忘却前面所有的疲倦与劳累。鲜嫩的紫菜，清香的香菜还有点睛之效的榨菜为这看似普通的馄饨注入了灵魂。\n\n在细细享受这美食之时，一辆出租车停在了路边，司机看起来三十多岁，白色的体恤，棕色的裤子，一双凉皮鞋。未到摊位前便说道：“老板，一碗米线，一笼包子！”“先坐，马上就好！”老板爽快的回应到。司机坐在矮桌前，低着头看着手机，目不转睛，我能看到他时不时扬起嘴角，高兴的心情满满的溢在脸上。也许是看到了什么笑话，才让他在这摊位前暂时地放下一切，也许是今天拉客挣了些钱，可以给孩子买好吃的，也许，家里有喜事也说不定。没多久，一位外卖小哥骑着电动车，一身蓝色的工作服，来到摊位前：“老板，一碗麻辣米线带走。”“好嘞，马上就好！”之后，老板开始了新一轮的忙碌。小哥弯下身子，双臂搭在电动车头上，把头埋进了双臂中。他，应该也很是疲惫吧......忙碌的一天，给别人准时送去美食，自己却只能在这深夜里靠一碗米线填饱肚子。今晚，我们有缘相遇，尽管可能只是擦肩而过，但大家都是“夜归人”......\n\n吃完馄饨，特意多喝了几口汤，心满意足。“老板，馄饨多少钱？”，“5块...”老板回应道。付钱时，对老板笑道：“馄饨很好吃，谢谢！”老板开心地笑了笑。也许一碗馄饨没有多少利润，但一句肯定，一个微笑，希望在这深夜里给予老板小小的幸福。\n\n夜很深了，也该早些回学校了。在路边拦下一辆出租车，坐上副驾驶，“师傅，去理工大金花校区”，我一边系安全带一边告知司机我的目的地。司机娴熟的车技，带着我飞驰在深夜的南二环上。看着窗外快速倒退的风景，路边一闪即过的行道树，渐渐的有些困乏,眼睛微闭，靠在座椅上，静静地等待着回到学校。不超半个钟头，到达学校东门，今日的事情，深夜的见闻，即将结束。回到办公室（因下班太晚，宿舍大楼已熄灯闭门，当晚我便在学生会的办公室住了一夜），写下此文，用文字记下这如诗似剧的夜境。\n\n### 后记\n\n> 在如今，总有人披星戴月地奔波，早出晚归。深夜里，每一位“夜归人”都有属于自己的故事，属于自己酸甜苦辣，这所有的一切，就只为了自己心中那份最简单而又美好的心愿与目标。也许只有在这深夜里，在夜深人静的时候，我们才会静下心来，回味这一天，甚至是回味一路走来的平坦与坎坷。这时候，我们也许会审视自己，看看心灵深处的自己，开心、难过、委屈、思念等等这些情感在这时被不断放大，最终极大化。也许这时再也抑制不住内心的汹涌，迷离过后，流泪过后，我们依旧会怀揣着心里的那份执着、对未来的期许、对远方的思念等等寄托慢慢入睡，期待着明日的第一缕朝阳划破天际。\n\n最后，把我最喜欢的一位歌手——**[李健](https://www.baidu.com/link?url=BsltTzlHbDVY83hcXfq3fs1sPLee1fFXhRZperHgpnpGYrvNA1pkm_tIOWp6uwExDNz7hzr-4fK3XXpcLC3cvZElHhODunSKMhXqKqAcjTu&wd=&eqid=a1ae7140000804bc000000035b7167a3)**的一首歌曲 **[《异乡人》](https://baike.baidu.com/item/%E5%BC%82%E4%B9%A1%E4%BA%BA/6402179?fr=aladdin)**分享给大家。这是作为东北黑龙江人的李健当时身处北京时，所作的一首歌曲。在2017年《歌手》节目中对歌词进行新的修改和补充，词曲中对独自在外拼搏的“异乡人”的生活做了细致的描写，也对“异乡人”的孤独、迷茫、无助以及对故乡思念的情感进行了淋漓尽致的表达。\n<div id=\"content-ctn\">\n  <div class=\"center-content\">\n    **异乡人**\n    **作词： 李健**\n    **作曲: 李健**\n\n    披星戴月地奔波\n    只为一扇窗\n    当你迷失在路上\n    能够看见那灯光\n    不知不觉把他乡\n    当做了故乡\n    只是偶尔难过时\n    不经意遥望远方\n    曾经的乡音\n    悄悄地隐藏\n    说不出的诺言\n    一直放心上\n    有许多时候\n    眼泪就要流\n    那扇窗是让我\n    坚强的理由\n    小小的门口\n    还有她的温柔\n    给我温暖陪伴我左右\n    近在眼前的繁华\n    多少人着迷\n    当你走近才发现\n    远过故乡的距离\n    不知不觉把他乡\n    当做了故乡\n    故乡却已成他乡\n    偶尔你才敢回望\n    曾经的坎坷\n    现 在不用讲\n    异乡的人有着相同的惆怅\n    有许多时候\n    眼泪就要流\n    那扇窗是让我\n    坚强的理由\n    小小的门口\n    还有她的温柔\n    给我温暖陪伴我左右\n    有许多时候\n    眼泪就要流\n    那扇窗是让我坚强的理由\n    就在这时候\n    眼泪已经流\n    那扇窗依然明亮为我守候\n    看过了多少\n    海市蜃楼\n    让我回到小小的门口\n    给我温暖陪伴我左右\n    给我温暖陪伴我左右\n  </div>\n </div>","slug":"the-night-scence-of-chang-An-city","published":1,"updated":"2019-05-19T10:29:30.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mw5002e9kvbwsfq1v6m","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>本文写于我大四实习期间，2017年7月2日，周日凌晨。那时我还住在学校，平时坐车上下班。7月1日加班至近午夜零点，下班后于街上漫步，幸遇些许人物场景，心生感慨，遂记之。</p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>昨日加班，下班时已近午夜，身心有些疲惫。心想，晚了便晚了罢，那便沿街走走，好好看看这头顶城市的夜，毕竟深夜的景，深夜的静，不是匆忙的白日里所能求得的。单肩背着书包，拖着沉重的双腿，迈着缓缓的步子，独自一人走在深夜的街道上，偶尔哼唱几段旋律，添添几分乐趣。</p>\n<p>此时的西安城，不再灯火辉煌，温热的风，昏暗的灯，迷离的霓虹，摇曳的树影……路上不见了公交车的踪影，一眼望去街上的行人屈指可数，时不时有几辆私家车或出租车从身边驶过，此时才发觉原本熟悉的西安城却有着如此的神秘。</p>\n<a id=\"more\"></a>\n<p>走了一段路程，突然发现前面不远处有一位交警，看样子是在夜里执勤，还真是辛苦。他也看见了我，向我走过来说道：“小伙子，这么晚了，还在外面？”我怔了一下，答道：“是啊，加班，准备回去了。”他沉默了一会儿，笑了笑说：“这么晚，男生也要注意安全，快回去吧。”我回道：“嗯，谢谢！”这个夜晚，安静祥和，我相信每个夜晚都会是这样，因为总有许多像这位警察一样的卫士守护着这座城市的安宁。</p>\n<p>走在深夜的街道上，吹着微热的晚风，哼唱着熟悉的旋律，路过高新路的街道，远远的便有声声笑声入耳。前面，几位建筑工人在路边行道上一起吃着西瓜，看着很是悠闲。其中，有人席地而坐，有的慵懒的站着，看上去好不惬意。路过他们身边，听得一人说道：“唉…把他家的，忙活了一天，终于歇下了……”听完这一句，也便已远离他们的位置，只有身后慢慢远去的笑声还回荡在耳边。一天的忙碌，方得这美好的深夜，一口多汁的西瓜，便可忘去整日的烦恼和劳累。此时的夜，陪着他们，一起感受西瓜的香甜……</p>\n<p>未走多远，同一条街边，看到一位四五十岁的阿姨她在路边的一棵树下整理着什么。仔细一看，才发现她在整理一些废旧的纸箱。昏暗的光线，想着也许并不能看得清楚，一个个纸箱却被她用心地拆开，依照棱角慢慢压平，再堆放在身边。走近，她便问道：“你好，这会儿几点了？”她的语气很是温和。我掏出手机，很遗憾的是没电了。“不好意思，我的手机没电了”，我一边答道一遍举起手机示意。想着从公司离开的时间，估算了一下， “大概快一点了吧”，我补充道。她回道：“谢谢！”我笑着说：“不客气。”离开的时候，那位阿姨还在仔细的整理着那些纸箱，她心里也想早点回到家里吧，毕竟这深夜里，独自一人还是会觉得有些许的孤独。</p>\n<p>就这样，哼着《十点半的地铁》，继续我回学校的路。走到南二环，在医学院附近，转过弯看到一个路边摊，想起还未吃晚饭，便想着填填肚子。走近摊位发现老板坐在低矮的凳子上，吃着一碗像是已经变凉的馄饨。“老板也才吃晚饭啊！”我走上前说道。他抬起头，看着我笑了笑，站了起来，此时才发现，老板是一位看起来五六十岁的大叔。“还有吃的么，老板？”我带着期待的眼神看着他。“有！”老板爽快的回道。“都有什么吃的啊？”我追问到。“馄饨、包子、米线，都有”。我甚是欣喜，在子夜还能吃到路边摊，其实也是不容易了。“来一碗馄饨吧”我说道，“好嘞！”老板开始了忙碌。</p>\n<p>坐在那矮矮的凳子上，顿时觉得惬意无比，全身的放松，让人想坐着这里，看着夜景，一直到天亮。坐下没多久，一位中年男子走过，蓝黑色的短袖，黑色的裤子，一双拖鞋，头略微扬起，看着天空，看样子也是满脸疲惫。经过摊位前，老板打声招呼:“下班啦？” “嗯，下班了……”中年男子叹息一样地回答道。我心想，这男子和老板应该是老熟人了吧，常常就在这摊位前，这样遇见。慢慢的，男子远离了摊位……在如今，总有人带着一天的酸甜苦辣，在深夜里，仰天长叹。</p>\n<p>没坐一会儿，馄饨登场，皮薄馅大，还未入口，便觉得馋人，一勺鲜汤，便可忘却前面所有的疲倦与劳累。鲜嫩的紫菜，清香的香菜还有点睛之效的榨菜为这看似普通的馄饨注入了灵魂。</p>\n<p>在细细享受这美食之时，一辆出租车停在了路边，司机看起来三十多岁，白色的体恤，棕色的裤子，一双凉皮鞋。未到摊位前便说道：“老板，一碗米线，一笼包子！”“先坐，马上就好！”老板爽快的回应到。司机坐在矮桌前，低着头看着手机，目不转睛，我能看到他时不时扬起嘴角，高兴的心情满满的溢在脸上。也许是看到了什么笑话，才让他在这摊位前暂时地放下一切，也许是今天拉客挣了些钱，可以给孩子买好吃的，也许，家里有喜事也说不定。没多久，一位外卖小哥骑着电动车，一身蓝色的工作服，来到摊位前：“老板，一碗麻辣米线带走。”“好嘞，马上就好！”之后，老板开始了新一轮的忙碌。小哥弯下身子，双臂搭在电动车头上，把头埋进了双臂中。他，应该也很是疲惫吧……忙碌的一天，给别人准时送去美食，自己却只能在这深夜里靠一碗米线填饱肚子。今晚，我们有缘相遇，尽管可能只是擦肩而过，但大家都是“夜归人”……</p>\n<p>吃完馄饨，特意多喝了几口汤，心满意足。“老板，馄饨多少钱？”，“5块…”老板回应道。付钱时，对老板笑道：“馄饨很好吃，谢谢！”老板开心地笑了笑。也许一碗馄饨没有多少利润，但一句肯定，一个微笑，希望在这深夜里给予老板小小的幸福。</p>\n<p>夜很深了，也该早些回学校了。在路边拦下一辆出租车，坐上副驾驶，“师傅，去理工大金花校区”，我一边系安全带一边告知司机我的目的地。司机娴熟的车技，带着我飞驰在深夜的南二环上。看着窗外快速倒退的风景，路边一闪即过的行道树，渐渐的有些困乏,眼睛微闭，靠在座椅上，静静地等待着回到学校。不超半个钟头，到达学校东门，今日的事情，深夜的见闻，即将结束。回到办公室（因下班太晚，宿舍大楼已熄灯闭门，当晚我便在学生会的办公室住了一夜），写下此文，用文字记下这如诗似剧的夜境。</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><blockquote>\n<p>在如今，总有人披星戴月地奔波，早出晚归。深夜里，每一位“夜归人”都有属于自己的故事，属于自己酸甜苦辣，这所有的一切，就只为了自己心中那份最简单而又美好的心愿与目标。也许只有在这深夜里，在夜深人静的时候，我们才会静下心来，回味这一天，甚至是回味一路走来的平坦与坎坷。这时候，我们也许会审视自己，看看心灵深处的自己，开心、难过、委屈、思念等等这些情感在这时被不断放大，最终极大化。也许这时再也抑制不住内心的汹涌，迷离过后，流泪过后，我们依旧会怀揣着心里的那份执着、对未来的期许、对远方的思念等等寄托慢慢入睡，期待着明日的第一缕朝阳划破天际。</p>\n</blockquote>\n<p>最后，把我最喜欢的一位歌手——<strong><a href=\"https://www.baidu.com/link?url=BsltTzlHbDVY83hcXfq3fs1sPLee1fFXhRZperHgpnpGYrvNA1pkm_tIOWp6uwExDNz7hzr-4fK3XXpcLC3cvZElHhODunSKMhXqKqAcjTu&amp;wd=&amp;eqid=a1ae7140000804bc000000035b7167a3\" target=\"_blank\" rel=\"noopener\">李健</a></strong>的一首歌曲 <strong><a href=\"https://baike.baidu.com/item/%E5%BC%82%E4%B9%A1%E4%BA%BA/6402179?fr=aladdin\" target=\"_blank\" rel=\"noopener\">《异乡人》</a></strong>分享给大家。这是作为东北黑龙江人的李健当时身处北京时，所作的一首歌曲。在2017年《歌手》节目中对歌词进行新的修改和补充，词曲中对独自在外拼搏的“异乡人”的生活做了细致的描写，也对“异乡人”的孤独、迷茫、无助以及对故乡思念的情感进行了淋漓尽致的表达。</p>\n<div id=\"content-ctn\"><br>  <div class=\"center-content\"><br>    <strong>异乡人</strong><br>    <strong>作词： 李健</strong><br>    <strong>作曲: 李健</strong><br><br>    披星戴月地奔波<br>    只为一扇窗<br>    当你迷失在路上<br>    能够看见那灯光<br>    不知不觉把他乡<br>    当做了故乡<br>    只是偶尔难过时<br>    不经意遥望远方<br>    曾经的乡音<br>    悄悄地隐藏<br>    说不出的诺言<br>    一直放心上<br>    有许多时候<br>    眼泪就要流<br>    那扇窗是让我<br>    坚强的理由<br>    小小的门口<br>    还有她的温柔<br>    给我温暖陪伴我左右<br>    近在眼前的繁华<br>    多少人着迷<br>    当你走近才发现<br>    远过故乡的距离<br>    不知不觉把他乡<br>    当做了故乡<br>    故乡却已成他乡<br>    偶尔你才敢回望<br>    曾经的坎坷<br>    现 在不用讲<br>    异乡的人有着相同的惆怅<br>    有许多时候<br>    眼泪就要流<br>    那扇窗是让我<br>    坚强的理由<br>    小小的门口<br>    还有她的温柔<br>    给我温暖陪伴我左右<br>    有许多时候<br>    眼泪就要流<br>    那扇窗是让我坚强的理由<br>    就在这时候<br>    眼泪已经流<br>    那扇窗依然明亮为我守候<br>    看过了多少<br>    海市蜃楼<br>    让我回到小小的门口<br>    给我温暖陪伴我左右<br>    给我温暖陪伴我左右<br>  </div><br> </div>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>本文写于我大四实习期间，2017年7月2日，周日凌晨。那时我还住在学校，平时坐车上下班。7月1日加班至近午夜零点，下班后于街上漫步，幸遇些许人物场景，心生感慨，遂记之。</p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>昨日加班，下班时已近午夜，身心有些疲惫。心想，晚了便晚了罢，那便沿街走走，好好看看这头顶城市的夜，毕竟深夜的景，深夜的静，不是匆忙的白日里所能求得的。单肩背着书包，拖着沉重的双腿，迈着缓缓的步子，独自一人走在深夜的街道上，偶尔哼唱几段旋律，添添几分乐趣。</p>\n<p>此时的西安城，不再灯火辉煌，温热的风，昏暗的灯，迷离的霓虹，摇曳的树影……路上不见了公交车的踪影，一眼望去街上的行人屈指可数，时不时有几辆私家车或出租车从身边驶过，此时才发觉原本熟悉的西安城却有着如此的神秘。</p>","more":"<p>走了一段路程，突然发现前面不远处有一位交警，看样子是在夜里执勤，还真是辛苦。他也看见了我，向我走过来说道：“小伙子，这么晚了，还在外面？”我怔了一下，答道：“是啊，加班，准备回去了。”他沉默了一会儿，笑了笑说：“这么晚，男生也要注意安全，快回去吧。”我回道：“嗯，谢谢！”这个夜晚，安静祥和，我相信每个夜晚都会是这样，因为总有许多像这位警察一样的卫士守护着这座城市的安宁。</p>\n<p>走在深夜的街道上，吹着微热的晚风，哼唱着熟悉的旋律，路过高新路的街道，远远的便有声声笑声入耳。前面，几位建筑工人在路边行道上一起吃着西瓜，看着很是悠闲。其中，有人席地而坐，有的慵懒的站着，看上去好不惬意。路过他们身边，听得一人说道：“唉…把他家的，忙活了一天，终于歇下了……”听完这一句，也便已远离他们的位置，只有身后慢慢远去的笑声还回荡在耳边。一天的忙碌，方得这美好的深夜，一口多汁的西瓜，便可忘去整日的烦恼和劳累。此时的夜，陪着他们，一起感受西瓜的香甜……</p>\n<p>未走多远，同一条街边，看到一位四五十岁的阿姨她在路边的一棵树下整理着什么。仔细一看，才发现她在整理一些废旧的纸箱。昏暗的光线，想着也许并不能看得清楚，一个个纸箱却被她用心地拆开，依照棱角慢慢压平，再堆放在身边。走近，她便问道：“你好，这会儿几点了？”她的语气很是温和。我掏出手机，很遗憾的是没电了。“不好意思，我的手机没电了”，我一边答道一遍举起手机示意。想着从公司离开的时间，估算了一下， “大概快一点了吧”，我补充道。她回道：“谢谢！”我笑着说：“不客气。”离开的时候，那位阿姨还在仔细的整理着那些纸箱，她心里也想早点回到家里吧，毕竟这深夜里，独自一人还是会觉得有些许的孤独。</p>\n<p>就这样，哼着《十点半的地铁》，继续我回学校的路。走到南二环，在医学院附近，转过弯看到一个路边摊，想起还未吃晚饭，便想着填填肚子。走近摊位发现老板坐在低矮的凳子上，吃着一碗像是已经变凉的馄饨。“老板也才吃晚饭啊！”我走上前说道。他抬起头，看着我笑了笑，站了起来，此时才发现，老板是一位看起来五六十岁的大叔。“还有吃的么，老板？”我带着期待的眼神看着他。“有！”老板爽快的回道。“都有什么吃的啊？”我追问到。“馄饨、包子、米线，都有”。我甚是欣喜，在子夜还能吃到路边摊，其实也是不容易了。“来一碗馄饨吧”我说道，“好嘞！”老板开始了忙碌。</p>\n<p>坐在那矮矮的凳子上，顿时觉得惬意无比，全身的放松，让人想坐着这里，看着夜景，一直到天亮。坐下没多久，一位中年男子走过，蓝黑色的短袖，黑色的裤子，一双拖鞋，头略微扬起，看着天空，看样子也是满脸疲惫。经过摊位前，老板打声招呼:“下班啦？” “嗯，下班了……”中年男子叹息一样地回答道。我心想，这男子和老板应该是老熟人了吧，常常就在这摊位前，这样遇见。慢慢的，男子远离了摊位……在如今，总有人带着一天的酸甜苦辣，在深夜里，仰天长叹。</p>\n<p>没坐一会儿，馄饨登场，皮薄馅大，还未入口，便觉得馋人，一勺鲜汤，便可忘却前面所有的疲倦与劳累。鲜嫩的紫菜，清香的香菜还有点睛之效的榨菜为这看似普通的馄饨注入了灵魂。</p>\n<p>在细细享受这美食之时，一辆出租车停在了路边，司机看起来三十多岁，白色的体恤，棕色的裤子，一双凉皮鞋。未到摊位前便说道：“老板，一碗米线，一笼包子！”“先坐，马上就好！”老板爽快的回应到。司机坐在矮桌前，低着头看着手机，目不转睛，我能看到他时不时扬起嘴角，高兴的心情满满的溢在脸上。也许是看到了什么笑话，才让他在这摊位前暂时地放下一切，也许是今天拉客挣了些钱，可以给孩子买好吃的，也许，家里有喜事也说不定。没多久，一位外卖小哥骑着电动车，一身蓝色的工作服，来到摊位前：“老板，一碗麻辣米线带走。”“好嘞，马上就好！”之后，老板开始了新一轮的忙碌。小哥弯下身子，双臂搭在电动车头上，把头埋进了双臂中。他，应该也很是疲惫吧……忙碌的一天，给别人准时送去美食，自己却只能在这深夜里靠一碗米线填饱肚子。今晚，我们有缘相遇，尽管可能只是擦肩而过，但大家都是“夜归人”……</p>\n<p>吃完馄饨，特意多喝了几口汤，心满意足。“老板，馄饨多少钱？”，“5块…”老板回应道。付钱时，对老板笑道：“馄饨很好吃，谢谢！”老板开心地笑了笑。也许一碗馄饨没有多少利润，但一句肯定，一个微笑，希望在这深夜里给予老板小小的幸福。</p>\n<p>夜很深了，也该早些回学校了。在路边拦下一辆出租车，坐上副驾驶，“师傅，去理工大金花校区”，我一边系安全带一边告知司机我的目的地。司机娴熟的车技，带着我飞驰在深夜的南二环上。看着窗外快速倒退的风景，路边一闪即过的行道树，渐渐的有些困乏,眼睛微闭，靠在座椅上，静静地等待着回到学校。不超半个钟头，到达学校东门，今日的事情，深夜的见闻，即将结束。回到办公室（因下班太晚，宿舍大楼已熄灯闭门，当晚我便在学生会的办公室住了一夜），写下此文，用文字记下这如诗似剧的夜境。</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><blockquote>\n<p>在如今，总有人披星戴月地奔波，早出晚归。深夜里，每一位“夜归人”都有属于自己的故事，属于自己酸甜苦辣，这所有的一切，就只为了自己心中那份最简单而又美好的心愿与目标。也许只有在这深夜里，在夜深人静的时候，我们才会静下心来，回味这一天，甚至是回味一路走来的平坦与坎坷。这时候，我们也许会审视自己，看看心灵深处的自己，开心、难过、委屈、思念等等这些情感在这时被不断放大，最终极大化。也许这时再也抑制不住内心的汹涌，迷离过后，流泪过后，我们依旧会怀揣着心里的那份执着、对未来的期许、对远方的思念等等寄托慢慢入睡，期待着明日的第一缕朝阳划破天际。</p>\n</blockquote>\n<p>最后，把我最喜欢的一位歌手——<strong><a href=\"https://www.baidu.com/link?url=BsltTzlHbDVY83hcXfq3fs1sPLee1fFXhRZperHgpnpGYrvNA1pkm_tIOWp6uwExDNz7hzr-4fK3XXpcLC3cvZElHhODunSKMhXqKqAcjTu&amp;wd=&amp;eqid=a1ae7140000804bc000000035b7167a3\" target=\"_blank\" rel=\"noopener\">李健</a></strong>的一首歌曲 <strong><a href=\"https://baike.baidu.com/item/%E5%BC%82%E4%B9%A1%E4%BA%BA/6402179?fr=aladdin\" target=\"_blank\" rel=\"noopener\">《异乡人》</a></strong>分享给大家。这是作为东北黑龙江人的李健当时身处北京时，所作的一首歌曲。在2017年《歌手》节目中对歌词进行新的修改和补充，词曲中对独自在外拼搏的“异乡人”的生活做了细致的描写，也对“异乡人”的孤独、迷茫、无助以及对故乡思念的情感进行了淋漓尽致的表达。</p>\n<div id=\"content-ctn\"><br>  <div class=\"center-content\"><br>    <strong>异乡人</strong><br>    <strong>作词： 李健</strong><br>    <strong>作曲: 李健</strong><br><br>    披星戴月地奔波<br>    只为一扇窗<br>    当你迷失在路上<br>    能够看见那灯光<br>    不知不觉把他乡<br>    当做了故乡<br>    只是偶尔难过时<br>    不经意遥望远方<br>    曾经的乡音<br>    悄悄地隐藏<br>    说不出的诺言<br>    一直放心上<br>    有许多时候<br>    眼泪就要流<br>    那扇窗是让我<br>    坚强的理由<br>    小小的门口<br>    还有她的温柔<br>    给我温暖陪伴我左右<br>    近在眼前的繁华<br>    多少人着迷<br>    当你走近才发现<br>    远过故乡的距离<br>    不知不觉把他乡<br>    当做了故乡<br>    故乡却已成他乡<br>    偶尔你才敢回望<br>    曾经的坎坷<br>    现 在不用讲<br>    异乡的人有着相同的惆怅<br>    有许多时候<br>    眼泪就要流<br>    那扇窗是让我<br>    坚强的理由<br>    小小的门口<br>    还有她的温柔<br>    给我温暖陪伴我左右<br>    有许多时候<br>    眼泪就要流<br>    那扇窗是让我坚强的理由<br>    就在这时候<br>    眼泪已经流<br>    那扇窗依然明亮为我守候<br>    看过了多少<br>    海市蜃楼<br>    让我回到小小的门口<br>    给我温暖陪伴我左右<br>    给我温暖陪伴我左右<br>  </div><br> </div>"},{"title":"过去 “ 狗血 ” 的三个月","date":"2018-12-27T02:23:13.000Z","_content":">更新这篇文章前，看了看上一篇文章发布的日期是今年9月底，已经有三个月没有更新个人博客了。说起来实在惭愧，当初开始写博客就是为了记录生活中一些值得反思回味的事情，让自己学会思考，而过去的三个月却没做到这一点。现在想想过去三个月的工作生活，能回味（tù cáo）的事情还真不少......\n\n如果要用一个词来概括过去三个月的话，我唯一能想到的就是 —— 狗血......\n\n### 加班，加班，加班！\n\n公司从9月份开始强制995（朝九晚九，一周五天）加班，虽不合规矩，但在大环境下，对于一个IT公司来说也在情理之中，也没人计较什么。毕竟像公司这样一年少有几个月加班，平时18:30公司就没人了的IT公司来说，我们算身在福中了。而且，加班期间公司管晚饭，虽然提供的饭菜不怎么好吃.....\n\n可为什么我们却“身在福中去不知福”呢？\n1. 我想不明白的是，为什么一个公司在绝大多数人没有多少活干，白天慢慢悠悠都能完成现有工作的情况下，要强制要求所有人995加班？\n2. 9月份，在开发任务依旧很轻松的情况下毫无意义地强制加班，导致的结果就是，到10月份任务繁重的时候，反而没有人愿意认真工作，因为已经被前一个月“折磨”皮了。\n3. 粗略计算，加班期间晚饭花费一个月在20000元左右。在目前开发的系统一片混乱，bug无数，更谈不上性能的前提下，为什么不花这些钱去招聘一两个大神来带着我们carry全场？\n4. 不愿意花钱，请不来大神，这就是公司几乎无限制招聘实习生的原因？新人刚开始实习，需要老员工指导，这并不是件“顺便、顺手”就办的事，反而拖慢了现有的工作效率。曾经还有实习生连续两天把系统后台搞崩的事情，导致整个团队连续两个早上没法正常开发。图什么？我不懂.....\n5. 总有一些脑子没有进化完全的“低级领导”喜欢出风头，喜欢装13，喜欢在“高级领导”面前找存在感，给项目埋下多少坑，自己却从来不填，让下面的人背锅......我喜欢称这些领导为“狗头领导”。\n\n当我得知，“高级领导”强制995加班是因为他的同事一句“你们部门每天下班那么早，哪有IT公司的样子”的时候，我只能叹一口气，“唉......‘高级领导’也不都是脑子好使的主，‘吃枣药丸’！”\n\n加班给领导看，是我最厌恶的加班情况，没有之一。而且，在“高级领导”知道全团队长期加班并没有什么工作效率，没多少工作产出的情况下，居然依旧看得津津有味。只要自己的一线“码农”晚上待在公司，他就心满意足，自诩团队积极向上，充满活力，终于像自己同事所说的“像个IT公司的样子”了。\n\n于是，在这种“高级狗头领导”的带领下，我过去三个多月的生活就成了：起床 → 上班 → 加班 → 下班 → 失眠 → 睡觉 → 起床......一个机器一般的“狗血”的循环。那段时间我觉得自己不应该是一个“码农”，称为“码畜”更合适。而这其中，长期的失眠，严重影响了身体的健康状况......\n\n### 苦尽“甘”来\n\n12月14号，终于，持续了三个半月的995宣布结束了！晚上，公司在一位前同事参股的酒吧餐厅搞了一个party，算是补偿之前没办的“年中聚会”，更重要的是犒劳一下大家过去几个月的辛苦。虽然按照公司的“惯例”，平均下来每个人也花不了几个钱，但还好算是对过去三个多月苦日子的一些“慰藉”。用“高级领导”的话说“中国人喜欢在重要的有意义的节点上，以聚会宴席的形式宣布确认一下”。\n\n当晚还算开心，想着苦尽甘来，我喝了不少酒，那种喝起来没感觉后劲儿却很大的酒......顺理成章的我喝醉了，返回途中还飘飘欲仙，有种李白“斗酒诗百篇”的意思，回到公寓就狂吐不止，真的是把胆汁儿都吐出来的那种。晚上躺在床长，头晕、恶心、腰背酸痛......折腾到凌晨4点多才算入睡。还好，第二天周六，不用上班。\n\n第二天，由于醉酒，晚上睡觉着凉，出现了感冒的症状，不停地咳嗽，就医后的诊断结果 —— 气管发炎。本以为这够悲催的了，第二天晚上又开始腰酸背痛，同时，我发现自己开始耳鸣，一种尖锐而又细小的蜂鸣声在右耳响起。因为之前偶尔也会出现这种情况，并没有太在意。最后证明我错了，因为这次耳鸣“前所未有”，几乎24小时“陪伴”我，一直持续到了现在，而且预计还会持续......白天并不明显，但一到晚上就很“活跃”。\n\n引起耳鸣的原因有很多，主要分为听觉系统疾病和全身性疾病两种。包括中耳炎，耵聍栓塞，长期精神压力过大、睡眠不足，颈椎腰椎疾病，甚至酗酒感冒也会引起耳鸣。而这些，很多种在我身上都有出现，自己也不太确定什么原因所致。\n\n因为影响到睡眠，加上我了解到长期耳鸣会严重影响听力，所以预约了医生，最快需要等到明年1月2号。这意味着我需要和这次耳鸣至少再“相处”一个星期，也就是说，这“伙计”还会陪我走完2018，一起“跨年”......希望到时候能尽快告别这位“前所未有”的朋友。\n\n>所以，还是想告诫所有朋友，任何时候，身体健康永远排在首位。也许你的生活中存在各种各样的压力，要求你不得不“拼命”。请相信我，没有那么紧迫，或者说还有更好的解决方法，但绝不是以劳累拼命、牺牲健康为代价。<br/>\n我们总说“愿身边的人被世界温柔以待”，但请先善待自己，不要用贫穷和压力去修饰你的拼命与熬夜。`穷尽健康，你将一无所有。`\n\n### 一件乐事\n过去三个月的生活也并不是日日都如此，也有一件乐事。11月中旬的时候，我请了一次工作以来最长的假 —— 3天。加上周六周日，凑够五天，忙里偷闲，完成了我自初中毕业以来的一个愿望 —— 云南之旅。这是一段很有趣、很美好的经历，赏过很多美景，遇到很多有趣的人，也改变了我对旅游的认识，重新定义了旅游的意义，是过去三个月唯一美好的回忆。写在这里实在有些辜负，后面会单独更新博客文章，与大家分享这次奇妙之旅。","source":"_posts/the-past-three-months.md","raw":"---\ntitle: 过去 “ 狗血 ” 的三个月\ndate: 2018-12-27 10:23:13\ncategories: 日志\ntags: 生活工作\n---\n>更新这篇文章前，看了看上一篇文章发布的日期是今年9月底，已经有三个月没有更新个人博客了。说起来实在惭愧，当初开始写博客就是为了记录生活中一些值得反思回味的事情，让自己学会思考，而过去的三个月却没做到这一点。现在想想过去三个月的工作生活，能回味（tù cáo）的事情还真不少......\n\n如果要用一个词来概括过去三个月的话，我唯一能想到的就是 —— 狗血......\n\n### 加班，加班，加班！\n\n公司从9月份开始强制995（朝九晚九，一周五天）加班，虽不合规矩，但在大环境下，对于一个IT公司来说也在情理之中，也没人计较什么。毕竟像公司这样一年少有几个月加班，平时18:30公司就没人了的IT公司来说，我们算身在福中了。而且，加班期间公司管晚饭，虽然提供的饭菜不怎么好吃.....\n\n可为什么我们却“身在福中去不知福”呢？\n1. 我想不明白的是，为什么一个公司在绝大多数人没有多少活干，白天慢慢悠悠都能完成现有工作的情况下，要强制要求所有人995加班？\n2. 9月份，在开发任务依旧很轻松的情况下毫无意义地强制加班，导致的结果就是，到10月份任务繁重的时候，反而没有人愿意认真工作，因为已经被前一个月“折磨”皮了。\n3. 粗略计算，加班期间晚饭花费一个月在20000元左右。在目前开发的系统一片混乱，bug无数，更谈不上性能的前提下，为什么不花这些钱去招聘一两个大神来带着我们carry全场？\n4. 不愿意花钱，请不来大神，这就是公司几乎无限制招聘实习生的原因？新人刚开始实习，需要老员工指导，这并不是件“顺便、顺手”就办的事，反而拖慢了现有的工作效率。曾经还有实习生连续两天把系统后台搞崩的事情，导致整个团队连续两个早上没法正常开发。图什么？我不懂.....\n5. 总有一些脑子没有进化完全的“低级领导”喜欢出风头，喜欢装13，喜欢在“高级领导”面前找存在感，给项目埋下多少坑，自己却从来不填，让下面的人背锅......我喜欢称这些领导为“狗头领导”。\n\n当我得知，“高级领导”强制995加班是因为他的同事一句“你们部门每天下班那么早，哪有IT公司的样子”的时候，我只能叹一口气，“唉......‘高级领导’也不都是脑子好使的主，‘吃枣药丸’！”\n\n加班给领导看，是我最厌恶的加班情况，没有之一。而且，在“高级领导”知道全团队长期加班并没有什么工作效率，没多少工作产出的情况下，居然依旧看得津津有味。只要自己的一线“码农”晚上待在公司，他就心满意足，自诩团队积极向上，充满活力，终于像自己同事所说的“像个IT公司的样子”了。\n\n于是，在这种“高级狗头领导”的带领下，我过去三个多月的生活就成了：起床 → 上班 → 加班 → 下班 → 失眠 → 睡觉 → 起床......一个机器一般的“狗血”的循环。那段时间我觉得自己不应该是一个“码农”，称为“码畜”更合适。而这其中，长期的失眠，严重影响了身体的健康状况......\n\n### 苦尽“甘”来\n\n12月14号，终于，持续了三个半月的995宣布结束了！晚上，公司在一位前同事参股的酒吧餐厅搞了一个party，算是补偿之前没办的“年中聚会”，更重要的是犒劳一下大家过去几个月的辛苦。虽然按照公司的“惯例”，平均下来每个人也花不了几个钱，但还好算是对过去三个多月苦日子的一些“慰藉”。用“高级领导”的话说“中国人喜欢在重要的有意义的节点上，以聚会宴席的形式宣布确认一下”。\n\n当晚还算开心，想着苦尽甘来，我喝了不少酒，那种喝起来没感觉后劲儿却很大的酒......顺理成章的我喝醉了，返回途中还飘飘欲仙，有种李白“斗酒诗百篇”的意思，回到公寓就狂吐不止，真的是把胆汁儿都吐出来的那种。晚上躺在床长，头晕、恶心、腰背酸痛......折腾到凌晨4点多才算入睡。还好，第二天周六，不用上班。\n\n第二天，由于醉酒，晚上睡觉着凉，出现了感冒的症状，不停地咳嗽，就医后的诊断结果 —— 气管发炎。本以为这够悲催的了，第二天晚上又开始腰酸背痛，同时，我发现自己开始耳鸣，一种尖锐而又细小的蜂鸣声在右耳响起。因为之前偶尔也会出现这种情况，并没有太在意。最后证明我错了，因为这次耳鸣“前所未有”，几乎24小时“陪伴”我，一直持续到了现在，而且预计还会持续......白天并不明显，但一到晚上就很“活跃”。\n\n引起耳鸣的原因有很多，主要分为听觉系统疾病和全身性疾病两种。包括中耳炎，耵聍栓塞，长期精神压力过大、睡眠不足，颈椎腰椎疾病，甚至酗酒感冒也会引起耳鸣。而这些，很多种在我身上都有出现，自己也不太确定什么原因所致。\n\n因为影响到睡眠，加上我了解到长期耳鸣会严重影响听力，所以预约了医生，最快需要等到明年1月2号。这意味着我需要和这次耳鸣至少再“相处”一个星期，也就是说，这“伙计”还会陪我走完2018，一起“跨年”......希望到时候能尽快告别这位“前所未有”的朋友。\n\n>所以，还是想告诫所有朋友，任何时候，身体健康永远排在首位。也许你的生活中存在各种各样的压力，要求你不得不“拼命”。请相信我，没有那么紧迫，或者说还有更好的解决方法，但绝不是以劳累拼命、牺牲健康为代价。<br/>\n我们总说“愿身边的人被世界温柔以待”，但请先善待自己，不要用贫穷和压力去修饰你的拼命与熬夜。`穷尽健康，你将一无所有。`\n\n### 一件乐事\n过去三个月的生活也并不是日日都如此，也有一件乐事。11月中旬的时候，我请了一次工作以来最长的假 —— 3天。加上周六周日，凑够五天，忙里偷闲，完成了我自初中毕业以来的一个愿望 —— 云南之旅。这是一段很有趣、很美好的经历，赏过很多美景，遇到很多有趣的人，也改变了我对旅游的认识，重新定义了旅游的意义，是过去三个月唯一美好的回忆。写在这里实在有些辜负，后面会单独更新博客文章，与大家分享这次奇妙之旅。","slug":"the-past-three-months","published":1,"updated":"2019-01-04T11:43:35.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mw8002g9kvbpm6yo9xx","content":"<blockquote>\n<p>更新这篇文章前，看了看上一篇文章发布的日期是今年9月底，已经有三个月没有更新个人博客了。说起来实在惭愧，当初开始写博客就是为了记录生活中一些值得反思回味的事情，让自己学会思考，而过去的三个月却没做到这一点。现在想想过去三个月的工作生活，能回味（tù cáo）的事情还真不少……</p>\n</blockquote>\n<p>如果要用一个词来概括过去三个月的话，我唯一能想到的就是 —— 狗血……</p>\n<h3 id=\"加班，加班，加班！\"><a href=\"#加班，加班，加班！\" class=\"headerlink\" title=\"加班，加班，加班！\"></a>加班，加班，加班！</h3><p>公司从9月份开始强制995（朝九晚九，一周五天）加班，虽不合规矩，但在大环境下，对于一个IT公司来说也在情理之中，也没人计较什么。毕竟像公司这样一年少有几个月加班，平时18:30公司就没人了的IT公司来说，我们算身在福中了。而且，加班期间公司管晚饭，虽然提供的饭菜不怎么好吃…..</p>\n<p>可为什么我们却“身在福中去不知福”呢？</p>\n<ol>\n<li>我想不明白的是，为什么一个公司在绝大多数人没有多少活干，白天慢慢悠悠都能完成现有工作的情况下，要强制要求所有人995加班？</li>\n<li>9月份，在开发任务依旧很轻松的情况下毫无意义地强制加班，导致的结果就是，到10月份任务繁重的时候，反而没有人愿意认真工作，因为已经被前一个月“折磨”皮了。</li>\n<li>粗略计算，加班期间晚饭花费一个月在20000元左右。在目前开发的系统一片混乱，bug无数，更谈不上性能的前提下，为什么不花这些钱去招聘一两个大神来带着我们carry全场？</li>\n<li>不愿意花钱，请不来大神，这就是公司几乎无限制招聘实习生的原因？新人刚开始实习，需要老员工指导，这并不是件“顺便、顺手”就办的事，反而拖慢了现有的工作效率。曾经还有实习生连续两天把系统后台搞崩的事情，导致整个团队连续两个早上没法正常开发。图什么？我不懂…..</li>\n<li>总有一些脑子没有进化完全的“低级领导”喜欢出风头，喜欢装13，喜欢在“高级领导”面前找存在感，给项目埋下多少坑，自己却从来不填，让下面的人背锅……我喜欢称这些领导为“狗头领导”。</li>\n</ol>\n<p>当我得知，“高级领导”强制995加班是因为他的同事一句“你们部门每天下班那么早，哪有IT公司的样子”的时候，我只能叹一口气，“唉……‘高级领导’也不都是脑子好使的主，‘吃枣药丸’！”</p>\n<p>加班给领导看，是我最厌恶的加班情况，没有之一。而且，在“高级领导”知道全团队长期加班并没有什么工作效率，没多少工作产出的情况下，居然依旧看得津津有味。只要自己的一线“码农”晚上待在公司，他就心满意足，自诩团队积极向上，充满活力，终于像自己同事所说的“像个IT公司的样子”了。</p>\n<p>于是，在这种“高级狗头领导”的带领下，我过去三个多月的生活就成了：起床 → 上班 → 加班 → 下班 → 失眠 → 睡觉 → 起床……一个机器一般的“狗血”的循环。那段时间我觉得自己不应该是一个“码农”，称为“码畜”更合适。而这其中，长期的失眠，严重影响了身体的健康状况……</p>\n<h3 id=\"苦尽“甘”来\"><a href=\"#苦尽“甘”来\" class=\"headerlink\" title=\"苦尽“甘”来\"></a>苦尽“甘”来</h3><p>12月14号，终于，持续了三个半月的995宣布结束了！晚上，公司在一位前同事参股的酒吧餐厅搞了一个party，算是补偿之前没办的“年中聚会”，更重要的是犒劳一下大家过去几个月的辛苦。虽然按照公司的“惯例”，平均下来每个人也花不了几个钱，但还好算是对过去三个多月苦日子的一些“慰藉”。用“高级领导”的话说“中国人喜欢在重要的有意义的节点上，以聚会宴席的形式宣布确认一下”。</p>\n<p>当晚还算开心，想着苦尽甘来，我喝了不少酒，那种喝起来没感觉后劲儿却很大的酒……顺理成章的我喝醉了，返回途中还飘飘欲仙，有种李白“斗酒诗百篇”的意思，回到公寓就狂吐不止，真的是把胆汁儿都吐出来的那种。晚上躺在床长，头晕、恶心、腰背酸痛……折腾到凌晨4点多才算入睡。还好，第二天周六，不用上班。</p>\n<p>第二天，由于醉酒，晚上睡觉着凉，出现了感冒的症状，不停地咳嗽，就医后的诊断结果 —— 气管发炎。本以为这够悲催的了，第二天晚上又开始腰酸背痛，同时，我发现自己开始耳鸣，一种尖锐而又细小的蜂鸣声在右耳响起。因为之前偶尔也会出现这种情况，并没有太在意。最后证明我错了，因为这次耳鸣“前所未有”，几乎24小时“陪伴”我，一直持续到了现在，而且预计还会持续……白天并不明显，但一到晚上就很“活跃”。</p>\n<p>引起耳鸣的原因有很多，主要分为听觉系统疾病和全身性疾病两种。包括中耳炎，耵聍栓塞，长期精神压力过大、睡眠不足，颈椎腰椎疾病，甚至酗酒感冒也会引起耳鸣。而这些，很多种在我身上都有出现，自己也不太确定什么原因所致。</p>\n<p>因为影响到睡眠，加上我了解到长期耳鸣会严重影响听力，所以预约了医生，最快需要等到明年1月2号。这意味着我需要和这次耳鸣至少再“相处”一个星期，也就是说，这“伙计”还会陪我走完2018，一起“跨年”……希望到时候能尽快告别这位“前所未有”的朋友。</p>\n<blockquote>\n<p>所以，还是想告诫所有朋友，任何时候，身体健康永远排在首位。也许你的生活中存在各种各样的压力，要求你不得不“拼命”。请相信我，没有那么紧迫，或者说还有更好的解决方法，但绝不是以劳累拼命、牺牲健康为代价。<br><br>我们总说“愿身边的人被世界温柔以待”，但请先善待自己，不要用贫穷和压力去修饰你的拼命与熬夜。<code>穷尽健康，你将一无所有。</code></p>\n</blockquote>\n<h3 id=\"一件乐事\"><a href=\"#一件乐事\" class=\"headerlink\" title=\"一件乐事\"></a>一件乐事</h3><p>过去三个月的生活也并不是日日都如此，也有一件乐事。11月中旬的时候，我请了一次工作以来最长的假 —— 3天。加上周六周日，凑够五天，忙里偷闲，完成了我自初中毕业以来的一个愿望 —— 云南之旅。这是一段很有趣、很美好的经历，赏过很多美景，遇到很多有趣的人，也改变了我对旅游的认识，重新定义了旅游的意义，是过去三个月唯一美好的回忆。写在这里实在有些辜负，后面会单独更新博客文章，与大家分享这次奇妙之旅。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>更新这篇文章前，看了看上一篇文章发布的日期是今年9月底，已经有三个月没有更新个人博客了。说起来实在惭愧，当初开始写博客就是为了记录生活中一些值得反思回味的事情，让自己学会思考，而过去的三个月却没做到这一点。现在想想过去三个月的工作生活，能回味（tù cáo）的事情还真不少……</p>\n</blockquote>\n<p>如果要用一个词来概括过去三个月的话，我唯一能想到的就是 —— 狗血……</p>\n<h3 id=\"加班，加班，加班！\"><a href=\"#加班，加班，加班！\" class=\"headerlink\" title=\"加班，加班，加班！\"></a>加班，加班，加班！</h3><p>公司从9月份开始强制995（朝九晚九，一周五天）加班，虽不合规矩，但在大环境下，对于一个IT公司来说也在情理之中，也没人计较什么。毕竟像公司这样一年少有几个月加班，平时18:30公司就没人了的IT公司来说，我们算身在福中了。而且，加班期间公司管晚饭，虽然提供的饭菜不怎么好吃…..</p>\n<p>可为什么我们却“身在福中去不知福”呢？</p>\n<ol>\n<li>我想不明白的是，为什么一个公司在绝大多数人没有多少活干，白天慢慢悠悠都能完成现有工作的情况下，要强制要求所有人995加班？</li>\n<li>9月份，在开发任务依旧很轻松的情况下毫无意义地强制加班，导致的结果就是，到10月份任务繁重的时候，反而没有人愿意认真工作，因为已经被前一个月“折磨”皮了。</li>\n<li>粗略计算，加班期间晚饭花费一个月在20000元左右。在目前开发的系统一片混乱，bug无数，更谈不上性能的前提下，为什么不花这些钱去招聘一两个大神来带着我们carry全场？</li>\n<li>不愿意花钱，请不来大神，这就是公司几乎无限制招聘实习生的原因？新人刚开始实习，需要老员工指导，这并不是件“顺便、顺手”就办的事，反而拖慢了现有的工作效率。曾经还有实习生连续两天把系统后台搞崩的事情，导致整个团队连续两个早上没法正常开发。图什么？我不懂…..</li>\n<li>总有一些脑子没有进化完全的“低级领导”喜欢出风头，喜欢装13，喜欢在“高级领导”面前找存在感，给项目埋下多少坑，自己却从来不填，让下面的人背锅……我喜欢称这些领导为“狗头领导”。</li>\n</ol>\n<p>当我得知，“高级领导”强制995加班是因为他的同事一句“你们部门每天下班那么早，哪有IT公司的样子”的时候，我只能叹一口气，“唉……‘高级领导’也不都是脑子好使的主，‘吃枣药丸’！”</p>\n<p>加班给领导看，是我最厌恶的加班情况，没有之一。而且，在“高级领导”知道全团队长期加班并没有什么工作效率，没多少工作产出的情况下，居然依旧看得津津有味。只要自己的一线“码农”晚上待在公司，他就心满意足，自诩团队积极向上，充满活力，终于像自己同事所说的“像个IT公司的样子”了。</p>\n<p>于是，在这种“高级狗头领导”的带领下，我过去三个多月的生活就成了：起床 → 上班 → 加班 → 下班 → 失眠 → 睡觉 → 起床……一个机器一般的“狗血”的循环。那段时间我觉得自己不应该是一个“码农”，称为“码畜”更合适。而这其中，长期的失眠，严重影响了身体的健康状况……</p>\n<h3 id=\"苦尽“甘”来\"><a href=\"#苦尽“甘”来\" class=\"headerlink\" title=\"苦尽“甘”来\"></a>苦尽“甘”来</h3><p>12月14号，终于，持续了三个半月的995宣布结束了！晚上，公司在一位前同事参股的酒吧餐厅搞了一个party，算是补偿之前没办的“年中聚会”，更重要的是犒劳一下大家过去几个月的辛苦。虽然按照公司的“惯例”，平均下来每个人也花不了几个钱，但还好算是对过去三个多月苦日子的一些“慰藉”。用“高级领导”的话说“中国人喜欢在重要的有意义的节点上，以聚会宴席的形式宣布确认一下”。</p>\n<p>当晚还算开心，想着苦尽甘来，我喝了不少酒，那种喝起来没感觉后劲儿却很大的酒……顺理成章的我喝醉了，返回途中还飘飘欲仙，有种李白“斗酒诗百篇”的意思，回到公寓就狂吐不止，真的是把胆汁儿都吐出来的那种。晚上躺在床长，头晕、恶心、腰背酸痛……折腾到凌晨4点多才算入睡。还好，第二天周六，不用上班。</p>\n<p>第二天，由于醉酒，晚上睡觉着凉，出现了感冒的症状，不停地咳嗽，就医后的诊断结果 —— 气管发炎。本以为这够悲催的了，第二天晚上又开始腰酸背痛，同时，我发现自己开始耳鸣，一种尖锐而又细小的蜂鸣声在右耳响起。因为之前偶尔也会出现这种情况，并没有太在意。最后证明我错了，因为这次耳鸣“前所未有”，几乎24小时“陪伴”我，一直持续到了现在，而且预计还会持续……白天并不明显，但一到晚上就很“活跃”。</p>\n<p>引起耳鸣的原因有很多，主要分为听觉系统疾病和全身性疾病两种。包括中耳炎，耵聍栓塞，长期精神压力过大、睡眠不足，颈椎腰椎疾病，甚至酗酒感冒也会引起耳鸣。而这些，很多种在我身上都有出现，自己也不太确定什么原因所致。</p>\n<p>因为影响到睡眠，加上我了解到长期耳鸣会严重影响听力，所以预约了医生，最快需要等到明年1月2号。这意味着我需要和这次耳鸣至少再“相处”一个星期，也就是说，这“伙计”还会陪我走完2018，一起“跨年”……希望到时候能尽快告别这位“前所未有”的朋友。</p>\n<blockquote>\n<p>所以，还是想告诫所有朋友，任何时候，身体健康永远排在首位。也许你的生活中存在各种各样的压力，要求你不得不“拼命”。请相信我，没有那么紧迫，或者说还有更好的解决方法，但绝不是以劳累拼命、牺牲健康为代价。<br><br>我们总说“愿身边的人被世界温柔以待”，但请先善待自己，不要用贫穷和压力去修饰你的拼命与熬夜。<code>穷尽健康，你将一无所有。</code></p>\n</blockquote>\n<h3 id=\"一件乐事\"><a href=\"#一件乐事\" class=\"headerlink\" title=\"一件乐事\"></a>一件乐事</h3><p>过去三个月的生活也并不是日日都如此，也有一件乐事。11月中旬的时候，我请了一次工作以来最长的假 —— 3天。加上周六周日，凑够五天，忙里偷闲，完成了我自初中毕业以来的一个愿望 —— 云南之旅。这是一段很有趣、很美好的经历，赏过很多美景，遇到很多有趣的人，也改变了我对旅游的认识，重新定义了旅游的意义，是过去三个月唯一美好的回忆。写在这里实在有些辜负，后面会单独更新博客文章，与大家分享这次奇妙之旅。</p>\n"},{"title":"布局篇 - 三栏布局（左右定宽，中间自适应）","date":"2019-04-01T17:01:26.000Z","_content":"> 面试时，经常会被问到一种常用布局方式 —— `三栏式布局`（左右两栏定宽，中间一栏宽度自适应），这样的布局方式用`CSS`应该如何来实现呢？今天我们来总结一下实现这种布局方式的`5种`不同方法。\n\n我们先来看看最终要实现的效果。\n\n![三栏式布局][1]\n\n### 1. 利用浮动（float）布局\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left和.right谁在前都可以，但是.center必须在它俩后面-->\n    <aside class=\"left\">left(定宽)</aside>\n    <aside class=\"right\">right(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n  </section>\n</body>\n```\n\n\n```\n/***CSS***/\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n\t/* 左侧左浮动 */\n\tfloat: left;\n}\n\n.right {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #ffa7e9;\n\t/* 右侧右浮动 */\n\tfloat: right;\n}\n\n.center {\n\theight: 100vh;\n\tbackground: #78a5f1;\n\t/* 多出10px，是给左中右三栏留出10px间距 */\n\tmargin-left: 210px;\n\tmargin-right: 210px;\n}\n```\n\n### 2. 利用绝对定位（absolute）布局\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left/.center/.right任意排序，不会影响最终结果-->\n    <aside class=\"left\">left(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n    <aside class=\"right\">right(定宽)</aside>\n  </section>\n</body>\n```\n\n```\n/***CSS***/\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n\t/* 绝对定位 */\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n}\n\n.right {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #ffa7e9;\n\t/* 绝对定位 */\n\tposition: absolute;\n\tright: 0;\n\ttop: 0;\n}\n\n.center {\n\theight: 100vh;\n\tbackground: #78a5f1;\n\t/* 多出10px，是给左中右三栏留出10px间距 */\n\tmargin-left: 210px;\n\tmargin-right: 210px;\n}\n```\n\n### 3. 利用表格（table/table-cell）布局\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left/.center/.right/必须按照左中右顺序排序-->\n    <aside class=\"left\">left(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n    <aside class=\"right\">right(定宽)</aside>\n  </section>\n</body>\n```\n\n```\n/***CSS***/\n/* .left,.center,.right的父元素 */\n#container {\n\tdisplay: table;\n\t/* 一定要设置width: 100% */\n\twidth: 100%;\n}\n\n/* .left,.center,.right三个元素 */\n.left, .center, .right {\n\tdisplay: table-cell;\n}\n\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n}\n\n.right {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #ffa7e9;\n}\n\n.center {\n\theight: 100vh;\n\tbackground: #78a5f1;\n}\n```\n\n### 4. 利用弹性和（flex-box）布局\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left/.center/.right/必须按照左中右顺序排序-->\n    <aside class=\"left\">left(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n    <aside class=\"right\">right(定宽)</aside>\n  </section>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n\t/* 设置父元素为弹性盒 */\n\tdisplay: flex;\n}\n\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n}\n\n.right {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #ffa7e9;\n}\n\n.center {\n\theight: 100vh;\n\tbackground: #78a5f1;\n\t/* 设置flex:1; 表示该元素占满剩余空间 */\n\tflex: 1;\n\t/* 左中右之间留出10px间距 */\n\tmargin: 0 10px;\n}\n```\n\n### 5. 利用栅格（grid）布局\n\n关于grid布局的基础知识，大家可以参考[MDN-网格布局](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout)和[阮一峰-Grid 布局教程](http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)以及[张鑫旭-写给自己看的display: grid布局教程](https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/)三篇文章深入学习。\n\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left/.center/.right/必须按照左中右顺序排序-->\n    <aside class=\"left\">left(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n    <aside class=\"right\">right(定宽)</aside>\n  </section>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n\t/* 设置父元素为grid */\n\tdisplay: grid;\n\t/* 设置几个值代表布局为几行，每个值是行高 */\n\tgrid-template-rows: 100vh;\n\t/* 设置几个值代表布局为几列，每个值是列宽 */\n\tgrid-template-columns: 200px auto 200px;\n}\n\n.left {\n\tbackground: #61daa5;\n}\n\n.right {\n\tbackground: #ffa7e9;\n}\n\n.center {\n\tbackground: #78a5f1;\n\t/* 左中右之间留出10px间距 */ \n\tmargin: 0 10px;\n}\n```\n\n[1]: /medias/article/coding/three-columns-layout/three-columns-layout.png","source":"_posts/three-columns-layout.md","raw":"---\ntitle: 布局篇 - 三栏布局（左右定宽，中间自适应）\ndate: 2019-04-02 01:01:26\ncategories: 编程\ntags:\n- CSS\n- 布局\n---\n> 面试时，经常会被问到一种常用布局方式 —— `三栏式布局`（左右两栏定宽，中间一栏宽度自适应），这样的布局方式用`CSS`应该如何来实现呢？今天我们来总结一下实现这种布局方式的`5种`不同方法。\n\n我们先来看看最终要实现的效果。\n\n![三栏式布局][1]\n\n### 1. 利用浮动（float）布局\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left和.right谁在前都可以，但是.center必须在它俩后面-->\n    <aside class=\"left\">left(定宽)</aside>\n    <aside class=\"right\">right(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n  </section>\n</body>\n```\n\n\n```\n/***CSS***/\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n\t/* 左侧左浮动 */\n\tfloat: left;\n}\n\n.right {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #ffa7e9;\n\t/* 右侧右浮动 */\n\tfloat: right;\n}\n\n.center {\n\theight: 100vh;\n\tbackground: #78a5f1;\n\t/* 多出10px，是给左中右三栏留出10px间距 */\n\tmargin-left: 210px;\n\tmargin-right: 210px;\n}\n```\n\n### 2. 利用绝对定位（absolute）布局\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left/.center/.right任意排序，不会影响最终结果-->\n    <aside class=\"left\">left(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n    <aside class=\"right\">right(定宽)</aside>\n  </section>\n</body>\n```\n\n```\n/***CSS***/\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n\t/* 绝对定位 */\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n}\n\n.right {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #ffa7e9;\n\t/* 绝对定位 */\n\tposition: absolute;\n\tright: 0;\n\ttop: 0;\n}\n\n.center {\n\theight: 100vh;\n\tbackground: #78a5f1;\n\t/* 多出10px，是给左中右三栏留出10px间距 */\n\tmargin-left: 210px;\n\tmargin-right: 210px;\n}\n```\n\n### 3. 利用表格（table/table-cell）布局\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left/.center/.right/必须按照左中右顺序排序-->\n    <aside class=\"left\">left(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n    <aside class=\"right\">right(定宽)</aside>\n  </section>\n</body>\n```\n\n```\n/***CSS***/\n/* .left,.center,.right的父元素 */\n#container {\n\tdisplay: table;\n\t/* 一定要设置width: 100% */\n\twidth: 100%;\n}\n\n/* .left,.center,.right三个元素 */\n.left, .center, .right {\n\tdisplay: table-cell;\n}\n\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n}\n\n.right {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #ffa7e9;\n}\n\n.center {\n\theight: 100vh;\n\tbackground: #78a5f1;\n}\n```\n\n### 4. 利用弹性和（flex-box）布局\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left/.center/.right/必须按照左中右顺序排序-->\n    <aside class=\"left\">left(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n    <aside class=\"right\">right(定宽)</aside>\n  </section>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n\t/* 设置父元素为弹性盒 */\n\tdisplay: flex;\n}\n\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n}\n\n.right {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #ffa7e9;\n}\n\n.center {\n\theight: 100vh;\n\tbackground: #78a5f1;\n\t/* 设置flex:1; 表示该元素占满剩余空间 */\n\tflex: 1;\n\t/* 左中右之间留出10px间距 */\n\tmargin: 0 10px;\n}\n```\n\n### 5. 利用栅格（grid）布局\n\n关于grid布局的基础知识，大家可以参考[MDN-网格布局](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout)和[阮一峰-Grid 布局教程](http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)以及[张鑫旭-写给自己看的display: grid布局教程](https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/)三篇文章深入学习。\n\n```\n<!--HTML-->\n<body>\n  <section id=\"container\">\n    <!--注意！！.left/.center/.right/必须按照左中右顺序排序-->\n    <aside class=\"left\">left(定宽)</aside>\n    <main class=\"center\">center(宽度自适应)</main>\n    <aside class=\"right\">right(定宽)</aside>\n  </section>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n\t/* 设置父元素为grid */\n\tdisplay: grid;\n\t/* 设置几个值代表布局为几行，每个值是行高 */\n\tgrid-template-rows: 100vh;\n\t/* 设置几个值代表布局为几列，每个值是列宽 */\n\tgrid-template-columns: 200px auto 200px;\n}\n\n.left {\n\tbackground: #61daa5;\n}\n\n.right {\n\tbackground: #ffa7e9;\n}\n\n.center {\n\tbackground: #78a5f1;\n\t/* 左中右之间留出10px间距 */ \n\tmargin: 0 10px;\n}\n```\n\n[1]: /medias/article/coding/three-columns-layout/three-columns-layout.png","slug":"three-columns-layout","published":1,"updated":"2019-04-02T06:24:29.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mwd002k9kvbr0ig7pxa","content":"<blockquote>\n<p>面试时，经常会被问到一种常用布局方式 —— <code>三栏式布局</code>（左右两栏定宽，中间一栏宽度自适应），这样的布局方式用<code>CSS</code>应该如何来实现呢？今天我们来总结一下实现这种布局方式的<code>5种</code>不同方法。</p>\n</blockquote>\n<p>我们先来看看最终要实现的效果。</p>\n<p><img src=\"/medias/article/coding/three-columns-layout/three-columns-layout.png\" alt=\"三栏式布局\"></p>\n<h3 id=\"1-利用浮动（float）布局\"><a href=\"#1-利用浮动（float）布局\" class=\"headerlink\" title=\"1. 利用浮动（float）布局\"></a>1. 利用浮动（float）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left和.right谁在前都可以，但是.center必须在它俩后面--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n    /* 左侧左浮动 */\n    float: left;\n}\n\n.right {\n    width: 200px;\n    height: 100vh;\n    background: #ffa7e9;\n    /* 右侧右浮动 */\n    float: right;\n}\n\n.center {\n    height: 100vh;\n    background: #78a5f1;\n    /* 多出10px，是给左中右三栏留出10px间距 */\n    margin-left: 210px;\n    margin-right: 210px;\n}\n</code></pre><h3 id=\"2-利用绝对定位（absolute）布局\"><a href=\"#2-利用绝对定位（absolute）布局\" class=\"headerlink\" title=\"2. 利用绝对定位（absolute）布局\"></a>2. 利用绝对定位（absolute）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left/.center/.right任意排序，不会影响最终结果--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n    /* 绝对定位 */\n    position: absolute;\n    left: 0;\n    top: 0;\n}\n\n.right {\n    width: 200px;\n    height: 100vh;\n    background: #ffa7e9;\n    /* 绝对定位 */\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n\n.center {\n    height: 100vh;\n    background: #78a5f1;\n    /* 多出10px，是给左中右三栏留出10px间距 */\n    margin-left: 210px;\n    margin-right: 210px;\n}\n</code></pre><h3 id=\"3-利用表格（table-table-cell）布局\"><a href=\"#3-利用表格（table-table-cell）布局\" class=\"headerlink\" title=\"3. 利用表格（table/table-cell）布局\"></a>3. 利用表格（table/table-cell）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left/.center/.right/必须按照左中右顺序排序--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n/* .left,.center,.right的父元素 */\n#container {\n    display: table;\n    /* 一定要设置width: 100% */\n    width: 100%;\n}\n\n/* .left,.center,.right三个元素 */\n.left, .center, .right {\n    display: table-cell;\n}\n\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n}\n\n.right {\n    width: 200px;\n    height: 100vh;\n    background: #ffa7e9;\n}\n\n.center {\n    height: 100vh;\n    background: #78a5f1;\n}\n</code></pre><h3 id=\"4-利用弹性和（flex-box）布局\"><a href=\"#4-利用弹性和（flex-box）布局\" class=\"headerlink\" title=\"4. 利用弹性和（flex-box）布局\"></a>4. 利用弹性和（flex-box）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left/.center/.right/必须按照左中右顺序排序--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n    /* 设置父元素为弹性盒 */\n    display: flex;\n}\n\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n}\n\n.right {\n    width: 200px;\n    height: 100vh;\n    background: #ffa7e9;\n}\n\n.center {\n    height: 100vh;\n    background: #78a5f1;\n    /* 设置flex:1; 表示该元素占满剩余空间 */\n    flex: 1;\n    /* 左中右之间留出10px间距 */\n    margin: 0 10px;\n}\n</code></pre><h3 id=\"5-利用栅格（grid）布局\"><a href=\"#5-利用栅格（grid）布局\" class=\"headerlink\" title=\"5. 利用栅格（grid）布局\"></a>5. 利用栅格（grid）布局</h3><p>关于grid布局的基础知识，大家可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener\">MDN-网格布局</a>和<a href=\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\" target=\"_blank\" rel=\"noopener\">阮一峰-Grid 布局教程</a>以及<a href=\"https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/\" target=\"_blank\" rel=\"noopener\">张鑫旭-写给自己看的display: grid布局教程</a>三篇文章深入学习。</p>\n<pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left/.center/.right/必须按照左中右顺序排序--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n    /* 设置父元素为grid */\n    display: grid;\n    /* 设置几个值代表布局为几行，每个值是行高 */\n    grid-template-rows: 100vh;\n    /* 设置几个值代表布局为几列，每个值是列宽 */\n    grid-template-columns: 200px auto 200px;\n}\n\n.left {\n    background: #61daa5;\n}\n\n.right {\n    background: #ffa7e9;\n}\n\n.center {\n    background: #78a5f1;\n    /* 左中右之间留出10px间距 */ \n    margin: 0 10px;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>面试时，经常会被问到一种常用布局方式 —— <code>三栏式布局</code>（左右两栏定宽，中间一栏宽度自适应），这样的布局方式用<code>CSS</code>应该如何来实现呢？今天我们来总结一下实现这种布局方式的<code>5种</code>不同方法。</p>\n</blockquote>\n<p>我们先来看看最终要实现的效果。</p>\n<p><img src=\"/medias/article/coding/three-columns-layout/three-columns-layout.png\" alt=\"三栏式布局\"></p>\n<h3 id=\"1-利用浮动（float）布局\"><a href=\"#1-利用浮动（float）布局\" class=\"headerlink\" title=\"1. 利用浮动（float）布局\"></a>1. 利用浮动（float）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left和.right谁在前都可以，但是.center必须在它俩后面--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n    /* 左侧左浮动 */\n    float: left;\n}\n\n.right {\n    width: 200px;\n    height: 100vh;\n    background: #ffa7e9;\n    /* 右侧右浮动 */\n    float: right;\n}\n\n.center {\n    height: 100vh;\n    background: #78a5f1;\n    /* 多出10px，是给左中右三栏留出10px间距 */\n    margin-left: 210px;\n    margin-right: 210px;\n}\n</code></pre><h3 id=\"2-利用绝对定位（absolute）布局\"><a href=\"#2-利用绝对定位（absolute）布局\" class=\"headerlink\" title=\"2. 利用绝对定位（absolute）布局\"></a>2. 利用绝对定位（absolute）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left/.center/.right任意排序，不会影响最终结果--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n    /* 绝对定位 */\n    position: absolute;\n    left: 0;\n    top: 0;\n}\n\n.right {\n    width: 200px;\n    height: 100vh;\n    background: #ffa7e9;\n    /* 绝对定位 */\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n\n.center {\n    height: 100vh;\n    background: #78a5f1;\n    /* 多出10px，是给左中右三栏留出10px间距 */\n    margin-left: 210px;\n    margin-right: 210px;\n}\n</code></pre><h3 id=\"3-利用表格（table-table-cell）布局\"><a href=\"#3-利用表格（table-table-cell）布局\" class=\"headerlink\" title=\"3. 利用表格（table/table-cell）布局\"></a>3. 利用表格（table/table-cell）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left/.center/.right/必须按照左中右顺序排序--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n/* .left,.center,.right的父元素 */\n#container {\n    display: table;\n    /* 一定要设置width: 100% */\n    width: 100%;\n}\n\n/* .left,.center,.right三个元素 */\n.left, .center, .right {\n    display: table-cell;\n}\n\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n}\n\n.right {\n    width: 200px;\n    height: 100vh;\n    background: #ffa7e9;\n}\n\n.center {\n    height: 100vh;\n    background: #78a5f1;\n}\n</code></pre><h3 id=\"4-利用弹性和（flex-box）布局\"><a href=\"#4-利用弹性和（flex-box）布局\" class=\"headerlink\" title=\"4. 利用弹性和（flex-box）布局\"></a>4. 利用弹性和（flex-box）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left/.center/.right/必须按照左中右顺序排序--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n    /* 设置父元素为弹性盒 */\n    display: flex;\n}\n\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n}\n\n.right {\n    width: 200px;\n    height: 100vh;\n    background: #ffa7e9;\n}\n\n.center {\n    height: 100vh;\n    background: #78a5f1;\n    /* 设置flex:1; 表示该元素占满剩余空间 */\n    flex: 1;\n    /* 左中右之间留出10px间距 */\n    margin: 0 10px;\n}\n</code></pre><h3 id=\"5-利用栅格（grid）布局\"><a href=\"#5-利用栅格（grid）布局\" class=\"headerlink\" title=\"5. 利用栅格（grid）布局\"></a>5. 利用栅格（grid）布局</h3><p>关于grid布局的基础知识，大家可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener\">MDN-网格布局</a>和<a href=\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\" target=\"_blank\" rel=\"noopener\">阮一峰-Grid 布局教程</a>以及<a href=\"https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/\" target=\"_blank\" rel=\"noopener\">张鑫旭-写给自己看的display: grid布局教程</a>三篇文章深入学习。</p>\n<pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n  &lt;section id=&quot;container&quot;&gt;\n    &lt;!--注意！！.left/.center/.right/必须按照左中右顺序排序--&gt;\n    &lt;aside class=&quot;left&quot;&gt;left(定宽)&lt;/aside&gt;\n    &lt;main class=&quot;center&quot;&gt;center(宽度自适应)&lt;/main&gt;\n    &lt;aside class=&quot;right&quot;&gt;right(定宽)&lt;/aside&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n    /* 设置父元素为grid */\n    display: grid;\n    /* 设置几个值代表布局为几行，每个值是行高 */\n    grid-template-rows: 100vh;\n    /* 设置几个值代表布局为几列，每个值是列宽 */\n    grid-template-columns: 200px auto 200px;\n}\n\n.left {\n    background: #61daa5;\n}\n\n.right {\n    background: #ffa7e9;\n}\n\n.center {\n    background: #78a5f1;\n    /* 左中右之间留出10px间距 */ \n    margin: 0 10px;\n}\n</code></pre>"},{"title":"布局篇 - 两栏式布局（左侧定宽，右侧自适应）","date":"2019-04-02T05:56:59.000Z","_content":"> 面试中，另外一种经常被问到一种常用布局方式 —— `两栏式布局`（左侧栏定宽，右侧一栏宽度自适应），这样的布局方式用`CSS`应该如何来实现呢？今天我们来总结一下实现这种布局方式的`5种`不同方法。\n\n我们先来看看最终要实现的效果。\n\n![两栏式布局][1]\n\n### 1. 利用浮动（float）布局\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n.left {\n\twidth: 200px;\n\tbackground: #61daa5;\n\t\n\t/* 左侧定宽栏左浮动 */\n  float: left;\n}\n\nmain {\n\tbackground: #78a5f1;\n\t\n\t/* 多余10px，设置左右栏间隔 */\n  margin-left: 210px;\n}\n```\n\n### 2. 利用绝对定位（position: absolute）布局\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n  /* 设置父元素相对定位 */\n  /* 目的是为了让左侧栏子元素想对他进行绝对定位 */\n  position: relative;\n}\n\n.left {\n\twidth: 200px;\n\tbackground: #61daa5;\n\t\n\t/* 左侧栏绝对定位 */\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmain {\n\tbackground: #78a5f1;\n\t\n  /* 多余10px，设置左右栏间隔 */\n\tmargin-left: 210px;\n}\n```\n\n### 3. 利用table/table-cell布局\n\n注意，这种办法中，如果要设置左右栏的间隔，`margin`/`padding`在`table`/`table-cell`元素中不起作用。需要使用`border-collapse`/`border-spacing`设置。具体可以参考[这篇文章](https://muki.tw/tech/fix-display-table-cell-not-affected-by-margin/)。\n\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n  /* 设置左右两栏元素的父元素 */\n\tdisplay: table;\n  /* 一定要设置宽度100%*/\n\twidth: 100%;\n}\n\n.left, .main {\n  /* 设置左右两栏元素 */\n\tdisplay: table-cell;\n}\n\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n}\n\n.main {\n\theight: 100vh;\n\tbackground: #78a5f1;\n}\n```\n\n### 4. 利用弹性盒（flex）布局\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n/* 设置父元素为弹性盒布局*/\n#container {\n\tdisplay: flex;\n}\n\n.left {\n\twidth: 200px;\n\tbackground: #61daa5;\n}\n\nmain {\n\tbackground: #78a5f1;\n\t\n  /* 设置flex: 1，表示该元素占满所有剩余空间*/\n\tflex: 1;\n  /* 左右栏间隔10px */\n  margin-left: 10px;\n}\n```\n\n### 5. 利用栅格（Grid）布局\n\n关于grid布局的基础知识，大家可以参考[MDN-网格布局](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout)和[阮一峰-Grid 布局教程](http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)以及[张鑫旭-写给自己看的display: grid布局教程](https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/)三篇文章深入学习。\n\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n  /* 设置父元素为grid */\n\tdisplay: grid;\n\t/* 设置几个值代表布局为几行，每个值是行高 */\n\tgrid-template-rows: 100vh;\n\t/* 设置几个值代表布局为几列，每个值是列宽 */\n\tgrid-template-columns: 200px auto;\n}\n\n\n.left {\n\theight: 100vh;\n\tbackground: #61daa5;\n}\n\n.main {\n\theight: 100vh;\n\tbackground: #78a5f1;\n\t\n  /* 左右栏间隔10px */\n\tmargin-left: 10px;\n}\n```\n\n[1]: /medias/article/coding/two-columns-layout/two-columns-layout.png\n\n### 结语\n\n关于两栏式布局最常用的方法就是这些。本文总结的是左侧定宽，右侧宽度自适应的情况。而右侧定宽，左侧宽度自适应的实现方法与上面很类似。有兴趣的同学可以参考上面的方法试一试。","source":"_posts/two-columns-layout.md","raw":"---\ntitle: 布局篇 - 两栏式布局（左侧定宽，右侧自适应）\ndate: 2019-04-02 13:56:59\ncategories: 编程\ntags:\n- CSS\n- 布局\n---\n> 面试中，另外一种经常被问到一种常用布局方式 —— `两栏式布局`（左侧栏定宽，右侧一栏宽度自适应），这样的布局方式用`CSS`应该如何来实现呢？今天我们来总结一下实现这种布局方式的`5种`不同方法。\n\n我们先来看看最终要实现的效果。\n\n![两栏式布局][1]\n\n### 1. 利用浮动（float）布局\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n.left {\n\twidth: 200px;\n\tbackground: #61daa5;\n\t\n\t/* 左侧定宽栏左浮动 */\n  float: left;\n}\n\nmain {\n\tbackground: #78a5f1;\n\t\n\t/* 多余10px，设置左右栏间隔 */\n  margin-left: 210px;\n}\n```\n\n### 2. 利用绝对定位（position: absolute）布局\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n  /* 设置父元素相对定位 */\n  /* 目的是为了让左侧栏子元素想对他进行绝对定位 */\n  position: relative;\n}\n\n.left {\n\twidth: 200px;\n\tbackground: #61daa5;\n\t\n\t/* 左侧栏绝对定位 */\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmain {\n\tbackground: #78a5f1;\n\t\n  /* 多余10px，设置左右栏间隔 */\n\tmargin-left: 210px;\n}\n```\n\n### 3. 利用table/table-cell布局\n\n注意，这种办法中，如果要设置左右栏的间隔，`margin`/`padding`在`table`/`table-cell`元素中不起作用。需要使用`border-collapse`/`border-spacing`设置。具体可以参考[这篇文章](https://muki.tw/tech/fix-display-table-cell-not-affected-by-margin/)。\n\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n  /* 设置左右两栏元素的父元素 */\n\tdisplay: table;\n  /* 一定要设置宽度100%*/\n\twidth: 100%;\n}\n\n.left, .main {\n  /* 设置左右两栏元素 */\n\tdisplay: table-cell;\n}\n\n.left {\n\twidth: 200px;\n\theight: 100vh;\n\tbackground: #61daa5;\n}\n\n.main {\n\theight: 100vh;\n\tbackground: #78a5f1;\n}\n```\n\n### 4. 利用弹性盒（flex）布局\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n/* 设置父元素为弹性盒布局*/\n#container {\n\tdisplay: flex;\n}\n\n.left {\n\twidth: 200px;\n\tbackground: #61daa5;\n}\n\nmain {\n\tbackground: #78a5f1;\n\t\n  /* 设置flex: 1，表示该元素占满所有剩余空间*/\n\tflex: 1;\n  /* 左右栏间隔10px */\n  margin-left: 10px;\n}\n```\n\n### 5. 利用栅格（Grid）布局\n\n关于grid布局的基础知识，大家可以参考[MDN-网格布局](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout)和[阮一峰-Grid 布局教程](http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)以及[张鑫旭-写给自己看的display: grid布局教程](https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/)三篇文章深入学习。\n\n```\n<!--HTML-->\n<body>\n\t<div id=\"container\">\n\t\t<aside class=\"left\">left(定宽200px)</aside>\n\t\t<main class=\"main\">main(宽度自适应)</main>\n\t</div>\n</body>\n```\n\n```\n/***CSS***/\n#container {\n  /* 设置父元素为grid */\n\tdisplay: grid;\n\t/* 设置几个值代表布局为几行，每个值是行高 */\n\tgrid-template-rows: 100vh;\n\t/* 设置几个值代表布局为几列，每个值是列宽 */\n\tgrid-template-columns: 200px auto;\n}\n\n\n.left {\n\theight: 100vh;\n\tbackground: #61daa5;\n}\n\n.main {\n\theight: 100vh;\n\tbackground: #78a5f1;\n\t\n  /* 左右栏间隔10px */\n\tmargin-left: 10px;\n}\n```\n\n[1]: /medias/article/coding/two-columns-layout/two-columns-layout.png\n\n### 结语\n\n关于两栏式布局最常用的方法就是这些。本文总结的是左侧定宽，右侧宽度自适应的情况。而右侧定宽，左侧宽度自适应的实现方法与上面很类似。有兴趣的同学可以参考上面的方法试一试。","slug":"two-columns-layout","published":1,"updated":"2019-04-02T06:45:42.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mwg002n9kvbxuxc5uch","content":"<blockquote>\n<p>面试中，另外一种经常被问到一种常用布局方式 —— <code>两栏式布局</code>（左侧栏定宽，右侧一栏宽度自适应），这样的布局方式用<code>CSS</code>应该如何来实现呢？今天我们来总结一下实现这种布局方式的<code>5种</code>不同方法。</p>\n</blockquote>\n<p>我们先来看看最终要实现的效果。</p>\n<p><img src=\"/medias/article/coding/two-columns-layout/two-columns-layout.png\" alt=\"两栏式布局\"></p>\n<h3 id=\"1-利用浮动（float）布局\"><a href=\"#1-利用浮动（float）布局\" class=\"headerlink\" title=\"1. 利用浮动（float）布局\"></a>1. 利用浮动（float）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n.left {\n    width: 200px;\n    background: #61daa5;\n\n    /* 左侧定宽栏左浮动 */\n  float: left;\n}\n\nmain {\n    background: #78a5f1;\n\n    /* 多余10px，设置左右栏间隔 */\n  margin-left: 210px;\n}\n</code></pre><h3 id=\"2-利用绝对定位（position-absolute）布局\"><a href=\"#2-利用绝对定位（position-absolute）布局\" class=\"headerlink\" title=\"2. 利用绝对定位（position: absolute）布局\"></a>2. 利用绝对定位（position: absolute）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n  /* 设置父元素相对定位 */\n  /* 目的是为了让左侧栏子元素想对他进行绝对定位 */\n  position: relative;\n}\n\n.left {\n    width: 200px;\n    background: #61daa5;\n\n    /* 左侧栏绝对定位 */\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmain {\n    background: #78a5f1;\n\n  /* 多余10px，设置左右栏间隔 */\n    margin-left: 210px;\n}\n</code></pre><h3 id=\"3-利用table-table-cell布局\"><a href=\"#3-利用table-table-cell布局\" class=\"headerlink\" title=\"3. 利用table/table-cell布局\"></a>3. 利用table/table-cell布局</h3><p>注意，这种办法中，如果要设置左右栏的间隔，<code>margin</code>/<code>padding</code>在<code>table</code>/<code>table-cell</code>元素中不起作用。需要使用<code>border-collapse</code>/<code>border-spacing</code>设置。具体可以参考<a href=\"https://muki.tw/tech/fix-display-table-cell-not-affected-by-margin/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n  /* 设置左右两栏元素的父元素 */\n    display: table;\n  /* 一定要设置宽度100%*/\n    width: 100%;\n}\n\n.left, .main {\n  /* 设置左右两栏元素 */\n    display: table-cell;\n}\n\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n}\n\n.main {\n    height: 100vh;\n    background: #78a5f1;\n}\n</code></pre><h3 id=\"4-利用弹性盒（flex）布局\"><a href=\"#4-利用弹性盒（flex）布局\" class=\"headerlink\" title=\"4. 利用弹性盒（flex）布局\"></a>4. 利用弹性盒（flex）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n/* 设置父元素为弹性盒布局*/\n#container {\n    display: flex;\n}\n\n.left {\n    width: 200px;\n    background: #61daa5;\n}\n\nmain {\n    background: #78a5f1;\n\n  /* 设置flex: 1，表示该元素占满所有剩余空间*/\n    flex: 1;\n  /* 左右栏间隔10px */\n  margin-left: 10px;\n}\n</code></pre><h3 id=\"5-利用栅格（Grid）布局\"><a href=\"#5-利用栅格（Grid）布局\" class=\"headerlink\" title=\"5. 利用栅格（Grid）布局\"></a>5. 利用栅格（Grid）布局</h3><p>关于grid布局的基础知识，大家可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener\">MDN-网格布局</a>和<a href=\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\" target=\"_blank\" rel=\"noopener\">阮一峰-Grid 布局教程</a>以及<a href=\"https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/\" target=\"_blank\" rel=\"noopener\">张鑫旭-写给自己看的display: grid布局教程</a>三篇文章深入学习。</p>\n<pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n  /* 设置父元素为grid */\n    display: grid;\n    /* 设置几个值代表布局为几行，每个值是行高 */\n    grid-template-rows: 100vh;\n    /* 设置几个值代表布局为几列，每个值是列宽 */\n    grid-template-columns: 200px auto;\n}\n\n\n.left {\n    height: 100vh;\n    background: #61daa5;\n}\n\n.main {\n    height: 100vh;\n    background: #78a5f1;\n\n  /* 左右栏间隔10px */\n    margin-left: 10px;\n}\n</code></pre><h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>关于两栏式布局最常用的方法就是这些。本文总结的是左侧定宽，右侧宽度自适应的情况。而右侧定宽，左侧宽度自适应的实现方法与上面很类似。有兴趣的同学可以参考上面的方法试一试。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>面试中，另外一种经常被问到一种常用布局方式 —— <code>两栏式布局</code>（左侧栏定宽，右侧一栏宽度自适应），这样的布局方式用<code>CSS</code>应该如何来实现呢？今天我们来总结一下实现这种布局方式的<code>5种</code>不同方法。</p>\n</blockquote>\n<p>我们先来看看最终要实现的效果。</p>\n<p><img src=\"/medias/article/coding/two-columns-layout/two-columns-layout.png\" alt=\"两栏式布局\"></p>\n<h3 id=\"1-利用浮动（float）布局\"><a href=\"#1-利用浮动（float）布局\" class=\"headerlink\" title=\"1. 利用浮动（float）布局\"></a>1. 利用浮动（float）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n.left {\n    width: 200px;\n    background: #61daa5;\n\n    /* 左侧定宽栏左浮动 */\n  float: left;\n}\n\nmain {\n    background: #78a5f1;\n\n    /* 多余10px，设置左右栏间隔 */\n  margin-left: 210px;\n}\n</code></pre><h3 id=\"2-利用绝对定位（position-absolute）布局\"><a href=\"#2-利用绝对定位（position-absolute）布局\" class=\"headerlink\" title=\"2. 利用绝对定位（position: absolute）布局\"></a>2. 利用绝对定位（position: absolute）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n  /* 设置父元素相对定位 */\n  /* 目的是为了让左侧栏子元素想对他进行绝对定位 */\n  position: relative;\n}\n\n.left {\n    width: 200px;\n    background: #61daa5;\n\n    /* 左侧栏绝对定位 */\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmain {\n    background: #78a5f1;\n\n  /* 多余10px，设置左右栏间隔 */\n    margin-left: 210px;\n}\n</code></pre><h3 id=\"3-利用table-table-cell布局\"><a href=\"#3-利用table-table-cell布局\" class=\"headerlink\" title=\"3. 利用table/table-cell布局\"></a>3. 利用table/table-cell布局</h3><p>注意，这种办法中，如果要设置左右栏的间隔，<code>margin</code>/<code>padding</code>在<code>table</code>/<code>table-cell</code>元素中不起作用。需要使用<code>border-collapse</code>/<code>border-spacing</code>设置。具体可以参考<a href=\"https://muki.tw/tech/fix-display-table-cell-not-affected-by-margin/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n  /* 设置左右两栏元素的父元素 */\n    display: table;\n  /* 一定要设置宽度100%*/\n    width: 100%;\n}\n\n.left, .main {\n  /* 设置左右两栏元素 */\n    display: table-cell;\n}\n\n.left {\n    width: 200px;\n    height: 100vh;\n    background: #61daa5;\n}\n\n.main {\n    height: 100vh;\n    background: #78a5f1;\n}\n</code></pre><h3 id=\"4-利用弹性盒（flex）布局\"><a href=\"#4-利用弹性盒（flex）布局\" class=\"headerlink\" title=\"4. 利用弹性盒（flex）布局\"></a>4. 利用弹性盒（flex）布局</h3><pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n/* 设置父元素为弹性盒布局*/\n#container {\n    display: flex;\n}\n\n.left {\n    width: 200px;\n    background: #61daa5;\n}\n\nmain {\n    background: #78a5f1;\n\n  /* 设置flex: 1，表示该元素占满所有剩余空间*/\n    flex: 1;\n  /* 左右栏间隔10px */\n  margin-left: 10px;\n}\n</code></pre><h3 id=\"5-利用栅格（Grid）布局\"><a href=\"#5-利用栅格（Grid）布局\" class=\"headerlink\" title=\"5. 利用栅格（Grid）布局\"></a>5. 利用栅格（Grid）布局</h3><p>关于grid布局的基础知识，大家可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener\">MDN-网格布局</a>和<a href=\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\" target=\"_blank\" rel=\"noopener\">阮一峰-Grid 布局教程</a>以及<a href=\"https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/\" target=\"_blank\" rel=\"noopener\">张鑫旭-写给自己看的display: grid布局教程</a>三篇文章深入学习。</p>\n<pre><code>&lt;!--HTML--&gt;\n&lt;body&gt;\n    &lt;div id=&quot;container&quot;&gt;\n        &lt;aside class=&quot;left&quot;&gt;left(定宽200px)&lt;/aside&gt;\n        &lt;main class=&quot;main&quot;&gt;main(宽度自适应)&lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><pre><code>/***CSS***/\n#container {\n  /* 设置父元素为grid */\n    display: grid;\n    /* 设置几个值代表布局为几行，每个值是行高 */\n    grid-template-rows: 100vh;\n    /* 设置几个值代表布局为几列，每个值是列宽 */\n    grid-template-columns: 200px auto;\n}\n\n\n.left {\n    height: 100vh;\n    background: #61daa5;\n}\n\n.main {\n    height: 100vh;\n    background: #78a5f1;\n\n  /* 左右栏间隔10px */\n    margin-left: 10px;\n}\n</code></pre><h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>关于两栏式布局最常用的方法就是这些。本文总结的是左侧定宽，右侧宽度自适应的情况。而右侧定宽，左侧宽度自适应的实现方法与上面很类似。有兴趣的同学可以参考上面的方法试一试。</p>\n"},{"title":"CSS层叠上下文、层叠等级、层叠顺序、z-index完全说明","date":"2018-08-28T03:29:28.000Z","_content":"\n### 前言\n\n最近，在项目中遇到一个关于CSS中元素`z-index`属性的问题，具体问题不太好描述，总结起来就是当给元素和父元素色设置`position`属性和`z-index`相关属性后，页面上渲染的元素层级结果和我预想的不一样。根据自己之前的理解，也没找到一个合理的解释。我知道，肯定是我对相关属性的细节理解存在问题，所以结合官方文档和在网上各种搜集整理，明白了其中的原因。写下这篇文章，和大家分享有关CSS中`层叠上下文`、`层叠等级`、`层叠顺序`以及`z-index`相关的一整套技术细节。\n\n如果存在什么错误或重要遗漏或者有什么疑问，欢迎留言指正、讨论！感谢！\n\n<!--more-->\n\n### 一个“片面”的理解\n\n以往，由于自己使用`z-index`的频率不大，所以对这个CSS属性存在比较片面的认识。一直认为`z-index`就是用来描述定义一个元素在屏幕`Z轴`上的堆叠顺序。`z-index`值越大在`Z轴`上就越靠上，也就是离屏幕观察者越近。最后才发现这个认识存在很大的问题：\n1. 首先，`z-index`属性值并不是在任何元素上都有效果。它**仅在**定位元素（定义了`position`属性，且属性值为非`static`值的元素）上有效果。\n2. 判断元素在`Z轴`上的堆叠顺序，不仅仅是直接比较两个元素的`z-index`值的大小，这个堆叠顺序实际由元素的**层叠上下文**、**层叠等级**共同决定。\n\n![屏幕上的XYZ轴][1]\n\n要想完全理解一个东西，首先要明白它是什么，也就是它的定义。我们先看看上面提到的`层叠上下文`、`层叠等级`、`层叠顺序`都是什么？定义又太过抽象，后面会再用一个具象的比喻来让你彻底明白它们到底是什么，有什么联系。\n\n\n### 什么是“层叠上下文”\n\n层叠上下文(stacking context)，是`HTML`中一个三维的概念。在`CSS2.1`规范中，每个盒模型的位置是三维的，分别是平面画布上的`X轴`，`Y轴`以及表示层叠的`Z轴`。一般情况下，元素在页面上沿`X轴Y轴`平铺，我们察觉不到它们在`Z轴`上的层叠关系。而一旦元素发生堆叠，这时就能发现某个元素可能覆盖了另一个元素或者被另一个元素覆盖。\n\n如果一个元素含有层叠上下文，(也就是说它是层叠上下文元素)，我们可以理解为这个元素在`Z轴`上就“高人一等”，最终表现就是它离屏幕观察者更近。\n\n>**具象的比喻**：你可以把层叠上下文元素理解为理解为**该元素当了官**，而其他非层叠上下文元素则可以理解为普通群众。凡是“当了官的元素”就比普通元素等级要高，也就是说元素在`Z轴`上更靠上，更靠近观察者。\n\n### 什么是“层叠等级”\n\n那么，层叠等级指的又是什么？层叠等级(stacking level，叫“层叠级别”/“层叠水平”也行)\n* 在同一个层叠上下文中，它描述定义的是该层叠上下文中的层叠上下文元素在`Z轴`上的上下顺序。\n* 在其他普通元素中，它描述定义的是这些普通元素在`Z轴`上的上下顺序。\n\n说到这，可能很多人疑问了，不论在层叠上下文中还是在普通元素中，层叠等级都表示元素在`Z轴`上的上下顺序，那就直接说它描述定义了所有元素在`Z轴`上的上下顺序就OK啊！为什么要分开描述？\n\n为了说明原因，先举个栗子：\n>**具象的比喻**：我们之前说到，处于层叠上下文中的元素，就像是元素当了官，等级自然比普通元素高。再想象一下，假设一个官员A是个省级领导，他下属有一个秘书a-1，家里有一个保姆a-2。另一个官员B是一个县级领导，他下属有一个秘书b-1，家里有一个保姆b-2。a-1和b-1虽然都是秘书，但是你想一个省级领导的秘书和一个县级领导的秘书之间有可比性么？甚至保姆a-2都要比秘书b-1的等级高得多。谁大谁小，谁高谁低一目了然，所以根本没有比较的意义。只有在A下属的a-1、a-2以及B下属的b-1、b-2中相互比较大小高低才有意义。\n\n**再类比回“层叠上下文”和“层叠等级”，就得出一个结论：**\n1. 普通元素的层叠等级优先由其所在的层叠上下文决定。\n2. 层叠等级的比较只有在当前层叠上下文元素中才有意义。不同层叠上下文中比较层叠等级是没有意义的。\n\n\n### 如何产生“层叠上下文”\n\n前面说了那么多，知道了“层叠上下文”和“层叠等级”，其中还有一个最关键的问题：到底如何产生层叠上下文呢？如何让一个元素变成层叠上下文元素呢？\n\n其实，层叠上下文也基本上是有一些特定的CSS属性创建的，一般有3种方法：\n1. `HTML`中的根元素`<html></html>`本身j就具有层叠上下文，称为“根层叠上下文”。\n2. 普通元素设置`position`属性为**非**`static`值并设置`z-index`属性为具体数值，产生层叠上下文。\n3. CSS3中的新属性也可以产生层叠上下文。\n\n至此，终于可以上代码了，我们用代码说话，来验证上面的结论：\n\n**栗子1:**\n**有两个div，p.a、p.b被包裹在一个div里，p.c被包裹在另一个盒子里，只为.a、.b、.c设置`position`和`z-index`属性**\n```\n<style>\n  div {  \n    position: relative;  \n    width: 100px;  \n    height: 100px;  \n  }  \n  p {  \n    position: absolute;  \n    font-size: 20px;  \n    width: 100px;  \n    height: 100px;  \n  }  \n  .a {  \n    background-color: blue;  \n    z-index: 1;  \n  }  \n  .b {  \n    background-color: green;  \n    z-index: 2;  \n    top: 20px;  \n    left: 20px;  \n  }  \n  .c {  \n    background-color: red;  \n    z-index: 3;  \n    top: -20px;  \n    left: 40px;  \n  }\n</style>\n\n<body>  \n  <div>  \n    <p class=\"a\">a</p>  \n    <p class=\"b\">b</p>  \n  </div> \n\n  <div>  \n    <p class=\"c\">c</p>  \n  </div>  \n</body> \n```\n效果：\n![效果1][2]\n因为p.a、p.b、p.c三个的父元素div都没有设置`z-index`，所以不会产生层叠上下文，所以.a、.b、.c都处于由`<html></html>`标签产生的“根层叠上下文”中，属于同一个层叠上下文，此时谁的`z-index`值大，谁在上面。\n\n**栗子2：**\n**有两个div，p.a、p.b被包裹在一个div里，p.c被包裹在另一个盒子里，同时为两个div和.a、.b、.c设置`position`和`z-index`属性**\n```\n<style>\n  div {\n    width: 100px;\n    height: 100px;\n    position: relative;\n  }\n  .box1 {\n    z-index: 2;\n  }\n  .box2 {\n    z-index: 1;\n  }\n  p {\n    position: absolute;\n    font-size: 20px;\n    width: 100px;\n    height: 100px;\n  }\n  .a {\n    background-color: blue;\n    z-index: 100;\n  }\n  .b {\n    background-color: green;\n    top: 20px;\n    left: 20px;\n    z-index: 200;\n  }\n  .c {\n    background-color: red;\n    top: -20px;\n    left: 40px;\n    z-index: 9999;\n  }\n</style>\n\n<body>\n  <div class=\"box1\">\n    <p class=\"a\">a</p>\n    <p class=\"b\">b</p>\n  </div>\n\n  <div class=\"box2\">\n    <p class=\"c\">c</p>\n  </div>\n</body>\n```\n\n效果：\n![效果2][3]\n我们发下，虽然`p.c`元素的`z-index`值为9999，远大于`p.a`和`p.b`的`z-index`值，但是由于`p.a`、`p.b`的父元素`div.box1`产生的层叠上下文的`z-index`的值为2，`p.c`的父元素`div.box2`所产生的层叠上下文的`z-index`值为1，所以`p.c`永远在`p.a`和`p.b`下面。\n\n同时，如果我们只更改`p.a`和`p.b`的`z-index`值，由于这两个元素都在父元素`div.box1`产生的层叠上下文中，所以，谁的`z-index`值大，谁在上面。\n\n\n### 什么是“层叠顺序”\n\n说完“层叠上下文”和“层叠等级”，我们再来说说“层叠顺序”。“层叠顺序”(stacking order)表示元素发生层叠时按照特定的顺序规则在`Z轴`上垂直显示。**由此可见，前面所说的“层叠上下文”和“层叠等级”是一种概念，而这里的“层叠顺序”是一种规则。**\n\n![不同属性的元素的层叠顺序][4]\n\n在不考虑CSS3的情况下，当元素发生层叠时，层叠顺讯遵循上面途中的规则。\n**这里值得注意的是：**\n1. 左上角\"层叠上下文`background/border`\"指的是层叠上下文元素的背景和边框。\n2. `inline/inline-block`元素的层叠顺序要高于`block`(块级)/`float`(浮动)元素。\n3. 单纯考虑层叠顺序，`z-index: auto`和`z-index: 0`在同一层级，但这两个属性值本身是有根本区别的。\n\n>对于上面第2条，为什么`inline/inline-block`元素的层叠顺序要高于`block`(块级)/`float`(浮动)元素？这个大家可以思考一下！\n其实很简单，像`border/background`属于装饰元素的属性，浮动和块级元素一般用来页面布局，而网页设计之初最重要的就是文字内容，所以在发生层叠时会优先显示文字内容，保证其不被覆盖。\n\n\n### 你要的“套路”\n\n上面说了那么多，可能你还是有点懵。这么多概念规则，来点最实际的，有没有一个“套路”当遇到元素层叠时，能很清晰地判断出他们谁在上谁在下呢？答案是——肯定有啊！\n\n>1、首先先看要比较的两个元素是否处于同一个层叠上下文中：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1如果是，谁的层叠等级大，谁在上面（怎么判断层叠等级大小呢？——看“层叠顺序”图）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2如果两个元素不在统一层叠上下文中，请先比较他们所处的层叠上下文的层叠等级。\n2、当两个元素层叠等级相同、层叠顺序相同时，在DOM结构中后面的元素层叠等级在前面元素之上。\n\n\n### 光说不练假把式\n\n对于技术学习，代码展示是最直观最易懂的方式之一。话不多说，直接上代码，我们通过以下几个“栗子”，来进一步验证掌握上面的结论。\n\n**栗子3：**\n```\n<style>\n  .box1, .box2 {\n    position: relative;\n    z-index: auto;\n  }\n  .child1 {\n    width: 200px;\n    height: 100px;\n    background: #168bf5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n  .child2 {\n    width: 100px;\n    height: 200px;\n    background: #32c292;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"box1\">\n    <div class=\"child1\"></div>\n  </div>\n\n  <div class=\"box2\">\n    <div class=\"child2\"></div>\n  </div>\n</body>\n```\n效果：\n![效果3][5]\n**说明：**`.box1/.box2`虽然设置了`position: relative`，但是`z-index: auto`的情况下，这两个`div`还是普通元素，并没有产生层叠上下文。所以，`child1/.child2`属于`<html></html>`元素的“根层叠上下文”中，此时，**谁的`z-index`值大，谁在上面**。\n\n\n**栗子4：**\n\n对于栗子1中的CSS代码，我们只把`.box1/.box2`的`z-index`属性值改为`数值0`，其余不变。\n```\n.box1, .box2 {\n  position: relative;\n  z-index: 0;\n}\n...\n\n```\n效果：\n![效果4][6]\n**说明：** 此时，我们发现，仅仅修改了`.box1/.box2`的`z-index`属性值改为`数值0`，最终结果完全相反。这时`.child2`覆盖在了`.child1`上面。原因是什么呢？很简单：因为设置`z-index: 0`后，`.box1/.box2`产生了各自的层叠上下文，这时候要比较`.child1/.child2`的层叠关系完全由父元素`.box1/.box2`的层叠关系决定。但是`.box1/.box2`的`z-index`值都为`0`，都是块级元素（所以它们的层叠等级，层叠顺序是相同的），这种情况下，在`DOM`结构中**后面的覆盖前面的**，所以`.child2`就在上面。\n\n\n### CSS3中的属性对层叠上下文的影响\n\nCSS3中出现了很多新属性，其中一些属性对层叠上下文也产生了很大的影响。如下：\n1. 父元素的display属性值为`flex|inline-flex`，子元素`z-index`属性值不为`auto`的时候，子元素为层叠上下文元素；\n2. 元素的`opacity`属性值不是`1`；\n3. 元素的`transform`属性值不是`none`；\n4. 元素`mix-blend-mode属性值不是`normal`；\n5. 元素的`filter`属性值不是`none`；\n6. 元素的`isolation`属性值是`isolate`；\n7. `will-change`指定的属性值为上面任意一个；\n8. 元素的`-webkit-overflow-scrolling`属性值设置为`touch`。\n\nCSS3中，元素属性满足以上条件之一，就会产生层叠上下文。我们用第1条来做一个简单的解释说明。\n\n**栗子5：**\n\n```\n<style>\n  .box {\n  }\n  .parent {\n    width: 200px;\n    height: 100px;\n    background: #168bf5;\n    /* 虽然设置了z-index，但是没有设置position，z-index无效，.parent还是普通元素，没有产生层叠上下文 */\n    z-index: 1;\n  }\n  .child {\n    width: 100px;\n    height: 200px;\n    background: #32d19c;\n    position: relative;\n    z-index: -1;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"box\">\n    <div class=\"parent\">\n      parent\n      <div class=\"child\">child</div>\n    </div>\n  </div>\n</body>\n```\n效果：\n![效果5][7]\n**说明：** 我们发现，`.child`被`.parent`覆盖了。按照“套路”来分析一下：\n虽然`.parent`设置了`z-index`属性值，但是没有设置`position`属性，`z-index`无效，所以没有产生层叠上下文，`.parent`还是普通的块级元素。此时，在层叠顺序规则中，`z-index`值小于`0`的`.child`会被普通的`block`块级元素`.parent`覆盖。\n\n**栗子6**\n\n对于上面的栗子，我们只修改.box的属性，设置display: flex，其余属性和DOM结构不变。\n```\n.box {\n  display: flex;\n}\n```\n效果：\n![效果6][8]\n**说明：** 当给`.box`设置`display: flex`时，`.parent`就变成层叠上下文元素，根据层叠顺序规则，层叠上下文元素的`background/border`的层叠等级小于`z-index`值小于`0`的元素的层叠等级，所以`z-index`值为`-1`的`.child`在`.parent`上面。\n\n\n### 小测试\n\n下面的代码，我会把最终页面渲染的结果放在代码之后，有兴趣的“童鞋”可以分析一下，各个元素的层叠等级，最后来确定这些元素哪个在上哪个在下。\n\n```\n<style>\n  .parent {\n    width: 100px;\n    height: 200px;\n    background: #168bf5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 0;\n  }\n  .child1 {\n    width: 100px;\n    height: 200px;\n    background: #32d19c;\n    position: absolute;\n    top: 20px;\n    left: 20px;\n    z-index: 1;\n  }\n  .child2 {\n    width: 100px;\n    height: 200px;\n    background: #e4c950;\n    position: absolute;\n    top: 40px;\n    left: 40px;\n    z-index: -1;\n  }\n  .child2-1 {\n    width: 100px;\n    height: 200px;\n    background: #e45050;\n    position: absolute;\n    top: 60px;\n    left: 60px;\n    z-index: 9999;\n  }\n  .child2-2 {\n    width: 100px;\n    height: 200px;\n    background: #db68a7;\n    position: absolute;\n    top: 80px;\n    left: 40px;\n    z-index: -9999;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"parent\">\n    parent\n    <div class=\"child1\">child1</div>\n    <div class=\"child2\">\n      child2\n      <div class=\"child2-1\">child2-1</div>\n      <div class=\"child2-2\">child2-2</div>\n    </div>\n  </div>\n</body>\n```\n\n效果：\n![小测试代码页面渲染结果][9]\n\n\n### 参考文章\n\n以上的内容有一部分内容参考了以下两位大神的博客，写的很好，也很清晰，推荐大家看一看，你会对相关知识点掌握的更清晰。\n\n>[张鑫旭-《深入理解CSS中的层叠上下文和层叠顺序》](https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/)\n>[AMInInsist-《CSS 中的z-index属性》](https://blog.csdn.net/weixin_40672882/article/details/81183321)\n\n\n### 推荐文章\n\n**下面的文章链接是我在学习实践过程中看到的一些觉得比较好的文章，有兴趣霍有需要的朋友可以参考参考，希望可以帮你彻底弄清文章中涉及的这些问题。**\n\n>[lijinxieyang-《层叠上下文【stacking context】与层叠顺序【stacking order】》](http://www.w3help.org/zh-cn/kb/013/)\n>[w3help.org - 《KB013: 分层的显示( Layered presentation )》](http://www.w3help.org/zh-cn/kb/013/)\n>[MDN-《The stacking context》](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context)\n>[尚-《css之层叠上下文和层叠顺序》](https://www.cnblogs.com/chenshanyuanzi/p/7700823.html)\n\n\n[1]: /medias/article/coding/z-index/XYZ.png\n[2]: /medias/article/coding/z-index/xiaoguo1.jpg\n[3]: /medias/article/coding/z-index/xiaoguo2.jpg\n[4]: /medias/article/coding/z-index/stacking-order.jpg\n[5]: /medias/article/coding/z-index/xiaoguo3.jpg\n[6]: /medias/article/coding/z-index/xiaoguo4.jpg\n[7]: /medias/article/coding/z-index/xiaoguo5.jpg\n[8]: /medias/article/coding/z-index/xiaoguo6.jpg\n[9]: /medias/article/coding/z-index/test.jpg","source":"_posts/z-index.md","raw":"---\ntitle: CSS层叠上下文、层叠等级、层叠顺序、z-index完全说明\ndate: 2018-08-28 11:29:28\ncategories: 编程\ntags: z-index\n---\n\n### 前言\n\n最近，在项目中遇到一个关于CSS中元素`z-index`属性的问题，具体问题不太好描述，总结起来就是当给元素和父元素色设置`position`属性和`z-index`相关属性后，页面上渲染的元素层级结果和我预想的不一样。根据自己之前的理解，也没找到一个合理的解释。我知道，肯定是我对相关属性的细节理解存在问题，所以结合官方文档和在网上各种搜集整理，明白了其中的原因。写下这篇文章，和大家分享有关CSS中`层叠上下文`、`层叠等级`、`层叠顺序`以及`z-index`相关的一整套技术细节。\n\n如果存在什么错误或重要遗漏或者有什么疑问，欢迎留言指正、讨论！感谢！\n\n<!--more-->\n\n### 一个“片面”的理解\n\n以往，由于自己使用`z-index`的频率不大，所以对这个CSS属性存在比较片面的认识。一直认为`z-index`就是用来描述定义一个元素在屏幕`Z轴`上的堆叠顺序。`z-index`值越大在`Z轴`上就越靠上，也就是离屏幕观察者越近。最后才发现这个认识存在很大的问题：\n1. 首先，`z-index`属性值并不是在任何元素上都有效果。它**仅在**定位元素（定义了`position`属性，且属性值为非`static`值的元素）上有效果。\n2. 判断元素在`Z轴`上的堆叠顺序，不仅仅是直接比较两个元素的`z-index`值的大小，这个堆叠顺序实际由元素的**层叠上下文**、**层叠等级**共同决定。\n\n![屏幕上的XYZ轴][1]\n\n要想完全理解一个东西，首先要明白它是什么，也就是它的定义。我们先看看上面提到的`层叠上下文`、`层叠等级`、`层叠顺序`都是什么？定义又太过抽象，后面会再用一个具象的比喻来让你彻底明白它们到底是什么，有什么联系。\n\n\n### 什么是“层叠上下文”\n\n层叠上下文(stacking context)，是`HTML`中一个三维的概念。在`CSS2.1`规范中，每个盒模型的位置是三维的，分别是平面画布上的`X轴`，`Y轴`以及表示层叠的`Z轴`。一般情况下，元素在页面上沿`X轴Y轴`平铺，我们察觉不到它们在`Z轴`上的层叠关系。而一旦元素发生堆叠，这时就能发现某个元素可能覆盖了另一个元素或者被另一个元素覆盖。\n\n如果一个元素含有层叠上下文，(也就是说它是层叠上下文元素)，我们可以理解为这个元素在`Z轴`上就“高人一等”，最终表现就是它离屏幕观察者更近。\n\n>**具象的比喻**：你可以把层叠上下文元素理解为理解为**该元素当了官**，而其他非层叠上下文元素则可以理解为普通群众。凡是“当了官的元素”就比普通元素等级要高，也就是说元素在`Z轴`上更靠上，更靠近观察者。\n\n### 什么是“层叠等级”\n\n那么，层叠等级指的又是什么？层叠等级(stacking level，叫“层叠级别”/“层叠水平”也行)\n* 在同一个层叠上下文中，它描述定义的是该层叠上下文中的层叠上下文元素在`Z轴`上的上下顺序。\n* 在其他普通元素中，它描述定义的是这些普通元素在`Z轴`上的上下顺序。\n\n说到这，可能很多人疑问了，不论在层叠上下文中还是在普通元素中，层叠等级都表示元素在`Z轴`上的上下顺序，那就直接说它描述定义了所有元素在`Z轴`上的上下顺序就OK啊！为什么要分开描述？\n\n为了说明原因，先举个栗子：\n>**具象的比喻**：我们之前说到，处于层叠上下文中的元素，就像是元素当了官，等级自然比普通元素高。再想象一下，假设一个官员A是个省级领导，他下属有一个秘书a-1，家里有一个保姆a-2。另一个官员B是一个县级领导，他下属有一个秘书b-1，家里有一个保姆b-2。a-1和b-1虽然都是秘书，但是你想一个省级领导的秘书和一个县级领导的秘书之间有可比性么？甚至保姆a-2都要比秘书b-1的等级高得多。谁大谁小，谁高谁低一目了然，所以根本没有比较的意义。只有在A下属的a-1、a-2以及B下属的b-1、b-2中相互比较大小高低才有意义。\n\n**再类比回“层叠上下文”和“层叠等级”，就得出一个结论：**\n1. 普通元素的层叠等级优先由其所在的层叠上下文决定。\n2. 层叠等级的比较只有在当前层叠上下文元素中才有意义。不同层叠上下文中比较层叠等级是没有意义的。\n\n\n### 如何产生“层叠上下文”\n\n前面说了那么多，知道了“层叠上下文”和“层叠等级”，其中还有一个最关键的问题：到底如何产生层叠上下文呢？如何让一个元素变成层叠上下文元素呢？\n\n其实，层叠上下文也基本上是有一些特定的CSS属性创建的，一般有3种方法：\n1. `HTML`中的根元素`<html></html>`本身j就具有层叠上下文，称为“根层叠上下文”。\n2. 普通元素设置`position`属性为**非**`static`值并设置`z-index`属性为具体数值，产生层叠上下文。\n3. CSS3中的新属性也可以产生层叠上下文。\n\n至此，终于可以上代码了，我们用代码说话，来验证上面的结论：\n\n**栗子1:**\n**有两个div，p.a、p.b被包裹在一个div里，p.c被包裹在另一个盒子里，只为.a、.b、.c设置`position`和`z-index`属性**\n```\n<style>\n  div {  \n    position: relative;  \n    width: 100px;  \n    height: 100px;  \n  }  \n  p {  \n    position: absolute;  \n    font-size: 20px;  \n    width: 100px;  \n    height: 100px;  \n  }  \n  .a {  \n    background-color: blue;  \n    z-index: 1;  \n  }  \n  .b {  \n    background-color: green;  \n    z-index: 2;  \n    top: 20px;  \n    left: 20px;  \n  }  \n  .c {  \n    background-color: red;  \n    z-index: 3;  \n    top: -20px;  \n    left: 40px;  \n  }\n</style>\n\n<body>  \n  <div>  \n    <p class=\"a\">a</p>  \n    <p class=\"b\">b</p>  \n  </div> \n\n  <div>  \n    <p class=\"c\">c</p>  \n  </div>  \n</body> \n```\n效果：\n![效果1][2]\n因为p.a、p.b、p.c三个的父元素div都没有设置`z-index`，所以不会产生层叠上下文，所以.a、.b、.c都处于由`<html></html>`标签产生的“根层叠上下文”中，属于同一个层叠上下文，此时谁的`z-index`值大，谁在上面。\n\n**栗子2：**\n**有两个div，p.a、p.b被包裹在一个div里，p.c被包裹在另一个盒子里，同时为两个div和.a、.b、.c设置`position`和`z-index`属性**\n```\n<style>\n  div {\n    width: 100px;\n    height: 100px;\n    position: relative;\n  }\n  .box1 {\n    z-index: 2;\n  }\n  .box2 {\n    z-index: 1;\n  }\n  p {\n    position: absolute;\n    font-size: 20px;\n    width: 100px;\n    height: 100px;\n  }\n  .a {\n    background-color: blue;\n    z-index: 100;\n  }\n  .b {\n    background-color: green;\n    top: 20px;\n    left: 20px;\n    z-index: 200;\n  }\n  .c {\n    background-color: red;\n    top: -20px;\n    left: 40px;\n    z-index: 9999;\n  }\n</style>\n\n<body>\n  <div class=\"box1\">\n    <p class=\"a\">a</p>\n    <p class=\"b\">b</p>\n  </div>\n\n  <div class=\"box2\">\n    <p class=\"c\">c</p>\n  </div>\n</body>\n```\n\n效果：\n![效果2][3]\n我们发下，虽然`p.c`元素的`z-index`值为9999，远大于`p.a`和`p.b`的`z-index`值，但是由于`p.a`、`p.b`的父元素`div.box1`产生的层叠上下文的`z-index`的值为2，`p.c`的父元素`div.box2`所产生的层叠上下文的`z-index`值为1，所以`p.c`永远在`p.a`和`p.b`下面。\n\n同时，如果我们只更改`p.a`和`p.b`的`z-index`值，由于这两个元素都在父元素`div.box1`产生的层叠上下文中，所以，谁的`z-index`值大，谁在上面。\n\n\n### 什么是“层叠顺序”\n\n说完“层叠上下文”和“层叠等级”，我们再来说说“层叠顺序”。“层叠顺序”(stacking order)表示元素发生层叠时按照特定的顺序规则在`Z轴`上垂直显示。**由此可见，前面所说的“层叠上下文”和“层叠等级”是一种概念，而这里的“层叠顺序”是一种规则。**\n\n![不同属性的元素的层叠顺序][4]\n\n在不考虑CSS3的情况下，当元素发生层叠时，层叠顺讯遵循上面途中的规则。\n**这里值得注意的是：**\n1. 左上角\"层叠上下文`background/border`\"指的是层叠上下文元素的背景和边框。\n2. `inline/inline-block`元素的层叠顺序要高于`block`(块级)/`float`(浮动)元素。\n3. 单纯考虑层叠顺序，`z-index: auto`和`z-index: 0`在同一层级，但这两个属性值本身是有根本区别的。\n\n>对于上面第2条，为什么`inline/inline-block`元素的层叠顺序要高于`block`(块级)/`float`(浮动)元素？这个大家可以思考一下！\n其实很简单，像`border/background`属于装饰元素的属性，浮动和块级元素一般用来页面布局，而网页设计之初最重要的就是文字内容，所以在发生层叠时会优先显示文字内容，保证其不被覆盖。\n\n\n### 你要的“套路”\n\n上面说了那么多，可能你还是有点懵。这么多概念规则，来点最实际的，有没有一个“套路”当遇到元素层叠时，能很清晰地判断出他们谁在上谁在下呢？答案是——肯定有啊！\n\n>1、首先先看要比较的两个元素是否处于同一个层叠上下文中：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1如果是，谁的层叠等级大，谁在上面（怎么判断层叠等级大小呢？——看“层叠顺序”图）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2如果两个元素不在统一层叠上下文中，请先比较他们所处的层叠上下文的层叠等级。\n2、当两个元素层叠等级相同、层叠顺序相同时，在DOM结构中后面的元素层叠等级在前面元素之上。\n\n\n### 光说不练假把式\n\n对于技术学习，代码展示是最直观最易懂的方式之一。话不多说，直接上代码，我们通过以下几个“栗子”，来进一步验证掌握上面的结论。\n\n**栗子3：**\n```\n<style>\n  .box1, .box2 {\n    position: relative;\n    z-index: auto;\n  }\n  .child1 {\n    width: 200px;\n    height: 100px;\n    background: #168bf5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n  .child2 {\n    width: 100px;\n    height: 200px;\n    background: #32c292;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"box1\">\n    <div class=\"child1\"></div>\n  </div>\n\n  <div class=\"box2\">\n    <div class=\"child2\"></div>\n  </div>\n</body>\n```\n效果：\n![效果3][5]\n**说明：**`.box1/.box2`虽然设置了`position: relative`，但是`z-index: auto`的情况下，这两个`div`还是普通元素，并没有产生层叠上下文。所以，`child1/.child2`属于`<html></html>`元素的“根层叠上下文”中，此时，**谁的`z-index`值大，谁在上面**。\n\n\n**栗子4：**\n\n对于栗子1中的CSS代码，我们只把`.box1/.box2`的`z-index`属性值改为`数值0`，其余不变。\n```\n.box1, .box2 {\n  position: relative;\n  z-index: 0;\n}\n...\n\n```\n效果：\n![效果4][6]\n**说明：** 此时，我们发现，仅仅修改了`.box1/.box2`的`z-index`属性值改为`数值0`，最终结果完全相反。这时`.child2`覆盖在了`.child1`上面。原因是什么呢？很简单：因为设置`z-index: 0`后，`.box1/.box2`产生了各自的层叠上下文，这时候要比较`.child1/.child2`的层叠关系完全由父元素`.box1/.box2`的层叠关系决定。但是`.box1/.box2`的`z-index`值都为`0`，都是块级元素（所以它们的层叠等级，层叠顺序是相同的），这种情况下，在`DOM`结构中**后面的覆盖前面的**，所以`.child2`就在上面。\n\n\n### CSS3中的属性对层叠上下文的影响\n\nCSS3中出现了很多新属性，其中一些属性对层叠上下文也产生了很大的影响。如下：\n1. 父元素的display属性值为`flex|inline-flex`，子元素`z-index`属性值不为`auto`的时候，子元素为层叠上下文元素；\n2. 元素的`opacity`属性值不是`1`；\n3. 元素的`transform`属性值不是`none`；\n4. 元素`mix-blend-mode属性值不是`normal`；\n5. 元素的`filter`属性值不是`none`；\n6. 元素的`isolation`属性值是`isolate`；\n7. `will-change`指定的属性值为上面任意一个；\n8. 元素的`-webkit-overflow-scrolling`属性值设置为`touch`。\n\nCSS3中，元素属性满足以上条件之一，就会产生层叠上下文。我们用第1条来做一个简单的解释说明。\n\n**栗子5：**\n\n```\n<style>\n  .box {\n  }\n  .parent {\n    width: 200px;\n    height: 100px;\n    background: #168bf5;\n    /* 虽然设置了z-index，但是没有设置position，z-index无效，.parent还是普通元素，没有产生层叠上下文 */\n    z-index: 1;\n  }\n  .child {\n    width: 100px;\n    height: 200px;\n    background: #32d19c;\n    position: relative;\n    z-index: -1;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"box\">\n    <div class=\"parent\">\n      parent\n      <div class=\"child\">child</div>\n    </div>\n  </div>\n</body>\n```\n效果：\n![效果5][7]\n**说明：** 我们发现，`.child`被`.parent`覆盖了。按照“套路”来分析一下：\n虽然`.parent`设置了`z-index`属性值，但是没有设置`position`属性，`z-index`无效，所以没有产生层叠上下文，`.parent`还是普通的块级元素。此时，在层叠顺序规则中，`z-index`值小于`0`的`.child`会被普通的`block`块级元素`.parent`覆盖。\n\n**栗子6**\n\n对于上面的栗子，我们只修改.box的属性，设置display: flex，其余属性和DOM结构不变。\n```\n.box {\n  display: flex;\n}\n```\n效果：\n![效果6][8]\n**说明：** 当给`.box`设置`display: flex`时，`.parent`就变成层叠上下文元素，根据层叠顺序规则，层叠上下文元素的`background/border`的层叠等级小于`z-index`值小于`0`的元素的层叠等级，所以`z-index`值为`-1`的`.child`在`.parent`上面。\n\n\n### 小测试\n\n下面的代码，我会把最终页面渲染的结果放在代码之后，有兴趣的“童鞋”可以分析一下，各个元素的层叠等级，最后来确定这些元素哪个在上哪个在下。\n\n```\n<style>\n  .parent {\n    width: 100px;\n    height: 200px;\n    background: #168bf5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 0;\n  }\n  .child1 {\n    width: 100px;\n    height: 200px;\n    background: #32d19c;\n    position: absolute;\n    top: 20px;\n    left: 20px;\n    z-index: 1;\n  }\n  .child2 {\n    width: 100px;\n    height: 200px;\n    background: #e4c950;\n    position: absolute;\n    top: 40px;\n    left: 40px;\n    z-index: -1;\n  }\n  .child2-1 {\n    width: 100px;\n    height: 200px;\n    background: #e45050;\n    position: absolute;\n    top: 60px;\n    left: 60px;\n    z-index: 9999;\n  }\n  .child2-2 {\n    width: 100px;\n    height: 200px;\n    background: #db68a7;\n    position: absolute;\n    top: 80px;\n    left: 40px;\n    z-index: -9999;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"parent\">\n    parent\n    <div class=\"child1\">child1</div>\n    <div class=\"child2\">\n      child2\n      <div class=\"child2-1\">child2-1</div>\n      <div class=\"child2-2\">child2-2</div>\n    </div>\n  </div>\n</body>\n```\n\n效果：\n![小测试代码页面渲染结果][9]\n\n\n### 参考文章\n\n以上的内容有一部分内容参考了以下两位大神的博客，写的很好，也很清晰，推荐大家看一看，你会对相关知识点掌握的更清晰。\n\n>[张鑫旭-《深入理解CSS中的层叠上下文和层叠顺序》](https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/)\n>[AMInInsist-《CSS 中的z-index属性》](https://blog.csdn.net/weixin_40672882/article/details/81183321)\n\n\n### 推荐文章\n\n**下面的文章链接是我在学习实践过程中看到的一些觉得比较好的文章，有兴趣霍有需要的朋友可以参考参考，希望可以帮你彻底弄清文章中涉及的这些问题。**\n\n>[lijinxieyang-《层叠上下文【stacking context】与层叠顺序【stacking order】》](http://www.w3help.org/zh-cn/kb/013/)\n>[w3help.org - 《KB013: 分层的显示( Layered presentation )》](http://www.w3help.org/zh-cn/kb/013/)\n>[MDN-《The stacking context》](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context)\n>[尚-《css之层叠上下文和层叠顺序》](https://www.cnblogs.com/chenshanyuanzi/p/7700823.html)\n\n\n[1]: /medias/article/coding/z-index/XYZ.png\n[2]: /medias/article/coding/z-index/xiaoguo1.jpg\n[3]: /medias/article/coding/z-index/xiaoguo2.jpg\n[4]: /medias/article/coding/z-index/stacking-order.jpg\n[5]: /medias/article/coding/z-index/xiaoguo3.jpg\n[6]: /medias/article/coding/z-index/xiaoguo4.jpg\n[7]: /medias/article/coding/z-index/xiaoguo5.jpg\n[8]: /medias/article/coding/z-index/xiaoguo6.jpg\n[9]: /medias/article/coding/z-index/test.jpg","slug":"z-index","published":1,"updated":"2019-01-04T11:43:35.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mwk002r9kvbw8s5xejv","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近，在项目中遇到一个关于CSS中元素<code>z-index</code>属性的问题，具体问题不太好描述，总结起来就是当给元素和父元素色设置<code>position</code>属性和<code>z-index</code>相关属性后，页面上渲染的元素层级结果和我预想的不一样。根据自己之前的理解，也没找到一个合理的解释。我知道，肯定是我对相关属性的细节理解存在问题，所以结合官方文档和在网上各种搜集整理，明白了其中的原因。写下这篇文章，和大家分享有关CSS中<code>层叠上下文</code>、<code>层叠等级</code>、<code>层叠顺序</code>以及<code>z-index</code>相关的一整套技术细节。</p>\n<p>如果存在什么错误或重要遗漏或者有什么疑问，欢迎留言指正、讨论！感谢！</p>\n<a id=\"more\"></a>\n<h3 id=\"一个“片面”的理解\"><a href=\"#一个“片面”的理解\" class=\"headerlink\" title=\"一个“片面”的理解\"></a>一个“片面”的理解</h3><p>以往，由于自己使用<code>z-index</code>的频率不大，所以对这个CSS属性存在比较片面的认识。一直认为<code>z-index</code>就是用来描述定义一个元素在屏幕<code>Z轴</code>上的堆叠顺序。<code>z-index</code>值越大在<code>Z轴</code>上就越靠上，也就是离屏幕观察者越近。最后才发现这个认识存在很大的问题：</p>\n<ol>\n<li>首先，<code>z-index</code>属性值并不是在任何元素上都有效果。它<strong>仅在</strong>定位元素（定义了<code>position</code>属性，且属性值为非<code>static</code>值的元素）上有效果。</li>\n<li>判断元素在<code>Z轴</code>上的堆叠顺序，不仅仅是直接比较两个元素的<code>z-index</code>值的大小，这个堆叠顺序实际由元素的<strong>层叠上下文</strong>、<strong>层叠等级</strong>共同决定。</li>\n</ol>\n<p><img src=\"/medias/article/coding/z-index/XYZ.png\" alt=\"屏幕上的XYZ轴\"></p>\n<p>要想完全理解一个东西，首先要明白它是什么，也就是它的定义。我们先看看上面提到的<code>层叠上下文</code>、<code>层叠等级</code>、<code>层叠顺序</code>都是什么？定义又太过抽象，后面会再用一个具象的比喻来让你彻底明白它们到底是什么，有什么联系。</p>\n<h3 id=\"什么是“层叠上下文”\"><a href=\"#什么是“层叠上下文”\" class=\"headerlink\" title=\"什么是“层叠上下文”\"></a>什么是“层叠上下文”</h3><p>层叠上下文(stacking context)，是<code>HTML</code>中一个三维的概念。在<code>CSS2.1</code>规范中，每个盒模型的位置是三维的，分别是平面画布上的<code>X轴</code>，<code>Y轴</code>以及表示层叠的<code>Z轴</code>。一般情况下，元素在页面上沿<code>X轴Y轴</code>平铺，我们察觉不到它们在<code>Z轴</code>上的层叠关系。而一旦元素发生堆叠，这时就能发现某个元素可能覆盖了另一个元素或者被另一个元素覆盖。</p>\n<p>如果一个元素含有层叠上下文，(也就是说它是层叠上下文元素)，我们可以理解为这个元素在<code>Z轴</code>上就“高人一等”，最终表现就是它离屏幕观察者更近。</p>\n<blockquote>\n<p><strong>具象的比喻</strong>：你可以把层叠上下文元素理解为理解为<strong>该元素当了官</strong>，而其他非层叠上下文元素则可以理解为普通群众。凡是“当了官的元素”就比普通元素等级要高，也就是说元素在<code>Z轴</code>上更靠上，更靠近观察者。</p>\n</blockquote>\n<h3 id=\"什么是“层叠等级”\"><a href=\"#什么是“层叠等级”\" class=\"headerlink\" title=\"什么是“层叠等级”\"></a>什么是“层叠等级”</h3><p>那么，层叠等级指的又是什么？层叠等级(stacking level，叫“层叠级别”/“层叠水平”也行)</p>\n<ul>\n<li>在同一个层叠上下文中，它描述定义的是该层叠上下文中的层叠上下文元素在<code>Z轴</code>上的上下顺序。</li>\n<li>在其他普通元素中，它描述定义的是这些普通元素在<code>Z轴</code>上的上下顺序。</li>\n</ul>\n<p>说到这，可能很多人疑问了，不论在层叠上下文中还是在普通元素中，层叠等级都表示元素在<code>Z轴</code>上的上下顺序，那就直接说它描述定义了所有元素在<code>Z轴</code>上的上下顺序就OK啊！为什么要分开描述？</p>\n<p>为了说明原因，先举个栗子：</p>\n<blockquote>\n<p><strong>具象的比喻</strong>：我们之前说到，处于层叠上下文中的元素，就像是元素当了官，等级自然比普通元素高。再想象一下，假设一个官员A是个省级领导，他下属有一个秘书a-1，家里有一个保姆a-2。另一个官员B是一个县级领导，他下属有一个秘书b-1，家里有一个保姆b-2。a-1和b-1虽然都是秘书，但是你想一个省级领导的秘书和一个县级领导的秘书之间有可比性么？甚至保姆a-2都要比秘书b-1的等级高得多。谁大谁小，谁高谁低一目了然，所以根本没有比较的意义。只有在A下属的a-1、a-2以及B下属的b-1、b-2中相互比较大小高低才有意义。</p>\n</blockquote>\n<p><strong>再类比回“层叠上下文”和“层叠等级”，就得出一个结论：</strong></p>\n<ol>\n<li>普通元素的层叠等级优先由其所在的层叠上下文决定。</li>\n<li>层叠等级的比较只有在当前层叠上下文元素中才有意义。不同层叠上下文中比较层叠等级是没有意义的。</li>\n</ol>\n<h3 id=\"如何产生“层叠上下文”\"><a href=\"#如何产生“层叠上下文”\" class=\"headerlink\" title=\"如何产生“层叠上下文”\"></a>如何产生“层叠上下文”</h3><p>前面说了那么多，知道了“层叠上下文”和“层叠等级”，其中还有一个最关键的问题：到底如何产生层叠上下文呢？如何让一个元素变成层叠上下文元素呢？</p>\n<p>其实，层叠上下文也基本上是有一些特定的CSS属性创建的，一般有3种方法：</p>\n<ol>\n<li><code>HTML</code>中的根元素<code>&lt;html&gt;&lt;/html&gt;</code>本身j就具有层叠上下文，称为“根层叠上下文”。</li>\n<li>普通元素设置<code>position</code>属性为<strong>非</strong><code>static</code>值并设置<code>z-index</code>属性为具体数值，产生层叠上下文。</li>\n<li>CSS3中的新属性也可以产生层叠上下文。</li>\n</ol>\n<p>至此，终于可以上代码了，我们用代码说话，来验证上面的结论：</p>\n<p><strong>栗子1:</strong><br><strong>有两个div，p.a、p.b被包裹在一个div里，p.c被包裹在另一个盒子里，只为.a、.b、.c设置<code>position</code>和<code>z-index</code>属性</strong></p>\n<pre><code>&lt;style&gt;\n  div {  \n    position: relative;  \n    width: 100px;  \n    height: 100px;  \n  }  \n  p {  \n    position: absolute;  \n    font-size: 20px;  \n    width: 100px;  \n    height: 100px;  \n  }  \n  .a {  \n    background-color: blue;  \n    z-index: 1;  \n  }  \n  .b {  \n    background-color: green;  \n    z-index: 2;  \n    top: 20px;  \n    left: 20px;  \n  }  \n  .c {  \n    background-color: red;  \n    z-index: 3;  \n    top: -20px;  \n    left: 40px;  \n  }\n&lt;/style&gt;\n\n&lt;body&gt;  \n  &lt;div&gt;  \n    &lt;p class=&quot;a&quot;&gt;a&lt;/p&gt;  \n    &lt;p class=&quot;b&quot;&gt;b&lt;/p&gt;  \n  &lt;/div&gt; \n\n  &lt;div&gt;  \n    &lt;p class=&quot;c&quot;&gt;c&lt;/p&gt;  \n  &lt;/div&gt;  \n&lt;/body&gt; \n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo1.jpg\" alt=\"效果1\"><br>因为p.a、p.b、p.c三个的父元素div都没有设置<code>z-index</code>，所以不会产生层叠上下文，所以.a、.b、.c都处于由<code>&lt;html&gt;&lt;/html&gt;</code>标签产生的“根层叠上下文”中，属于同一个层叠上下文，此时谁的<code>z-index</code>值大，谁在上面。</p>\n<p><strong>栗子2：</strong><br><strong>有两个div，p.a、p.b被包裹在一个div里，p.c被包裹在另一个盒子里，同时为两个div和.a、.b、.c设置<code>position</code>和<code>z-index</code>属性</strong></p>\n<pre><code>&lt;style&gt;\n  div {\n    width: 100px;\n    height: 100px;\n    position: relative;\n  }\n  .box1 {\n    z-index: 2;\n  }\n  .box2 {\n    z-index: 1;\n  }\n  p {\n    position: absolute;\n    font-size: 20px;\n    width: 100px;\n    height: 100px;\n  }\n  .a {\n    background-color: blue;\n    z-index: 100;\n  }\n  .b {\n    background-color: green;\n    top: 20px;\n    left: 20px;\n    z-index: 200;\n  }\n  .c {\n    background-color: red;\n    top: -20px;\n    left: 40px;\n    z-index: 9999;\n  }\n&lt;/style&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;box1&quot;&gt;\n    &lt;p class=&quot;a&quot;&gt;a&lt;/p&gt;\n    &lt;p class=&quot;b&quot;&gt;b&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;box2&quot;&gt;\n    &lt;p class=&quot;c&quot;&gt;c&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo2.jpg\" alt=\"效果2\"><br>我们发下，虽然<code>p.c</code>元素的<code>z-index</code>值为9999，远大于<code>p.a</code>和<code>p.b</code>的<code>z-index</code>值，但是由于<code>p.a</code>、<code>p.b</code>的父元素<code>div.box1</code>产生的层叠上下文的<code>z-index</code>的值为2，<code>p.c</code>的父元素<code>div.box2</code>所产生的层叠上下文的<code>z-index</code>值为1，所以<code>p.c</code>永远在<code>p.a</code>和<code>p.b</code>下面。</p>\n<p>同时，如果我们只更改<code>p.a</code>和<code>p.b</code>的<code>z-index</code>值，由于这两个元素都在父元素<code>div.box1</code>产生的层叠上下文中，所以，谁的<code>z-index</code>值大，谁在上面。</p>\n<h3 id=\"什么是“层叠顺序”\"><a href=\"#什么是“层叠顺序”\" class=\"headerlink\" title=\"什么是“层叠顺序”\"></a>什么是“层叠顺序”</h3><p>说完“层叠上下文”和“层叠等级”，我们再来说说“层叠顺序”。“层叠顺序”(stacking order)表示元素发生层叠时按照特定的顺序规则在<code>Z轴</code>上垂直显示。<strong>由此可见，前面所说的“层叠上下文”和“层叠等级”是一种概念，而这里的“层叠顺序”是一种规则。</strong></p>\n<p><img src=\"/medias/article/coding/z-index/stacking-order.jpg\" alt=\"不同属性的元素的层叠顺序\"></p>\n<p>在不考虑CSS3的情况下，当元素发生层叠时，层叠顺讯遵循上面途中的规则。<br><strong>这里值得注意的是：</strong></p>\n<ol>\n<li>左上角”层叠上下文<code>background/border</code>“指的是层叠上下文元素的背景和边框。</li>\n<li><code>inline/inline-block</code>元素的层叠顺序要高于<code>block</code>(块级)/<code>float</code>(浮动)元素。</li>\n<li>单纯考虑层叠顺序，<code>z-index: auto</code>和<code>z-index: 0</code>在同一层级，但这两个属性值本身是有根本区别的。</li>\n</ol>\n<blockquote>\n<p>对于上面第2条，为什么<code>inline/inline-block</code>元素的层叠顺序要高于<code>block</code>(块级)/<code>float</code>(浮动)元素？这个大家可以思考一下！<br>其实很简单，像<code>border/background</code>属于装饰元素的属性，浮动和块级元素一般用来页面布局，而网页设计之初最重要的就是文字内容，所以在发生层叠时会优先显示文字内容，保证其不被覆盖。</p>\n</blockquote>\n<h3 id=\"你要的“套路”\"><a href=\"#你要的“套路”\" class=\"headerlink\" title=\"你要的“套路”\"></a>你要的“套路”</h3><p>上面说了那么多，可能你还是有点懵。这么多概念规则，来点最实际的，有没有一个“套路”当遇到元素层叠时，能很清晰地判断出他们谁在上谁在下呢？答案是——肯定有啊！</p>\n<blockquote>\n<p>1、首先先看要比较的两个元素是否处于同一个层叠上下文中：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1如果是，谁的层叠等级大，谁在上面（怎么判断层叠等级大小呢？——看“层叠顺序”图）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2如果两个元素不在统一层叠上下文中，请先比较他们所处的层叠上下文的层叠等级。<br>2、当两个元素层叠等级相同、层叠顺序相同时，在DOM结构中后面的元素层叠等级在前面元素之上。</p>\n</blockquote>\n<h3 id=\"光说不练假把式\"><a href=\"#光说不练假把式\" class=\"headerlink\" title=\"光说不练假把式\"></a>光说不练假把式</h3><p>对于技术学习，代码展示是最直观最易懂的方式之一。话不多说，直接上代码，我们通过以下几个“栗子”，来进一步验证掌握上面的结论。</p>\n<p><strong>栗子3：</strong></p>\n<pre><code>&lt;style&gt;\n  .box1, .box2 {\n    position: relative;\n    z-index: auto;\n  }\n  .child1 {\n    width: 200px;\n    height: 100px;\n    background: #168bf5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n  .child2 {\n    width: 100px;\n    height: 200px;\n    background: #32c292;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;box1&quot;&gt;\n    &lt;div class=&quot;child1&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;box2&quot;&gt;\n    &lt;div class=&quot;child2&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo3.jpg\" alt=\"效果3\"><br><strong>说明：</strong><code>.box1/.box2</code>虽然设置了<code>position: relative</code>，但是<code>z-index: auto</code>的情况下，这两个<code>div</code>还是普通元素，并没有产生层叠上下文。所以，<code>child1/.child2</code>属于<code>&lt;html&gt;&lt;/html&gt;</code>元素的“根层叠上下文”中，此时，<strong>谁的<code>z-index</code>值大，谁在上面</strong>。</p>\n<p><strong>栗子4：</strong></p>\n<p>对于栗子1中的CSS代码，我们只把<code>.box1/.box2</code>的<code>z-index</code>属性值改为<code>数值0</code>，其余不变。</p>\n<pre><code>.box1, .box2 {\n  position: relative;\n  z-index: 0;\n}\n...\n\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo4.jpg\" alt=\"效果4\"><br><strong>说明：</strong> 此时，我们发现，仅仅修改了<code>.box1/.box2</code>的<code>z-index</code>属性值改为<code>数值0</code>，最终结果完全相反。这时<code>.child2</code>覆盖在了<code>.child1</code>上面。原因是什么呢？很简单：因为设置<code>z-index: 0</code>后，<code>.box1/.box2</code>产生了各自的层叠上下文，这时候要比较<code>.child1/.child2</code>的层叠关系完全由父元素<code>.box1/.box2</code>的层叠关系决定。但是<code>.box1/.box2</code>的<code>z-index</code>值都为<code>0</code>，都是块级元素（所以它们的层叠等级，层叠顺序是相同的），这种情况下，在<code>DOM</code>结构中<strong>后面的覆盖前面的</strong>，所以<code>.child2</code>就在上面。</p>\n<h3 id=\"CSS3中的属性对层叠上下文的影响\"><a href=\"#CSS3中的属性对层叠上下文的影响\" class=\"headerlink\" title=\"CSS3中的属性对层叠上下文的影响\"></a>CSS3中的属性对层叠上下文的影响</h3><p>CSS3中出现了很多新属性，其中一些属性对层叠上下文也产生了很大的影响。如下：</p>\n<ol>\n<li>父元素的display属性值为<code>flex|inline-flex</code>，子元素<code>z-index</code>属性值不为<code>auto</code>的时候，子元素为层叠上下文元素；</li>\n<li>元素的<code>opacity</code>属性值不是<code>1</code>；</li>\n<li>元素的<code>transform</code>属性值不是<code>none</code>；</li>\n<li>元素<code>mix-blend-mode属性值不是</code>normal`；</li>\n<li>元素的<code>filter</code>属性值不是<code>none</code>；</li>\n<li>元素的<code>isolation</code>属性值是<code>isolate</code>；</li>\n<li><code>will-change</code>指定的属性值为上面任意一个；</li>\n<li>元素的<code>-webkit-overflow-scrolling</code>属性值设置为<code>touch</code>。</li>\n</ol>\n<p>CSS3中，元素属性满足以上条件之一，就会产生层叠上下文。我们用第1条来做一个简单的解释说明。</p>\n<p><strong>栗子5：</strong></p>\n<pre><code>&lt;style&gt;\n  .box {\n  }\n  .parent {\n    width: 200px;\n    height: 100px;\n    background: #168bf5;\n    /* 虽然设置了z-index，但是没有设置position，z-index无效，.parent还是普通元素，没有产生层叠上下文 */\n    z-index: 1;\n  }\n  .child {\n    width: 100px;\n    height: 200px;\n    background: #32d19c;\n    position: relative;\n    z-index: -1;\n  }\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n      parent\n      &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo5.jpg\" alt=\"效果5\"><br><strong>说明：</strong> 我们发现，<code>.child</code>被<code>.parent</code>覆盖了。按照“套路”来分析一下：<br>虽然<code>.parent</code>设置了<code>z-index</code>属性值，但是没有设置<code>position</code>属性，<code>z-index</code>无效，所以没有产生层叠上下文，<code>.parent</code>还是普通的块级元素。此时，在层叠顺序规则中，<code>z-index</code>值小于<code>0</code>的<code>.child</code>会被普通的<code>block</code>块级元素<code>.parent</code>覆盖。</p>\n<p><strong>栗子6</strong></p>\n<p>对于上面的栗子，我们只修改.box的属性，设置display: flex，其余属性和DOM结构不变。</p>\n<pre><code>.box {\n  display: flex;\n}\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo6.jpg\" alt=\"效果6\"><br><strong>说明：</strong> 当给<code>.box</code>设置<code>display: flex</code>时，<code>.parent</code>就变成层叠上下文元素，根据层叠顺序规则，层叠上下文元素的<code>background/border</code>的层叠等级小于<code>z-index</code>值小于<code>0</code>的元素的层叠等级，所以<code>z-index</code>值为<code>-1</code>的<code>.child</code>在<code>.parent</code>上面。</p>\n<h3 id=\"小测试\"><a href=\"#小测试\" class=\"headerlink\" title=\"小测试\"></a>小测试</h3><p>下面的代码，我会把最终页面渲染的结果放在代码之后，有兴趣的“童鞋”可以分析一下，各个元素的层叠等级，最后来确定这些元素哪个在上哪个在下。</p>\n<pre><code>&lt;style&gt;\n  .parent {\n    width: 100px;\n    height: 200px;\n    background: #168bf5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 0;\n  }\n  .child1 {\n    width: 100px;\n    height: 200px;\n    background: #32d19c;\n    position: absolute;\n    top: 20px;\n    left: 20px;\n    z-index: 1;\n  }\n  .child2 {\n    width: 100px;\n    height: 200px;\n    background: #e4c950;\n    position: absolute;\n    top: 40px;\n    left: 40px;\n    z-index: -1;\n  }\n  .child2-1 {\n    width: 100px;\n    height: 200px;\n    background: #e45050;\n    position: absolute;\n    top: 60px;\n    left: 60px;\n    z-index: 9999;\n  }\n  .child2-2 {\n    width: 100px;\n    height: 200px;\n    background: #db68a7;\n    position: absolute;\n    top: 80px;\n    left: 40px;\n    z-index: -9999;\n  }\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    parent\n    &lt;div class=&quot;child1&quot;&gt;child1&lt;/div&gt;\n    &lt;div class=&quot;child2&quot;&gt;\n      child2\n      &lt;div class=&quot;child2-1&quot;&gt;child2-1&lt;/div&gt;\n      &lt;div class=&quot;child2-2&quot;&gt;child2-2&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/test.jpg\" alt=\"小测试代码页面渲染结果\"></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p>以上的内容有一部分内容参考了以下两位大神的博客，写的很好，也很清晰，推荐大家看一看，你会对相关知识点掌握的更清晰。</p>\n<blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\" target=\"_blank\" rel=\"noopener\">张鑫旭-《深入理解CSS中的层叠上下文和层叠顺序》</a><br><a href=\"https://blog.csdn.net/weixin_40672882/article/details/81183321\" target=\"_blank\" rel=\"noopener\">AMInInsist-《CSS 中的z-index属性》</a></p>\n</blockquote>\n<h3 id=\"推荐文章\"><a href=\"#推荐文章\" class=\"headerlink\" title=\"推荐文章\"></a>推荐文章</h3><p><strong>下面的文章链接是我在学习实践过程中看到的一些觉得比较好的文章，有兴趣霍有需要的朋友可以参考参考，希望可以帮你彻底弄清文章中涉及的这些问题。</strong></p>\n<blockquote>\n<p><a href=\"http://www.w3help.org/zh-cn/kb/013/\" target=\"_blank\" rel=\"noopener\">lijinxieyang-《层叠上下文【stacking context】与层叠顺序【stacking order】》</a><br><a href=\"http://www.w3help.org/zh-cn/kb/013/\" target=\"_blank\" rel=\"noopener\">w3help.org - 《KB013: 分层的显示( Layered presentation )》</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\" target=\"_blank\" rel=\"noopener\">MDN-《The stacking context》</a><br><a href=\"https://www.cnblogs.com/chenshanyuanzi/p/7700823.html\" target=\"_blank\" rel=\"noopener\">尚-《css之层叠上下文和层叠顺序》</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近，在项目中遇到一个关于CSS中元素<code>z-index</code>属性的问题，具体问题不太好描述，总结起来就是当给元素和父元素色设置<code>position</code>属性和<code>z-index</code>相关属性后，页面上渲染的元素层级结果和我预想的不一样。根据自己之前的理解，也没找到一个合理的解释。我知道，肯定是我对相关属性的细节理解存在问题，所以结合官方文档和在网上各种搜集整理，明白了其中的原因。写下这篇文章，和大家分享有关CSS中<code>层叠上下文</code>、<code>层叠等级</code>、<code>层叠顺序</code>以及<code>z-index</code>相关的一整套技术细节。</p>\n<p>如果存在什么错误或重要遗漏或者有什么疑问，欢迎留言指正、讨论！感谢！</p>","more":"<h3 id=\"一个“片面”的理解\"><a href=\"#一个“片面”的理解\" class=\"headerlink\" title=\"一个“片面”的理解\"></a>一个“片面”的理解</h3><p>以往，由于自己使用<code>z-index</code>的频率不大，所以对这个CSS属性存在比较片面的认识。一直认为<code>z-index</code>就是用来描述定义一个元素在屏幕<code>Z轴</code>上的堆叠顺序。<code>z-index</code>值越大在<code>Z轴</code>上就越靠上，也就是离屏幕观察者越近。最后才发现这个认识存在很大的问题：</p>\n<ol>\n<li>首先，<code>z-index</code>属性值并不是在任何元素上都有效果。它<strong>仅在</strong>定位元素（定义了<code>position</code>属性，且属性值为非<code>static</code>值的元素）上有效果。</li>\n<li>判断元素在<code>Z轴</code>上的堆叠顺序，不仅仅是直接比较两个元素的<code>z-index</code>值的大小，这个堆叠顺序实际由元素的<strong>层叠上下文</strong>、<strong>层叠等级</strong>共同决定。</li>\n</ol>\n<p><img src=\"/medias/article/coding/z-index/XYZ.png\" alt=\"屏幕上的XYZ轴\"></p>\n<p>要想完全理解一个东西，首先要明白它是什么，也就是它的定义。我们先看看上面提到的<code>层叠上下文</code>、<code>层叠等级</code>、<code>层叠顺序</code>都是什么？定义又太过抽象，后面会再用一个具象的比喻来让你彻底明白它们到底是什么，有什么联系。</p>\n<h3 id=\"什么是“层叠上下文”\"><a href=\"#什么是“层叠上下文”\" class=\"headerlink\" title=\"什么是“层叠上下文”\"></a>什么是“层叠上下文”</h3><p>层叠上下文(stacking context)，是<code>HTML</code>中一个三维的概念。在<code>CSS2.1</code>规范中，每个盒模型的位置是三维的，分别是平面画布上的<code>X轴</code>，<code>Y轴</code>以及表示层叠的<code>Z轴</code>。一般情况下，元素在页面上沿<code>X轴Y轴</code>平铺，我们察觉不到它们在<code>Z轴</code>上的层叠关系。而一旦元素发生堆叠，这时就能发现某个元素可能覆盖了另一个元素或者被另一个元素覆盖。</p>\n<p>如果一个元素含有层叠上下文，(也就是说它是层叠上下文元素)，我们可以理解为这个元素在<code>Z轴</code>上就“高人一等”，最终表现就是它离屏幕观察者更近。</p>\n<blockquote>\n<p><strong>具象的比喻</strong>：你可以把层叠上下文元素理解为理解为<strong>该元素当了官</strong>，而其他非层叠上下文元素则可以理解为普通群众。凡是“当了官的元素”就比普通元素等级要高，也就是说元素在<code>Z轴</code>上更靠上，更靠近观察者。</p>\n</blockquote>\n<h3 id=\"什么是“层叠等级”\"><a href=\"#什么是“层叠等级”\" class=\"headerlink\" title=\"什么是“层叠等级”\"></a>什么是“层叠等级”</h3><p>那么，层叠等级指的又是什么？层叠等级(stacking level，叫“层叠级别”/“层叠水平”也行)</p>\n<ul>\n<li>在同一个层叠上下文中，它描述定义的是该层叠上下文中的层叠上下文元素在<code>Z轴</code>上的上下顺序。</li>\n<li>在其他普通元素中，它描述定义的是这些普通元素在<code>Z轴</code>上的上下顺序。</li>\n</ul>\n<p>说到这，可能很多人疑问了，不论在层叠上下文中还是在普通元素中，层叠等级都表示元素在<code>Z轴</code>上的上下顺序，那就直接说它描述定义了所有元素在<code>Z轴</code>上的上下顺序就OK啊！为什么要分开描述？</p>\n<p>为了说明原因，先举个栗子：</p>\n<blockquote>\n<p><strong>具象的比喻</strong>：我们之前说到，处于层叠上下文中的元素，就像是元素当了官，等级自然比普通元素高。再想象一下，假设一个官员A是个省级领导，他下属有一个秘书a-1，家里有一个保姆a-2。另一个官员B是一个县级领导，他下属有一个秘书b-1，家里有一个保姆b-2。a-1和b-1虽然都是秘书，但是你想一个省级领导的秘书和一个县级领导的秘书之间有可比性么？甚至保姆a-2都要比秘书b-1的等级高得多。谁大谁小，谁高谁低一目了然，所以根本没有比较的意义。只有在A下属的a-1、a-2以及B下属的b-1、b-2中相互比较大小高低才有意义。</p>\n</blockquote>\n<p><strong>再类比回“层叠上下文”和“层叠等级”，就得出一个结论：</strong></p>\n<ol>\n<li>普通元素的层叠等级优先由其所在的层叠上下文决定。</li>\n<li>层叠等级的比较只有在当前层叠上下文元素中才有意义。不同层叠上下文中比较层叠等级是没有意义的。</li>\n</ol>\n<h3 id=\"如何产生“层叠上下文”\"><a href=\"#如何产生“层叠上下文”\" class=\"headerlink\" title=\"如何产生“层叠上下文”\"></a>如何产生“层叠上下文”</h3><p>前面说了那么多，知道了“层叠上下文”和“层叠等级”，其中还有一个最关键的问题：到底如何产生层叠上下文呢？如何让一个元素变成层叠上下文元素呢？</p>\n<p>其实，层叠上下文也基本上是有一些特定的CSS属性创建的，一般有3种方法：</p>\n<ol>\n<li><code>HTML</code>中的根元素<code>&lt;html&gt;&lt;/html&gt;</code>本身j就具有层叠上下文，称为“根层叠上下文”。</li>\n<li>普通元素设置<code>position</code>属性为<strong>非</strong><code>static</code>值并设置<code>z-index</code>属性为具体数值，产生层叠上下文。</li>\n<li>CSS3中的新属性也可以产生层叠上下文。</li>\n</ol>\n<p>至此，终于可以上代码了，我们用代码说话，来验证上面的结论：</p>\n<p><strong>栗子1:</strong><br><strong>有两个div，p.a、p.b被包裹在一个div里，p.c被包裹在另一个盒子里，只为.a、.b、.c设置<code>position</code>和<code>z-index</code>属性</strong></p>\n<pre><code>&lt;style&gt;\n  div {  \n    position: relative;  \n    width: 100px;  \n    height: 100px;  \n  }  \n  p {  \n    position: absolute;  \n    font-size: 20px;  \n    width: 100px;  \n    height: 100px;  \n  }  \n  .a {  \n    background-color: blue;  \n    z-index: 1;  \n  }  \n  .b {  \n    background-color: green;  \n    z-index: 2;  \n    top: 20px;  \n    left: 20px;  \n  }  \n  .c {  \n    background-color: red;  \n    z-index: 3;  \n    top: -20px;  \n    left: 40px;  \n  }\n&lt;/style&gt;\n\n&lt;body&gt;  \n  &lt;div&gt;  \n    &lt;p class=&quot;a&quot;&gt;a&lt;/p&gt;  \n    &lt;p class=&quot;b&quot;&gt;b&lt;/p&gt;  \n  &lt;/div&gt; \n\n  &lt;div&gt;  \n    &lt;p class=&quot;c&quot;&gt;c&lt;/p&gt;  \n  &lt;/div&gt;  \n&lt;/body&gt; \n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo1.jpg\" alt=\"效果1\"><br>因为p.a、p.b、p.c三个的父元素div都没有设置<code>z-index</code>，所以不会产生层叠上下文，所以.a、.b、.c都处于由<code>&lt;html&gt;&lt;/html&gt;</code>标签产生的“根层叠上下文”中，属于同一个层叠上下文，此时谁的<code>z-index</code>值大，谁在上面。</p>\n<p><strong>栗子2：</strong><br><strong>有两个div，p.a、p.b被包裹在一个div里，p.c被包裹在另一个盒子里，同时为两个div和.a、.b、.c设置<code>position</code>和<code>z-index</code>属性</strong></p>\n<pre><code>&lt;style&gt;\n  div {\n    width: 100px;\n    height: 100px;\n    position: relative;\n  }\n  .box1 {\n    z-index: 2;\n  }\n  .box2 {\n    z-index: 1;\n  }\n  p {\n    position: absolute;\n    font-size: 20px;\n    width: 100px;\n    height: 100px;\n  }\n  .a {\n    background-color: blue;\n    z-index: 100;\n  }\n  .b {\n    background-color: green;\n    top: 20px;\n    left: 20px;\n    z-index: 200;\n  }\n  .c {\n    background-color: red;\n    top: -20px;\n    left: 40px;\n    z-index: 9999;\n  }\n&lt;/style&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;box1&quot;&gt;\n    &lt;p class=&quot;a&quot;&gt;a&lt;/p&gt;\n    &lt;p class=&quot;b&quot;&gt;b&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;box2&quot;&gt;\n    &lt;p class=&quot;c&quot;&gt;c&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo2.jpg\" alt=\"效果2\"><br>我们发下，虽然<code>p.c</code>元素的<code>z-index</code>值为9999，远大于<code>p.a</code>和<code>p.b</code>的<code>z-index</code>值，但是由于<code>p.a</code>、<code>p.b</code>的父元素<code>div.box1</code>产生的层叠上下文的<code>z-index</code>的值为2，<code>p.c</code>的父元素<code>div.box2</code>所产生的层叠上下文的<code>z-index</code>值为1，所以<code>p.c</code>永远在<code>p.a</code>和<code>p.b</code>下面。</p>\n<p>同时，如果我们只更改<code>p.a</code>和<code>p.b</code>的<code>z-index</code>值，由于这两个元素都在父元素<code>div.box1</code>产生的层叠上下文中，所以，谁的<code>z-index</code>值大，谁在上面。</p>\n<h3 id=\"什么是“层叠顺序”\"><a href=\"#什么是“层叠顺序”\" class=\"headerlink\" title=\"什么是“层叠顺序”\"></a>什么是“层叠顺序”</h3><p>说完“层叠上下文”和“层叠等级”，我们再来说说“层叠顺序”。“层叠顺序”(stacking order)表示元素发生层叠时按照特定的顺序规则在<code>Z轴</code>上垂直显示。<strong>由此可见，前面所说的“层叠上下文”和“层叠等级”是一种概念，而这里的“层叠顺序”是一种规则。</strong></p>\n<p><img src=\"/medias/article/coding/z-index/stacking-order.jpg\" alt=\"不同属性的元素的层叠顺序\"></p>\n<p>在不考虑CSS3的情况下，当元素发生层叠时，层叠顺讯遵循上面途中的规则。<br><strong>这里值得注意的是：</strong></p>\n<ol>\n<li>左上角”层叠上下文<code>background/border</code>“指的是层叠上下文元素的背景和边框。</li>\n<li><code>inline/inline-block</code>元素的层叠顺序要高于<code>block</code>(块级)/<code>float</code>(浮动)元素。</li>\n<li>单纯考虑层叠顺序，<code>z-index: auto</code>和<code>z-index: 0</code>在同一层级，但这两个属性值本身是有根本区别的。</li>\n</ol>\n<blockquote>\n<p>对于上面第2条，为什么<code>inline/inline-block</code>元素的层叠顺序要高于<code>block</code>(块级)/<code>float</code>(浮动)元素？这个大家可以思考一下！<br>其实很简单，像<code>border/background</code>属于装饰元素的属性，浮动和块级元素一般用来页面布局，而网页设计之初最重要的就是文字内容，所以在发生层叠时会优先显示文字内容，保证其不被覆盖。</p>\n</blockquote>\n<h3 id=\"你要的“套路”\"><a href=\"#你要的“套路”\" class=\"headerlink\" title=\"你要的“套路”\"></a>你要的“套路”</h3><p>上面说了那么多，可能你还是有点懵。这么多概念规则，来点最实际的，有没有一个“套路”当遇到元素层叠时，能很清晰地判断出他们谁在上谁在下呢？答案是——肯定有啊！</p>\n<blockquote>\n<p>1、首先先看要比较的两个元素是否处于同一个层叠上下文中：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1如果是，谁的层叠等级大，谁在上面（怎么判断层叠等级大小呢？——看“层叠顺序”图）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2如果两个元素不在统一层叠上下文中，请先比较他们所处的层叠上下文的层叠等级。<br>2、当两个元素层叠等级相同、层叠顺序相同时，在DOM结构中后面的元素层叠等级在前面元素之上。</p>\n</blockquote>\n<h3 id=\"光说不练假把式\"><a href=\"#光说不练假把式\" class=\"headerlink\" title=\"光说不练假把式\"></a>光说不练假把式</h3><p>对于技术学习，代码展示是最直观最易懂的方式之一。话不多说，直接上代码，我们通过以下几个“栗子”，来进一步验证掌握上面的结论。</p>\n<p><strong>栗子3：</strong></p>\n<pre><code>&lt;style&gt;\n  .box1, .box2 {\n    position: relative;\n    z-index: auto;\n  }\n  .child1 {\n    width: 200px;\n    height: 100px;\n    background: #168bf5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n  .child2 {\n    width: 100px;\n    height: 200px;\n    background: #32c292;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n  }\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;box1&quot;&gt;\n    &lt;div class=&quot;child1&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;box2&quot;&gt;\n    &lt;div class=&quot;child2&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo3.jpg\" alt=\"效果3\"><br><strong>说明：</strong><code>.box1/.box2</code>虽然设置了<code>position: relative</code>，但是<code>z-index: auto</code>的情况下，这两个<code>div</code>还是普通元素，并没有产生层叠上下文。所以，<code>child1/.child2</code>属于<code>&lt;html&gt;&lt;/html&gt;</code>元素的“根层叠上下文”中，此时，<strong>谁的<code>z-index</code>值大，谁在上面</strong>。</p>\n<p><strong>栗子4：</strong></p>\n<p>对于栗子1中的CSS代码，我们只把<code>.box1/.box2</code>的<code>z-index</code>属性值改为<code>数值0</code>，其余不变。</p>\n<pre><code>.box1, .box2 {\n  position: relative;\n  z-index: 0;\n}\n...\n\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo4.jpg\" alt=\"效果4\"><br><strong>说明：</strong> 此时，我们发现，仅仅修改了<code>.box1/.box2</code>的<code>z-index</code>属性值改为<code>数值0</code>，最终结果完全相反。这时<code>.child2</code>覆盖在了<code>.child1</code>上面。原因是什么呢？很简单：因为设置<code>z-index: 0</code>后，<code>.box1/.box2</code>产生了各自的层叠上下文，这时候要比较<code>.child1/.child2</code>的层叠关系完全由父元素<code>.box1/.box2</code>的层叠关系决定。但是<code>.box1/.box2</code>的<code>z-index</code>值都为<code>0</code>，都是块级元素（所以它们的层叠等级，层叠顺序是相同的），这种情况下，在<code>DOM</code>结构中<strong>后面的覆盖前面的</strong>，所以<code>.child2</code>就在上面。</p>\n<h3 id=\"CSS3中的属性对层叠上下文的影响\"><a href=\"#CSS3中的属性对层叠上下文的影响\" class=\"headerlink\" title=\"CSS3中的属性对层叠上下文的影响\"></a>CSS3中的属性对层叠上下文的影响</h3><p>CSS3中出现了很多新属性，其中一些属性对层叠上下文也产生了很大的影响。如下：</p>\n<ol>\n<li>父元素的display属性值为<code>flex|inline-flex</code>，子元素<code>z-index</code>属性值不为<code>auto</code>的时候，子元素为层叠上下文元素；</li>\n<li>元素的<code>opacity</code>属性值不是<code>1</code>；</li>\n<li>元素的<code>transform</code>属性值不是<code>none</code>；</li>\n<li>元素<code>mix-blend-mode属性值不是</code>normal`；</li>\n<li>元素的<code>filter</code>属性值不是<code>none</code>；</li>\n<li>元素的<code>isolation</code>属性值是<code>isolate</code>；</li>\n<li><code>will-change</code>指定的属性值为上面任意一个；</li>\n<li>元素的<code>-webkit-overflow-scrolling</code>属性值设置为<code>touch</code>。</li>\n</ol>\n<p>CSS3中，元素属性满足以上条件之一，就会产生层叠上下文。我们用第1条来做一个简单的解释说明。</p>\n<p><strong>栗子5：</strong></p>\n<pre><code>&lt;style&gt;\n  .box {\n  }\n  .parent {\n    width: 200px;\n    height: 100px;\n    background: #168bf5;\n    /* 虽然设置了z-index，但是没有设置position，z-index无效，.parent还是普通元素，没有产生层叠上下文 */\n    z-index: 1;\n  }\n  .child {\n    width: 100px;\n    height: 200px;\n    background: #32d19c;\n    position: relative;\n    z-index: -1;\n  }\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n      parent\n      &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo5.jpg\" alt=\"效果5\"><br><strong>说明：</strong> 我们发现，<code>.child</code>被<code>.parent</code>覆盖了。按照“套路”来分析一下：<br>虽然<code>.parent</code>设置了<code>z-index</code>属性值，但是没有设置<code>position</code>属性，<code>z-index</code>无效，所以没有产生层叠上下文，<code>.parent</code>还是普通的块级元素。此时，在层叠顺序规则中，<code>z-index</code>值小于<code>0</code>的<code>.child</code>会被普通的<code>block</code>块级元素<code>.parent</code>覆盖。</p>\n<p><strong>栗子6</strong></p>\n<p>对于上面的栗子，我们只修改.box的属性，设置display: flex，其余属性和DOM结构不变。</p>\n<pre><code>.box {\n  display: flex;\n}\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/xiaoguo6.jpg\" alt=\"效果6\"><br><strong>说明：</strong> 当给<code>.box</code>设置<code>display: flex</code>时，<code>.parent</code>就变成层叠上下文元素，根据层叠顺序规则，层叠上下文元素的<code>background/border</code>的层叠等级小于<code>z-index</code>值小于<code>0</code>的元素的层叠等级，所以<code>z-index</code>值为<code>-1</code>的<code>.child</code>在<code>.parent</code>上面。</p>\n<h3 id=\"小测试\"><a href=\"#小测试\" class=\"headerlink\" title=\"小测试\"></a>小测试</h3><p>下面的代码，我会把最终页面渲染的结果放在代码之后，有兴趣的“童鞋”可以分析一下，各个元素的层叠等级，最后来确定这些元素哪个在上哪个在下。</p>\n<pre><code>&lt;style&gt;\n  .parent {\n    width: 100px;\n    height: 200px;\n    background: #168bf5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 0;\n  }\n  .child1 {\n    width: 100px;\n    height: 200px;\n    background: #32d19c;\n    position: absolute;\n    top: 20px;\n    left: 20px;\n    z-index: 1;\n  }\n  .child2 {\n    width: 100px;\n    height: 200px;\n    background: #e4c950;\n    position: absolute;\n    top: 40px;\n    left: 40px;\n    z-index: -1;\n  }\n  .child2-1 {\n    width: 100px;\n    height: 200px;\n    background: #e45050;\n    position: absolute;\n    top: 60px;\n    left: 60px;\n    z-index: 9999;\n  }\n  .child2-2 {\n    width: 100px;\n    height: 200px;\n    background: #db68a7;\n    position: absolute;\n    top: 80px;\n    left: 40px;\n    z-index: -9999;\n  }\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    parent\n    &lt;div class=&quot;child1&quot;&gt;child1&lt;/div&gt;\n    &lt;div class=&quot;child2&quot;&gt;\n      child2\n      &lt;div class=&quot;child2-1&quot;&gt;child2-1&lt;/div&gt;\n      &lt;div class=&quot;child2-2&quot;&gt;child2-2&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre><p>效果：<br><img src=\"/medias/article/coding/z-index/test.jpg\" alt=\"小测试代码页面渲染结果\"></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p>以上的内容有一部分内容参考了以下两位大神的博客，写的很好，也很清晰，推荐大家看一看，你会对相关知识点掌握的更清晰。</p>\n<blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\" target=\"_blank\" rel=\"noopener\">张鑫旭-《深入理解CSS中的层叠上下文和层叠顺序》</a><br><a href=\"https://blog.csdn.net/weixin_40672882/article/details/81183321\" target=\"_blank\" rel=\"noopener\">AMInInsist-《CSS 中的z-index属性》</a></p>\n</blockquote>\n<h3 id=\"推荐文章\"><a href=\"#推荐文章\" class=\"headerlink\" title=\"推荐文章\"></a>推荐文章</h3><p><strong>下面的文章链接是我在学习实践过程中看到的一些觉得比较好的文章，有兴趣霍有需要的朋友可以参考参考，希望可以帮你彻底弄清文章中涉及的这些问题。</strong></p>\n<blockquote>\n<p><a href=\"http://www.w3help.org/zh-cn/kb/013/\" target=\"_blank\" rel=\"noopener\">lijinxieyang-《层叠上下文【stacking context】与层叠顺序【stacking order】》</a><br><a href=\"http://www.w3help.org/zh-cn/kb/013/\" target=\"_blank\" rel=\"noopener\">w3help.org - 《KB013: 分层的显示( Layered presentation )》</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\" target=\"_blank\" rel=\"noopener\">MDN-《The stacking context》</a><br><a href=\"https://www.cnblogs.com/chenshanyuanzi/p/7700823.html\" target=\"_blank\" rel=\"noopener\">尚-《css之层叠上下文和层叠顺序》</a></p>\n</blockquote>"},{"title":"你的工作是对生命的极大浪费","date":"2018-08-01T01:26:11.000Z","_content":"\n### 序言\n\n> 这篇文章有一些桥段是我生活的影子，但本文的主人公完全虚构，不代表我和周围任何一个同事朋友。文章内容是我根据自己的经历更多是和不同朋友交流时了解到的加工而来。文章没有什么华丽的词藻，内容平铺直叙，但是我相信读下去你也许能在其中找到自己的影子或者是曾经熟悉的一幕。更多的是文章带有一些`“魔幻”`色彩，就是这一点点的`“魔幻”`成分才是文章中最大的暗示和思考。希望有兴趣的朋友能读下去，谢谢大家的支持！\n\n### 正文\n\n窗外，已经倾泻了一整夜的雨好像还是没有停下来的迹象。雨声伴着街道上汽车急促的鸣笛声再夹杂着发动机的轰鸣声传入屋内，又是一个繁忙嘈杂的早晨。窗内，昏昏沉沉，还在睡梦中的欧阳面色有些凝重，他应该又做梦了...\n\n<!--more-->\n\n经济管理专业的欧阳，大学毕业后选择留在当地的一家民营私企从事行政相关的工作。平时就和一个朋友住在一起合租的小区公寓内。最近公司业务繁重，经常加班，他连续好几天加班到很晚，最近睡眠质量也不是很好。欧阳计划着，忙过这一阵，出去转一转，放松放松。\n\n已经响过三次闹铃的手机再次响起，欧阳凭着仅仅清醒的些许意识，用手在枕边、枕头下一次次地摸索试探着，终于，在被窝里找到了“吵闹”了半天的手机。他缓缓睁开眼睛，眼皮重的就像是压在眼睛上的两座大山，双眼迷离，看了下时间 —— 2018年7月30日，早上8:00整。按下最后一遍闹铃开关，拖着“灌了铅”后又不听使唤的身躯，欧阳起身坐在床边，又闭上了眼睛，睁眼... 闭眼... 再睁眼... 每天起床就是一场持久的他和“周公”与“梦想”的拉锯战。一轮轮的交锋后，欧阳睁开眼睛，下床，懒散地拖着拖鞋，拿起洗漱用品，拖沓着身体走到卫生间，打开水龙头，欧阳看着镜子里的人，陌生又熟悉... 水漫出牙杯好一会儿，他才回过神，牙膏被肆意地挤在牙刷上，伸到嘴里漫无目的地游走一会儿，漱口。用冷水打湿面部，快速地搓一搓，反复几次，擦干，洗漱完毕。一瓶快要被挤得变形的“大宝”，勉勉强强地挤出一点到手上，在脸上四面八方地搓一搓，算是给他原本还帅气的脸上唯一“精致”的保养。穿上衣服，换上鞋，背上包，出门... 一天的工作又要开始了...\n\n公寓电梯口，几乎层层都停的电梯好不容易停在自己面前，人快要挤满了... 欧阳挤进电梯，昨天好像也是这些人... 因为住在同一栋，遇到很正常，欧阳也没有多想。而所有人都像极了刚刚镜子里的自己，面无表情，睡眼惺忪，可能甚至都有人不知道电梯里又多了一个他。电梯下行，人越来越多，狭小的空间里越来越拥挤，早些进来的人也越来越着急。终于，几分钟过去，到了一层，所有人都急匆匆地涌出电梯，向小区门口赶去。欧阳似乎不善于争抢，踉踉跄跄的最后一个挤了出来。\n\n外面还下着雨，公司离公寓说远不远，说近，将近5公里的距离，开“11路”走过去也不现实，况且早上时间本就不充裕。挤公交，住处到公司没有直达车，倒车、等车的时间换做骑车他骑个来回，这就很尴尬了... 所以，上班一年多以来，不论春夏秋冬，刮风下雨还是下雪，他都是骑车上班，也练就了一手撑伞一手骑车的“绝技”。撑着伞，在小区门口东张西望，不凑巧，今天运气不佳，“坐骑”被抢光了。欧阳住的小区是工薪族聚集地，一个小区八成左右都是上班族，每天早上稍微晚点,门口的共享单车就没你的份了。他也习以为常，老样子，沿着去公司的路先开“11路”吧，运气好路上还能捡到“宝”...几分钟后，他在街角发现一辆“某拜”，急匆匆赶过去，还没到跟前，被别人“截胡”了... 看着那人，欧阳脸上就是一幅复制版的“尴尬又不失礼貌的微笑”的表情包。再走一段路，又看见一辆，欧阳冲了过去，再被“截胡”的话今天就要迟到了！还好，没人和他抢，掏出手机，打开车锁，跨上车，刚骑没几米，发现后车轮有点瓢...“点儿真背！”，欧阳嘴里嘀咕着，“算了，赶时间，凑活着骑”，欧阳一手撑着伞，一手骑车把着方向，一路“哐啷...哐啷...”地往公司赶去... 一路晃荡，欧阳边骑边想：“早上看手机，今天是几号来着？”他在盘算着还有几天能休息？什么时候能放假，他想出去走走。一个不留神，车轮好像压到一块硬硬的东西，加上雨天路滑和这不争气的“坐骑”，欧阳连人带车就要摔倒在地上...\n\n一瞬间，躺在床上的欧阳睁开眼睛，一身冷汗... 幸亏，幸亏，原来是个梦... 他看了一眼手机，2018年7月30日，早上8点10分，星期一。“靠！要迟到了！”，他下意识地喊了一句。着急忙慌穿上拖鞋，拿起洗漱用品来到卫生间，镜子里的自己依旧陌生又熟悉，这场景好像在哪见过？哪有功夫想那么多，同样的步骤，刷牙，洗脸，换衣服，背上包，出门，挤进依旧人满为患的电梯下楼，来到小区门口“抢”到一辆单车，今天还算幸运。一路狂飙来到公司楼下，电梯口长长的队伍，欧阳心里暗想：“妹的，又要迟到了...”。夏天高温，电梯里又闷又热，各种“迷人”的汗味混杂着各式早餐的味道，有点辣眼睛...\n\n走进公司，伸手去打卡的瞬间，欧阳楞了一下，“咦，是不是已经打过卡了？”很快，他就否定了自己这个愚蠢的疑问。今天刚到公司，怎么可能打过卡？过糊涂了？没再多想，欧阳朝着自己的工位走了过去。跟往常一样，和同事打过招呼之后，欧阳坐在工位上，一刹那好像回到了昨天。“昨天同样如此坐在这，就好像是几小时甚至几分钟前的事”，欧阳心里一阵感叹... 看着电脑屏幕上隐约倒映出来的自己的脸，越看越陌生，越看越不像自己。毕业一年多来，由于工作和生活的压力，欧阳的确看起来憔悴了许多。每天的工作排得满满当当，加班几乎成了家常便饭，工作到凌晨一两点也是时不时会有的事。慢慢的，他也适应习惯了，唯一的就是身体逐渐消瘦了下来，还好，总体状况倒也健康。\n\n“欧阳！”，背后的声音才让他回过神来，是老大 —— 一个最近让他烦透也恶心透了的人。平时大小事都不管，关键时刻总爱抛头露面装个13，没事总爱跪舔上级，最主要的，时不时话语中还不尊重同事。以前没发现，日子久了，欧阳真的是看不惯这种自以为是又没有素质的人，越看越觉得恶心。但，人家是领导，能有什么办法...? “昨天让你准备的材料真被好了没？今天郑总开会要用呢！”讨厌归讨厌，欧阳还是一脸不悲不喜的回到：“好了...” 他顺手把材料递过去，老大转身的时候欧阳一脸不屑的竖起中指。忙碌的一天又要开始了...欧阳像往常一样东奔西跑，前答后应，忙个不停，而这，只是他工作的日常罢了...\n\n好不容易熬到中午，可以喘口气了。公司中午有两个小时的休息时间，也是白天唯一能放松的时段。七八月份，正是一年中最热的时候，欧阳和同事一起在楼下的小店里买了一份九块钱的快餐，因为公司能吹空调就带回了公司，坐在工位上开始了自己的午餐时间。一份快餐，三四个菜，荤腥少的可怜，吃饱可以，但毫无质量可言。十几分钟后，一天的主食也就结束了，简单收拾停当，欧阳趴在工位上玩起了手机，这是他一天中为数不多可以了解到“外面世界”的机会。刷一刷各类新闻，看一看明星八卦，欧阳又在盘算着，希望忙过这一段能出去转一转。毕竟，世界那么大，他也想去看看... 搁下手机，放下座椅靠背，躺下去，很快他就睡着了...\n\n“叮铃铃铃...”，一阵铃声在耳边响起，欧阳睁开眼睛确是傻了眼，“我靠！什么情况？怎么还躺在床上！？” 欧阳像见鬼了一样不敢相信眼前的自己竟然还躺在公寓的床上！“玩什么？‘盗梦空间’么？梦中梦！？还是...现在还是在做梦？”欧阳脑子飞转，却怎么也想不明白，刚才梦里的一切也太真实了吧！越像越瘆得慌，欧阳学电视里掐了一下自己，“靠，真的疼，不是梦...”拿起手机看了看时间，2018年7月30日，早上8:00整,到了上班的时间。上班第一，欧阳也没敢再想太多，还是每天按部就班的流程，洗漱，换衣服，出门，挤电梯，抢“坐骑”... 欧阳一路赶到公司，又开始了一天的忙碌...\n\n“欧阳，这堆报表按日期整理一下！”，“欧阳，这些财报一会给郑总送过去！”，“欧阳，公司该买电了！”，“欧阳，最近招聘季，注意注意有没有求职者应聘！”，“欧阳，明天张总要过来，提前联系一下！”，“欧阳”，“欧阳”...  因为公司规模不大，一个人顶两个人用，加上欧阳本身又比较勤恳办事也靠谱，所以作为行政岗的欧阳其实做了很多非本岗位的事情。就这样不可开交，“前赴后继”，等大事小事真正忙完又将近晚上11点了。欧阳看着窗外的夜色，街道上车水马龙黑，远处灯火阑珊，渐渐地他的眼神有些迷离。黑夜就像是深渊，盯着太久了，就出不来了，欧阳陷进去，沉思了很久.....\n\n回过神来，欧阳收拾收拾工位，关了电脑，关上公司大门，乘着电梯下楼去了... 刚出写字楼，温热的风还在静静的吹，因为时间太晚，视野里已经找不到共享单车的踪迹，欧阳沿着回去的路，独自一人，慢慢地往回走... 回到公寓的时候已经近子夜时分了，夏天的夜晚温度依旧不低，这一路走来一身黏腻，卸下一身疲惫，欧阳简单地冲了个凉就躺下了。很快，他睡着了... 明天，又是普通却繁忙的一天，所有的一切还会继续...\n\n当清晨的第一缕阳光划破天际，窗外，雨水好像早已停歇，鸣笛声和发动机的声音依旧“热热闹闹”。窗内，光线还是那么的昏暗。欧阳被最后一遍闹铃叫醒，惺忪的睡眼慢慢睁开，关掉闹钟，当看到手机上显示的时间，欧阳怔了一下，瞳孔瞬间扩大。他双手颤抖着把手机拿进，白色的眼球上瞬间布满血丝，全身寒毛卓竖，因为，手机上赫然是显示着时间：2028年7月31日，早上8:00整，星期一......\n\n![盗梦空间-旋转的陀螺][1]\n\n### 后记\n\n> 谢谢您能读完这篇文章。就像`“序言”`中全所言，全文内容并不华丽，但略带`“魔幻”`的`“盗梦空间”`情节，是文章最大的暗示，也是最发人深省的部分。主人公欧阳一天中总感觉很多事似乎刚发生，很多场景也很熟悉，其实是因为他每一天都在重复着相同的事情，被工作占据了几乎所有的生活，所以脑海中只有这些事情记忆最深刻。还有隐藏的一点，按照逻辑全文看似几乎都发生在2018年7月30日这一天，其实这一天只是欧阳一天天工作生活的一个缩影和循环。每一次从梦中醒来，实际暗示着已经过去了一天甚至是很多天。直到最后，欧阳再一次醒来，才发现，时间飞逝，已经是10年之后的2028年了。\n\n> 其实很多时候，我们会发现繁忙的工作和沉重的生活压力，让我们每天都过得失去了色彩，更甚至我们每天都在重复做着几乎相同的事情，日复一日...... 转眼间，可能就是几年甚至十几年。这也是现代人经常感叹时间很快的一个重要原因。所以，希望大家能在繁重的工作之余，给自己的生活增添一抹亮丽的色彩。毕竟，这个世界以及来到这个世界的幸运从来不值得被我们辜负。\n\n\n[1]: /medias/article/journal/timg.gif","source":"_posts/journal-1.md","raw":"---\ntitle: 你的工作是对生命的极大浪费\ndate: 2018-08-01 09:26:11\ncategories: 日志\ntags: 生活工作\n---\n\n### 序言\n\n> 这篇文章有一些桥段是我生活的影子，但本文的主人公完全虚构，不代表我和周围任何一个同事朋友。文章内容是我根据自己的经历更多是和不同朋友交流时了解到的加工而来。文章没有什么华丽的词藻，内容平铺直叙，但是我相信读下去你也许能在其中找到自己的影子或者是曾经熟悉的一幕。更多的是文章带有一些`“魔幻”`色彩，就是这一点点的`“魔幻”`成分才是文章中最大的暗示和思考。希望有兴趣的朋友能读下去，谢谢大家的支持！\n\n### 正文\n\n窗外，已经倾泻了一整夜的雨好像还是没有停下来的迹象。雨声伴着街道上汽车急促的鸣笛声再夹杂着发动机的轰鸣声传入屋内，又是一个繁忙嘈杂的早晨。窗内，昏昏沉沉，还在睡梦中的欧阳面色有些凝重，他应该又做梦了...\n\n<!--more-->\n\n经济管理专业的欧阳，大学毕业后选择留在当地的一家民营私企从事行政相关的工作。平时就和一个朋友住在一起合租的小区公寓内。最近公司业务繁重，经常加班，他连续好几天加班到很晚，最近睡眠质量也不是很好。欧阳计划着，忙过这一阵，出去转一转，放松放松。\n\n已经响过三次闹铃的手机再次响起，欧阳凭着仅仅清醒的些许意识，用手在枕边、枕头下一次次地摸索试探着，终于，在被窝里找到了“吵闹”了半天的手机。他缓缓睁开眼睛，眼皮重的就像是压在眼睛上的两座大山，双眼迷离，看了下时间 —— 2018年7月30日，早上8:00整。按下最后一遍闹铃开关，拖着“灌了铅”后又不听使唤的身躯，欧阳起身坐在床边，又闭上了眼睛，睁眼... 闭眼... 再睁眼... 每天起床就是一场持久的他和“周公”与“梦想”的拉锯战。一轮轮的交锋后，欧阳睁开眼睛，下床，懒散地拖着拖鞋，拿起洗漱用品，拖沓着身体走到卫生间，打开水龙头，欧阳看着镜子里的人，陌生又熟悉... 水漫出牙杯好一会儿，他才回过神，牙膏被肆意地挤在牙刷上，伸到嘴里漫无目的地游走一会儿，漱口。用冷水打湿面部，快速地搓一搓，反复几次，擦干，洗漱完毕。一瓶快要被挤得变形的“大宝”，勉勉强强地挤出一点到手上，在脸上四面八方地搓一搓，算是给他原本还帅气的脸上唯一“精致”的保养。穿上衣服，换上鞋，背上包，出门... 一天的工作又要开始了...\n\n公寓电梯口，几乎层层都停的电梯好不容易停在自己面前，人快要挤满了... 欧阳挤进电梯，昨天好像也是这些人... 因为住在同一栋，遇到很正常，欧阳也没有多想。而所有人都像极了刚刚镜子里的自己，面无表情，睡眼惺忪，可能甚至都有人不知道电梯里又多了一个他。电梯下行，人越来越多，狭小的空间里越来越拥挤，早些进来的人也越来越着急。终于，几分钟过去，到了一层，所有人都急匆匆地涌出电梯，向小区门口赶去。欧阳似乎不善于争抢，踉踉跄跄的最后一个挤了出来。\n\n外面还下着雨，公司离公寓说远不远，说近，将近5公里的距离，开“11路”走过去也不现实，况且早上时间本就不充裕。挤公交，住处到公司没有直达车，倒车、等车的时间换做骑车他骑个来回，这就很尴尬了... 所以，上班一年多以来，不论春夏秋冬，刮风下雨还是下雪，他都是骑车上班，也练就了一手撑伞一手骑车的“绝技”。撑着伞，在小区门口东张西望，不凑巧，今天运气不佳，“坐骑”被抢光了。欧阳住的小区是工薪族聚集地，一个小区八成左右都是上班族，每天早上稍微晚点,门口的共享单车就没你的份了。他也习以为常，老样子，沿着去公司的路先开“11路”吧，运气好路上还能捡到“宝”...几分钟后，他在街角发现一辆“某拜”，急匆匆赶过去，还没到跟前，被别人“截胡”了... 看着那人，欧阳脸上就是一幅复制版的“尴尬又不失礼貌的微笑”的表情包。再走一段路，又看见一辆，欧阳冲了过去，再被“截胡”的话今天就要迟到了！还好，没人和他抢，掏出手机，打开车锁，跨上车，刚骑没几米，发现后车轮有点瓢...“点儿真背！”，欧阳嘴里嘀咕着，“算了，赶时间，凑活着骑”，欧阳一手撑着伞，一手骑车把着方向，一路“哐啷...哐啷...”地往公司赶去... 一路晃荡，欧阳边骑边想：“早上看手机，今天是几号来着？”他在盘算着还有几天能休息？什么时候能放假，他想出去走走。一个不留神，车轮好像压到一块硬硬的东西，加上雨天路滑和这不争气的“坐骑”，欧阳连人带车就要摔倒在地上...\n\n一瞬间，躺在床上的欧阳睁开眼睛，一身冷汗... 幸亏，幸亏，原来是个梦... 他看了一眼手机，2018年7月30日，早上8点10分，星期一。“靠！要迟到了！”，他下意识地喊了一句。着急忙慌穿上拖鞋，拿起洗漱用品来到卫生间，镜子里的自己依旧陌生又熟悉，这场景好像在哪见过？哪有功夫想那么多，同样的步骤，刷牙，洗脸，换衣服，背上包，出门，挤进依旧人满为患的电梯下楼，来到小区门口“抢”到一辆单车，今天还算幸运。一路狂飙来到公司楼下，电梯口长长的队伍，欧阳心里暗想：“妹的，又要迟到了...”。夏天高温，电梯里又闷又热，各种“迷人”的汗味混杂着各式早餐的味道，有点辣眼睛...\n\n走进公司，伸手去打卡的瞬间，欧阳楞了一下，“咦，是不是已经打过卡了？”很快，他就否定了自己这个愚蠢的疑问。今天刚到公司，怎么可能打过卡？过糊涂了？没再多想，欧阳朝着自己的工位走了过去。跟往常一样，和同事打过招呼之后，欧阳坐在工位上，一刹那好像回到了昨天。“昨天同样如此坐在这，就好像是几小时甚至几分钟前的事”，欧阳心里一阵感叹... 看着电脑屏幕上隐约倒映出来的自己的脸，越看越陌生，越看越不像自己。毕业一年多来，由于工作和生活的压力，欧阳的确看起来憔悴了许多。每天的工作排得满满当当，加班几乎成了家常便饭，工作到凌晨一两点也是时不时会有的事。慢慢的，他也适应习惯了，唯一的就是身体逐渐消瘦了下来，还好，总体状况倒也健康。\n\n“欧阳！”，背后的声音才让他回过神来，是老大 —— 一个最近让他烦透也恶心透了的人。平时大小事都不管，关键时刻总爱抛头露面装个13，没事总爱跪舔上级，最主要的，时不时话语中还不尊重同事。以前没发现，日子久了，欧阳真的是看不惯这种自以为是又没有素质的人，越看越觉得恶心。但，人家是领导，能有什么办法...? “昨天让你准备的材料真被好了没？今天郑总开会要用呢！”讨厌归讨厌，欧阳还是一脸不悲不喜的回到：“好了...” 他顺手把材料递过去，老大转身的时候欧阳一脸不屑的竖起中指。忙碌的一天又要开始了...欧阳像往常一样东奔西跑，前答后应，忙个不停，而这，只是他工作的日常罢了...\n\n好不容易熬到中午，可以喘口气了。公司中午有两个小时的休息时间，也是白天唯一能放松的时段。七八月份，正是一年中最热的时候，欧阳和同事一起在楼下的小店里买了一份九块钱的快餐，因为公司能吹空调就带回了公司，坐在工位上开始了自己的午餐时间。一份快餐，三四个菜，荤腥少的可怜，吃饱可以，但毫无质量可言。十几分钟后，一天的主食也就结束了，简单收拾停当，欧阳趴在工位上玩起了手机，这是他一天中为数不多可以了解到“外面世界”的机会。刷一刷各类新闻，看一看明星八卦，欧阳又在盘算着，希望忙过这一段能出去转一转。毕竟，世界那么大，他也想去看看... 搁下手机，放下座椅靠背，躺下去，很快他就睡着了...\n\n“叮铃铃铃...”，一阵铃声在耳边响起，欧阳睁开眼睛确是傻了眼，“我靠！什么情况？怎么还躺在床上！？” 欧阳像见鬼了一样不敢相信眼前的自己竟然还躺在公寓的床上！“玩什么？‘盗梦空间’么？梦中梦！？还是...现在还是在做梦？”欧阳脑子飞转，却怎么也想不明白，刚才梦里的一切也太真实了吧！越像越瘆得慌，欧阳学电视里掐了一下自己，“靠，真的疼，不是梦...”拿起手机看了看时间，2018年7月30日，早上8:00整,到了上班的时间。上班第一，欧阳也没敢再想太多，还是每天按部就班的流程，洗漱，换衣服，出门，挤电梯，抢“坐骑”... 欧阳一路赶到公司，又开始了一天的忙碌...\n\n“欧阳，这堆报表按日期整理一下！”，“欧阳，这些财报一会给郑总送过去！”，“欧阳，公司该买电了！”，“欧阳，最近招聘季，注意注意有没有求职者应聘！”，“欧阳，明天张总要过来，提前联系一下！”，“欧阳”，“欧阳”...  因为公司规模不大，一个人顶两个人用，加上欧阳本身又比较勤恳办事也靠谱，所以作为行政岗的欧阳其实做了很多非本岗位的事情。就这样不可开交，“前赴后继”，等大事小事真正忙完又将近晚上11点了。欧阳看着窗外的夜色，街道上车水马龙黑，远处灯火阑珊，渐渐地他的眼神有些迷离。黑夜就像是深渊，盯着太久了，就出不来了，欧阳陷进去，沉思了很久.....\n\n回过神来，欧阳收拾收拾工位，关了电脑，关上公司大门，乘着电梯下楼去了... 刚出写字楼，温热的风还在静静的吹，因为时间太晚，视野里已经找不到共享单车的踪迹，欧阳沿着回去的路，独自一人，慢慢地往回走... 回到公寓的时候已经近子夜时分了，夏天的夜晚温度依旧不低，这一路走来一身黏腻，卸下一身疲惫，欧阳简单地冲了个凉就躺下了。很快，他睡着了... 明天，又是普通却繁忙的一天，所有的一切还会继续...\n\n当清晨的第一缕阳光划破天际，窗外，雨水好像早已停歇，鸣笛声和发动机的声音依旧“热热闹闹”。窗内，光线还是那么的昏暗。欧阳被最后一遍闹铃叫醒，惺忪的睡眼慢慢睁开，关掉闹钟，当看到手机上显示的时间，欧阳怔了一下，瞳孔瞬间扩大。他双手颤抖着把手机拿进，白色的眼球上瞬间布满血丝，全身寒毛卓竖，因为，手机上赫然是显示着时间：2028年7月31日，早上8:00整，星期一......\n\n![盗梦空间-旋转的陀螺][1]\n\n### 后记\n\n> 谢谢您能读完这篇文章。就像`“序言”`中全所言，全文内容并不华丽，但略带`“魔幻”`的`“盗梦空间”`情节，是文章最大的暗示，也是最发人深省的部分。主人公欧阳一天中总感觉很多事似乎刚发生，很多场景也很熟悉，其实是因为他每一天都在重复着相同的事情，被工作占据了几乎所有的生活，所以脑海中只有这些事情记忆最深刻。还有隐藏的一点，按照逻辑全文看似几乎都发生在2018年7月30日这一天，其实这一天只是欧阳一天天工作生活的一个缩影和循环。每一次从梦中醒来，实际暗示着已经过去了一天甚至是很多天。直到最后，欧阳再一次醒来，才发现，时间飞逝，已经是10年之后的2028年了。\n\n> 其实很多时候，我们会发现繁忙的工作和沉重的生活压力，让我们每天都过得失去了色彩，更甚至我们每天都在重复做着几乎相同的事情，日复一日...... 转眼间，可能就是几年甚至十几年。这也是现代人经常感叹时间很快的一个重要原因。所以，希望大家能在繁重的工作之余，给自己的生活增添一抹亮丽的色彩。毕竟，这个世界以及来到这个世界的幸运从来不值得被我们辜负。\n\n\n[1]: /medias/article/journal/timg.gif","slug":"journal-1","published":1,"updated":"2018-12-17T16:37:49.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvuu4mwo002u9kvbivvkra62","content":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><blockquote>\n<p>这篇文章有一些桥段是我生活的影子，但本文的主人公完全虚构，不代表我和周围任何一个同事朋友。文章内容是我根据自己的经历更多是和不同朋友交流时了解到的加工而来。文章没有什么华丽的词藻，内容平铺直叙，但是我相信读下去你也许能在其中找到自己的影子或者是曾经熟悉的一幕。更多的是文章带有一些<code>“魔幻”</code>色彩，就是这一点点的<code>“魔幻”</code>成分才是文章中最大的暗示和思考。希望有兴趣的朋友能读下去，谢谢大家的支持！</p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>窗外，已经倾泻了一整夜的雨好像还是没有停下来的迹象。雨声伴着街道上汽车急促的鸣笛声再夹杂着发动机的轰鸣声传入屋内，又是一个繁忙嘈杂的早晨。窗内，昏昏沉沉，还在睡梦中的欧阳面色有些凝重，他应该又做梦了…</p>\n<a id=\"more\"></a>\n<p>经济管理专业的欧阳，大学毕业后选择留在当地的一家民营私企从事行政相关的工作。平时就和一个朋友住在一起合租的小区公寓内。最近公司业务繁重，经常加班，他连续好几天加班到很晚，最近睡眠质量也不是很好。欧阳计划着，忙过这一阵，出去转一转，放松放松。</p>\n<p>已经响过三次闹铃的手机再次响起，欧阳凭着仅仅清醒的些许意识，用手在枕边、枕头下一次次地摸索试探着，终于，在被窝里找到了“吵闹”了半天的手机。他缓缓睁开眼睛，眼皮重的就像是压在眼睛上的两座大山，双眼迷离，看了下时间 —— 2018年7月30日，早上8:00整。按下最后一遍闹铃开关，拖着“灌了铅”后又不听使唤的身躯，欧阳起身坐在床边，又闭上了眼睛，睁眼… 闭眼… 再睁眼… 每天起床就是一场持久的他和“周公”与“梦想”的拉锯战。一轮轮的交锋后，欧阳睁开眼睛，下床，懒散地拖着拖鞋，拿起洗漱用品，拖沓着身体走到卫生间，打开水龙头，欧阳看着镜子里的人，陌生又熟悉… 水漫出牙杯好一会儿，他才回过神，牙膏被肆意地挤在牙刷上，伸到嘴里漫无目的地游走一会儿，漱口。用冷水打湿面部，快速地搓一搓，反复几次，擦干，洗漱完毕。一瓶快要被挤得变形的“大宝”，勉勉强强地挤出一点到手上，在脸上四面八方地搓一搓，算是给他原本还帅气的脸上唯一“精致”的保养。穿上衣服，换上鞋，背上包，出门… 一天的工作又要开始了…</p>\n<p>公寓电梯口，几乎层层都停的电梯好不容易停在自己面前，人快要挤满了… 欧阳挤进电梯，昨天好像也是这些人… 因为住在同一栋，遇到很正常，欧阳也没有多想。而所有人都像极了刚刚镜子里的自己，面无表情，睡眼惺忪，可能甚至都有人不知道电梯里又多了一个他。电梯下行，人越来越多，狭小的空间里越来越拥挤，早些进来的人也越来越着急。终于，几分钟过去，到了一层，所有人都急匆匆地涌出电梯，向小区门口赶去。欧阳似乎不善于争抢，踉踉跄跄的最后一个挤了出来。</p>\n<p>外面还下着雨，公司离公寓说远不远，说近，将近5公里的距离，开“11路”走过去也不现实，况且早上时间本就不充裕。挤公交，住处到公司没有直达车，倒车、等车的时间换做骑车他骑个来回，这就很尴尬了… 所以，上班一年多以来，不论春夏秋冬，刮风下雨还是下雪，他都是骑车上班，也练就了一手撑伞一手骑车的“绝技”。撑着伞，在小区门口东张西望，不凑巧，今天运气不佳，“坐骑”被抢光了。欧阳住的小区是工薪族聚集地，一个小区八成左右都是上班族，每天早上稍微晚点,门口的共享单车就没你的份了。他也习以为常，老样子，沿着去公司的路先开“11路”吧，运气好路上还能捡到“宝”…几分钟后，他在街角发现一辆“某拜”，急匆匆赶过去，还没到跟前，被别人“截胡”了… 看着那人，欧阳脸上就是一幅复制版的“尴尬又不失礼貌的微笑”的表情包。再走一段路，又看见一辆，欧阳冲了过去，再被“截胡”的话今天就要迟到了！还好，没人和他抢，掏出手机，打开车锁，跨上车，刚骑没几米，发现后车轮有点瓢…“点儿真背！”，欧阳嘴里嘀咕着，“算了，赶时间，凑活着骑”，欧阳一手撑着伞，一手骑车把着方向，一路“哐啷…哐啷…”地往公司赶去… 一路晃荡，欧阳边骑边想：“早上看手机，今天是几号来着？”他在盘算着还有几天能休息？什么时候能放假，他想出去走走。一个不留神，车轮好像压到一块硬硬的东西，加上雨天路滑和这不争气的“坐骑”，欧阳连人带车就要摔倒在地上…</p>\n<p>一瞬间，躺在床上的欧阳睁开眼睛，一身冷汗… 幸亏，幸亏，原来是个梦… 他看了一眼手机，2018年7月30日，早上8点10分，星期一。“靠！要迟到了！”，他下意识地喊了一句。着急忙慌穿上拖鞋，拿起洗漱用品来到卫生间，镜子里的自己依旧陌生又熟悉，这场景好像在哪见过？哪有功夫想那么多，同样的步骤，刷牙，洗脸，换衣服，背上包，出门，挤进依旧人满为患的电梯下楼，来到小区门口“抢”到一辆单车，今天还算幸运。一路狂飙来到公司楼下，电梯口长长的队伍，欧阳心里暗想：“妹的，又要迟到了…”。夏天高温，电梯里又闷又热，各种“迷人”的汗味混杂着各式早餐的味道，有点辣眼睛…</p>\n<p>走进公司，伸手去打卡的瞬间，欧阳楞了一下，“咦，是不是已经打过卡了？”很快，他就否定了自己这个愚蠢的疑问。今天刚到公司，怎么可能打过卡？过糊涂了？没再多想，欧阳朝着自己的工位走了过去。跟往常一样，和同事打过招呼之后，欧阳坐在工位上，一刹那好像回到了昨天。“昨天同样如此坐在这，就好像是几小时甚至几分钟前的事”，欧阳心里一阵感叹… 看着电脑屏幕上隐约倒映出来的自己的脸，越看越陌生，越看越不像自己。毕业一年多来，由于工作和生活的压力，欧阳的确看起来憔悴了许多。每天的工作排得满满当当，加班几乎成了家常便饭，工作到凌晨一两点也是时不时会有的事。慢慢的，他也适应习惯了，唯一的就是身体逐渐消瘦了下来，还好，总体状况倒也健康。</p>\n<p>“欧阳！”，背后的声音才让他回过神来，是老大 —— 一个最近让他烦透也恶心透了的人。平时大小事都不管，关键时刻总爱抛头露面装个13，没事总爱跪舔上级，最主要的，时不时话语中还不尊重同事。以前没发现，日子久了，欧阳真的是看不惯这种自以为是又没有素质的人，越看越觉得恶心。但，人家是领导，能有什么办法…? “昨天让你准备的材料真被好了没？今天郑总开会要用呢！”讨厌归讨厌，欧阳还是一脸不悲不喜的回到：“好了…” 他顺手把材料递过去，老大转身的时候欧阳一脸不屑的竖起中指。忙碌的一天又要开始了…欧阳像往常一样东奔西跑，前答后应，忙个不停，而这，只是他工作的日常罢了…</p>\n<p>好不容易熬到中午，可以喘口气了。公司中午有两个小时的休息时间，也是白天唯一能放松的时段。七八月份，正是一年中最热的时候，欧阳和同事一起在楼下的小店里买了一份九块钱的快餐，因为公司能吹空调就带回了公司，坐在工位上开始了自己的午餐时间。一份快餐，三四个菜，荤腥少的可怜，吃饱可以，但毫无质量可言。十几分钟后，一天的主食也就结束了，简单收拾停当，欧阳趴在工位上玩起了手机，这是他一天中为数不多可以了解到“外面世界”的机会。刷一刷各类新闻，看一看明星八卦，欧阳又在盘算着，希望忙过这一段能出去转一转。毕竟，世界那么大，他也想去看看… 搁下手机，放下座椅靠背，躺下去，很快他就睡着了…</p>\n<p>“叮铃铃铃…”，一阵铃声在耳边响起，欧阳睁开眼睛确是傻了眼，“我靠！什么情况？怎么还躺在床上！？” 欧阳像见鬼了一样不敢相信眼前的自己竟然还躺在公寓的床上！“玩什么？‘盗梦空间’么？梦中梦！？还是…现在还是在做梦？”欧阳脑子飞转，却怎么也想不明白，刚才梦里的一切也太真实了吧！越像越瘆得慌，欧阳学电视里掐了一下自己，“靠，真的疼，不是梦…”拿起手机看了看时间，2018年7月30日，早上8:00整,到了上班的时间。上班第一，欧阳也没敢再想太多，还是每天按部就班的流程，洗漱，换衣服，出门，挤电梯，抢“坐骑”… 欧阳一路赶到公司，又开始了一天的忙碌…</p>\n<p>“欧阳，这堆报表按日期整理一下！”，“欧阳，这些财报一会给郑总送过去！”，“欧阳，公司该买电了！”，“欧阳，最近招聘季，注意注意有没有求职者应聘！”，“欧阳，明天张总要过来，提前联系一下！”，“欧阳”，“欧阳”…  因为公司规模不大，一个人顶两个人用，加上欧阳本身又比较勤恳办事也靠谱，所以作为行政岗的欧阳其实做了很多非本岗位的事情。就这样不可开交，“前赴后继”，等大事小事真正忙完又将近晚上11点了。欧阳看着窗外的夜色，街道上车水马龙黑，远处灯火阑珊，渐渐地他的眼神有些迷离。黑夜就像是深渊，盯着太久了，就出不来了，欧阳陷进去，沉思了很久…..</p>\n<p>回过神来，欧阳收拾收拾工位，关了电脑，关上公司大门，乘着电梯下楼去了… 刚出写字楼，温热的风还在静静的吹，因为时间太晚，视野里已经找不到共享单车的踪迹，欧阳沿着回去的路，独自一人，慢慢地往回走… 回到公寓的时候已经近子夜时分了，夏天的夜晚温度依旧不低，这一路走来一身黏腻，卸下一身疲惫，欧阳简单地冲了个凉就躺下了。很快，他睡着了… 明天，又是普通却繁忙的一天，所有的一切还会继续…</p>\n<p>当清晨的第一缕阳光划破天际，窗外，雨水好像早已停歇，鸣笛声和发动机的声音依旧“热热闹闹”。窗内，光线还是那么的昏暗。欧阳被最后一遍闹铃叫醒，惺忪的睡眼慢慢睁开，关掉闹钟，当看到手机上显示的时间，欧阳怔了一下，瞳孔瞬间扩大。他双手颤抖着把手机拿进，白色的眼球上瞬间布满血丝，全身寒毛卓竖，因为，手机上赫然是显示着时间：2028年7月31日，早上8:00整，星期一……</p>\n<p><img src=\"/medias/article/journal/timg.gif\" alt=\"盗梦空间-旋转的陀螺\"></p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><blockquote>\n<p>谢谢您能读完这篇文章。就像<code>“序言”</code>中全所言，全文内容并不华丽，但略带<code>“魔幻”</code>的<code>“盗梦空间”</code>情节，是文章最大的暗示，也是最发人深省的部分。主人公欧阳一天中总感觉很多事似乎刚发生，很多场景也很熟悉，其实是因为他每一天都在重复着相同的事情，被工作占据了几乎所有的生活，所以脑海中只有这些事情记忆最深刻。还有隐藏的一点，按照逻辑全文看似几乎都发生在2018年7月30日这一天，其实这一天只是欧阳一天天工作生活的一个缩影和循环。每一次从梦中醒来，实际暗示着已经过去了一天甚至是很多天。直到最后，欧阳再一次醒来，才发现，时间飞逝，已经是10年之后的2028年了。</p>\n</blockquote>\n<blockquote>\n<p>其实很多时候，我们会发现繁忙的工作和沉重的生活压力，让我们每天都过得失去了色彩，更甚至我们每天都在重复做着几乎相同的事情，日复一日…… 转眼间，可能就是几年甚至十几年。这也是现代人经常感叹时间很快的一个重要原因。所以，希望大家能在繁重的工作之余，给自己的生活增添一抹亮丽的色彩。毕竟，这个世界以及来到这个世界的幸运从来不值得被我们辜负。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><blockquote>\n<p>这篇文章有一些桥段是我生活的影子，但本文的主人公完全虚构，不代表我和周围任何一个同事朋友。文章内容是我根据自己的经历更多是和不同朋友交流时了解到的加工而来。文章没有什么华丽的词藻，内容平铺直叙，但是我相信读下去你也许能在其中找到自己的影子或者是曾经熟悉的一幕。更多的是文章带有一些<code>“魔幻”</code>色彩，就是这一点点的<code>“魔幻”</code>成分才是文章中最大的暗示和思考。希望有兴趣的朋友能读下去，谢谢大家的支持！</p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>窗外，已经倾泻了一整夜的雨好像还是没有停下来的迹象。雨声伴着街道上汽车急促的鸣笛声再夹杂着发动机的轰鸣声传入屋内，又是一个繁忙嘈杂的早晨。窗内，昏昏沉沉，还在睡梦中的欧阳面色有些凝重，他应该又做梦了…</p>","more":"<p>经济管理专业的欧阳，大学毕业后选择留在当地的一家民营私企从事行政相关的工作。平时就和一个朋友住在一起合租的小区公寓内。最近公司业务繁重，经常加班，他连续好几天加班到很晚，最近睡眠质量也不是很好。欧阳计划着，忙过这一阵，出去转一转，放松放松。</p>\n<p>已经响过三次闹铃的手机再次响起，欧阳凭着仅仅清醒的些许意识，用手在枕边、枕头下一次次地摸索试探着，终于，在被窝里找到了“吵闹”了半天的手机。他缓缓睁开眼睛，眼皮重的就像是压在眼睛上的两座大山，双眼迷离，看了下时间 —— 2018年7月30日，早上8:00整。按下最后一遍闹铃开关，拖着“灌了铅”后又不听使唤的身躯，欧阳起身坐在床边，又闭上了眼睛，睁眼… 闭眼… 再睁眼… 每天起床就是一场持久的他和“周公”与“梦想”的拉锯战。一轮轮的交锋后，欧阳睁开眼睛，下床，懒散地拖着拖鞋，拿起洗漱用品，拖沓着身体走到卫生间，打开水龙头，欧阳看着镜子里的人，陌生又熟悉… 水漫出牙杯好一会儿，他才回过神，牙膏被肆意地挤在牙刷上，伸到嘴里漫无目的地游走一会儿，漱口。用冷水打湿面部，快速地搓一搓，反复几次，擦干，洗漱完毕。一瓶快要被挤得变形的“大宝”，勉勉强强地挤出一点到手上，在脸上四面八方地搓一搓，算是给他原本还帅气的脸上唯一“精致”的保养。穿上衣服，换上鞋，背上包，出门… 一天的工作又要开始了…</p>\n<p>公寓电梯口，几乎层层都停的电梯好不容易停在自己面前，人快要挤满了… 欧阳挤进电梯，昨天好像也是这些人… 因为住在同一栋，遇到很正常，欧阳也没有多想。而所有人都像极了刚刚镜子里的自己，面无表情，睡眼惺忪，可能甚至都有人不知道电梯里又多了一个他。电梯下行，人越来越多，狭小的空间里越来越拥挤，早些进来的人也越来越着急。终于，几分钟过去，到了一层，所有人都急匆匆地涌出电梯，向小区门口赶去。欧阳似乎不善于争抢，踉踉跄跄的最后一个挤了出来。</p>\n<p>外面还下着雨，公司离公寓说远不远，说近，将近5公里的距离，开“11路”走过去也不现实，况且早上时间本就不充裕。挤公交，住处到公司没有直达车，倒车、等车的时间换做骑车他骑个来回，这就很尴尬了… 所以，上班一年多以来，不论春夏秋冬，刮风下雨还是下雪，他都是骑车上班，也练就了一手撑伞一手骑车的“绝技”。撑着伞，在小区门口东张西望，不凑巧，今天运气不佳，“坐骑”被抢光了。欧阳住的小区是工薪族聚集地，一个小区八成左右都是上班族，每天早上稍微晚点,门口的共享单车就没你的份了。他也习以为常，老样子，沿着去公司的路先开“11路”吧，运气好路上还能捡到“宝”…几分钟后，他在街角发现一辆“某拜”，急匆匆赶过去，还没到跟前，被别人“截胡”了… 看着那人，欧阳脸上就是一幅复制版的“尴尬又不失礼貌的微笑”的表情包。再走一段路，又看见一辆，欧阳冲了过去，再被“截胡”的话今天就要迟到了！还好，没人和他抢，掏出手机，打开车锁，跨上车，刚骑没几米，发现后车轮有点瓢…“点儿真背！”，欧阳嘴里嘀咕着，“算了，赶时间，凑活着骑”，欧阳一手撑着伞，一手骑车把着方向，一路“哐啷…哐啷…”地往公司赶去… 一路晃荡，欧阳边骑边想：“早上看手机，今天是几号来着？”他在盘算着还有几天能休息？什么时候能放假，他想出去走走。一个不留神，车轮好像压到一块硬硬的东西，加上雨天路滑和这不争气的“坐骑”，欧阳连人带车就要摔倒在地上…</p>\n<p>一瞬间，躺在床上的欧阳睁开眼睛，一身冷汗… 幸亏，幸亏，原来是个梦… 他看了一眼手机，2018年7月30日，早上8点10分，星期一。“靠！要迟到了！”，他下意识地喊了一句。着急忙慌穿上拖鞋，拿起洗漱用品来到卫生间，镜子里的自己依旧陌生又熟悉，这场景好像在哪见过？哪有功夫想那么多，同样的步骤，刷牙，洗脸，换衣服，背上包，出门，挤进依旧人满为患的电梯下楼，来到小区门口“抢”到一辆单车，今天还算幸运。一路狂飙来到公司楼下，电梯口长长的队伍，欧阳心里暗想：“妹的，又要迟到了…”。夏天高温，电梯里又闷又热，各种“迷人”的汗味混杂着各式早餐的味道，有点辣眼睛…</p>\n<p>走进公司，伸手去打卡的瞬间，欧阳楞了一下，“咦，是不是已经打过卡了？”很快，他就否定了自己这个愚蠢的疑问。今天刚到公司，怎么可能打过卡？过糊涂了？没再多想，欧阳朝着自己的工位走了过去。跟往常一样，和同事打过招呼之后，欧阳坐在工位上，一刹那好像回到了昨天。“昨天同样如此坐在这，就好像是几小时甚至几分钟前的事”，欧阳心里一阵感叹… 看着电脑屏幕上隐约倒映出来的自己的脸，越看越陌生，越看越不像自己。毕业一年多来，由于工作和生活的压力，欧阳的确看起来憔悴了许多。每天的工作排得满满当当，加班几乎成了家常便饭，工作到凌晨一两点也是时不时会有的事。慢慢的，他也适应习惯了，唯一的就是身体逐渐消瘦了下来，还好，总体状况倒也健康。</p>\n<p>“欧阳！”，背后的声音才让他回过神来，是老大 —— 一个最近让他烦透也恶心透了的人。平时大小事都不管，关键时刻总爱抛头露面装个13，没事总爱跪舔上级，最主要的，时不时话语中还不尊重同事。以前没发现，日子久了，欧阳真的是看不惯这种自以为是又没有素质的人，越看越觉得恶心。但，人家是领导，能有什么办法…? “昨天让你准备的材料真被好了没？今天郑总开会要用呢！”讨厌归讨厌，欧阳还是一脸不悲不喜的回到：“好了…” 他顺手把材料递过去，老大转身的时候欧阳一脸不屑的竖起中指。忙碌的一天又要开始了…欧阳像往常一样东奔西跑，前答后应，忙个不停，而这，只是他工作的日常罢了…</p>\n<p>好不容易熬到中午，可以喘口气了。公司中午有两个小时的休息时间，也是白天唯一能放松的时段。七八月份，正是一年中最热的时候，欧阳和同事一起在楼下的小店里买了一份九块钱的快餐，因为公司能吹空调就带回了公司，坐在工位上开始了自己的午餐时间。一份快餐，三四个菜，荤腥少的可怜，吃饱可以，但毫无质量可言。十几分钟后，一天的主食也就结束了，简单收拾停当，欧阳趴在工位上玩起了手机，这是他一天中为数不多可以了解到“外面世界”的机会。刷一刷各类新闻，看一看明星八卦，欧阳又在盘算着，希望忙过这一段能出去转一转。毕竟，世界那么大，他也想去看看… 搁下手机，放下座椅靠背，躺下去，很快他就睡着了…</p>\n<p>“叮铃铃铃…”，一阵铃声在耳边响起，欧阳睁开眼睛确是傻了眼，“我靠！什么情况？怎么还躺在床上！？” 欧阳像见鬼了一样不敢相信眼前的自己竟然还躺在公寓的床上！“玩什么？‘盗梦空间’么？梦中梦！？还是…现在还是在做梦？”欧阳脑子飞转，却怎么也想不明白，刚才梦里的一切也太真实了吧！越像越瘆得慌，欧阳学电视里掐了一下自己，“靠，真的疼，不是梦…”拿起手机看了看时间，2018年7月30日，早上8:00整,到了上班的时间。上班第一，欧阳也没敢再想太多，还是每天按部就班的流程，洗漱，换衣服，出门，挤电梯，抢“坐骑”… 欧阳一路赶到公司，又开始了一天的忙碌…</p>\n<p>“欧阳，这堆报表按日期整理一下！”，“欧阳，这些财报一会给郑总送过去！”，“欧阳，公司该买电了！”，“欧阳，最近招聘季，注意注意有没有求职者应聘！”，“欧阳，明天张总要过来，提前联系一下！”，“欧阳”，“欧阳”…  因为公司规模不大，一个人顶两个人用，加上欧阳本身又比较勤恳办事也靠谱，所以作为行政岗的欧阳其实做了很多非本岗位的事情。就这样不可开交，“前赴后继”，等大事小事真正忙完又将近晚上11点了。欧阳看着窗外的夜色，街道上车水马龙黑，远处灯火阑珊，渐渐地他的眼神有些迷离。黑夜就像是深渊，盯着太久了，就出不来了，欧阳陷进去，沉思了很久…..</p>\n<p>回过神来，欧阳收拾收拾工位，关了电脑，关上公司大门，乘着电梯下楼去了… 刚出写字楼，温热的风还在静静的吹，因为时间太晚，视野里已经找不到共享单车的踪迹，欧阳沿着回去的路，独自一人，慢慢地往回走… 回到公寓的时候已经近子夜时分了，夏天的夜晚温度依旧不低，这一路走来一身黏腻，卸下一身疲惫，欧阳简单地冲了个凉就躺下了。很快，他睡着了… 明天，又是普通却繁忙的一天，所有的一切还会继续…</p>\n<p>当清晨的第一缕阳光划破天际，窗外，雨水好像早已停歇，鸣笛声和发动机的声音依旧“热热闹闹”。窗内，光线还是那么的昏暗。欧阳被最后一遍闹铃叫醒，惺忪的睡眼慢慢睁开，关掉闹钟，当看到手机上显示的时间，欧阳怔了一下，瞳孔瞬间扩大。他双手颤抖着把手机拿进，白色的眼球上瞬间布满血丝，全身寒毛卓竖，因为，手机上赫然是显示着时间：2028年7月31日，早上8:00整，星期一……</p>\n<p><img src=\"/medias/article/journal/timg.gif\" alt=\"盗梦空间-旋转的陀螺\"></p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><blockquote>\n<p>谢谢您能读完这篇文章。就像<code>“序言”</code>中全所言，全文内容并不华丽，但略带<code>“魔幻”</code>的<code>“盗梦空间”</code>情节，是文章最大的暗示，也是最发人深省的部分。主人公欧阳一天中总感觉很多事似乎刚发生，很多场景也很熟悉，其实是因为他每一天都在重复着相同的事情，被工作占据了几乎所有的生活，所以脑海中只有这些事情记忆最深刻。还有隐藏的一点，按照逻辑全文看似几乎都发生在2018年7月30日这一天，其实这一天只是欧阳一天天工作生活的一个缩影和循环。每一次从梦中醒来，实际暗示着已经过去了一天甚至是很多天。直到最后，欧阳再一次醒来，才发现，时间飞逝，已经是10年之后的2028年了。</p>\n</blockquote>\n<blockquote>\n<p>其实很多时候，我们会发现繁忙的工作和沉重的生活压力，让我们每天都过得失去了色彩，更甚至我们每天都在重复做着几乎相同的事情，日复一日…… 转眼间，可能就是几年甚至十几年。这也是现代人经常感叹时间很快的一个重要原因。所以，希望大家能在繁重的工作之余，给自己的生活增添一抹亮丽的色彩。毕竟，这个世界以及来到这个世界的幸运从来不值得被我们辜负。</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvuu4mr3000a9kvb2eynwcrv","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4mrf000l9kvbuhe2pyv6"},{"post_id":"cjvuu4mqf00029kvbqar5xz3q","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4mrg000n9kvbqjhy0axw"},{"post_id":"cjvuu4mqp00059kvbxqqs93yg","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4mrj000r9kvb320ydnno"},{"post_id":"cjvuu4mtw00129kvbp7vjycgk","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4muq001b9kvbsxcusd7l"},{"post_id":"cjvuu4mut001e9kvb3llwyeq0","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4mva001q9kvbbm9n0o5i"},{"post_id":"cjvuu4mv3001n9kvb5vn4nbpu","category_id":"cjvuu4mux001h9kvb896kt8x3","_id":"cjvuu4mvh001w9kvb77oacxiw"},{"post_id":"cjvuu4muo001a9kvb7qqqgq2e","category_id":"cjvuu4mux001h9kvb896kt8x3","_id":"cjvuu4mvl00209kvbnvfzhsl2"},{"post_id":"cjvuu4mvc001u9kvbv9oemhuw","category_id":"cjvuu4mux001h9kvb896kt8x3","_id":"cjvuu4mvp00239kvbf4e7expt"},{"post_id":"cjvuu4muz001k9kvbz8jq6qju","category_id":"cjvuu4mva001r9kvbwa2oerza","_id":"cjvuu4mvt00269kvb8cy1bzlh"},{"post_id":"cjvuu4mvk001z9kvb2un20i3d","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4mw2002c9kvb4dcxbhkp"},{"post_id":"cjvuu4mvn00229kvbtrox0vgg","category_id":"cjvuu4mva001r9kvbwa2oerza","_id":"cjvuu4mwa002h9kvbb3kyaruz"},{"post_id":"cjvuu4mvs00259kvbz5ct8rgb","category_id":"cjvuu4mvi001x9kvbhxajaaci","_id":"cjvuu4mwf002l9kvb0bzrm31o"},{"post_id":"cjvuu4mvw00289kvbeste4nj3","category_id":"cjvuu4mvi001x9kvbhxajaaci","_id":"cjvuu4mwi002o9kvbfqwy6sch"},{"post_id":"cjvuu4mw5002e9kvbwsfq1v6m","category_id":"cjvuu4mux001h9kvb896kt8x3","_id":"cjvuu4mwq002v9kvbjptz5x8n"},{"post_id":"cjvuu4mw8002g9kvbpm6yo9xx","category_id":"cjvuu4mux001h9kvb896kt8x3","_id":"cjvuu4mws002x9kvb9zfjarkv"},{"post_id":"cjvuu4mwd002k9kvbr0ig7pxa","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4mwu002z9kvbnx67tjw3"},{"post_id":"cjvuu4mwg002n9kvbxuxc5uch","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4mww00329kvb74nxmp62"},{"post_id":"cjvuu4mwk002r9kvbw8s5xejv","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuu4mwx00349kvbd8mp93hb"},{"post_id":"cjvuu4mwo002u9kvbivvkra62","category_id":"cjvuu4mux001h9kvb896kt8x3","_id":"cjvuu4mwy00359kvbo5wyjq2d"},{"post_id":"cjvuu4mqt00069kvbq78230ls","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuuzd0o003v9kvby4x8bpam"},{"post_id":"cjvuu4mqv00079kvbtp2mc20s","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuuzhku003y9kvbzxzed26d"},{"post_id":"cjvuu4mud00149kvb44umslfx","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuv0j9500409kvb9u3wvgt7"},{"post_id":"cjvuu4muj00179kvbobh9w1zo","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuv0myq00439kvb7gsdnues"},{"post_id":"cjvuu4mq500019kvbceipz2vn","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuv2wys0002sovbq6haigdk"},{"post_id":"cjvuu4mr6000c9kvbsr78qbvt","category_id":"cjvuu4mqk00039kvb563hptg4","_id":"cjvuv2wz40004sovbze2vfuf0"},{"post_id":"cjvuu4mvg001v9kvbg3o9k934","category_id":"cjvuu4mux001h9kvb896kt8x3","_id":"cjvuvze6d000osovb7bkbzc3o"},{"post_id":"cjvuu4mw0002b9kvbbqv3v2hw","category_id":"cjvuu4mvi001x9kvbhxajaaci","_id":"cjvuwaj630001l8vbjp21z4tt"},{"post_id":"cjvuu4mv7001p9kvbw3zomaza","category_id":"cjvuu4mvi001x9kvbhxajaaci","_id":"cjvuwj9su0009l8vbl58170qx"}],"PostTag":[{"post_id":"cjvuu4mqf00029kvbqar5xz3q","tag_id":"cjvuu4mra000f9kvbbrk7g11p","_id":"cjvuu4mrg000o9kvb55hr4z0f"},{"post_id":"cjvuu4mqp00059kvbxqqs93yg","tag_id":"cjvuu4mqo00049kvby0gig6u4","_id":"cjvuu4mrk000t9kvbvh2w8iwd"},{"post_id":"cjvuu4mqp00059kvbxqqs93yg","tag_id":"cjvuu4mrh000p9kvbsr0wvrw6","_id":"cjvuu4mrk000u9kvbpyu82w18"},{"post_id":"cjvuu4mr3000a9kvb2eynwcrv","tag_id":"cjvuu4mqo00049kvby0gig6u4","_id":"cjvuu4mrn00109kvbvp6dg8cv"},{"post_id":"cjvuu4mr3000a9kvb2eynwcrv","tag_id":"cjvuu4mrj000s9kvbhvaoyhh2","_id":"cjvuu4mro00119kvbw4zqgae2"},{"post_id":"cjvuu4mtw00129kvbp7vjycgk","tag_id":"cjvuu4mqo00049kvby0gig6u4","_id":"cjvuu4mui00169kvbzosfoeiw"},{"post_id":"cjvuu4muo001a9kvb7qqqgq2e","tag_id":"cjvuu4muy001i9kvby7wf5xr2","_id":"cjvuu4mvc001t9kvbp0xd330b"},{"post_id":"cjvuu4mut001e9kvb3llwyeq0","tag_id":"cjvuu4mva001s9kvbb57qofd7","_id":"cjvuu4mvm00219kvb9pexiirq"},{"post_id":"cjvuu4muz001k9kvbz8jq6qju","tag_id":"cjvuu4mvj001y9kvb3j2vrq1d","_id":"cjvuu4mvv00279kvb1apcir54"},{"post_id":"cjvuu4mv3001n9kvb5vn4nbpu","tag_id":"cjvuu4mvr00249kvbu3redbos","_id":"cjvuu4mw3002d9kvbnziual1y"},{"post_id":"cjvuu4mw5002e9kvbwsfq1v6m","tag_id":"cjvuu4mvz002a9kvb1kcorl2q","_id":"cjvuu4mwc002j9kvbpjnn3ijk"},{"post_id":"cjvuu4mw8002g9kvbpm6yo9xx","tag_id":"cjvuu4muy001i9kvby7wf5xr2","_id":"cjvuu4mwk002q9kvbwqj5j3yp"},{"post_id":"cjvuu4mvc001u9kvbv9oemhuw","tag_id":"cjvuu4mwa002i9kvbmscbt9xz","_id":"cjvuu4mwn002t9kvbx2dsv2up"},{"post_id":"cjvuu4mwo002u9kvbivvkra62","tag_id":"cjvuu4muy001i9kvby7wf5xr2","_id":"cjvuu4mwu00309kvbtmdve547"},{"post_id":"cjvuu4mvk001z9kvb2un20i3d","tag_id":"cjvuu4mwr002w9kvbpfey8i66","_id":"cjvuu4mwx00339kvb0fxwuobl"},{"post_id":"cjvuu4mvn00229kvbtrox0vgg","tag_id":"cjvuu4mwv00319kvbqwsyzeel","_id":"cjvuu4mx100379kvb4vhjxo0g"},{"post_id":"cjvuu4mvs00259kvbz5ct8rgb","tag_id":"cjvuu4mvz002a9kvb1kcorl2q","_id":"cjvuu4mx300399kvbmt4a46sk"},{"post_id":"cjvuu4mvw00289kvbeste4nj3","tag_id":"cjvuu4mwa002i9kvbmscbt9xz","_id":"cjvuu4mx5003b9kvbgij3v6ii"},{"post_id":"cjvuu4mwd002k9kvbr0ig7pxa","tag_id":"cjvuu4mx6003c9kvbsn94vxip","_id":"cjvuu4mxc003g9kvbh82pldar"},{"post_id":"cjvuu4mwd002k9kvbr0ig7pxa","tag_id":"cjvuu4mx9003e9kvbpupuv39r","_id":"cjvuu4mxd003h9kvb4hetaklo"},{"post_id":"cjvuu4mwg002n9kvbxuxc5uch","tag_id":"cjvuu4mx6003c9kvbsn94vxip","_id":"cjvuu4mxg003k9kvbhc6kxnpn"},{"post_id":"cjvuu4mwg002n9kvbxuxc5uch","tag_id":"cjvuu4mx9003e9kvbpupuv39r","_id":"cjvuu4mxh003l9kvb8uh7qtiu"},{"post_id":"cjvuu4mwk002r9kvbw8s5xejv","tag_id":"cjvuu4mxf003j9kvblkcwhqbi","_id":"cjvuu4mxi003m9kvbwg2ztzfx"},{"post_id":"cjvuu4mqt00069kvbq78230ls","tag_id":"cjvuu4mqo00049kvby0gig6u4","_id":"cjvuuzd0o003t9kvbf01n68mo"},{"post_id":"cjvuu4mqt00069kvbq78230ls","tag_id":"cjvuu4mrj000s9kvbhvaoyhh2","_id":"cjvuuzd0o003u9kvbqksomnkv"},{"post_id":"cjvuu4mqt00069kvbq78230ls","tag_id":"cjvuu4mrk000v9kvb9x3ltsiq","_id":"cjvuuzd0p003w9kvbi7nlr7ho"},{"post_id":"cjvuu4mqv00079kvbtp2mc20s","tag_id":"cjvuu4mqo00049kvby0gig6u4","_id":"cjvuuzhko003x9kvb8itus3e9"},{"post_id":"cjvuu4mud00149kvb44umslfx","tag_id":"cjvuu4mra000f9kvbbrk7g11p","_id":"cjvuv0j95003z9kvbf7d3orrv"},{"post_id":"cjvuu4muj00179kvbobh9w1zo","tag_id":"cjvuu4mra000f9kvbbrk7g11p","_id":"cjvuv0myp00419kvb3pfssvnu"},{"post_id":"cjvuu4muj00179kvbobh9w1zo","tag_id":"cjvuu4mrj000s9kvbhvaoyhh2","_id":"cjvuv0myq00429kvb1vb3oywq"},{"post_id":"cjvuu4mq500019kvbceipz2vn","tag_id":"cjvuu4mqo00049kvby0gig6u4","_id":"cjvuv2wym0000sovbkt4z53tc"},{"post_id":"cjvuu4mq500019kvbceipz2vn","tag_id":"cjvuu4mqz00099kvbqvdkbdym","_id":"cjvuv2wyq0001sovbfw7yga2l"},{"post_id":"cjvuu4mr6000c9kvbsr78qbvt","tag_id":"cjvuu4mqo00049kvby0gig6u4","_id":"cjvuv2wyy0003sovbtsfj4a03"},{"post_id":"cjvuu4mvg001v9kvbg3o9k934","tag_id":"cjvuu4mwj002p9kvbiksshkb8","_id":"cjvuvze6d000nsovb98vlyf8k"},{"post_id":"cjvuu4mw0002b9kvbbqv3v2hw","tag_id":"cjvuu4mvz002a9kvb1kcorl2q","_id":"cjvuwaj610000l8vbq9d8g4e2"},{"post_id":"cjvuu4mv7001p9kvbw3zomaza","tag_id":"cjvuu4mvz002a9kvb1kcorl2q","_id":"cjvuwj9su0008l8vbwyl3jkt8"}],"Tag":[{"name":"ES6","_id":"cjvuu4mqo00049kvby0gig6u4"},{"name":"Generator函数","_id":"cjvuu4mqz00099kvbqvdkbdym"},{"name":"JavaScript","_id":"cjvuu4mra000f9kvbbrk7g11p"},{"name":"Promise","_id":"cjvuu4mrh000p9kvbsr0wvrw6"},{"name":"Function","_id":"cjvuu4mrj000s9kvbhvaoyhh2"},{"name":"箭头函数","_id":"cjvuu4mrk000v9kvb9x3ltsiq"},{"name":"生活工作","_id":"cjvuu4muy001i9kvby7wf5xr2"},{"name":"Create.JS","_id":"cjvuu4mva001s9kvbb57qofd7"},{"name":"随拍(影集)","_id":"cjvuu4mvj001y9kvb3j2vrq1d"},{"name":"2018","_id":"cjvuu4mvr00249kvbu3redbos"},{"name":"朝花夕拾","_id":"cjvuu4mvz002a9kvb1kcorl2q"},{"name":"阅读感悟","_id":"cjvuu4mwa002i9kvbmscbt9xz"},{"name":"生活","_id":"cjvuu4mwj002p9kvbiksshkb8"},{"name":"Node.JS","_id":"cjvuu4mwr002w9kvbpfey8i66"},{"name":"青龙寺(影集)","_id":"cjvuu4mwv00319kvbqwsyzeel"},{"name":"CSS","_id":"cjvuu4mx6003c9kvbsn94vxip"},{"name":"布局","_id":"cjvuu4mx9003e9kvbpupuv39r"},{"name":"z-index","_id":"cjvuu4mxf003j9kvblkcwhqbi"}]}}